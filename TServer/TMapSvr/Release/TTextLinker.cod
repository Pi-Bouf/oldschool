; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\TTextLinker.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_02LIIHNNHG@?6?$AN?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08EAKGLGNO@?$CF04X?$CF04X?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02EMFKHFLK@?$CFX?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04JIMNDDED@?$CF08X?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT _$E5
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _$E6
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
;	COMDAT ??0CTTextLinker@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_ECTTextLinkData@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CTTextLinker@@IAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetInstance@CTTextLinker@@SAPAV1@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E9
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
;	COMDAT ?NewTextLinkData@CTTextLinker@@QAEKPAPAVCTTextLinkData@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTextLinkData@CTTextLinker@@QBEPAVCTTextLinkData@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MakeItemNetText@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@ABV?$vector@KV?$allocator@K@std@@@std@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BuildNetString@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AppendNetString@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SplitTextByCrLf@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0AAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Y?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@ABV?$CSimpleStringT@D$0A@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Find@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBEHPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindOneOf@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TrimRight@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV12@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TrimLeft@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV12@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Left@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Format@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAAXPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??HATL@@YA?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@0@ABV10@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CSimpleStringT@D$0A@@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@KV?$allocator@K@std@@@std@@QBEABKI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FormatV@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEXPBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Y?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetManager@?$CSimpleStringT@D$0A@@ATL@@QBEPAUIAtlStringMgr@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Truncate@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Concatenate@?$CSimpleStringT@D$0A@@ATL@@KAXAAV12@PBDH1H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CharNextA@?$ChTraitsCRT@D@ATL@@SAPADPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringFindString@?$ChTraitsCRT@D@ATL@@SAPBDPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringFindChar@?$ChTraitsCRT@D@ATL@@SAPBDPBDD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringScanSet@?$ChTraitsCRT@D@ATL@@SAPBDPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@KV?$allocator@K@std@@@std@@QBE?AVconst_iterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QBEABKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@?$CSimpleStringT@D$0A@@ATL@@QAEXABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@KV?$allocator@K@std@@@std@@QAE@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@GIG@std@@YAXPAGIABGAAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagTAICONDITION@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTAICONDITION@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagTAICONDITION@@V?$allocator@PAUtagTAICONDITION@@@std@@@std@@YAXPAPAUtagTAICONDITION@@0AAV?$allocator@PAUtagTAICONDITION@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagTMONITEM@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTMONITEM@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagTMONITEM@@V?$allocator@PAUtagTMONITEM@@@std@@@std@@YAXPAPAUtagTMONITEM@@0AAV?$allocator@PAUtagTMONITEM@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagTMAPMON@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTMAPMON@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@YAXPAPAUtagTMAPMON@@0AAV?$allocator@PAUtagTMAPMON@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagPATHPOINT@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagPATHPOINT@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagPATHPOINT@@V?$allocator@PAUtagPATHPOINT@@@std@@@std@@YAXPAPAUtagPATHPOINT@@0AAV?$allocator@PAUtagPATHPOINT@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagQUESTCONDITION@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagQUESTCONDITION@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagQUESTCONDITION@@V?$allocator@PAUtagQUESTCONDITION@@@std@@@std@@YAXPAPAUtagQUESTCONDITION@@0AAV?$allocator@PAUtagQUESTCONDITION@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagQUESTREWARD@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagQUESTREWARD@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagQUESTREWARD@@V?$allocator@PAUtagQUESTREWARD@@@std@@@std@@YAXPAPAUtagQUESTREWARD@@0AAV?$allocator@PAUtagQUESTREWARD@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagQUESTTERM@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagQUESTTERM@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@YAXPAPAUtagQUESTTERM@@0AAV?$allocator@PAUtagQUESTTERM@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagTCASHITMSALE@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagTCASHITMSALE@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagTCASHITMSALE@@IU1@V?$allocator@UtagTCASHITMSALE@@@std@@@std@@YAXPAUtagTCASHITMSALE@@IABU1@AAV?$allocator@UtagTCASHITMSALE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagMONREGEN@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagMONREGEN@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagMONREGEN@@IU1@V?$allocator@UtagMONREGEN@@@std@@@std@@YAXPAUtagMONREGEN@@IABU1@AAV?$allocator@UtagMONREGEN@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagLOTTERY@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagLOTTERY@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagLOTTERY@@IU1@V?$allocator@UtagLOTTERY@@@std@@@std@@YAXPAUtagLOTTERY@@IABU1@AAV?$allocator@UtagLOTTERY@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@GV?$allocator@G@std@@@std@@YAXPAG0AAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAGPAGV?$allocator@G@std@@@std@@YAPAGPAG00AAV?$allocator@G@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAGPAG@std@@YAPAGPAG00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@VCTPlayer@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCTPlayer@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAVCTPlayer@@V?$allocator@PAVCTPlayer@@@std@@@std@@YAXPAPAVCTPlayer@@0AAV?$allocator@PAVCTPlayer@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagTCASHITMSALE@@V?$allocator@UtagTCASHITMSALE@@@std@@@std@@YAXPAUtagTCASHITMSALE@@0AAV?$allocator@UtagTCASHITMSALE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAUtagTCASHITMSALE@@PAU1@V?$allocator@UtagTCASHITMSALE@@@std@@@std@@YAPAUtagTCASHITMSALE@@PAU1@00AAV?$allocator@UtagTCASHITMSALE@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUtagTCASHITMSALE@@PAU1@@std@@YAPAUtagTCASHITMSALE@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@YAXPAUtagMONREGEN@@0AAV?$allocator@UtagMONREGEN@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAUtagMONREGEN@@PAU1@V?$allocator@UtagMONREGEN@@@std@@@std@@YAPAUtagMONREGEN@@PAU1@00AAV?$allocator@UtagMONREGEN@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUtagMONREGEN@@PAU1@@std@@YAPAUtagMONREGEN@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@YAXPAUtagLOTTERY@@0AAV?$allocator@UtagLOTTERY@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAUtagLOTTERY@@PAU1@V?$allocator@UtagLOTTERY@@@std@@@std@@YAPAUtagLOTTERY@@PAU1@00AAV?$allocator@UtagLOTTERY@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUtagLOTTERY@@PAU1@@std@@YAPAUtagLOTTERY@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@UtagTCASHITMSALE@@@std@@QAEXPAUtagTCASHITMSALE@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagTCASHITMSALE@@@std@@QAEXPAUtagTCASHITMSALE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@UtagMONREGEN@@@std@@QAEXPAUtagMONREGEN@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagMONREGEN@@@std@@QAEXPAUtagMONREGEN@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@UtagLOTTERY@@@std@@QAEXPAUtagLOTTERY@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagLOTTERY@@@std@@QAEXPAUtagLOTTERY@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill_n@PAGIG@std@@YAXPAGIABG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@GG@std@@YAPAGPAG00AAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagTCASHITMSALE@@PAU1@V?$allocator@UtagTCASHITMSALE@@@std@@@std@@YAPAUtagTCASHITMSALE@@PAU1@00AAV?$allocator@UtagTCASHITMSALE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagMONREGEN@@PAU1@V?$allocator@UtagMONREGEN@@@std@@@std@@YAPAUtagMONREGEN@@PAU1@00AAV?$allocator@UtagMONREGEN@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagLOTTERY@@PAU1@V?$allocator@UtagLOTTERY@@@std@@@std@@YAPAUtagLOTTERY@@PAU1@00AAV?$allocator@UtagLOTTERY@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@UtagTCASHITMSALE@@U1@@std@@YAXPAUtagTCASHITMSALE@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagTCASHITMSALE@@@std@@YAXPAUtagTCASHITMSALE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@UtagMONREGEN@@U1@@std@@YAXPAUtagMONREGEN@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagMONREGEN@@@std@@YAXPAUtagMONREGEN@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@UtagLOTTERY@@U1@@std@@YAXPAUtagLOTTERY@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagLOTTERY@@@std@@YAXPAUtagLOTTERY@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@G@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyChars@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Format@?$ChTraitsCRT@D@ATL@@SAHPADPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFormattedLength@?$ChTraitsCRT@D@ATL@@SAHPBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CAtlException@ATL@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __TI1?AVCAtlException@ATL@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA1?AVCAtlException@ATL@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVCAtlException@ATL@@@84
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVCAtlException@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReleaseBufferSetLength@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBuffer@?$CSimpleStringT@D$0A@@ATL@@QAEPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrepareWrite@?$CSimpleStringT@D$0A@@ATL@@AAEPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Fork@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reallocate@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyCharsOverlapped@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUIAtlStringMgr@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ToStr@CTTextLinkData@@QBEABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLength@?$CSimpleStringT@D$0A@@ATL@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ResetPosition@CTTextLinkData@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?FromStr@CTTextLinkData@@QAEXABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?instance@?1??GetInstance@CTTextLinker@@SAPAV2@XZ@4V2@A
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT ?$S8@?1??GetInstance@CTTextLinker@@SAPAV2@XZ@4IA
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckImplicitLoad@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@AAE_NPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadStringA@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindStringResourceInstance@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlFindStringResourceInstance@ATL@@YAPAUHINSTANCE__@@IG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@IG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadStringA@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEHPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@D@ATL@@SAHPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertToBaseType@?$ChTraitsCRT@D@ATL@@SAXPADHPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringLength@?$CSimpleStringT@D$0A@@ATL@@SAHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?g_pfnGetThreadACP@ATL@@3P6GIXZA		; ATL::g_pfnGetThreadACP
PUBLIC	?_AtlGetThreadACPThunk@ATL@@YGIXZ		; ATL::_AtlGetThreadACPThunk
PUBLIC	?LINK_STR_START@CTTextLinker@@2DB		; CTTextLinker::LINK_STR_START
PUBLIC	?LINK_STR_END@CTTextLinker@@2DB			; CTTextLinker::LINK_STR_END
PUBLIC	?LINK_DATA_POOL_SIZE@CTTextLinker@@2KB		; CTTextLinker::LINK_DATA_POOL_SIZE
PUBLIC	?LINK_QUEST_COLOR@CTTextLinker@@2KB		; CTTextLinker::LINK_QUEST_COLOR
CONST	SEGMENT
?LINK_STR_START@CTTextLinker@@2DB DB 05bH		; CTTextLinker::LINK_STR_START
?LINK_STR_END@CTTextLinker@@2DB DB 05dH			; CTTextLinker::LINK_STR_END
	ORG $+2
?LINK_DATA_POOL_SIZE@CTTextLinker@@2KB DD 064H		; CTTextLinker::LINK_DATA_POOL_SIZE
?LINK_QUEST_COLOR@CTTextLinker@@2KB DD 0ffffff7fH	; CTTextLinker::LINK_QUEST_COLOR
CONST	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT
?g_pfnGetThreadACP@ATL@@3P6GIXZA DD FLAT:?_AtlGetThreadACPThunk@ATL@@YGIXZ ; ATL::g_pfnGetThreadACP
_DATA	ENDS
PUBLIC	??0CTTextLinker@@IAE@XZ				; CTTextLinker::CTTextLinker
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:NEAR			; `eh vector constructor iterator'
EXTRN	??0CTTextLinkData@@QAE@XZ:NEAR			; CTTextLinkData::CTTextLinkData
EXTRN	??1CTTextLinkData@@QAE@XZ:NEAR			; CTTextLinkData::~CTTextLinkData
EXTRN	??_U@YAPAXI@Z:NEAR				; operator new[]
EXTRN	??_V@YAXPAX@Z:NEAR				; operator delete[]
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT xdata$x
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\ttextlinker.cpp
xdata$x	SEGMENT
$T153232 DD	0ffffffffH
	DD	FLAT:$L153222
$T153226 DD	019930520H
	DD	01H
	DD	FLAT:$T153232
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??0CTTextLinker@@IAE@XZ
_TEXT	SEGMENT
$T153219 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CTTextLinker@@IAE@XZ PROC NEAR			; CTTextLinker::CTTextLinker, COMDAT
; _this$ = ecx

; 15   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0CTTextLinker@@IAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx

; 16   : 	m_nTextLinkDataPos = 0;
; 17   : 	m_pTextLinkDataPool = new CTTextLinkData[LINK_DATA_POOL_SIZE];

  00019	68 44 06 00 00	 push	 1604			; 00000644H
  0001e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00024	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00029	83 c4 04	 add	 esp, 4
  0002c	89 44 24 04	 mov	 DWORD PTR $T153219[esp+20], eax
  00030	85 c0		 test	 eax, eax
  00032	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+28], 0
  0003a	74 34		 je	 SHORT $L153220
  0003c	57		 push	 edi
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:??1CTTextLinkData@@QAE@XZ ; CTTextLinkData::~CTTextLinkData
  00042	68 00 00 00 00	 push	 OFFSET FLAT:??0CTTextLinkData@@QAE@XZ ; CTTextLinkData::CTTextLinkData
  00047	6a 64		 push	 100			; 00000064H
  00049	8d 78 04	 lea	 edi, DWORD PTR [eax+4]
  0004c	6a 10		 push	 16			; 00000010H
  0004e	57		 push	 edi
  0004f	c7 00 64 00 00
	00		 mov	 DWORD PTR [eax], 100	; 00000064H
  00055	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z
  0005a	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  0005d	5f		 pop	 edi

; 18   : }

  0005e	8b c6		 mov	 eax, esi
  00060	5e		 pop	 esi
  00061	8b 4c 24 04	 mov	 ecx, DWORD PTR __$EHRec$[esp+16]
  00065	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0006c	83 c4 10	 add	 esp, 16			; 00000010H
  0006f	c3		 ret	 0
$L153220:
  00070	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  00074	33 c0		 xor	 eax, eax
  00076	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00079	8b c6		 mov	 eax, esi
  0007b	5e		 pop	 esi
  0007c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00083	83 c4 10	 add	 esp, 16			; 00000010H
  00086	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L153222:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T153219[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$??0CTTextLinker@@IAE@XZ:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T153226
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CTTextLinker@@IAE@XZ ENDP				; CTTextLinker::CTTextLinker
PUBLIC	??_ECTTextLinkData@@QAEPAXI@Z			; CTTextLinkData::`vector deleting destructor'
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:NEAR			; `eh vector destructor iterator'
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Ogty
;	COMDAT ??_ECTTextLinkData@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_ECTTextLinkData@@QAEPAXI@Z PROC NEAR			; CTTextLinkData::`vector deleting destructor', COMDAT
; _this$ = ecx
  00000	53		 push	 ebx
  00001	8a 5c 24 08	 mov	 bl, BYTE PTR ___flags$[esp]
  00005	f6 c3 02	 test	 bl, 2
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	74 2b		 je	 SHORT $L152243
  0000d	8b 46 fc	 mov	 eax, DWORD PTR [esi-4]
  00010	57		 push	 edi
  00011	68 00 00 00 00	 push	 OFFSET FLAT:??1CTTextLinkData@@QAE@XZ ; CTTextLinkData::~CTTextLinkData
  00016	8d 7e fc	 lea	 edi, DWORD PTR [esi-4]
  00019	50		 push	 eax
  0001a	6a 10		 push	 16			; 00000010H
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  00022	f6 c3 01	 test	 bl, 1
  00025	74 09		 je	 SHORT $L152244
  00027	57		 push	 edi
  00028	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0002d	83 c4 04	 add	 esp, 4
$L152244:
  00030	8b c7		 mov	 eax, edi
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	c2 04 00	 ret	 4
$L152243:
  00038	8b ce		 mov	 ecx, esi
  0003a	e8 00 00 00 00	 call	 ??1CTTextLinkData@@QAE@XZ ; CTTextLinkData::~CTTextLinkData
  0003f	f6 c3 01	 test	 bl, 1
  00042	74 09		 je	 SHORT $L152246
  00044	56		 push	 esi
  00045	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004a	83 c4 04	 add	 esp, 4
$L152246:
  0004d	8b c6		 mov	 eax, esi
  0004f	5e		 pop	 esi
  00050	5b		 pop	 ebx
  00051	c2 04 00	 ret	 4
??_ECTTextLinkData@@QAEPAXI@Z ENDP			; CTTextLinkData::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??1CTTextLinker@@IAE@XZ				; CTTextLinker::~CTTextLinker
; Function compile flags: /Ogty
;	COMDAT ??1CTTextLinker@@IAE@XZ
_TEXT	SEGMENT
??1CTTextLinker@@IAE@XZ PROC NEAR			; CTTextLinker::~CTTextLinker, COMDAT
; _this$ = ecx

; 22   : 	delete [] m_pTextLinkDataPool;

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 1f		 je	 SHORT $L153244
  00007	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0000a	56		 push	 esi
  0000b	8d 70 fc	 lea	 esi, DWORD PTR [eax-4]
  0000e	68 00 00 00 00	 push	 OFFSET FLAT:??1CTTextLinkData@@QAE@XZ ; CTTextLinkData::~CTTextLinkData
  00013	51		 push	 ecx
  00014	6a 10		 push	 16			; 00000010H
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0001c	56		 push	 esi
  0001d	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00022	83 c4 04	 add	 esp, 4
  00025	5e		 pop	 esi
$L153244:

; 23   : }

  00026	c3		 ret	 0
??1CTTextLinker@@IAE@XZ ENDP				; CTTextLinker::~CTTextLinker
_TEXT	ENDS
PUBLIC	?GetTextLinkData@CTTextLinker@@QBEPAVCTTextLinkData@@K@Z ; CTTextLinker::GetTextLinkData
; Function compile flags: /Ogty
;	COMDAT ?GetTextLinkData@CTTextLinker@@QBEPAVCTTextLinkData@@K@Z
_TEXT	SEGMENT
_nPos$ = 8						; size = 4
?GetTextLinkData@CTTextLinker@@QBEPAVCTTextLinkData@@K@Z PROC NEAR ; CTTextLinker::GetTextLinkData, COMDAT
; _this$ = ecx

; 51   : 	return &(m_pTextLinkDataPool[nPos]);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _nPos$[esp-4]
  00004	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00007	c1 e0 04	 shl	 eax, 4
  0000a	03 c2		 add	 eax, edx

; 52   : }

  0000c	c2 04 00	 ret	 4
?GetTextLinkData@CTTextLinker@@QBEPAVCTTextLinkData@@K@Z ENDP ; CTTextLinker::GetTextLinkData
_TEXT	ENDS
PUBLIC	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z	; InterlockedExchangePointer
EXTRN	__imp__InterlockedExchange@8:NEAR
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_pNew$ = 12						; size = 4
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z PROC NEAR	; InterlockedExchangePointer, COMDAT

; 92   : 	return( reinterpret_cast<void*>(static_cast<LONG_PTR>(::InterlockedExchange(reinterpret_cast<LONG*>(pp), static_cast<LONG>(reinterpret_cast<LONG_PTR>(pNew))))) );

  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__InterlockedExchange@8
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ENDP	; InterlockedExchangePointer
_TEXT	ENDS
PUBLIC	?_AtlGetThreadACPFake@ATL@@YGIXZ		; ATL::_AtlGetThreadACPFake
EXTRN	__imp__GetACP@0:NEAR
EXTRN	__imp__GetLocaleInfoA@16:NEAR
EXTRN	__imp__GetThreadLocale@0:NEAR
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
; Function compile flags: /Ogty
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT
_szACP$ = -12						; size = 7
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPFake@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPFake, COMDAT

; 101  : {

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	56		 push	 esi
  00009	89 44 24 0c	 mov	 DWORD PTR __$ArrayPad$[esp+16], eax

; 102  : 	UINT nACP = 0;

  0000d	33 f6		 xor	 esi, esi

; 103  : 
; 104  : 	LCID lcidThread = ::GetThreadLocale();

  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetThreadLocale@0

; 105  : 
; 106  : 	char szACP[7];
; 107  : 	// GetLocaleInfoA will fail for a Unicode-only LCID, but those are only supported on 
; 108  : 	// Windows 2000.  Since Windows 2000 supports CP_THREAD_ACP, this code path is never
; 109  : 	// executed on Windows 2000.
; 110  : 	if (::GetLocaleInfoA(lcidThread, LOCALE_IDEFAULTANSICODEPAGE, szACP, 7) != 0)

  00015	6a 07		 push	 7
  00017	8d 4c 24 08	 lea	 ecx, DWORD PTR _szACP$[esp+20]
  0001b	51		 push	 ecx
  0001c	68 04 10 00 00	 push	 4100			; 00001004H
  00021	50		 push	 eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocaleInfoA@16
  00028	85 c0		 test	 eax, eax
  0002a	74 21		 je	 SHORT $L153266

; 111  : 	{
; 112  : 		char* pch = szACP;
; 113  : 		while (*pch != '\0')

  0002c	8a 44 24 04	 mov	 al, BYTE PTR _szACP$[esp+16]
  00030	84 c0		 test	 al, al
  00032	8d 4c 24 04	 lea	 ecx, DWORD PTR _szACP$[esp+16]
  00036	74 15		 je	 SHORT $L153266
$L58550:

; 114  : 		{
; 115  : 			nACP *= 10;
; 116  : 			nACP += *pch++ - '0';

  00038	0f be c0	 movsx	 eax, al
  0003b	8d 14 b6	 lea	 edx, DWORD PTR [esi+esi*4]
  0003e	41		 inc	 ecx
  0003f	8d 74 50 d0	 lea	 esi, DWORD PTR [eax+edx*2-48]
  00043	8a 01		 mov	 al, BYTE PTR [ecx]
  00045	84 c0		 test	 al, al
  00047	75 ef		 jne	 SHORT $L58550

; 117  : 		}
; 118  : 	}
; 119  : 	// Use the Default ANSI Code Page if we were unable to get the thread ACP or if one does not exist.
; 120  : 	if (nACP == 0)

  00049	85 f6		 test	 esi, esi
  0004b	75 14		 jne	 SHORT $L153267
$L153266:

; 121  : 		nACP = ::GetACP();

  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetACP@0
  00053	5e		 pop	 esi

; 122  : 
; 123  : 	return nACP;
; 124  : }

  00054	8b 4c 24 08	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+12]
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00060	c3		 ret	 0
$L153267:
  00061	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+16]
  00065	8b c6		 mov	 eax, esi
  00067	5e		 pop	 esi
  00068	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00070	c3		 ret	 0
?_AtlGetThreadACPFake@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPFake
_TEXT	ENDS
PUBLIC	?_AtlGetThreadACPReal@ATL@@YGIXZ		; ATL::_AtlGetThreadACPReal
; Function compile flags: /Ogty
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetThreadACPReal@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPReal, COMDAT

; 128  : 	return( CP_THREAD_ACP );

  00000	b8 03 00 00 00	 mov	 eax, 3

; 129  : }

  00005	c3		 ret	 0
?_AtlGetThreadACPReal@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPReal
_TEXT	ENDS
EXTRN	__imp__GetVersionExA@4:NEAR
; Function compile flags: /Ogty
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT
_ver$ = -152						; size = 148
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPThunk@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPThunk, COMDAT

; 134  : {

  00000	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	89 84 24 94 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+152], eax

; 135  : 	OSVERSIONINFO ver;
; 136  : 	ATLGETTHREADACP pfnGetThreadACP;
; 137  : 
; 138  : 	ver.dwOSVersionInfoSize = sizeof( ver );
; 139  : 	::GetVersionEx( &ver );

  00012	8d 04 24	 lea	 eax, DWORD PTR _ver$[esp+152]
  00015	50		 push	 eax
  00016	c7 44 24 04 94
	00 00 00	 mov	 DWORD PTR _ver$[esp+156], 148 ; 00000094H
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4

; 140  : 	if( (ver.dwPlatformId == VER_PLATFORM_WIN32_NT) && (ver.dwMajorVersion >= 5) )

  00024	83 7c 24 10 02	 cmp	 DWORD PTR _ver$[esp+168], 2
  00029	75 0c		 jne	 SHORT $L58560
  0002b	83 7c 24 04 05	 cmp	 DWORD PTR _ver$[esp+156], 5

; 141  : 	{
; 142  : 		// On Win2K, CP_THREAD_ACP is supported
; 143  : 		pfnGetThreadACP = _AtlGetThreadACPReal;

  00030	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?_AtlGetThreadACPReal@ATL@@YGIXZ ; ATL::_AtlGetThreadACPReal
  00035	73 05		 jae	 SHORT $L58561
$L58560:

; 144  : 	}
; 145  : 	else
; 146  : 	{
; 147  : 		pfnGetThreadACP = _AtlGetThreadACPFake;

  00037	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?_AtlGetThreadACPFake@ATL@@YGIXZ ; ATL::_AtlGetThreadACPFake
$L58561:

; 148  : 	}
; 149  : 	InterlockedExchangePointer( reinterpret_cast< void** >(&g_pfnGetThreadACP), pfnGetThreadACP );

  0003c	50		 push	 eax
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedExchange@8

; 150  : 
; 151  : 	return( g_pfnGetThreadACP() );

  00048	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP

; 152  : }

  0004e	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+152]
  00055	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005a	81 c4 98 00 00
	00		 add	 esp, 152		; 00000098H
  00060	c3		 ret	 0
?_AtlGetThreadACPThunk@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPThunk
_TEXT	ENDS
PUBLIC	?_AtlGetConversionACP@ATL@@YGIXZ		; ATL::_AtlGetConversionACP
; Function compile flags: /Ogty
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetConversionACP@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetConversionACP, COMDAT

; 158  : 	return( g_pfnGetThreadACP() );

  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
?_AtlGetConversionACP@ATL@@YGIXZ ENDP			; ATL::_AtlGetConversionACP
_TEXT	ENDS
PUBLIC	?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::size, COMDAT
; _this$ = ecx

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L153289
  00007	33 c0		 xor	 eax, eax

; 517  : 		}

  00009	c3		 ret	 0
$L153289:

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  0000a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2

; 517  : 		}

  00012	c3		 ret	 0
?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::size
_TEXT	ENDS
PUBLIC	?CharNextA@?$ChTraitsCRT@D@ATL@@SAPADPBD@Z	; ATL::ChTraitsCRT<char>::CharNextA
EXTRN	__mbsinc:NEAR
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?CharNextA@?$ChTraitsCRT@D@ATL@@SAPADPBD@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?CharNextA@?$ChTraitsCRT@D@ATL@@SAPADPBD@Z PROC NEAR	; ATL::ChTraitsCRT<char>::CharNextA, COMDAT

; 321  : 		return reinterpret_cast< char* >( _mbsinc( reinterpret_cast< const unsigned char* >( p ) ) );

  00000	e9 00 00 00 00	 jmp	 __mbsinc
?CharNextA@?$ChTraitsCRT@D@ATL@@SAPADPBD@Z ENDP		; ATL::ChTraitsCRT<char>::CharNextA
_TEXT	ENDS
PUBLIC	?StringFindString@?$ChTraitsCRT@D@ATL@@SAPBDPBD0@Z ; ATL::ChTraitsCRT<char>::StringFindString
EXTRN	__mbsstr:NEAR
; Function compile flags: /Ogty
;	COMDAT ?StringFindString@?$ChTraitsCRT@D@ATL@@SAPBDPBD0@Z
_TEXT	SEGMENT
_pszBlock$ = 8						; size = 4
_pszMatch$ = 12						; size = 4
?StringFindString@?$ChTraitsCRT@D@ATL@@SAPBDPBD0@Z PROC NEAR ; ATL::ChTraitsCRT<char>::StringFindString, COMDAT

; 356  : 		return reinterpret_cast< LPCSTR >( _mbsstr( reinterpret_cast< const unsigned char* >( pszBlock ),
; 357  : 			reinterpret_cast< const unsigned char* >( pszMatch ) ) );

  00000	e9 00 00 00 00	 jmp	 __mbsstr
?StringFindString@?$ChTraitsCRT@D@ATL@@SAPBDPBD0@Z ENDP	; ATL::ChTraitsCRT<char>::StringFindString
_TEXT	ENDS
PUBLIC	?StringFindChar@?$ChTraitsCRT@D@ATL@@SAPBDPBDD@Z ; ATL::ChTraitsCRT<char>::StringFindChar
EXTRN	__mbschr:NEAR
; Function compile flags: /Ogty
;	COMDAT ?StringFindChar@?$ChTraitsCRT@D@ATL@@SAPBDPBDD@Z
_TEXT	SEGMENT
_pszBlock$ = 8						; size = 4
_chMatch$ = 12						; size = 1
?StringFindChar@?$ChTraitsCRT@D@ATL@@SAPBDPBDD@Z PROC NEAR ; ATL::ChTraitsCRT<char>::StringFindChar, COMDAT

; 367  : 		return reinterpret_cast< LPCSTR >( _mbschr( reinterpret_cast< const unsigned char* >( pszBlock ), (unsigned char)chMatch ) );

  00000	0f b6 44 24 08	 movzx	 eax, BYTE PTR _chMatch$[esp-4]
  00005	89 44 24 08	 mov	 BYTE PTR _chMatch$[esp-4], eax
  00009	e9 00 00 00 00	 jmp	 __mbschr
?StringFindChar@?$ChTraitsCRT@D@ATL@@SAPBDPBDD@Z ENDP	; ATL::ChTraitsCRT<char>::StringFindChar
_TEXT	ENDS
PUBLIC	?StringScanSet@?$ChTraitsCRT@D@ATL@@SAPBDPBD0@Z	; ATL::ChTraitsCRT<char>::StringScanSet
EXTRN	__mbspbrk:NEAR
; Function compile flags: /Ogty
;	COMDAT ?StringScanSet@?$ChTraitsCRT@D@ATL@@SAPBDPBD0@Z
_TEXT	SEGMENT
_pszBlock$ = 8						; size = 4
_pszMatch$ = 12						; size = 4
?StringScanSet@?$ChTraitsCRT@D@ATL@@SAPBDPBD0@Z PROC NEAR ; ATL::ChTraitsCRT<char>::StringScanSet, COMDAT

; 377  : 		return reinterpret_cast< LPCSTR >( _mbspbrk( reinterpret_cast< const unsigned char* >( pszBlock ),
; 378  : 			reinterpret_cast< const unsigned char* >( pszMatch ) ) );

  00000	e9 00 00 00 00	 jmp	 __mbspbrk
?StringScanSet@?$ChTraitsCRT@D@ATL@@SAPBDPBD0@Z ENDP	; ATL::ChTraitsCRT<char>::StringScanSet
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QBEABKXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator*
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Dconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QBEABKXZ
_TEXT	SEGMENT
??Dconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QBEABKXZ PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 80   : 
; 81   : 
; 82   : 			return (*_Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 83   : 			}

  00002	c3		 ret	 0
??Dconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QBEABKXZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	??0const_iterator@?$vector@KV?$allocator@K@std@@@std@@QAE@PAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::const_iterator
; Function compile flags: /Ogty
;	COMDAT ??0const_iterator@?$vector@KV?$allocator@K@std@@@std@@QAE@PAK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0const_iterator@?$vector@KV?$allocator@K@std@@@std@@QAE@PAK@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 73   : 		const_iterator(_Tptr _Ptr)

  00000	8b c1		 mov	 eax, ecx

; 74   : 			{	// construct with pointer _Ptr
; 75   : 			_Myptr = _Ptr;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 76   : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$vector@KV?$allocator@K@std@@@std@@QAE@PAK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??Yconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QAEAAV012@H@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator+=
; Function compile flags: /Ogty
;	COMDAT ??Yconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Yconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator+=, COMDAT
; _this$ = ecx

; 117  : 			{	// increment by integer

  00000	8b c1		 mov	 eax, ecx

; 118  : 			_Myptr += _Off;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  0000d	01 10		 add	 DWORD PTR [eax], edx

; 119  : 			return (*this);
; 120  : 			}

  0000f	c2 04 00	 ret	 4
??Yconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator+=
_TEXT	ENDS
PUBLIC	??0CAtlException@ATL@@QAE@J@Z			; ATL::CAtlException::CAtlException
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlexcept.h
;	COMDAT ??0CAtlException@ATL@@QAE@J@Z
_TEXT	SEGMENT
_hr$ = 8						; size = 4
??0CAtlException@ATL@@QAE@J@Z PROC NEAR			; ATL::CAtlException::CAtlException, COMDAT
; _this$ = ecx

; 40   : 	{

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR _hr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 41   : 	}

  00008	c2 04 00	 ret	 4
??0CAtlException@ATL@@QAE@J@Z ENDP			; ATL::CAtlException::CAtlException
_TEXT	ENDS
PUBLIC	?AtlThrow@ATL@@YGXJ@Z				; ATL::AtlThrow
PUBLIC	__TI1?AVCAtlException@ATL@@
PUBLIC	__CTA1?AVCAtlException@ATL@@
PUBLIC	??_R0?AVCAtlException@ATL@@@8			; ATL::CAtlException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVCAtlException@ATL@@@84
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	__CxxThrowException@8:NEAR
;	COMDAT __TI1?AVCAtlException@ATL@@
xdata$x	SEGMENT
__TI1?AVCAtlException@ATL@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1?AVCAtlException@ATL@@
xdata$x	ENDS
;	COMDAT __CTA1?AVCAtlException@ATL@@
xdata$x	SEGMENT
__CTA1?AVCAtlException@ATL@@ DD 01H
	DD	FLAT:__CT??_R0?AVCAtlException@ATL@@@84
xdata$x	ENDS
;	COMDAT __CT??_R0?AVCAtlException@ATL@@@84
xdata$x	SEGMENT
__CT??_R0?AVCAtlException@ATL@@@84 DD 00H
	DD	FLAT:??_R0?AVCAtlException@ATL@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0?AVCAtlException@ATL@@@8
_DATA	SEGMENT
??_R0?AVCAtlException@ATL@@@8 DD FLAT:??_7type_info@@6B@ ; ATL::CAtlException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCAtlException@ATL@@', 00H
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT
$T153322 = 8						; size = 4
_hr$ = 8						; size = 4
?AtlThrow@ATL@@YGXJ@Z PROC NEAR				; ATL::AtlThrow, COMDAT

; 62   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );
; 63   : #ifdef _AFX
; 64   : 	if( hr == E_OUTOFMEMORY )
; 65   : 	{
; 66   : 		AfxThrowMemoryException();
; 67   : 	}
; 68   : 	else
; 69   : 	{
; 70   : 		AfxThrowOleException( hr );
; 71   : 	}
; 72   : #else
; 73   : 	throw CAtlException( hr );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _hr$[esp-4]
  00004	68 00 00 00 00	 push	 OFFSET FLAT:__TI1?AVCAtlException@ATL@@
  00009	8d 4c 24 08	 lea	 ecx, DWORD PTR $T153322[esp]
  0000d	51		 push	 ecx
  0000e	89 44 24 0c	 mov	 DWORD PTR $T153322[esp+4], eax
  00012	e8 00 00 00 00	 call	 __CxxThrowException@8
$L153329:
$L153328:
  00017	cc		 int	 3
?AtlThrow@ATL@@YGXJ@Z ENDP				; ATL::AtlThrow
_TEXT	ENDS
PUBLIC	?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z ; ATL::_AtlGetStringResourceImage
EXTRN	__imp__LockResource@4:NEAR
EXTRN	__imp__LoadResource@8:NEAR
EXTRN	__imp__SizeofResource@8:NEAR
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlcore.h
;	COMDAT ?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z
_TEXT	SEGMENT
_hInstance$ = 8						; size = 4
_hResource$ = 12					; size = 4
_id$ = 16						; size = 4
?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z PROC NEAR ; ATL::_AtlGetStringResourceImage, COMDAT

; 239  : {

  00000	53		 push	 ebx

; 240  : 	const ATLSTRINGRESOURCEIMAGE* pImage;
; 241  : 	const ATLSTRINGRESOURCEIMAGE* pImageEnd;
; 242  : 	ULONG nResourceSize;
; 243  : 	HGLOBAL hGlobal;
; 244  : 	UINT iIndex;
; 245  : 
; 246  : 	hGlobal = ::LoadResource( hInstance, hResource );

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR _hInstance$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR _hResource$[esp+4]
  0000a	57		 push	 edi
  0000b	53		 push	 ebx
  0000c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadResource@8

; 247  : 	if( hGlobal == NULL )

  00012	85 c0		 test	 eax, eax
  00014	75 03		 jne	 SHORT $L59408
  00016	5f		 pop	 edi
  00017	5b		 pop	 ebx

; 272  : 	{
; 273  : 		return( NULL );
; 274  : 	}
; 275  : 
; 276  : 	return( pImage );
; 277  : }

  00018	c3		 ret	 0
$L59408:
  00019	56		 push	 esi

; 248  : 	{
; 249  : 		return( NULL );
; 250  : 	}
; 251  : 
; 252  : 	pImage = (const ATLSTRINGRESOURCEIMAGE*)::LockResource( hGlobal );

  0001a	50		 push	 eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LockResource@4
  00021	8b f0		 mov	 esi, eax

; 253  : 	if( pImage == NULL )

  00023	85 f6		 test	 esi, esi
  00025	75 06		 jne	 SHORT $L59410
$L153335:
  00027	5e		 pop	 esi
  00028	5f		 pop	 edi

; 254  : 	{
; 255  : 		return( NULL );

  00029	33 c0		 xor	 eax, eax
  0002b	5b		 pop	 ebx

; 272  : 	{
; 273  : 		return( NULL );
; 274  : 	}
; 275  : 
; 276  : 	return( pImage );
; 277  : }

  0002c	c3		 ret	 0
$L59410:

; 256  : 	}
; 257  : 
; 258  : 	nResourceSize = ::SizeofResource( hInstance, hResource );

  0002d	57		 push	 edi
  0002e	53		 push	 ebx
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SizeofResource@8

; 259  : 	pImageEnd = (const ATLSTRINGRESOURCEIMAGE*)(LPBYTE( pImage )+nResourceSize);
; 260  : 	iIndex = id&0x000f;

  00035	8b 4c 24 18	 mov	 ecx, DWORD PTR _id$[esp+8]
  00039	03 c6		 add	 eax, esi
  0003b	83 e1 0f	 and	 ecx, 15			; 0000000fH

; 261  : 
; 262  : 	while( (iIndex > 0) && (pImage < pImageEnd) )

  0003e	76 0e		 jbe	 SHORT $L59414
$L59413:
  00040	3b f0		 cmp	 esi, eax
  00042	73 e3		 jae	 SHORT $L153335

; 263  : 	{
; 264  : 		pImage = (const ATLSTRINGRESOURCEIMAGE*)(LPBYTE( pImage )+(sizeof( ATLSTRINGRESOURCEIMAGE )+(pImage->nLength*sizeof( WCHAR ))));
; 265  : 		iIndex--;

  00044	49		 dec	 ecx
  00045	0f b7 16	 movzx	 edx, WORD PTR [esi]
  00048	8d 74 56 02	 lea	 esi, DWORD PTR [esi+edx*2+2]
  0004c	75 f2		 jne	 SHORT $L59413
$L59414:

; 266  : 	}
; 267  : 	if( pImage >= pImageEnd )

  0004e	3b f0		 cmp	 esi, eax

; 268  : 	{
; 269  : 		return( NULL );

  00050	73 d5		 jae	 SHORT $L153335

; 270  : 	}
; 271  : 	if( pImage->nLength == 0 )

  00052	66 8b 06	 mov	 ax, WORD PTR [esi]
  00055	66 f7 d8	 neg	 ax
  00058	1b c0		 sbb	 eax, eax
  0005a	23 c6		 and	 eax, esi
  0005c	5e		 pop	 esi
  0005d	5f		 pop	 edi
  0005e	5b		 pop	 ebx

; 272  : 	{
; 273  : 		return( NULL );
; 274  : 	}
; 275  : 
; 276  : 	return( pImage );
; 277  : }

  0005f	c3		 ret	 0
?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z ENDP ; ATL::_AtlGetStringResourceImage
_TEXT	ENDS
PUBLIC	?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z ; ATL::AtlGetStringResourceImage
EXTRN	__imp__FindResourceA@12:NEAR
; Function compile flags: /Ogty
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z
_TEXT	SEGMENT
_hInstance$ = 8						; size = 4
_id$ = 12						; size = 4
?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z PROC NEAR ; ATL::AtlGetStringResourceImage, COMDAT

; 280  : {

  00000	56		 push	 esi

; 281  : 	HRSRC hResource;
; 282  : 
; 283  : 	hResource = ::FindResource( hInstance, MAKEINTRESOURCE( ((id>>4)+1) ), RT_STRING );

  00001	8b 74 24 0c	 mov	 esi, DWORD PTR _id$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	c1 e8 04	 shr	 eax, 4
  0000a	57		 push	 edi
  0000b	8b 7c 24 0c	 mov	 edi, DWORD PTR _hInstance$[esp+4]
  0000f	40		 inc	 eax
  00010	0f b7 c8	 movzx	 ecx, ax
  00013	6a 06		 push	 6
  00015	51		 push	 ecx
  00016	57		 push	 edi
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindResourceA@12

; 284  : 	if( hResource == NULL )

  0001d	85 c0		 test	 eax, eax
  0001f	75 03		 jne	 SHORT $L59431
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 290  : }

  00023	c3		 ret	 0
$L59431:

; 285  : 	{
; 286  : 		return( NULL );
; 287  : 	}
; 288  : 
; 289  : 	return _AtlGetStringResourceImage( hInstance, hResource, id );

  00024	56		 push	 esi
  00025	50		 push	 eax
  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 ?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z ; ATL::_AtlGetStringResourceImage
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi

; 290  : }

  00031	c3		 ret	 0
?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z ENDP ; ATL::AtlGetStringResourceImage
_TEXT	ENDS
PUBLIC	?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@IG@Z ; ATL::AtlGetStringResourceImage
EXTRN	__imp__FindResourceExA@16:NEAR
; Function compile flags: /Ogty
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@IG@Z
_TEXT	SEGMENT
_hInstance$ = 8						; size = 4
_id$ = 12						; size = 4
_wLanguage$ = 16					; size = 2
?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@IG@Z PROC NEAR ; ATL::AtlGetStringResourceImage, COMDAT

; 294  : 	HRSRC hResource;
; 295  : 
; 296  : 	hResource = ::FindResourceEx( hInstance, RT_STRING, MAKEINTRESOURCE( ((id>>4)+1) ), wLanguage );

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR _wLanguage$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR _id$[esp]
  00009	8b ce		 mov	 ecx, esi
  0000b	57		 push	 edi
  0000c	8b 7c 24 0c	 mov	 edi, DWORD PTR _hInstance$[esp+4]
  00010	c1 e9 04	 shr	 ecx, 4
  00013	41		 inc	 ecx
  00014	50		 push	 eax
  00015	0f b7 d1	 movzx	 edx, cx
  00018	52		 push	 edx
  00019	6a 06		 push	 6
  0001b	57		 push	 edi
  0001c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindResourceExA@16

; 297  : 	if( hResource == NULL )

  00022	85 c0		 test	 eax, eax
  00024	75 03		 jne	 SHORT $L59445
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi

; 303  : }

  00028	c3		 ret	 0
$L59445:

; 298  : 	{
; 299  : 		return( NULL );
; 300  : 	}
; 301  : 
; 302  : 	return _AtlGetStringResourceImage( hInstance, hResource, id );

  00029	56		 push	 esi
  0002a	50		 push	 eax
  0002b	57		 push	 edi
  0002c	e8 00 00 00 00	 call	 ?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z ; ATL::_AtlGetStringResourceImage
  00031	83 c4 0c	 add	 esp, 12			; 0000000cH
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi

; 303  : }

  00036	c3		 ret	 0
?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@IG@Z ENDP ; ATL::AtlGetStringResourceImage
_TEXT	ENDS
PUBLIC	?AtlFindStringResourceInstance@ATL@@YAPAUHINSTANCE__@@IG@Z ; ATL::AtlFindStringResourceInstance
EXTRN	?GetHInstanceAt@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@H@Z:NEAR ; ATL::CAtlBaseModule::GetHInstanceAt
EXTRN	?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A:BYTE	; ATL::_AtlBaseModule
; Function compile flags: /Ogty
;	COMDAT ?AtlFindStringResourceInstance@ATL@@YAPAUHINSTANCE__@@IG@Z
_TEXT	SEGMENT
_nID$ = 8						; size = 4
_wLanguage$ = 12					; size = 2
?AtlFindStringResourceInstance@ATL@@YAPAUHINSTANCE__@@IG@Z PROC NEAR ; ATL::AtlFindStringResourceInstance, COMDAT

; 380  : {

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi
  00003	57		 push	 edi

; 381  : 	const ATLSTRINGRESOURCEIMAGE* p = NULL;

  00004	33 ff		 xor	 edi, edi

; 382  : 	HINSTANCE hInst = _AtlBaseModule.GetHInstanceAt(0);

  00006	57		 push	 edi
  00007	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A
  0000c	e8 00 00 00 00	 call	 ?GetHInstanceAt@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@H@Z ; ATL::CAtlBaseModule::GetHInstanceAt
  00011	8b f0		 mov	 esi, eax

; 383  : 
; 384  : 	for (int i = 1; hInst != NULL && p == NULL; hInst = _AtlBaseModule.GetHInstanceAt(i++))

  00013	85 f6		 test	 esi, esi
  00015	bd 01 00 00 00	 mov	 ebp, 1
  0001a	74 47		 je	 SHORT $L59538
  0001c	8b 5c 24 14	 mov	 ebx, DWORD PTR _nID$[esp+12]
$L59536:
  00020	85 ff		 test	 edi, edi
  00022	75 3f		 jne	 SHORT $L59538

; 385  : 	{
; 386  : 		p = AtlGetStringResourceImage(hInst, nID, wLanguage);

  00024	8b 44 24 18	 mov	 eax, DWORD PTR _wLanguage$[esp+12]
  00028	8b cb		 mov	 ecx, ebx
  0002a	c1 e9 04	 shr	 ecx, 4
  0002d	41		 inc	 ecx
  0002e	50		 push	 eax
  0002f	0f b7 d1	 movzx	 edx, cx
  00032	52		 push	 edx
  00033	6a 06		 push	 6
  00035	56		 push	 esi
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindResourceExA@16
  0003c	85 c0		 test	 eax, eax
  0003e	74 11		 je	 SHORT $L153354
$L153349:
  00040	53		 push	 ebx
  00041	50		 push	 eax
  00042	56		 push	 esi
  00043	e8 00 00 00 00	 call	 ?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z ; ATL::_AtlGetStringResourceImage
  00048	8b f8		 mov	 edi, eax
  0004a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 387  : 		if (p != NULL)

  0004d	85 ff		 test	 edi, edi
  0004f	75 19		 jne	 SHORT $L153352
$L153354:

; 383  : 
; 384  : 	for (int i = 1; hInst != NULL && p == NULL; hInst = _AtlBaseModule.GetHInstanceAt(i++))

  00051	55		 push	 ebp
  00052	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A
  00057	e8 00 00 00 00	 call	 ?GetHInstanceAt@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@H@Z ; ATL::CAtlBaseModule::GetHInstanceAt
  0005c	8b f0		 mov	 esi, eax
  0005e	45		 inc	 ebp
  0005f	85 f6		 test	 esi, esi
  00061	75 bd		 jne	 SHORT $L59536
$L59538:
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5d		 pop	 ebp

; 389  : 	}
; 390  : 
; 391  : 	return NULL;

  00066	33 c0		 xor	 eax, eax
  00068	5b		 pop	 ebx

; 392  : }

  00069	c3		 ret	 0
$L153352:
  0006a	5f		 pop	 edi

; 388  : 			return hInst;

  0006b	8b c6		 mov	 eax, esi
  0006d	5e		 pop	 esi
  0006e	5d		 pop	 ebp
  0006f	5b		 pop	 ebx

; 392  : }

  00070	c3		 ret	 0
?AtlFindStringResourceInstance@ATL@@YAPAUHINSTANCE__@@IG@Z ENDP ; ATL::AtlFindStringResourceInstance
_TEXT	ENDS
PUBLIC	?data@CStringData@ATL@@QAEPAXXZ			; ATL::CStringData::data
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT
?data@CStringData@ATL@@QAEPAXXZ PROC NEAR		; ATL::CStringData::data, COMDAT
; _this$ = ecx

; 66   : 		return (this+1);

  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 67   : 	}

  00003	c3		 ret	 0
?data@CStringData@ATL@@QAEPAXXZ ENDP			; ATL::CStringData::data
_TEXT	ENDS
PUBLIC	?AddRef@CStringData@ATL@@QAEXXZ			; ATL::CStringData::AddRef
; Function compile flags: /Ogty
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT
?AddRef@CStringData@ATL@@QAEXXZ PROC NEAR		; ATL::CStringData::AddRef, COMDAT
; _this$ = ecx

; 71   : 		ATLASSERT(nRefs > 0);
; 72   : 		_InterlockedIncrement(&nRefs);

  00000	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00003	b8 01 00 00 00	 mov	 eax, 1
  00008	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax

; 73   : 	}

  0000c	c3		 ret	 0
?AddRef@CStringData@ATL@@QAEXXZ ENDP			; ATL::CStringData::AddRef
_TEXT	ENDS
PUBLIC	?IsLocked@CStringData@ATL@@QBE_NXZ		; ATL::CStringData::IsLocked
; Function compile flags: /Ogty
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT
?IsLocked@CStringData@ATL@@QBE_NXZ PROC NEAR		; ATL::CStringData::IsLocked, COMDAT
; _this$ = ecx

; 76   : 		return nRefs < 0;

  00000	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00003	33 c0		 xor	 eax, eax
  00005	85 d2		 test	 edx, edx
  00007	0f 9c c0	 setl	 al

; 77   : 	}

  0000a	c3		 ret	 0
?IsLocked@CStringData@ATL@@QBE_NXZ ENDP			; ATL::CStringData::IsLocked
_TEXT	ENDS
PUBLIC	?IsShared@CStringData@ATL@@QBE_NXZ		; ATL::CStringData::IsShared
; Function compile flags: /Ogty
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT
?IsShared@CStringData@ATL@@QBE_NXZ PROC NEAR		; ATL::CStringData::IsShared, COMDAT
; _this$ = ecx

; 80   : 		return( nRefs > 1 ); 

  00000	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00003	33 c0		 xor	 eax, eax
  00005	83 fa 01	 cmp	 edx, 1
  00008	0f 9f c0	 setg	 al

; 81   : 	}

  0000b	c3		 ret	 0
?IsShared@CStringData@ATL@@QBE_NXZ ENDP			; ATL::CStringData::IsShared
_TEXT	ENDS
PUBLIC	?Release@CStringData@ATL@@QAEXXZ		; ATL::CStringData::Release
; Function compile flags: /Ogty
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT
?Release@CStringData@ATL@@QAEXXZ PROC NEAR		; ATL::CStringData::Release, COMDAT
; _this$ = ecx

; 93   : 		ATLASSERT( nRefs != 0 );
; 94   : 
; 95   : 		if( _InterlockedDecrement( &nRefs ) <= 0 )

  00000	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  00003	83 ca ff	 or	 edx, -1
  00006	f0 0f c1 10	 lock	  xadd	 DWORD PTR [eax], edx
  0000a	4a		 dec	 edx
  0000b	85 d2		 test	 edx, edx
  0000d	7f 0a		 jg	 SHORT $L73499

; 96   : 		{
; 97   : 			pStringMgr->Free( this );

  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	8b 10		 mov	 edx, DWORD PTR [eax]
  00013	51		 push	 ecx
  00014	8b c8		 mov	 ecx, eax
  00016	ff 52 04	 call	 DWORD PTR [edx+4]
$L73499:

; 98   : 		}
; 99   : 	}

  00019	c3		 ret	 0
?Release@CStringData@ATL@@QAEXXZ ENDP			; ATL::CStringData::Release
_TEXT	ENDS
PUBLIC	?ResetPosition@CTTextLinkData@@QAEXXZ		; CTTextLinkData::ResetPosition
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\ttextlinkdata.h
;	COMDAT ?ResetPosition@CTTextLinkData@@QAEXXZ
_TEXT	SEGMENT
?ResetPosition@CTTextLinkData@@QAEXXZ PROC NEAR		; CTTextLinkData::ResetPosition, COMDAT
; _this$ = ecx

; 65   : 	void ResetPosition()						{ m_nPos = 0; }

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00006	c3		 ret	 0
?ResetPosition@CTTextLinkData@@QAEXXZ ENDP		; CTTextLinkData::ResetPosition
_TEXT	ENDS
PUBLIC	?ToStr@CTTextLinkData@@QBEABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@XZ ; CTTextLinkData::ToStr
; Function compile flags: /Ogty
;	COMDAT ?ToStr@CTTextLinkData@@QBEABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@XZ
_TEXT	SEGMENT
?ToStr@CTTextLinkData@@QBEABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@XZ PROC NEAR ; CTTextLinkData::ToStr, COMDAT
; _this$ = ecx

; 67   : 	const CString& ToStr() const				{ return m_vData; }

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?ToStr@CTTextLinkData@@QBEABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@XZ ENDP ; CTTextLinkData::ToStr
_TEXT	ENDS
PUBLIC	??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ		; ATL::CSimpleStringT<char,0>::operator char const *
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT
??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ PROC NEAR	; ATL::CSimpleStringT<char,0>::operator char const *, COMDAT
; _this$ = ecx

; 379  : 		return( m_pszData );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 380  : 	}

  00002	c3		 ret	 0
??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ ENDP		; ATL::CSimpleStringT<char,0>::operator char const *
_TEXT	ENDS
PUBLIC	?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<char,0>::GetData
; Function compile flags: /Ogty
;	COMDAT ?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT
?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ PROC NEAR ; ATL::CSimpleStringT<char,0>::GetData, COMDAT
; _this$ = ecx

; 731  : 		return( reinterpret_cast< CStringData* >( m_pszData )-1 );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 e8 10	 sub	 eax, 16			; 00000010H

; 732  : 	}

  00005	c3		 ret	 0
?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ ENDP ; ATL::CSimpleStringT<char,0>::GetData
_TEXT	ENDS
PUBLIC	?FindStringResourceInstance@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUHINSTANCE__@@I@Z ; ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> >::FindStringResourceInstance
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlstr.h
;	COMDAT ?FindStringResourceInstance@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT
_nID$ = 8						; size = 4
?FindStringResourceInstance@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUHINSTANCE__@@I@Z PROC NEAR ; ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> >::FindStringResourceInstance, COMDAT

; 949  : 		return( AtlFindStringResourceInstance( nID ) );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _nID$[esp-4]
  00004	6a 00		 push	 0
  00006	50		 push	 eax
  00007	e8 00 00 00 00	 call	 ?AtlFindStringResourceInstance@ATL@@YAPAUHINSTANCE__@@IG@Z ; ATL::AtlFindStringResourceInstance
  0000c	83 c4 08	 add	 esp, 8

; 950  : 	}

  0000f	c3		 ret	 0
?FindStringResourceInstance@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUHINSTANCE__@@I@Z ENDP ; ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> >::FindStringResourceInstance
_TEXT	ENDS
PUBLIC	?GetDefaultManager@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUIAtlStringMgr@2@XZ ; ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> >::GetDefaultManager
EXTRN	?g_strmgr@ATL@@3VCAtlStringMgr@1@A:BYTE		; ATL::g_strmgr
; Function compile flags: /Ogty
;	COMDAT ?GetDefaultManager@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUIAtlStringMgr@2@XZ
_TEXT	SEGMENT
?GetDefaultManager@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUIAtlStringMgr@2@XZ PROC NEAR ; ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> >::GetDefaultManager, COMDAT

; 954  : 		return( &g_strmgr );

  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?g_strmgr@ATL@@3VCAtlStringMgr@1@A ; ATL::g_strmgr

; 955  : 	}

  00005	c3		 ret	 0
?GetDefaultManager@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUIAtlStringMgr@2@XZ ENDP ; ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> >::GetDefaultManager
_TEXT	ENDS
PUBLIC	?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ	; ATL::CSimpleStringT<char,0>::GetString
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT
?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ PROC NEAR ; ATL::CSimpleStringT<char,0>::GetString, COMDAT
; _this$ = ecx

; 510  : 		return( m_pszData );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 511  : 	}

  00002	c3		 ret	 0
?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ ENDP	; ATL::CSimpleStringT<char,0>::GetString
_TEXT	ENDS
PUBLIC	?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<char,0>::Attach
; Function compile flags: /Ogty
;	COMDAT ?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::Attach, COMDAT
; _this$ = ecx

; 712  : 		m_pszData = static_cast< PXSTR >( pData->data() );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _pData$[esp-4]
  00004	83 c0 10	 add	 eax, 16			; 00000010H
  00007	89 01		 mov	 DWORD PTR [ecx], eax

; 713  : 	}

  00009	c2 04 00	 ret	 4
?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z ENDP ; ATL::CSimpleStringT<char,0>::Attach
_TEXT	ENDS
PUBLIC	?GetFormattedLength@?$ChTraitsCRT@D@ATL@@SAHPBDPAD@Z ; ATL::ChTraitsCRT<char>::GetFormattedLength
EXTRN	__vscprintf:NEAR
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?GetFormattedLength@?$ChTraitsCRT@D@ATL@@SAHPBDPAD@Z
_TEXT	SEGMENT
_pszFormat$ = 8						; size = 4
_args$ = 12						; size = 4
?GetFormattedLength@?$ChTraitsCRT@D@ATL@@SAHPBDPAD@Z PROC NEAR ; ATL::ChTraitsCRT<char>::GetFormattedLength, COMDAT

; 408  : 		return _vscprintf( pszFormat, args );

  00000	e9 00 00 00 00	 jmp	 __vscprintf
?GetFormattedLength@?$ChTraitsCRT@D@ATL@@SAHPBDPAD@Z ENDP ; ATL::ChTraitsCRT<char>::GetFormattedLength
_TEXT	ENDS
PUBLIC	?Format@?$ChTraitsCRT@D@ATL@@SAHPADPBD0@Z	; ATL::ChTraitsCRT<char>::Format
EXTRN	_vsprintf:NEAR
; Function compile flags: /Ogty
;	COMDAT ?Format@?$ChTraitsCRT@D@ATL@@SAHPADPBD0@Z
_TEXT	SEGMENT
_pszBuffer$ = 8						; size = 4
_pszFormat$ = 12					; size = 4
_args$ = 16						; size = 4
?Format@?$ChTraitsCRT@D@ATL@@SAHPADPBD0@Z PROC NEAR	; ATL::ChTraitsCRT<char>::Format, COMDAT

; 413  : 		return vsprintf( pszBuffer, pszFormat, args );

  00000	e9 00 00 00 00	 jmp	 _vsprintf
?Format@?$ChTraitsCRT@D@ATL@@SAHPADPBD0@Z ENDP		; ATL::ChTraitsCRT<char>::Format
_TEXT	ENDS
PUBLIC	?GetBaseTypeLength@?$ChTraitsCRT@D@ATL@@SAHPBGH@Z ; ATL::ChTraitsCRT<char>::GetBaseTypeLength
EXTRN	__imp__WideCharToMultiByte@32:NEAR
; Function compile flags: /Ogty
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@D@ATL@@SAHPBGH@Z
_TEXT	SEGMENT
_pszSource$ = 8						; size = 4
_nLength$ = 12						; size = 4
?GetBaseTypeLength@?$ChTraitsCRT@D@ATL@@SAHPBGH@Z PROC NEAR ; ATL::ChTraitsCRT<char>::GetBaseTypeLength, COMDAT

; 437  : 		// Returns required buffer length in XCHARs
; 438  : 		return ::WideCharToMultiByte( _AtlGetConversionACP(), 0, pszSource, nLength, NULL, 0, NULL, NULL );

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _nLength$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR _pszSource$[esp-4]
  00008	6a 00		 push	 0
  0000a	6a 00		 push	 0
  0000c	6a 00		 push	 0
  0000e	6a 00		 push	 0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	6a 00		 push	 0
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  0001a	50		 push	 eax
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32

; 439  : 	}

  00021	c3		 ret	 0
?GetBaseTypeLength@?$ChTraitsCRT@D@ATL@@SAHPBGH@Z ENDP	; ATL::ChTraitsCRT<char>::GetBaseTypeLength
_TEXT	ENDS
PUBLIC	?ConvertToBaseType@?$ChTraitsCRT@D@ATL@@SAXPADHPBGH@Z ; ATL::ChTraitsCRT<char>::ConvertToBaseType
; Function compile flags: /Ogty
;	COMDAT ?ConvertToBaseType@?$ChTraitsCRT@D@ATL@@SAXPADHPBGH@Z
_TEXT	SEGMENT
_pszDest$ = 8						; size = 4
_nDestLength$ = 12					; size = 4
_pszSrc$ = 16						; size = 4
_nSrcLength$ = 20					; size = 4
?ConvertToBaseType@?$ChTraitsCRT@D@ATL@@SAXPADHPBGH@Z PROC NEAR ; ATL::ChTraitsCRT<char>::ConvertToBaseType, COMDAT

; 452  : 		// nLen is in XCHARs
; 453  : 		::WideCharToMultiByte( _AtlGetConversionACP(), 0, pszSrc, nSrcLength, pszDest, nDestLength, NULL, NULL );

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _nDestLength$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR _pszDest$[esp-4]
  00008	8b 54 24 10	 mov	 edx, DWORD PTR _nSrcLength$[esp-4]
  0000c	6a 00		 push	 0
  0000e	6a 00		 push	 0
  00010	50		 push	 eax
  00011	8b 44 24 18	 mov	 eax, DWORD PTR _pszSrc$[esp+8]
  00015	51		 push	 ecx
  00016	52		 push	 edx
  00017	50		 push	 eax
  00018	6a 00		 push	 0
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  00020	50		 push	 eax
  00021	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32

; 454  : 	}

  00027	c3		 ret	 0
?ConvertToBaseType@?$ChTraitsCRT@D@ATL@@SAXPADHPBGH@Z ENDP ; ATL::ChTraitsCRT<char>::ConvertToBaseType
_TEXT	ENDS
PUBLIC	?CopyChars@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z ; ATL::CSimpleStringT<char,0>::CopyChars
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?CopyChars@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z
_TEXT	SEGMENT
_pchDest$ = 8						; size = 4
_pchSrc$ = 12						; size = 4
_nChars$ = 16						; size = 4
?CopyChars@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::CopyChars, COMDAT

; 653  : 		memcpy( pchDest, pchSrc, nChars*sizeof( XCHAR ) );

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR _nChars$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR _pchSrc$[esp]
  00009	8b c1		 mov	 eax, ecx
  0000b	57		 push	 edi
  0000c	8b 7c 24 0c	 mov	 edi, DWORD PTR _pchDest$[esp+4]
  00010	c1 e9 02	 shr	 ecx, 2
  00013	f3 a5		 rep movsd
  00015	8b c8		 mov	 ecx, eax
  00017	83 e1 03	 and	 ecx, 3
  0001a	f3 a4		 rep movsb
  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi

; 654  : 	}

  0001e	c3		 ret	 0
?CopyChars@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z ENDP ; ATL::CSimpleStringT<char,0>::CopyChars
_TEXT	ENDS
PUBLIC	?CopyCharsOverlapped@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z ; ATL::CSimpleStringT<char,0>::CopyCharsOverlapped
EXTRN	_memmove:NEAR
; Function compile flags: /Ogty
;	COMDAT ?CopyCharsOverlapped@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z
_TEXT	SEGMENT
_pchDest$ = 8						; size = 4
_pchSrc$ = 12						; size = 4
_nChars$ = 16						; size = 4
?CopyCharsOverlapped@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::CopyCharsOverlapped, COMDAT

; 657  : 		memmove( pchDest, pchSrc, nChars*sizeof( XCHAR ) );

  00000	e9 00 00 00 00	 jmp	 _memmove
?CopyCharsOverlapped@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z ENDP ; ATL::CSimpleStringT<char,0>::CopyCharsOverlapped
_TEXT	ENDS
PUBLIC	?StringLength@?$CSimpleStringT@D$0A@@ATL@@SAHPBD@Z ; ATL::CSimpleStringT<char,0>::StringLength
; Function compile flags: /Ogty
;	COMDAT ?StringLength@?$CSimpleStringT@D$0A@@ATL@@SAHPBD@Z
_TEXT	SEGMENT
_psz$ = 8						; size = 4
?StringLength@?$CSimpleStringT@D$0A@@ATL@@SAHPBD@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::StringLength, COMDAT

; 678  : 		if( psz == NULL )

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _psz$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	75 01		 jne	 SHORT $L150470

; 683  : 	}

  00008	c3		 ret	 0
$L150470:

; 679  : 		{
; 680  : 			return( 0 );
; 681  : 		}
; 682  : 		return( int( strlen( psz ) ) );

  00009	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0000c	8d 64 24 00	 npad	 4
$L153426:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $L153426
  00017	2b c2		 sub	 eax, edx

; 683  : 	}

  00019	c3		 ret	 0
?StringLength@?$CSimpleStringT@D$0A@@ATL@@SAHPBD@Z ENDP	; ATL::CSimpleStringT<char,0>::StringLength
_TEXT	ENDS
PUBLIC	?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<char,0>::ThrowMemoryException
; Function compile flags: /Ogty
;	COMDAT ?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ
_TEXT	SEGMENT
?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ PROC NEAR ; ATL::CSimpleStringT<char,0>::ThrowMemoryException, COMDAT

; 705  : 		AtlThrow( E_OUTOFMEMORY );

  00000	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  00005	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L153431:
$L153430:
  0000a	cc		 int	 3
?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ ENDP ; ATL::CSimpleStringT<char,0>::ThrowMemoryException
_TEXT	ENDS
PUBLIC	?Fork@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z	; ATL::CSimpleStringT<char,0>::Fork
; Function compile flags: /Ogty
;	COMDAT ?Fork@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
tv181 = 8						; size = 4
_nLength$ = 8						; size = 4
?Fork@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z PROC NEAR	; ATL::CSimpleStringT<char,0>::Fork, COMDAT
; _this$ = ecx

; 715  : 	{

  00000	51		 push	 ecx
  00001	53		 push	 ebx

; 716  : 		CStringData* pOldData = GetData();

  00002	8b 19		 mov	 ebx, DWORD PTR [ecx]
  00004	83 eb 10	 sub	 ebx, 16			; 00000010H
  00007	55		 push	 ebp

; 717  : 		int nOldLength = pOldData->nDataLength;

  00008	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  0000b	89 4c 24 08	 mov	 DWORD PTR _this$[esp+12], ecx

; 718  : 		CStringData* pNewData = pOldData->pStringMgr->Clone()->Allocate( nLength, sizeof( XCHAR ) );

  0000f	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00011	8b 01		 mov	 eax, DWORD PTR [ecx]
  00013	56		 push	 esi
  00014	ff 50 10	 call	 DWORD PTR [eax+16]
  00017	8b 74 24 14	 mov	 esi, DWORD PTR _nLength$[esp+12]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	6a 01		 push	 1
  0001f	56		 push	 esi
  00020	8b c8		 mov	 ecx, eax
  00022	ff 12		 call	 DWORD PTR [edx]

; 719  : 		if( pNewData == NULL )

  00024	85 c0		 test	 eax, eax
  00026	75 05		 jne	 SHORT $L150479

; 720  : 		{
; 721  : 			ThrowMemoryException();

  00028	e8 00 00 00 00	 call	 ?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<char,0>::ThrowMemoryException
$L153462:
$L150479:

; 722  : 		}
; 723  : 		int nCharsToCopy = ((nOldLength < nLength) ? nOldLength : nLength)+1;  // Copy '\0'

  0002d	3b ee		 cmp	 ebp, esi
  0002f	7d 02		 jge	 SHORT $L153436
  00031	8b f5		 mov	 esi, ebp
$L153436:
  00033	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]

; 724  : 		CopyChars( PXSTR( pNewData->data() ), PCXSTR( pOldData->data() ), nCharsToCopy );

  00036	8b d1		 mov	 edx, ecx
  00038	57		 push	 edi
  00039	c1 e9 02	 shr	 ecx, 2
  0003c	8d 78 10	 lea	 edi, DWORD PTR [eax+16]
  0003f	89 7c 24 18	 mov	 DWORD PTR tv181[esp+16], edi
  00043	8d 73 10	 lea	 esi, DWORD PTR [ebx+16]
  00046	f3 a5		 rep movsd
  00048	8b ca		 mov	 ecx, edx
  0004a	83 e1 03	 and	 ecx, 3
  0004d	f3 a4		 rep movsb

; 725  : 		pNewData->nDataLength = nOldLength;

  0004f	89 68 04	 mov	 DWORD PTR [eax+4], ebp

; 726  : 		pOldData->Release();

  00052	8d 43 0c	 lea	 eax, DWORD PTR [ebx+12]
  00055	83 c9 ff	 or	 ecx, -1
  00058	f0 0f c1 08	 lock	  xadd	 DWORD PTR [eax], ecx
  0005c	49		 dec	 ecx
  0005d	85 c9		 test	 ecx, ecx
  0005f	5f		 pop	 edi
  00060	7f 08		 jg	 SHORT $L153451
  00062	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	53		 push	 ebx
  00067	ff 52 04	 call	 DWORD PTR [edx+4]
$L153451:

; 727  : 		Attach( pNewData );

  0006a	8b 44 24 14	 mov	 eax, DWORD PTR tv181[esp+12]
  0006e	8b 4c 24 0c	 mov	 ecx, DWORD PTR _this$[esp+16]
  00072	5e		 pop	 esi
  00073	5d		 pop	 ebp
  00074	89 01		 mov	 DWORD PTR [ecx], eax
  00076	5b		 pop	 ebx

; 728  : 	}

  00077	59		 pop	 ecx
  00078	c2 04 00	 ret	 4
$L153461:
?Fork@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ENDP		; ATL::CSimpleStringT<char,0>::Fork
_TEXT	ENDS
PUBLIC	?Reallocate@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z	; ATL::CSimpleStringT<char,0>::Reallocate
; Function compile flags: /Ogty
;	COMDAT ?Reallocate@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_nLength$ = 8						; size = 4
?Reallocate@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::Reallocate, COMDAT
; _this$ = ecx

; 776  : 	{

  00000	56		 push	 esi
  00001	57		 push	 edi

; 777  : 		CStringData* pOldData = GetData();
; 778  : 		ATLASSERT( pOldData->nAllocLength < nLength );
; 779  : 		IAtlStringMgr* pStringMgr = pOldData->pStringMgr;
; 780  : 		CStringData* pNewData = pStringMgr->Reallocate( pOldData, nLength, sizeof( XCHAR ) );

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR _nLength$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	8b 06		 mov	 eax, DWORD PTR [esi]
  0000a	8b 48 f0	 mov	 ecx, DWORD PTR [eax-16]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	83 e8 10	 sub	 eax, 16			; 00000010H
  00012	6a 01		 push	 1
  00014	57		 push	 edi
  00015	50		 push	 eax
  00016	ff 52 08	 call	 DWORD PTR [edx+8]

; 781  : 		if( pNewData == NULL )

  00019	85 c0		 test	 eax, eax
  0001b	75 05		 jne	 SHORT $L150488

; 782  : 		{
; 783  : 			ThrowMemoryException();

  0001d	e8 00 00 00 00	 call	 ?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<char,0>::ThrowMemoryException
$L153478:
$L150488:

; 784  : 		}
; 785  : 		Attach( pNewData );

  00022	83 c0 10	 add	 eax, 16			; 00000010H
  00025	5f		 pop	 edi
  00026	89 06		 mov	 DWORD PTR [esi], eax
  00028	5e		 pop	 esi

; 786  : 	}

  00029	c2 04 00	 ret	 4
$L153477:
?Reallocate@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ENDP	; ATL::CSimpleStringT<char,0>::Reallocate
_TEXT	ENDS
PUBLIC	?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z	; ATL::CSimpleStringT<char,0>::SetLength
; Function compile flags: /Ogty
;	COMDAT ?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_nLength$ = 8						; size = 4
?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::SetLength, COMDAT
; _this$ = ecx

; 790  : 		ATLASSERT( nLength >= 0 );
; 791  : 		ATLASSERT( nLength <= GetData()->nAllocLength );
; 792  : 
; 793  : 		if( nLength < 0 || nLength > GetData()->nAllocLength)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _nLength$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	7c 13		 jl	 SHORT $L150494
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	3b 42 f8	 cmp	 eax, DWORD PTR [edx-8]
  0000d	7f 0c		 jg	 SHORT $L150494

; 794  : 			AtlThrow(E_INVALIDARG);
; 795  : 			
; 796  : 		GetData()->nDataLength = nLength;

  0000f	89 42 f4	 mov	 DWORD PTR [edx-12], eax

; 797  : 		m_pszData[nLength] = 0;

  00012	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00014	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0

; 798  : 	}

  00018	c2 04 00	 ret	 4
$L150494:
  0001b	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00020	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L153489:
$L153488:
  00025	cc		 int	 3
?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ENDP	; ATL::CSimpleStringT<char,0>::SetLength
_TEXT	ENDS
PUBLIC	?GetInstance@CTTextLinker@@SAPAV1@XZ		; CTTextLinker::GetInstance
EXTRN	_atexit:NEAR
;	COMDAT ?instance@?1??GetInstance@CTTextLinker@@SAPAV2@XZ@4V2@A
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\ttextlinker.cpp
_BSS	SEGMENT
?instance@?1??GetInstance@CTTextLinker@@SAPAV2@XZ@4V2@A DQ 01H DUP (?) ; `CTTextLinker::GetInstance'::`2'::instance
_BSS	ENDS
;	COMDAT ?$S8@?1??GetInstance@CTTextLinker@@SAPAV2@XZ@4IA
_BSS	SEGMENT
?$S8@?1??GetInstance@CTTextLinker@@SAPAV2@XZ@4IA DD 01H DUP (?) ; `CTTextLinker::GetInstance'::`2'::$S8
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
$T153498 DD	0ffffffffH
	DD	FLAT:$L153493
$T153495 DD	019930520H
	DD	01H
	DD	FLAT:$T153498
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ?GetInstance@CTTextLinker@@SAPAV1@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?GetInstance@CTTextLinker@@SAPAV1@XZ PROC NEAR		; CTTextLinker::GetInstance, COMDAT

; 26   : {

  00000	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list

; 27   : 	static CTTextLinker instance;

  00006	8a 0d 00 00 00
	00		 mov	 cl, BYTE PTR ?$S8@?1??GetInstance@CTTextLinker@@SAPAV2@XZ@4IA
  0000c	6a ff		 push	 -1
  0000e	68 00 00 00 00	 push	 __ehhandler$?GetInstance@CTTextLinker@@SAPAV1@XZ
  00013	50		 push	 eax
  00014	b8 01 00 00 00	 mov	 eax, 1
  00019	84 c8		 test	 cl, al
  0001b	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00022	75 25		 jne	 SHORT $L153496
  00024	09 05 00 00 00
	00		 or	 DWORD PTR ?$S8@?1??GetInstance@CTTextLinker@@SAPAV2@XZ@4IA, eax
  0002a	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?instance@?1??GetInstance@CTTextLinker@@SAPAV2@XZ@4V2@A
  0002f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+20], 0
  00037	e8 00 00 00 00	 call	 ??0CTTextLinker@@IAE@XZ	; CTTextLinker::CTTextLinker
  0003c	68 00 00 00 00	 push	 OFFSET FLAT:_$E9
  00041	e8 00 00 00 00	 call	 _atexit
  00046	83 c4 04	 add	 esp, 4
$L153496:

; 28   : 	return &instance;
; 29   : }

  00049	8b 0c 24	 mov	 ecx, DWORD PTR __$EHRec$[esp+12]
  0004c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?instance@?1??GetInstance@CTTextLinker@@SAPAV2@XZ@4V2@A
  00051	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00058	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005b	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L153493:
  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$S8@?1??GetInstance@CTTextLinker@@SAPAV2@XZ@4IA
  00005	83 e0 fe	 and	 eax, -2			; fffffffeH
  00008	a3 00 00 00 00	 mov	 DWORD PTR ?$S8@?1??GetInstance@CTTextLinker@@SAPAV2@XZ@4IA, eax
  0000d	c3		 ret	 0
__ehhandler$?GetInstance@CTTextLinker@@SAPAV1@XZ:
  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T153495
  00013	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetInstance@CTTextLinker@@SAPAV1@XZ ENDP		; CTTextLinker::GetInstance
PUBLIC	?FindOneOf@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBEHPBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::FindOneOf
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?FindOneOf@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBEHPBD@Z
_TEXT	SEGMENT
_pszCharSet$ = 8					; size = 4
?FindOneOf@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBEHPBD@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::FindOneOf, COMDAT
; _this$ = ecx

; 1415 : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 1416 : 		ATLASSERT( AtlIsValidString( pszCharSet ) );
; 1417 : 		PCXSTR psz = StringTraits::StringScanSet( GetString(), pszCharSet );

  00003	8b 4c 24 08	 mov	 ecx, DWORD PTR _pszCharSet$[esp]
  00007	8b 06		 mov	 eax, DWORD PTR [esi]
  00009	51		 push	 ecx
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 __mbspbrk
  00010	83 c4 08	 add	 esp, 8

; 1418 : 		return( (psz == NULL) ? -1 : int( psz-GetString() ) );

  00013	85 c0		 test	 eax, eax
  00015	75 07		 jne	 SHORT $L153504
  00017	83 c8 ff	 or	 eax, -1
  0001a	5e		 pop	 esi

; 1419 : 	}

  0001b	c2 04 00	 ret	 4
$L153504:

; 1418 : 		return( (psz == NULL) ? -1 : int( psz-GetString() ) );

  0001e	2b 06		 sub	 eax, DWORD PTR [esi]
  00020	5e		 pop	 esi

; 1419 : 	}

  00021	c2 04 00	 ret	 4
?FindOneOf@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBEHPBD@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::FindOneOf
_TEXT	ENDS
PUBLIC	?GetManager@?$CSimpleStringT@D$0A@@ATL@@QBEPAUIAtlStringMgr@2@XZ ; ATL::CSimpleStringT<char,0>::GetManager
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?GetManager@?$CSimpleStringT@D$0A@@ATL@@QBEPAUIAtlStringMgr@2@XZ
_TEXT	SEGMENT
?GetManager@?$CSimpleStringT@D$0A@@ATL@@QBEPAUIAtlStringMgr@2@XZ PROC NEAR ; ATL::CSimpleStringT<char,0>::GetManager, COMDAT
; _this$ = ecx

; 505  : 		return( GetData()->pStringMgr->Clone() );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 48 f0	 mov	 ecx, DWORD PTR [eax-16]
  00005	8b 11		 mov	 edx, DWORD PTR [ecx]
  00007	ff 62 10	 jmp	 DWORD PTR [edx+16]
?GetManager@?$CSimpleStringT@D$0A@@ATL@@QBEPAUIAtlStringMgr@2@XZ ENDP ; ATL::CSimpleStringT<char,0>::GetManager
_TEXT	ENDS
PUBLIC	?begin@?$vector@KV?$allocator@K@std@@@std@@QBE?AVconst_iterator@12@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::begin
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?begin@?$vector@KV?$allocator@K@std@@@std@@QBE?AVconst_iterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@KV?$allocator@K@std@@@std@@QBE?AVconst_iterator@12@XZ PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::begin, COMDAT
; _this$ = ecx

; 468  : 		return (const_iterator(_Myfirst));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 469  : 		}

  00009	c2 04 00	 ret	 4
?begin@?$vector@KV?$allocator@K@std@@@std@@QBE?AVconst_iterator@12@XZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::begin
_TEXT	ENDS
PUBLIC	??Hconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QBE?AV012@H@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator+
; Function compile flags: /Ogty
;	COMDAT ??Hconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Hconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator+, COMDAT
; _this$ = ecx

; 124  : 			const_iterator _Tmp = *this;
; 125  : 			return (_Tmp += _Off);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 08	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00009	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000d	89 10		 mov	 DWORD PTR [eax], edx

; 126  : 			}

  0000f	c2 08 00	 ret	 8
??Hconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QBE?AV012@H@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator+
_TEXT	ENDS
PUBLIC	??0?$CSimpleStringT@D$0A@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT
_pchSrc$ = 8						; size = 4
_nLength$ = 12						; size = 4
_pStringMgr$ = 16					; size = 4
??0?$CSimpleStringT@D$0A@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>, COMDAT
; _this$ = ecx

; 245  : 	CSimpleStringT( const XCHAR* pchSrc, int nLength, IAtlStringMgr* pStringMgr )

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 246  : 	{
; 247  : 		ATLASSERT( pStringMgr != NULL );
; 248  : 		
; 249  : 		if(pchSrc == NULL && nLength != 0)

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR _pchSrc$[esp+4]
  00006	85 f6		 test	 esi, esi
  00008	57		 push	 edi
  00009	8b 7c 24 14	 mov	 edi, DWORD PTR _nLength$[esp+8]
  0000d	8b d9		 mov	 ebx, ecx
  0000f	75 0e		 jne	 SHORT $L152653
  00011	85 ff		 test	 edi, edi
  00013	74 0a		 je	 SHORT $L152653

; 258  : 		SetLength( nLength );

$L153562:
  00015	68 57 00 07 80	 push	 -2147024809		; 80070057H
  0001a	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L153569:
$L152653:

; 250  : 			AtlThrow(E_INVALIDARG);
; 251  : 
; 252  : 		CStringData* pData = pStringMgr->Allocate( nLength, sizeof( XCHAR ) );

  0001f	8b 4c 24 18	 mov	 ecx, DWORD PTR _pStringMgr$[esp+8]
  00023	8b 01		 mov	 eax, DWORD PTR [ecx]
  00025	6a 01		 push	 1
  00027	57		 push	 edi
  00028	ff 10		 call	 DWORD PTR [eax]

; 253  : 		if( pData == NULL )

  0002a	85 c0		 test	 eax, eax
  0002c	75 05		 jne	 SHORT $L152657

; 254  : 		{
; 255  : 			ThrowMemoryException();

  0002e	e8 00 00 00 00	 call	 ?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<char,0>::ThrowMemoryException
$L153570:
$L152657:

; 256  : 		}
; 257  : 		Attach( pData );

  00033	83 c0 10	 add	 eax, 16			; 00000010H

; 258  : 		SetLength( nLength );

  00036	85 ff		 test	 edi, edi
  00038	89 03		 mov	 DWORD PTR [ebx], eax
  0003a	7c d9		 jl	 SHORT $L153562
  0003c	3b 78 f8	 cmp	 edi, DWORD PTR [eax-8]
  0003f	7f d4		 jg	 SHORT $L153562
  00041	89 78 f4	 mov	 DWORD PTR [eax-12], edi
  00044	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00046	c6 04 0f 00	 mov	 BYTE PTR [edi+ecx], 0

; 259  : 		CopyChars( m_pszData, pchSrc, nLength );

  0004a	8b cf		 mov	 ecx, edi
  0004c	8b 3b		 mov	 edi, DWORD PTR [ebx]
  0004e	8b d1		 mov	 edx, ecx
  00050	c1 e9 02	 shr	 ecx, 2
  00053	f3 a5		 rep movsd
  00055	8b ca		 mov	 ecx, edx
  00057	83 e1 03	 and	 ecx, 3
  0005a	f3 a4		 rep movsb
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi

; 260  : 	}

  0005e	8b c3		 mov	 eax, ebx
  00060	5b		 pop	 ebx
  00061	c2 0c 00	 ret	 12			; 0000000cH
$L153568:
??0?$CSimpleStringT@D$0A@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z ENDP ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>
_TEXT	ENDS
PUBLIC	?GetLength@?$CSimpleStringT@D$0A@@ATL@@QBEHXZ	; ATL::CSimpleStringT<char,0>::GetLength
; Function compile flags: /Ogty
;	COMDAT ?GetLength@?$CSimpleStringT@D$0A@@ATL@@QBEHXZ
_TEXT	SEGMENT
?GetLength@?$CSimpleStringT@D$0A@@ATL@@QBEHXZ PROC NEAR	; ATL::CSimpleStringT<char,0>::GetLength, COMDAT
; _this$ = ecx

; 501  : 		return( GetData()->nDataLength );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 f4	 mov	 eax, DWORD PTR [eax-12]

; 502  : 	}

  00005	c3		 ret	 0
?GetLength@?$CSimpleStringT@D$0A@@ATL@@QBEHXZ ENDP	; ATL::CSimpleStringT<char,0>::GetLength
_TEXT	ENDS
PUBLIC	??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>
; Function compile flags: /Ogty
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT
_pStringMgr$ = 8					; size = 4
??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>, COMDAT
; _this$ = ecx

; 210  : 	explicit CSimpleStringT( IAtlStringMgr* pStringMgr ) throw()

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 211  : 	{
; 212  : 		ATLASSERT( pStringMgr != NULL );
; 213  : 		CStringData* pData = pStringMgr->GetNilString();

  00003	8b 4c 24 08	 mov	 ecx, DWORD PTR _pStringMgr$[esp]
  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	ff 50 0c	 call	 DWORD PTR [eax+12]

; 214  : 		Attach( pData );

  0000c	83 c0 10	 add	 eax, 16			; 00000010H
  0000f	89 06		 mov	 DWORD PTR [esi], eax

; 215  : 	}

  00011	8b c6		 mov	 eax, esi
  00013	5e		 pop	 esi
  00014	c2 04 00	 ret	 4
??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ENDP ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>
_TEXT	ENDS
PUBLIC	??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ		; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>
; Function compile flags: /Ogty
;	COMDAT ??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ PROC NEAR		; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>, COMDAT
; _this$ = ecx

; 263  : 		CStringData* pData = GetData();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 e8 10	 sub	 eax, 16			; 00000010H

; 264  : 		pData->Release();

  00005	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00008	83 ca ff	 or	 edx, -1
  0000b	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0000f	4a		 dec	 edx
  00010	85 d2		 test	 edx, edx
  00012	7f 08		 jg	 SHORT $L153596
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	8b 11		 mov	 edx, DWORD PTR [ecx]
  00018	50		 push	 eax
  00019	ff 52 04	 call	 DWORD PTR [edx+4]
$L153596:

; 265  : 	}

  0001c	c3		 ret	 0
??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ ENDP		; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>
_TEXT	ENDS
PUBLIC	?ReleaseBufferSetLength@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z ; ATL::CSimpleStringT<char,0>::ReleaseBufferSetLength
; Function compile flags: /Ogty
;	COMDAT ?ReleaseBufferSetLength@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z
_TEXT	SEGMENT
_nNewLength$ = 8					; size = 4
?ReleaseBufferSetLength@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::ReleaseBufferSetLength, COMDAT
; _this$ = ecx

; 547  : 		ATLASSERT( nNewLength >= 0 );
; 548  : 		SetLength( nNewLength );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _nNewLength$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	7c 13		 jl	 SHORT $L153615
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	3b 42 f8	 cmp	 eax, DWORD PTR [edx-8]
  0000d	7f 0c		 jg	 SHORT $L153615
  0000f	89 42 f4	 mov	 DWORD PTR [edx-12], eax
  00012	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00014	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0

; 549  : 	}

  00018	c2 04 00	 ret	 4
$L153615:
  0001b	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00020	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L153618:
$L153617:
  00025	cc		 int	 3
?ReleaseBufferSetLength@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z ENDP ; ATL::CSimpleStringT<char,0>::ReleaseBufferSetLength
_TEXT	ENDS
PUBLIC	?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<char,0>::PrepareWrite2
; Function compile flags: /Ogty
;	COMDAT ?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_nLength$ = 8						; size = 4
?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::PrepareWrite2, COMDAT
; _this$ = ecx

; 747  : 		CStringData* pOldData = GetData();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 748  : 		if( pOldData->nDataLength > nLength )

  00002	8b 54 24 04	 mov	 edx, DWORD PTR _nLength$[esp-4]
  00006	83 e8 10	 sub	 eax, 16			; 00000010H
  00009	56		 push	 esi
  0000a	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0000d	3b f2		 cmp	 esi, edx
  0000f	7e 02		 jle	 SHORT $L149740

; 749  : 		{
; 750  : 			nLength = pOldData->nDataLength;

  00011	8b d6		 mov	 edx, esi
$L149740:

; 751  : 		}
; 752  : 		if( pOldData->IsShared() )

  00013	83 78 0c 01	 cmp	 DWORD PTR [eax+12], 1
  00017	5e		 pop	 esi
  00018	7e 09		 jle	 SHORT $L149741

; 753  : 		{
; 754  : 			Fork( nLength );

  0001a	89 54 24 04	 mov	 DWORD PTR _nLength$[esp-4], edx
  0001e	e9 00 00 00 00	 jmp	 ?Fork@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<char,0>::Fork
$L149741:

; 755  : 		}
; 756  : 		else if( pOldData->nAllocLength < nLength )

  00023	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00026	3b c2		 cmp	 eax, edx
  00028	7d 1f		 jge	 SHORT $L149743

; 757  : 		{
; 758  : 			// Grow exponentially, until we hit 1K.
; 759  : 			int nNewLength = pOldData->nAllocLength;
; 760  : 			if( nNewLength > 1024 )

  0002a	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  0002f	7e 07		 jle	 SHORT $L149745

; 761  : 			{
; 762  : 				nNewLength += 1024;

  00031	05 00 04 00 00	 add	 eax, 1024		; 00000400H

; 763  : 			}
; 764  : 			else

  00036	eb 02		 jmp	 SHORT $L149746
$L149745:

; 765  : 			{
; 766  : 				nNewLength *= 2;

  00038	03 c0		 add	 eax, eax
$L149746:

; 767  : 			}
; 768  : 			if( nNewLength < nLength )

  0003a	3b c2		 cmp	 eax, edx
  0003c	7d 02		 jge	 SHORT $L149747

; 769  : 			{
; 770  : 				nNewLength = nLength;

  0003e	8b c2		 mov	 eax, edx
$L149747:

; 771  : 			}
; 772  : 			Reallocate( nNewLength );

  00040	89 44 24 04	 mov	 DWORD PTR _nLength$[esp-4], eax
  00044	e9 00 00 00 00	 jmp	 ?Reallocate@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<char,0>::Reallocate
$L149743:

; 773  : 		}
; 774  : 	}

  00049	c2 04 00	 ret	 4
?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ENDP	; ATL::CSimpleStringT<char,0>::PrepareWrite2
_TEXT	ENDS
PUBLIC	?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData
; Function compile flags: /Ogty
;	COMDAT ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::CloneData, COMDAT

; 801  : 	{

  00000	56		 push	 esi

; 802  : 		CStringData* pNewData = NULL;
; 803  : 
; 804  : 		IAtlStringMgr* pNewStringMgr = pData->pStringMgr->Clone();

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _pData$[esp]
  00005	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	ff 50 10	 call	 DWORD PTR [eax+16]

; 805  : 		if( !pData->IsLocked() && (pNewStringMgr == pData->pStringMgr) )

  0000c	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0000f	85 d2		 test	 edx, edx
  00011	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00014	7c 11		 jl	 SHORT $L149751
  00016	3b 06		 cmp	 eax, DWORD PTR [esi]
  00018	75 0d		 jne	 SHORT $L149751

; 806  : 		{
; 807  : 			pNewData = pData;

  0001a	8b c6		 mov	 eax, esi

; 808  : 			pNewData->AddRef();

  0001c	ba 01 00 00 00	 mov	 edx, 1
  00021	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00025	5e		 pop	 esi

; 819  : 		}
; 820  : 
; 821  : 		return( pNewData );
; 822  : 	}

  00026	c3		 ret	 0
$L149751:

; 809  : 		}
; 810  : 		else
; 811  : 		{
; 812  : 			pNewData = pNewStringMgr->Allocate( pData->nDataLength, sizeof( XCHAR ) );

  00027	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0002a	8b 10		 mov	 edx, DWORD PTR [eax]
  0002c	6a 01		 push	 1
  0002e	51		 push	 ecx
  0002f	8b c8		 mov	 ecx, eax
  00031	ff 12		 call	 DWORD PTR [edx]

; 813  : 			if( pNewData == NULL )

  00033	85 c0		 test	 eax, eax
  00035	75 05		 jne	 SHORT $L149754

; 814  : 			{
; 815  : 				ThrowMemoryException();

  00037	e9 00 00 00 00	 jmp	 ?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<char,0>::ThrowMemoryException
$L149754:

; 816  : 			}
; 817  : 			pNewData->nDataLength = pData->nDataLength;

  0003c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003f	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 818  : 			CopyChars( PXSTR( pNewData->data() ), PCXSTR( pData->data() ), pData->nDataLength+1 );  // Copy '\0'

  00042	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00045	41		 inc	 ecx
  00046	8b d1		 mov	 edx, ecx
  00048	57		 push	 edi
  00049	c1 e9 02	 shr	 ecx, 2
  0004c	83 c6 10	 add	 esi, 16			; 00000010H
  0004f	8d 78 10	 lea	 edi, DWORD PTR [eax+16]
  00052	f3 a5		 rep movsd
  00054	8b ca		 mov	 ecx, edx
  00056	83 e1 03	 and	 ecx, 3
  00059	f3 a4		 rep movsb
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi

; 819  : 		}
; 820  : 
; 821  : 		return( pNewData );
; 822  : 	}

  0005d	c3		 ret	 0
?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ENDP ; ATL::CSimpleStringT<char,0>::CloneData
_TEXT	ENDS
PUBLIC	?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ	; ATL::CSimpleStringT<char,0>::Empty
; Function compile flags: /Ogty
;	COMDAT ?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ
_TEXT	SEGMENT
?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ PROC NEAR	; ATL::CSimpleStringT<char,0>::Empty, COMDAT
; _this$ = ecx

; 421  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 422  : 		CStringData* pOldData = GetData();

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 423  : 		IAtlStringMgr* pStringMgr = pOldData->pStringMgr;
; 424  : 		if( pOldData->nDataLength == 0 )

  00005	8b 51 f4	 mov	 edx, DWORD PTR [ecx-12]
  00008	85 d2		 test	 edx, edx
  0000a	8d 41 f0	 lea	 eax, DWORD PTR [ecx-16]
  0000d	57		 push	 edi
  0000e	8b 38		 mov	 edi, DWORD PTR [eax]
  00010	74 4c		 je	 SHORT $L153684
  00012	53		 push	 ebx

; 425  : 		{
; 426  : 			return;
; 427  : 		}
; 428  : 
; 429  : 		if( pOldData->IsLocked() )

  00013	8b 58 0c	 mov	 ebx, DWORD PTR [eax+12]
  00016	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  00019	85 db		 test	 ebx, ebx
  0001b	5b		 pop	 ebx
  0001c	7d 20		 jge	 SHORT $L150462

; 430  : 		{
; 431  : 			// Don't reallocate a locked buffer that's shrinking
; 432  : 			SetLength( 0 );

  0001e	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00021	85 c0		 test	 eax, eax
  00023	7d 0a		 jge	 SHORT $L153670
  00025	68 57 00 07 80	 push	 -2147024809		; 80070057H
  0002a	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L153686:
$L153670:
  0002f	c7 41 f4 00 00
	00 00		 mov	 DWORD PTR [ecx-12], 0
  00036	8b 06		 mov	 eax, DWORD PTR [esi]
  00038	5f		 pop	 edi
  00039	c6 00 00	 mov	 BYTE PTR [eax], 0
  0003c	5e		 pop	 esi

; 439  : 		}
; 440  : 	}

  0003d	c3		 ret	 0
$L150462:

; 433  : 		}
; 434  : 		else
; 435  : 		{
; 436  : 			pOldData->Release();

  0003e	83 c9 ff	 or	 ecx, -1
  00041	f0 0f c1 0a	 lock	  xadd	 DWORD PTR [edx], ecx
  00045	49		 dec	 ecx
  00046	85 c9		 test	 ecx, ecx
  00048	7f 08		 jg	 SHORT $L153676
  0004a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004e	50		 push	 eax
  0004f	ff 52 04	 call	 DWORD PTR [edx+4]
$L153676:

; 437  : 			CStringData* pNewData = pStringMgr->GetNilString();

  00052	8b 07		 mov	 eax, DWORD PTR [edi]
  00054	8b cf		 mov	 ecx, edi
  00056	ff 50 0c	 call	 DWORD PTR [eax+12]

; 438  : 			Attach( pNewData );

  00059	83 c0 10	 add	 eax, 16			; 00000010H
  0005c	89 06		 mov	 DWORD PTR [esi], eax
$L153684:
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi

; 439  : 		}
; 440  : 	}

  00060	c3		 ret	 0
$L153685:
?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ ENDP		; ATL::CSimpleStringT<char,0>::Empty
_TEXT	ENDS
PUBLIC	?Find@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBEHPBDH@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Find
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?Find@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBEHPBDH@Z
_TEXT	SEGMENT
_pszSub$ = 8						; size = 4
_iStart$ = 12						; size = 4
?Find@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBEHPBDH@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Find, COMDAT
; _this$ = ecx

; 1391 : 		// iStart is in XCHARs
; 1392 : 		ATLASSERT( iStart >= 0 );
; 1393 : 		ATLASSERT( AtlIsValidString( pszSub ) );
; 1394 : 
; 1395 : 		if(pszSub == NULL)

  00000	8b 54 24 04	 mov	 edx, DWORD PTR _pszSub$[esp-4]
  00004	85 d2		 test	 edx, edx
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 1396 : 		{
; 1397 : 			return( -1 );

  00009	74 25		 je	 SHORT $L152448

; 1398 : 		}
; 1399 : 		// nLength is in XCHARs
; 1400 : 		int nLength = GetLength();
; 1401 : 		if( iStart < 0 || iStart > nLength )

  0000b	8b 4c 24 0c	 mov	 ecx, DWORD PTR _iStart$[esp]
  0000f	85 c9		 test	 ecx, ecx
  00011	7c 1d		 jl	 SHORT $L152448
  00013	8b 06		 mov	 eax, DWORD PTR [esi]
  00015	3b 48 f4	 cmp	 ecx, DWORD PTR [eax-12]
  00018	7f 16		 jg	 SHORT $L152448

; 1404 : 		}
; 1405 : 
; 1406 : 		// find first matching substring
; 1407 : 		PCXSTR psz = StringTraits::StringFindString( GetString()+iStart, pszSub );

  0001a	52		 push	 edx
  0001b	03 c1		 add	 eax, ecx
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 __mbsstr
  00023	83 c4 08	 add	 esp, 8

; 1408 : 
; 1409 : 		// return -1 for not found, distance from beginning otherwise
; 1410 : 		return( (psz == NULL) ? -1 : int( psz-GetString() ) );

  00026	85 c0		 test	 eax, eax
  00028	74 06		 je	 SHORT $L152448
  0002a	2b 06		 sub	 eax, DWORD PTR [esi]
  0002c	5e		 pop	 esi

; 1411 : 	}

  0002d	c2 08 00	 ret	 8
$L152448:

; 1402 : 		{
; 1403 : 			return( -1 );

  00030	83 c8 ff	 or	 eax, -1
  00033	5e		 pop	 esi

; 1411 : 	}

  00034	c2 08 00	 ret	 8
?Find@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBEHPBDH@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Find
_TEXT	ENDS
PUBLIC	?IsEmpty@?$CSimpleStringT@D$0A@@ATL@@QBE_NXZ	; ATL::CSimpleStringT<char,0>::IsEmpty
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?IsEmpty@?$CSimpleStringT@D$0A@@ATL@@QBE_NXZ
_TEXT	SEGMENT
?IsEmpty@?$CSimpleStringT@D$0A@@ATL@@QBE_NXZ PROC NEAR	; ATL::CSimpleStringT<char,0>::IsEmpty, COMDAT
; _this$ = ecx

; 514  : 		return( GetLength() == 0 );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 50 f4	 mov	 edx, DWORD PTR [eax-12]
  00005	33 c9		 xor	 ecx, ecx
  00007	85 d2		 test	 edx, edx
  00009	0f 94 c1	 sete	 cl
  0000c	8a c1		 mov	 al, cl

; 515  : 	}

  0000e	c3		 ret	 0
?IsEmpty@?$CSimpleStringT@D$0A@@ATL@@QBE_NXZ ENDP	; ATL::CSimpleStringT<char,0>::IsEmpty
_TEXT	ENDS
PUBLIC	??A?$vector@KV?$allocator@K@std@@@std@@QBEABKI@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::operator[]
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??A?$vector@KV?$allocator@K@std@@@std@@QBEABKI@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@KV?$allocator@K@std@@@std@@QBEABKI@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::operator[], COMDAT
; _this$ = ecx

; 550  : 		return (*(begin() + _Pos));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pos$[esp-4]
  00007	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 551  : 		}

  0000a	c2 04 00	 ret	 4
??A?$vector@KV?$allocator@K@std@@@std@@QBEABKI@Z ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::operator[]
_TEXT	ENDS
PUBLIC	??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT
_pStringMgr$ = 8					; size = 4
??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >, COMDAT
; _this$ = ecx

; 800  : 	{ 

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 4c 24 08	 mov	 ecx, DWORD PTR _pStringMgr$[esp]
  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	ff 50 0c	 call	 DWORD PTR [eax+12]
  0000c	83 c0 10	 add	 eax, 16			; 00000010H
  0000f	89 06		 mov	 DWORD PTR [esi], eax

; 801  : 	}

  00011	8b c6		 mov	 eax, esi
  00013	5e		 pop	 esi
  00014	c2 04 00	 ret	 4
??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
_TEXT	ENDS
PUBLIC	??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
; Function compile flags: /Ogty
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT
_pch$ = 8						; size = 4
_nLength$ = 12						; size = 4
_pStringMgr$ = 16					; size = 4
??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >, COMDAT
; _this$ = ecx

; 923  : 	{

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR _pStringMgr$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR _pch$[esp-4]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	8b 4c 24 0c	 mov	 ecx, DWORD PTR _nLength$[esp]
  0000f	50		 push	 eax
  00010	51		 push	 ecx
  00011	52		 push	 edx
  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>

; 924  : 	}

  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
_TEXT	ENDS
PUBLIC	??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
; Function compile flags: /Ogty
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >, COMDAT
; _this$ = ecx

; 796  : 	{

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_strmgr@ATL@@3VCAtlStringMgr@1@A
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_strmgr@ATL@@3VCAtlStringMgr@1@A ; ATL::g_strmgr
  0000d	ff 50 0c	 call	 DWORD PTR [eax+12]
  00010	83 c0 10	 add	 eax, 16			; 00000010H
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 797  : 	}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c3		 ret	 0
??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
_TEXT	ENDS
PUBLIC	??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
; Function compile flags: /Ogty
;	COMDAT ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >, COMDAT
; _this$ = ecx

; 963  : 	}

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 e8 10	 sub	 eax, 16			; 00000010H
  00005	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00008	83 ca ff	 or	 edx, -1
  0000b	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0000f	4a		 dec	 edx
  00010	85 d2		 test	 edx, edx
  00012	7f 08		 jg	 SHORT $L153810
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	8b 11		 mov	 edx, DWORD PTR [ecx]
  00018	50		 push	 eax
  00019	ff 52 04	 call	 DWORD PTR [edx+4]
$L153810:
  0001c	c3		 ret	 0
??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
_TEXT	ENDS
PUBLIC	??0?$CSimpleStringT@D$0A@@ATL@@QAE@ABV01@@Z	; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT
_strSrc$ = 8						; size = 4
??0?$CSimpleStringT@D$0A@@ATL@@QAE@ABV01@@Z PROC NEAR	; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>, COMDAT
; _this$ = ecx

; 218  : 	{
; 219  : 		CStringData* pSrcData = strSrc.GetData();

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _strSrc$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]
  00006	56		 push	 esi
  00007	83 e8 10	 sub	 eax, 16			; 00000010H

; 220  : 		CStringData* pNewData = CloneData( pSrcData );

  0000a	50		 push	 eax
  0000b	8b f1		 mov	 esi, ecx
  0000d	e8 00 00 00 00	 call	 ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData

; 221  : 		Attach( pNewData );

  00012	83 c0 10	 add	 eax, 16			; 00000010H
  00015	89 06		 mov	 DWORD PTR [esi], eax
  00017	83 c4 04	 add	 esp, 4

; 222  : 	}

  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	c2 04 00	 ret	 4
??0?$CSimpleStringT@D$0A@@ATL@@QAE@ABV01@@Z ENDP	; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>
_TEXT	ENDS
PUBLIC	?PrepareWrite@?$CSimpleStringT@D$0A@@ATL@@AAEPADH@Z ; ATL::CSimpleStringT<char,0>::PrepareWrite
; Function compile flags: /Ogty
;	COMDAT ?PrepareWrite@?$CSimpleStringT@D$0A@@ATL@@AAEPADH@Z
_TEXT	SEGMENT
_nLength$ = 8						; size = 4
?PrepareWrite@?$CSimpleStringT@D$0A@@ATL@@AAEPADH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::PrepareWrite, COMDAT
; _this$ = ecx

; 734  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 735  : 		CStringData* pOldData = GetData();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]

; 736  : 		int nShared = 1-pOldData->nRefs;  // nShared < 0 means true, >= 0 means false

  00005	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00008	83 e8 10	 sub	 eax, 16			; 00000010H
  0000b	b9 01 00 00 00	 mov	 ecx, 1
  00010	2b ca		 sub	 ecx, edx

; 737  : 		int nTooShort = pOldData->nAllocLength-nLength;  // nTooShort < 0 means true, >= 0 means false

  00012	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00015	8b 44 24 08	 mov	 eax, DWORD PTR _nLength$[esp]
  00019	2b d0		 sub	 edx, eax

; 738  : 		if( (nShared|nTooShort) < 0 )  // If either sign bit is set (i.e. either is less than zero), we need to copy data

  0001b	0b ca		 or	 ecx, edx
  0001d	7d 08		 jge	 SHORT $L153833

; 739  : 		{
; 740  : 			PrepareWrite2( nLength );

  0001f	50		 push	 eax
  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<char,0>::PrepareWrite2
$L153833:

; 741  : 		}
; 742  : 
; 743  : 		return( m_pszData );

  00027	8b 06		 mov	 eax, DWORD PTR [esi]
  00029	5e		 pop	 esi

; 744  : 	}

  0002a	c2 04 00	 ret	 4
?PrepareWrite@?$CSimpleStringT@D$0A@@ATL@@AAEPADH@Z ENDP ; ATL::CSimpleStringT<char,0>::PrepareWrite
_TEXT	ENDS
PUBLIC	?GetBuffer@?$CSimpleStringT@D$0A@@ATL@@QAEPADH@Z ; ATL::CSimpleStringT<char,0>::GetBuffer
; Function compile flags: /Ogty
;	COMDAT ?GetBuffer@?$CSimpleStringT@D$0A@@ATL@@QAEPADH@Z
_TEXT	SEGMENT
_nMinBufferLength$ = 8					; size = 4
?GetBuffer@?$CSimpleStringT@D$0A@@ATL@@QAEPADH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::GetBuffer, COMDAT
; _this$ = ecx

; 489  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 490  : 		return( PrepareWrite( nMinBufferLength ) );

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00008	83 e8 10	 sub	 eax, 16			; 00000010H
  0000b	b9 01 00 00 00	 mov	 ecx, 1
  00010	2b ca		 sub	 ecx, edx
  00012	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00015	8b 44 24 08	 mov	 eax, DWORD PTR _nMinBufferLength$[esp]
  00019	2b d0		 sub	 edx, eax
  0001b	0b ca		 or	 ecx, edx
  0001d	7d 08		 jge	 SHORT $L153850
  0001f	50		 push	 eax
  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<char,0>::PrepareWrite2
$L153850:
  00027	8b 06		 mov	 eax, DWORD PTR [esi]
  00029	5e		 pop	 esi

; 491  : 	}

  0002a	c2 04 00	 ret	 4
?GetBuffer@?$CSimpleStringT@D$0A@@ATL@@QAEPADH@Z ENDP	; ATL::CSimpleStringT<char,0>::GetBuffer
_TEXT	ENDS
PUBLIC	?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::SetString
; Function compile flags: /Ogty
;	COMDAT ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z
_TEXT	SEGMENT
_pszSrc$ = 8						; size = 4
_nLength$ = 12						; size = 4
?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::SetString, COMDAT
; _this$ = ecx

; 583  : 	{

  00000	53		 push	 ebx

; 584  : 		if( nLength == 0 )

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR _nLength$[esp]
  00005	85 db		 test	 ebx, ebx
  00007	55		 push	 ebp
  00008	8b e9		 mov	 ebp, ecx
  0000a	75 0a		 jne	 SHORT $L149725

; 585  : 		{
; 586  : 			Empty();

  0000c	e8 00 00 00 00	 call	 ?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ ; ATL::CSimpleStringT<char,0>::Empty
  00011	5d		 pop	 ebp
  00012	5b		 pop	 ebx

; 614  : 		}
; 615  : 	}

  00013	c2 08 00	 ret	 8
$L149725:

; 587  : 		}
; 588  : 		else
; 589  : 		{
; 590  : 			// It is possible that pszSrc points to a location inside of our 
; 591  : 			// buffer.  GetBuffer() might change m_pszData if (1) the buffer 
; 592  : 			// is shared or (2) the buffer is too small to hold the new 
; 593  : 			// string.  We detect this aliasing, and modify pszSrc to point
; 594  : 			// into the newly allocated buffer instead.
; 595  : 			
; 596  : 			if(pszSrc == NULL)

  00016	8b 54 24 0c	 mov	 edx, DWORD PTR _pszSrc$[esp+4]
  0001a	85 d2		 test	 edx, edx
  0001c	75 0a		 jne	 SHORT $L149727

; 612  : 			}
; 613  : 			ReleaseBufferSetLength( nLength );

$L153923:
  0001e	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00023	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L153926:
$L149727:

; 597  : 				AtlThrow(E_INVALIDARG);			
; 598  : 				
; 599  : 			UINT nOldLength = GetLength();

  00028	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  0002b	56		 push	 esi

; 600  : 			UINT_PTR nOffset = pszSrc-GetString();

  0002c	8b f2		 mov	 esi, edx
  0002e	2b f0		 sub	 esi, eax

; 601  : 			// If 0 <= nOffset <= nOldLength, then pszSrc points into our 
; 602  : 			// buffer
; 603  : 
; 604  : 			PXSTR pszBuffer = GetBuffer( nLength );

  00030	b9 01 00 00 00	 mov	 ecx, 1
  00035	2b 48 fc	 sub	 ecx, DWORD PTR [eax-4]
  00038	57		 push	 edi
  00039	8b 78 f4	 mov	 edi, DWORD PTR [eax-12]
  0003c	8b 40 f8	 mov	 eax, DWORD PTR [eax-8]
  0003f	2b c3		 sub	 eax, ebx
  00041	0b c8		 or	 ecx, eax
  00043	7d 0c		 jge	 SHORT $L153890
  00045	53		 push	 ebx
  00046	8b cd		 mov	 ecx, ebp
  00048	e8 00 00 00 00	 call	 ?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<char,0>::PrepareWrite2
  0004d	8b 54 24 14	 mov	 edx, DWORD PTR _pszSrc$[esp+12]
$L153890:

; 605  : 			if( nOffset <= nOldLength )

  00051	3b f7		 cmp	 esi, edi
  00053	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  00056	77 10		 ja	 SHORT $L149732

; 606  : 			{
; 607  : 				CopyCharsOverlapped( pszBuffer, pszBuffer+nOffset, nLength );

  00058	53		 push	 ebx
  00059	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  0005c	51		 push	 ecx
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 _memmove
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH

; 608  : 			}
; 609  : 			else

  00066	eb 14		 jmp	 SHORT $L153896
$L149732:

; 610  : 			{
; 611  : 				CopyChars( pszBuffer, pszSrc, nLength );

  00068	8b cb		 mov	 ecx, ebx
  0006a	8b f2		 mov	 esi, edx
  0006c	8b d1		 mov	 edx, ecx
  0006e	c1 e9 02	 shr	 ecx, 2
  00071	8b f8		 mov	 edi, eax
  00073	f3 a5		 rep movsd
  00075	8b ca		 mov	 ecx, edx
  00077	83 e1 03	 and	 ecx, 3
  0007a	f3 a4		 rep movsb
$L153896:

; 612  : 			}
; 613  : 			ReleaseBufferSetLength( nLength );

  0007c	85 db		 test	 ebx, ebx
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	7c 9c		 jl	 SHORT $L153923
  00082	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  00085	3b 58 f8	 cmp	 ebx, DWORD PTR [eax-8]
  00088	7f 94		 jg	 SHORT $L153923
  0008a	89 58 f4	 mov	 DWORD PTR [eax-12], ebx
  0008d	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  00090	5d		 pop	 ebp
  00091	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0
  00095	5b		 pop	 ebx

; 614  : 		}
; 615  : 	}

  00096	c2 08 00	 ret	 8
$L153925:
?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ENDP	; ATL::CSimpleStringT<char,0>::SetString
_TEXT	ENDS
PUBLIC	?TrimLeft@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV12@PBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::TrimLeft
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?TrimLeft@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_pszTargets$ = 8					; size = 4
?TrimLeft@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV12@PBD@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::TrimLeft, COMDAT
; _this$ = ecx

; 1651 : 	{

  00000	53		 push	 ebx

; 1652 : 		// if we're not trimming anything, we're not doing any work
; 1653 : 		if( (pszTargets == NULL) || (*pszTargets == 0) )

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR _pszTargets$[esp]
  00005	85 db		 test	 ebx, ebx
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	0f 84 87 00 00
	00		 je	 $L152471
  00010	80 3b 00	 cmp	 BYTE PTR [ebx], 0
  00013	0f 84 7e 00 00
	00		 je	 $L152471
  00019	56		 push	 esi

; 1656 : 		}
; 1657 : 
; 1658 : 		PCXSTR psz = GetString();

  0001a	8b 37		 mov	 esi, DWORD PTR [edi]

; 1659 : 		while( (*psz != 0) && (StringTraits::StringFindChar( pszTargets, *psz ) != NULL) )

  0001c	8a 06		 mov	 al, BYTE PTR [esi]
  0001e	84 c0		 test	 al, al
  00020	74 22		 je	 SHORT $L152475
$L152474:
  00022	0f b6 c0	 movzx	 eax, al
  00025	50		 push	 eax
  00026	53		 push	 ebx
  00027	e8 00 00 00 00	 call	 __mbschr
  0002c	83 c4 08	 add	 esp, 8
  0002f	85 c0		 test	 eax, eax
  00031	74 11		 je	 SHORT $L152475

; 1660 : 		{
; 1661 : 			psz = StringTraits::CharNext( psz );

  00033	56		 push	 esi
  00034	e8 00 00 00 00	 call	 __mbsinc
  00039	8b f0		 mov	 esi, eax
  0003b	8a 06		 mov	 al, BYTE PTR [esi]
  0003d	83 c4 04	 add	 esp, 4
  00040	84 c0		 test	 al, al
  00042	75 de		 jne	 SHORT $L152474
$L152475:

; 1662 : 		}
; 1663 : 
; 1664 : 		if( psz != GetString() )

  00044	8b 07		 mov	 eax, DWORD PTR [edi]
  00046	3b f0		 cmp	 esi, eax
  00048	74 3b		 je	 SHORT $L153983

; 1665 : 		{
; 1666 : 			// fix up data and length
; 1667 : 			int iFirst = int( psz-GetString() );

  0004a	2b f0		 sub	 esi, eax

; 1668 : 			PXSTR pszBuffer = GetBuffer( GetLength() );

  0004c	8b 40 f4	 mov	 eax, DWORD PTR [eax-12]
  0004f	50		 push	 eax
  00050	8b cf		 mov	 ecx, edi
  00052	8b de		 mov	 ebx, esi
  00054	e8 00 00 00 00	 call	 ?GetBuffer@?$CSimpleStringT@D$0A@@ATL@@QAEPADH@Z ; ATL::CSimpleStringT<char,0>::GetBuffer

; 1669 : 			psz = pszBuffer+iFirst;
; 1670 : 			int nDataLength = GetLength()-iFirst;

  00059	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0005b	8b 71 f4	 mov	 esi, DWORD PTR [ecx-12]
  0005e	2b f3		 sub	 esi, ebx

; 1671 : 			memmove( pszBuffer, psz, (nDataLength+1)*sizeof( XCHAR ) );

  00060	8d 56 01	 lea	 edx, DWORD PTR [esi+1]
  00063	52		 push	 edx
  00064	8d 0c 18	 lea	 ecx, DWORD PTR [eax+ebx]
  00067	51		 push	 ecx
  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 _memmove
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1672 : 			ReleaseBufferSetLength( nDataLength );

  00071	85 f6		 test	 esi, esi
  00073	7c 18		 jl	 SHORT $L153992
  00075	8b 07		 mov	 eax, DWORD PTR [edi]
  00077	3b 70 f8	 cmp	 esi, DWORD PTR [eax-8]
  0007a	7f 11		 jg	 SHORT $L153992
  0007c	89 70 f4	 mov	 DWORD PTR [eax-12], esi
  0007f	8b 17		 mov	 edx, DWORD PTR [edi]
  00081	c6 04 16 00	 mov	 BYTE PTR [esi+edx], 0
$L153983:
  00085	5e		 pop	 esi

; 1673 : 		}
; 1674 : 
; 1675 : 		return( *this );

  00086	8b c7		 mov	 eax, edi
  00088	5f		 pop	 edi
  00089	5b		 pop	 ebx

; 1676 : 	}

  0008a	c2 04 00	 ret	 4

; 1672 : 			ReleaseBufferSetLength( nDataLength );

$L153992:
  0008d	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00092	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L153998:
$L152471:

; 1654 : 		{
; 1655 : 			return( *this );

  00097	8b c7		 mov	 eax, edi
  00099	5f		 pop	 edi
  0009a	5b		 pop	 ebx

; 1676 : 	}

  0009b	c2 04 00	 ret	 4
$L153997:
?TrimLeft@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV12@PBD@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::TrimLeft
_TEXT	ENDS
PUBLIC	?FormatV@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEXPBDPAD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::FormatV
; Function compile flags: /Ogty
;	COMDAT ?FormatV@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEXPBDPAD@Z
_TEXT	SEGMENT
_pszFormat$ = 8						; size = 4
_args$ = 12						; size = 4
?FormatV@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEXPBDPAD@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::FormatV, COMDAT
; _this$ = ecx

; 1855 : 	{

  00000	53		 push	 ebx

; 1856 : 		ATLASSERT( AtlIsValidString( pszFormat ) );
; 1857 : 		if(pszFormat == NULL)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR _pszFormat$[esp]
  00005	85 db		 test	 ebx, ebx
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	75 0a		 jne	 SHORT $L152608

; 1858 : 			AtlThrow(E_INVALIDARG);

  0000c	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00011	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L154062:
$L152608:
  00016	55		 push	 ebp

; 1859 : 
; 1860 : 		int nLength = StringTraits::GetFormattedLength( pszFormat, args );

  00017	8b 6c 24 14	 mov	 ebp, DWORD PTR _args$[esp+8]
  0001b	56		 push	 esi
  0001c	55		 push	 ebp
  0001d	53		 push	 ebx
  0001e	e8 00 00 00 00	 call	 __vscprintf
  00023	8b f0		 mov	 esi, eax

; 1861 : 		PXSTR pszBuffer = GetBuffer( nLength );

  00025	8b 07		 mov	 eax, DWORD PTR [edi]
  00027	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0002a	83 e8 10	 sub	 eax, 16			; 00000010H
  0002d	b9 01 00 00 00	 mov	 ecx, 1
  00032	2b ca		 sub	 ecx, edx
  00034	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00037	2b d6		 sub	 edx, esi
  00039	83 c4 08	 add	 esp, 8
  0003c	0b ca		 or	 ecx, edx
  0003e	7d 08		 jge	 SHORT $L154025
  00040	56		 push	 esi
  00041	8b cf		 mov	 ecx, edi
  00043	e8 00 00 00 00	 call	 ?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<char,0>::PrepareWrite2
$L154025:

; 1862 : 		StringTraits::Format( pszBuffer, pszFormat, args );

  00048	8b 07		 mov	 eax, DWORD PTR [edi]
  0004a	55		 push	 ebp
  0004b	53		 push	 ebx
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _vsprintf
  00052	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1863 : 		ReleaseBufferSetLength( nLength );

  00055	85 f6		 test	 esi, esi
  00057	7c 17		 jl	 SHORT $L154058
  00059	8b 07		 mov	 eax, DWORD PTR [edi]
  0005b	3b 70 f8	 cmp	 esi, DWORD PTR [eax-8]
  0005e	7f 10		 jg	 SHORT $L154058
  00060	89 70 f4	 mov	 DWORD PTR [eax-12], esi
  00063	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00065	c6 04 0e 00	 mov	 BYTE PTR [esi+ecx], 0
  00069	5e		 pop	 esi
  0006a	5d		 pop	 ebp
  0006b	5f		 pop	 edi
  0006c	5b		 pop	 ebx

; 1864 : 	}

  0006d	c2 08 00	 ret	 8
$L154058:
  00070	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00075	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L154063:
$L154061:
  0007a	cc		 int	 3
?FormatV@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEXPBDPAD@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::FormatV
_TEXT	ENDS
PUBLIC	?Truncate@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z	; ATL::CSimpleStringT<char,0>::Truncate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?Truncate@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z
_TEXT	SEGMENT
_nNewLength$ = 8					; size = 4
?Truncate@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z PROC NEAR	; ATL::CSimpleStringT<char,0>::Truncate, COMDAT
; _this$ = ecx

; 551  : 	{

  00000	56		 push	 esi

; 552  : 		ATLASSERT( nNewLength <= GetLength() );
; 553  : 		GetBuffer( nNewLength );

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _nNewLength$[esp]
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	8b 07		 mov	 eax, DWORD PTR [edi]
  0000a	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0000d	83 e8 10	 sub	 eax, 16			; 00000010H
  00010	b9 01 00 00 00	 mov	 ecx, 1
  00015	2b ca		 sub	 ecx, edx
  00017	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0001a	2b d6		 sub	 edx, esi
  0001c	0b ca		 or	 ecx, edx
  0001e	7d 08		 jge	 SHORT $L154087
  00020	56		 push	 esi
  00021	8b cf		 mov	 ecx, edi
  00023	e8 00 00 00 00	 call	 ?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<char,0>::PrepareWrite2
$L154087:

; 554  : 		ReleaseBufferSetLength( nNewLength );

  00028	85 f6		 test	 esi, esi
  0002a	7c 15		 jl	 SHORT $L154117
  0002c	8b 07		 mov	 eax, DWORD PTR [edi]
  0002e	3b 70 f8	 cmp	 esi, DWORD PTR [eax-8]
  00031	7f 0e		 jg	 SHORT $L154117
  00033	89 70 f4	 mov	 DWORD PTR [eax-12], esi
  00036	8b 07		 mov	 eax, DWORD PTR [edi]
  00038	5f		 pop	 edi
  00039	c6 04 06 00	 mov	 BYTE PTR [esi+eax], 0
  0003d	5e		 pop	 esi

; 555  : 	}

  0003e	c2 04 00	 ret	 4
$L154117:
  00041	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00046	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L154120:
$L154119:
  0004b	cc		 int	 3
?Truncate@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z ENDP	; ATL::CSimpleStringT<char,0>::Truncate
_TEXT	ENDS
PUBLIC	?Concatenate@?$CSimpleStringT@D$0A@@ATL@@KAXAAV12@PBDH1H@Z ; ATL::CSimpleStringT<char,0>::Concatenate
; Function compile flags: /Ogty
;	COMDAT ?Concatenate@?$CSimpleStringT@D$0A@@ATL@@KAXAAV12@PBDH1H@Z
_TEXT	SEGMENT
_strResult$ = 8						; size = 4
_psz1$ = 12						; size = 4
_nLength1$ = 16						; size = 4
_psz2$ = 20						; size = 4
_nLength2$ = 24						; size = 4
?Concatenate@?$CSimpleStringT@D$0A@@ATL@@KAXAAV12@PBDH1H@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::Concatenate, COMDAT

; 697  : 		int nNewLength = nLength1+nLength2;

  00000	8b 44 24 14	 mov	 eax, DWORD PTR _nLength2$[esp-4]
  00004	53		 push	 ebx
  00005	55		 push	 ebp

; 698  : 		PXSTR pszBuffer = strResult.GetBuffer( nNewLength );

  00006	8b 6c 24 0c	 mov	 ebp, DWORD PTR _strResult$[esp+4]
  0000a	56		 push	 esi
  0000b	8b 74 24 18	 mov	 esi, DWORD PTR _nLength1$[esp+8]
  0000f	8d 1c 06	 lea	 ebx, DWORD PTR [esi+eax]
  00012	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  00015	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00018	83 e8 10	 sub	 eax, 16			; 00000010H
  0001b	b9 01 00 00 00	 mov	 ecx, 1
  00020	2b ca		 sub	 ecx, edx
  00022	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00025	2b d3		 sub	 edx, ebx
  00027	0b ca		 or	 ecx, edx
  00029	7d 08		 jge	 SHORT $L154144
  0002b	53		 push	 ebx
  0002c	8b cd		 mov	 ecx, ebp
  0002e	e8 00 00 00 00	 call	 ?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<char,0>::PrepareWrite2
$L154144:
  00033	8b 45 00	 mov	 eax, DWORD PTR [ebp]

; 699  : 		CopyChars( pszBuffer, psz1, nLength1 );

  00036	8b ce		 mov	 ecx, esi
  00038	8b 74 24 14	 mov	 esi, DWORD PTR _psz1$[esp+8]
  0003c	8b d1		 mov	 edx, ecx
  0003e	c1 e9 02	 shr	 ecx, 2
  00041	57		 push	 edi
  00042	8b f8		 mov	 edi, eax
  00044	f3 a5		 rep movsd
  00046	8b ca		 mov	 ecx, edx

; 700  : 		CopyChars( pszBuffer+nLength1, psz2, nLength2 );

  00048	8b 54 24 1c	 mov	 edx, DWORD PTR _nLength1$[esp+12]
  0004c	83 e1 03	 and	 ecx, 3
  0004f	f3 a4		 rep movsb
  00051	8b 4c 24 24	 mov	 ecx, DWORD PTR _nLength2$[esp+12]
  00055	8b 74 24 20	 mov	 esi, DWORD PTR _psz2$[esp+12]
  00059	8d 3c 10	 lea	 edi, DWORD PTR [eax+edx]
  0005c	8b c1		 mov	 eax, ecx
  0005e	c1 e9 02	 shr	 ecx, 2
  00061	f3 a5		 rep movsd
  00063	8b c8		 mov	 ecx, eax
  00065	83 e1 03	 and	 ecx, 3

; 701  : 		strResult.ReleaseBufferSetLength( nNewLength );

  00068	85 db		 test	 ebx, ebx
  0006a	f3 a4		 rep movsb
  0006c	5f		 pop	 edi
  0006d	7c 16		 jl	 SHORT $L154180
  0006f	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  00072	3b 58 f8	 cmp	 ebx, DWORD PTR [eax-8]
  00075	7f 0e		 jg	 SHORT $L154180
  00077	89 58 f4	 mov	 DWORD PTR [eax-12], ebx
  0007a	8b 4d 00	 mov	 ecx, DWORD PTR [ebp]
  0007d	5e		 pop	 esi
  0007e	5d		 pop	 ebp
  0007f	c6 04 0b 00	 mov	 BYTE PTR [ebx+ecx], 0
  00083	5b		 pop	 ebx

; 702  : 	}

  00084	c3		 ret	 0
$L154180:
  00085	68 57 00 07 80	 push	 -2147024809		; 80070057H
  0008a	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L154183:
$L154182:
  0008f	cc		 int	 3
?Concatenate@?$CSimpleStringT@D$0A@@ATL@@KAXAAV12@PBDH1H@Z ENDP ; ATL::CSimpleStringT<char,0>::Concatenate
_TEXT	ENDS
PUBLIC	?Append@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z	; ATL::CSimpleStringT<char,0>::Append
; Function compile flags: /Ogty
;	COMDAT ?Append@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z
_TEXT	SEGMENT
_nOldLength$ = -4					; size = 4
_pszSrc$ = 8						; size = 4
_nLength$ = 12						; size = 4
?Append@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::Append, COMDAT
; _this$ = ecx

; 387  : 	{

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	55		 push	 ebp
  00003	8b e9		 mov	 ebp, ecx

; 388  : 		// See comment in SetString() about why we do this
; 389  : 		UINT_PTR nOffset = pszSrc-GetString();

  00005	8b 45 00	 mov	 eax, DWORD PTR [ebp]

; 390  : 
; 391  : 		UINT nOldLength = GetLength();
; 392  : 		int nNewLength = nOldLength+nLength;

  00008	8b 4c 24 14	 mov	 ecx, DWORD PTR _nLength$[esp+8]
  0000c	56		 push	 esi
  0000d	8b 70 f4	 mov	 esi, DWORD PTR [eax-12]
  00010	57		 push	 edi
  00011	8b 7c 24 18	 mov	 edi, DWORD PTR _pszSrc$[esp+16]
  00015	2b f8		 sub	 edi, eax
  00017	8d 1c 0e	 lea	 ebx, DWORD PTR [esi+ecx]

; 393  : 		PXSTR pszBuffer = GetBuffer( nNewLength );

  0001a	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0001d	8b 40 f8	 mov	 eax, DWORD PTR [eax-8]
  00020	ba 01 00 00 00	 mov	 edx, 1
  00025	2b d1		 sub	 edx, ecx
  00027	2b c3		 sub	 eax, ebx
  00029	0b d0		 or	 edx, eax
  0002b	89 74 24 10	 mov	 DWORD PTR _nOldLength$[esp+20], esi
  0002f	7d 08		 jge	 SHORT $L154220
  00031	53		 push	 ebx
  00032	8b cd		 mov	 ecx, ebp
  00034	e8 00 00 00 00	 call	 ?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<char,0>::PrepareWrite2
$L154220:

; 394  : 		if( nOffset <= nOldLength )

  00039	3b fe		 cmp	 edi, esi
  0003b	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  0003e	77 07		 ja	 SHORT $L152670

; 395  : 		{
; 396  : 			pszSrc = pszBuffer+nOffset;

  00040	8d 0c 38	 lea	 ecx, DWORD PTR [eax+edi]
  00043	89 4c 24 18	 mov	 DWORD PTR _pszSrc$[esp+16], ecx
$L152670:

; 397  : 			// No need to call CopyCharsOverlapped, since the destination is
; 398  : 			// beyond the end of the original buffer
; 399  : 		}
; 400  : 		CopyChars( pszBuffer+nOldLength, pszSrc, nLength );

  00047	8b 54 24 10	 mov	 edx, DWORD PTR _nOldLength$[esp+20]
  0004b	8b 4c 24 1c	 mov	 ecx, DWORD PTR _nLength$[esp+16]
  0004f	8b 74 24 18	 mov	 esi, DWORD PTR _pszSrc$[esp+16]
  00053	8d 3c 10	 lea	 edi, DWORD PTR [eax+edx]
  00056	8b c1		 mov	 eax, ecx
  00058	c1 e9 02	 shr	 ecx, 2
  0005b	f3 a5		 rep movsd
  0005d	8b c8		 mov	 ecx, eax
  0005f	83 e1 03	 and	 ecx, 3

; 401  : 		ReleaseBufferSetLength( nNewLength );

  00062	85 db		 test	 ebx, ebx
  00064	f3 a4		 rep movsb
  00066	7c 1a		 jl	 SHORT $L154253
  00068	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  0006b	3b 58 f8	 cmp	 ebx, DWORD PTR [eax-8]
  0006e	7f 12		 jg	 SHORT $L154253
  00070	5f		 pop	 edi
  00071	89 58 f4	 mov	 DWORD PTR [eax-12], ebx
  00074	8b 4d 00	 mov	 ecx, DWORD PTR [ebp]
  00077	5e		 pop	 esi
  00078	5d		 pop	 ebp
  00079	c6 04 0b 00	 mov	 BYTE PTR [ebx+ecx], 0
  0007d	5b		 pop	 ebx

; 402  : 	}

  0007e	59		 pop	 ecx
  0007f	c2 08 00	 ret	 8

; 401  : 		ReleaseBufferSetLength( nNewLength );

$L154253:
  00082	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00087	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L154256:
$L154255:
  0008c	cc		 int	 3
?Append@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ENDP	; ATL::CSimpleStringT<char,0>::Append
_TEXT	ENDS
PUBLIC	??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@ABV01@@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT
_strSrc$ = 8						; size = 4
??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@ABV01@@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >, COMDAT
; _this$ = ecx

; 814  : 	{

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _strSrc$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]
  00006	56		 push	 esi
  00007	83 e8 10	 sub	 eax, 16			; 00000010H
  0000a	50		 push	 eax
  0000b	8b f1		 mov	 esi, ecx
  0000d	e8 00 00 00 00	 call	 ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData
  00012	83 c0 10	 add	 eax, 16			; 00000010H
  00015	89 06		 mov	 DWORD PTR [esi], eax
  00017	83 c4 04	 add	 esp, 4

; 815  : 	}

  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	c2 04 00	 ret	 4
??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@ABV01@@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
_TEXT	ENDS
PUBLIC	?LoadStringA@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEHPAUHINSTANCE__@@I@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::LoadStringA
; Function compile flags: /Ogty
;	COMDAT ?LoadStringA@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEHPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT
_hInstance$ = 8						; size = 4
_nID$ = 12						; size = 4
?LoadStringA@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEHPAUHINSTANCE__@@I@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::LoadStringA, COMDAT
; _this$ = ecx

; 1981 : 	{

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 1982 : 		const ATLSTRINGRESOURCEIMAGE* pImage = AtlGetStringResourceImage( hInstance, nID );

  00002	8b 74 24 10	 mov	 esi, DWORD PTR _nID$[esp+4]
  00006	8b c6		 mov	 eax, esi
  00008	c1 e8 04	 shr	 eax, 4
  0000b	57		 push	 edi
  0000c	8b 7c 24 10	 mov	 edi, DWORD PTR _hInstance$[esp+8]
  00010	40		 inc	 eax
  00011	8b d9		 mov	 ebx, ecx
  00013	0f b7 c8	 movzx	 ecx, ax
  00016	6a 06		 push	 6
  00018	51		 push	 ecx
  00019	57		 push	 edi
  0001a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FindResourceA@12
  00020	85 c0		 test	 eax, eax
  00022	74 11		 je	 SHORT $L154361
  00024	56		 push	 esi
  00025	50		 push	 eax
  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 ?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z ; ATL::_AtlGetStringResourceImage
  0002c	8b f8		 mov	 edi, eax
  0002e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1983 : 		if( pImage == NULL )

  00031	85 ff		 test	 edi, edi
  00033	75 08		 jne	 SHORT $L148787
$L154361:
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi

; 1984 : 		{
; 1985 : 			return( FALSE );

  00037	33 c0		 xor	 eax, eax
  00039	5b		 pop	 ebx

; 1994 : 	}

  0003a	c2 08 00	 ret	 8
$L148787:

; 1986 : 		}
; 1987 : 
; 1988 : 		int nLength = StringTraits::GetBaseTypeLength( pImage->achString, pImage->nLength );

  0003d	0f b7 07	 movzx	 eax, WORD PTR [edi]
  00040	55		 push	 ebp
  00041	6a 00		 push	 0
  00043	6a 00		 push	 0
  00045	6a 00		 push	 0
  00047	6a 00		 push	 0
  00049	50		 push	 eax
  0004a	8d 6f 02	 lea	 ebp, DWORD PTR [edi+2]
  0004d	55		 push	 ebp
  0004e	6a 00		 push	 0
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  00056	50		 push	 eax
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32
  0005d	8b f0		 mov	 esi, eax

; 1989 : 		PXSTR pszBuffer = GetBuffer( nLength );

  0005f	8b 03		 mov	 eax, DWORD PTR [ebx]
  00061	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  00064	83 e8 10	 sub	 eax, 16			; 00000010H
  00067	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0006a	ba 01 00 00 00	 mov	 edx, 1
  0006f	2b d1		 sub	 edx, ecx
  00071	2b c6		 sub	 eax, esi
  00073	0b d0		 or	 edx, eax
  00075	7d 08		 jge	 SHORT $L154320
  00077	56		 push	 esi
  00078	8b cb		 mov	 ecx, ebx
  0007a	e8 00 00 00 00	 call	 ?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<char,0>::PrepareWrite2
$L154320:
  0007f	8b 03		 mov	 eax, DWORD PTR [ebx]

; 1990 : 		StringTraits::ConvertToBaseType( pszBuffer, nLength, pImage->achString, pImage->nLength );

  00081	0f b7 0f	 movzx	 ecx, WORD PTR [edi]
  00084	6a 00		 push	 0
  00086	6a 00		 push	 0
  00088	56		 push	 esi
  00089	50		 push	 eax
  0008a	51		 push	 ecx
  0008b	55		 push	 ebp
  0008c	6a 00		 push	 0
  0008e	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  00094	50		 push	 eax
  00095	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WideCharToMultiByte@32

; 1991 : 		ReleaseBufferSetLength( nLength );

  0009b	85 f6		 test	 esi, esi
  0009d	5d		 pop	 ebp
  0009e	7c 1b		 jl	 SHORT $L154359
  000a0	8b 03		 mov	 eax, DWORD PTR [ebx]
  000a2	3b 70 f8	 cmp	 esi, DWORD PTR [eax-8]
  000a5	7f 14		 jg	 SHORT $L154359
  000a7	89 70 f4	 mov	 DWORD PTR [eax-12], esi
  000aa	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  000ac	5f		 pop	 edi
  000ad	c6 04 0e 00	 mov	 BYTE PTR [esi+ecx], 0
  000b1	5e		 pop	 esi

; 1992 : 
; 1993 : 		return( TRUE );

  000b2	b8 01 00 00 00	 mov	 eax, 1
  000b7	5b		 pop	 ebx

; 1994 : 	}

  000b8	c2 08 00	 ret	 8
$L154359:
  000bb	68 57 00 07 80	 push	 -2147024809		; 80070057H
  000c0	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L154363:
$L154362:
  000c5	cc		 int	 3
?LoadStringA@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEHPAUHINSTANCE__@@I@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::LoadStringA
_TEXT	ENDS
PUBLIC	??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CSimpleStringT<char,0>::operator=
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_strSrc$ = 8						; size = 4
??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::operator=, COMDAT
; _this$ = ecx

; 274  : 		CStringData* pSrcData = strSrc.GetData();

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _strSrc$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	8b 08		 mov	 ecx, DWORD PTR [eax]

; 275  : 		CStringData* pOldData = GetData();

  0000a	8b 37		 mov	 esi, DWORD PTR [edi]
  0000c	8d 41 f0	 lea	 eax, DWORD PTR [ecx-16]
  0000f	83 ee 10	 sub	 esi, 16			; 00000010H

; 276  : 		if( pSrcData != pOldData)

  00012	3b c6		 cmp	 eax, esi
  00014	74 4d		 je	 SHORT $L154401

; 277  : 		{
; 278  : 			if( pOldData->IsLocked() || pSrcData->pStringMgr != pOldData->pStringMgr )

  00016	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00019	85 d2		 test	 edx, edx
  0001b	53		 push	 ebx
  0001c	8d 5e 0c	 lea	 ebx, DWORD PTR [esi+12]
  0001f	55		 push	 ebp
  00020	7c 33		 jl	 SHORT $L148817
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	3b 16		 cmp	 edx, DWORD PTR [esi]
  00026	75 2d		 jne	 SHORT $L148817

; 281  : 			}
; 282  : 			else
; 283  : 			{
; 284  : 				CStringData* pNewData = CloneData( pSrcData );

  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData
  0002e	8b e8		 mov	 ebp, eax
  00030	83 c4 04	 add	 esp, 4

; 285  : 				pOldData->Release();

  00033	83 c8 ff	 or	 eax, -1
  00036	f0 0f c1 03	 lock	  xadd	 DWORD PTR [ebx], eax
  0003a	48		 dec	 eax
  0003b	85 c0		 test	 eax, eax
  0003d	7f 08		 jg	 SHORT $L154392
  0003f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00041	8b 11		 mov	 edx, DWORD PTR [ecx]
  00043	56		 push	 esi
  00044	ff 52 04	 call	 DWORD PTR [edx+4]
$L154392:

; 286  : 				Attach( pNewData );

  00047	83 c5 10	 add	 ebp, 16			; 00000010H
  0004a	89 2f		 mov	 DWORD PTR [edi], ebp
  0004c	5d		 pop	 ebp
  0004d	5b		 pop	 ebx

; 287  : 			}
; 288  : 		}
; 289  : 
; 290  : 		return( *this );

  0004e	8b c7		 mov	 eax, edi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi

; 291  : 	}

  00052	c2 04 00	 ret	 4
$L148817:

; 279  : 			{
; 280  : 				SetString( strSrc.GetString(), strSrc.GetLength() );

  00055	8b 41 f4	 mov	 eax, DWORD PTR [ecx-12]
  00058	50		 push	 eax
  00059	51		 push	 ecx
  0005a	8b cf		 mov	 ecx, edi
  0005c	e8 00 00 00 00	 call	 ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::SetString
  00061	5d		 pop	 ebp
  00062	5b		 pop	 ebx
$L154401:

; 287  : 			}
; 288  : 		}
; 289  : 
; 290  : 		return( *this );

  00063	8b c7		 mov	 eax, edi
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi

; 291  : 	}

  00067	c2 04 00	 ret	 4
??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z ENDP	; ATL::CSimpleStringT<char,0>::operator=
_TEXT	ENDS
PUBLIC	?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBD@Z ; ATL::CSimpleStringT<char,0>::SetString
; Function compile flags: /Ogty
;	COMDAT ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBD@Z
_TEXT	SEGMENT
_pszSrc$ = 8						; size = 4
?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBD@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::SetString, COMDAT
; _this$ = ecx

; 579  : 	{

  00000	56		 push	 esi

; 580  : 		SetString( pszSrc, StringLength( pszSrc ) );

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _pszSrc$[esp]
  00005	85 f6		 test	 esi, esi
  00007	75 0d		 jne	 SHORT $L154411
  00009	33 c0		 xor	 eax, eax
  0000b	50		 push	 eax
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::SetString
  00012	5e		 pop	 esi

; 581  : 	}

  00013	c2 04 00	 ret	 4

; 580  : 		SetString( pszSrc, StringLength( pszSrc ) );

$L154411:
  00016	8b c6		 mov	 eax, esi
  00018	57		 push	 edi
  00019	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001c	8d 64 24 00	 npad	 4
$L154413:
  00020	8a 10		 mov	 dl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 d2		 test	 dl, dl
  00025	75 f9		 jne	 SHORT $L154413
  00027	2b c7		 sub	 eax, edi
  00029	5f		 pop	 edi
  0002a	50		 push	 eax
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::SetString
  00031	5e		 pop	 esi

; 581  : 	}

  00032	c2 04 00	 ret	 4
?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBD@Z ENDP	; ATL::CSimpleStringT<char,0>::SetString
_TEXT	ENDS
PUBLIC	?TrimRight@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV12@PBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::TrimRight
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?TrimRight@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
_pszTargets$ = 8					; size = 4
?TrimRight@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV12@PBD@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::TrimRight, COMDAT
; _this$ = ecx

; 1585 : 	{

  00000	53		 push	 ebx
  00001	55		 push	 ebp

; 1586 : 		// if we're not trimming anything, we're not doing any work
; 1587 : 		if( (pszTargets == NULL) || (*pszTargets == 0) )

  00002	8b 6c 24 0c	 mov	 ebp, DWORD PTR _pszTargets$[esp+4]
  00006	85 ed		 test	 ebp, ebp
  00008	8b d9		 mov	 ebx, ecx
  0000a	74 50		 je	 SHORT $L152457
  0000c	80 7d 00 00	 cmp	 BYTE PTR [ebp], 0
  00010	74 4a		 je	 SHORT $L152457
  00012	56		 push	 esi

; 1588 : 		{
; 1589 : 			return( *this );
; 1590 : 		}
; 1591 : 
; 1592 : 		// find beginning of trailing matches
; 1593 : 		// by starting at beginning (DBCS aware)
; 1594 : 
; 1595 : 		PCXSTR psz = GetString();

  00013	8b 33		 mov	 esi, DWORD PTR [ebx]

; 1596 : 		PCXSTR pszLast = NULL;
; 1597 : 
; 1598 : 		while( *psz != 0 )

  00015	8a 06		 mov	 al, BYTE PTR [esi]
  00017	57		 push	 edi
  00018	33 ff		 xor	 edi, edi
  0001a	84 c0		 test	 al, al
  0001c	74 3c		 je	 SHORT $L152466
  0001e	8b ff		 npad	 2
$L152461:

; 1599 : 		{
; 1600 : 			if( StringTraits::StringFindChar( pszTargets, *psz ) != NULL )

  00020	0f b6 c0	 movzx	 eax, al
  00023	50		 push	 eax
  00024	55		 push	 ebp
  00025	e8 00 00 00 00	 call	 __mbschr
  0002a	83 c4 08	 add	 esp, 8
  0002d	85 c0		 test	 eax, eax
  0002f	74 08		 je	 SHORT $L152463

; 1601 : 			{
; 1602 : 				if( pszLast == NULL )

  00031	85 ff		 test	 edi, edi
  00033	75 06		 jne	 SHORT $L152465

; 1603 : 				{
; 1604 : 					pszLast = psz;

  00035	8b fe		 mov	 edi, esi

; 1605 : 				}
; 1606 : 			}
; 1607 : 			else

  00037	eb 02		 jmp	 SHORT $L152465
$L152463:

; 1608 : 			{
; 1609 : 				pszLast = NULL;

  00039	33 ff		 xor	 edi, edi
$L152465:

; 1610 : 			}
; 1611 : 			psz = StringTraits::CharNext( psz );

  0003b	56		 push	 esi
  0003c	e8 00 00 00 00	 call	 __mbsinc
  00041	8b f0		 mov	 esi, eax
  00043	8a 06		 mov	 al, BYTE PTR [esi]
  00045	83 c4 04	 add	 esp, 4
  00048	84 c0		 test	 al, al
  0004a	75 d4		 jne	 SHORT $L152461

; 1612 : 		}
; 1613 : 
; 1614 : 		if( pszLast != NULL )

  0004c	85 ff		 test	 edi, edi
  0004e	74 0a		 je	 SHORT $L152466

; 1615 : 		{
; 1616 : 			// truncate at left-most matching character  
; 1617 : 			int iLast = int( pszLast-GetString() );

  00050	2b 3b		 sub	 edi, DWORD PTR [ebx]

; 1618 : 			Truncate( iLast );

  00052	57		 push	 edi
  00053	8b cb		 mov	 ecx, ebx
  00055	e8 00 00 00 00	 call	 ?Truncate@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z ; ATL::CSimpleStringT<char,0>::Truncate
$L152466:
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
$L152457:
  0005c	5d		 pop	 ebp
  0005d	8b c3		 mov	 eax, ebx
  0005f	5b		 pop	 ebx

; 1619 : 		}
; 1620 : 
; 1621 : 		return( *this );
; 1622 : 	}

  00060	c2 04 00	 ret	 4
?TrimRight@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV12@PBD@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::TrimRight
_TEXT	ENDS
PUBLIC	?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@HH@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Mid
; Function compile flags: /Ogty
;	COMDAT ?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@HH@Z
_TEXT	SEGMENT
$T154437 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_iFirst$ = 12						; size = 4
_nCount$ = 16						; size = 4
?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@HH@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Mid, COMDAT
; _this$ = ecx

; 1712 : 	{

  00000	51		 push	 ecx
  00001	53		 push	 ebx

; 1713 : 		// nCount is in XCHARs
; 1714 : 
; 1715 : 		// out-of-bounds requests return sensible things
; 1716 : 		if (iFirst < 0)

  00002	8b 5c 24 10	 mov	 ebx, DWORD PTR _iFirst$[esp+4]
  00006	85 db		 test	 ebx, ebx
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR $T154437[esp+16], 0
  00012	7d 02		 jge	 SHORT $L152488

; 1717 : 			iFirst = 0;

  00014	33 db		 xor	 ebx, ebx
$L152488:

; 1718 : 		if (nCount < 0)

  00016	8b 74 24 1c	 mov	 esi, DWORD PTR _nCount$[esp+12]
  0001a	85 f6		 test	 esi, esi
  0001c	7d 02		 jge	 SHORT $L152489

; 1719 : 			nCount = 0;

  0001e	33 f6		 xor	 esi, esi
$L152489:

; 1720 : 
; 1721 : 		if( (iFirst+nCount) > GetLength() )

  00020	8b 39		 mov	 edi, DWORD PTR [ecx]
  00022	8b 47 f4	 mov	 eax, DWORD PTR [edi-12]
  00025	8d 0c 33	 lea	 ecx, DWORD PTR [ebx+esi]
  00028	3b c8		 cmp	 ecx, eax
  0002a	7e 04		 jle	 SHORT $L152490

; 1722 : 		{
; 1723 : 			nCount = GetLength()-iFirst;

  0002c	8b f0		 mov	 esi, eax
  0002e	2b f3		 sub	 esi, ebx
$L152490:

; 1724 : 		}
; 1725 : 		if( iFirst > GetLength() )

  00030	3b d8		 cmp	 ebx, eax
  00032	7e 02		 jle	 SHORT $L152491

; 1726 : 		{
; 1727 : 			nCount = 0;

  00034	33 f6		 xor	 esi, esi
$L152491:

; 1728 : 		}
; 1729 : 
; 1730 : 		ATLASSERT( (nCount == 0) || ((iFirst+nCount) <= GetLength()) );
; 1731 : 
; 1732 : 		// optimize case of returning entire string
; 1733 : 		if( (iFirst == 0) && ((iFirst+nCount) == GetLength()) )

  00036	85 db		 test	 ebx, ebx
  00038	75 22		 jne	 SHORT $L152493
  0003a	3b f0		 cmp	 esi, eax
  0003c	75 1e		 jne	 SHORT $L152493

; 1734 : 		{
; 1735 : 			return( *this );

  0003e	8d 47 f0	 lea	 eax, DWORD PTR [edi-16]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData
  00047	83 c4 04	 add	 esp, 4
  0004a	8b d0		 mov	 edx, eax
  0004c	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  00050	5f		 pop	 edi
  00051	83 c2 10	 add	 edx, 16			; 00000010H
  00054	5e		 pop	 esi
  00055	89 10		 mov	 DWORD PTR [eax], edx
  00057	5b		 pop	 ebx

; 1739 : 	}

  00058	59		 pop	 ecx
  00059	c2 0c 00	 ret	 12			; 0000000cH
$L152493:

; 1736 : 		}
; 1737 : 
; 1738 : 		return( CStringT( GetString()+iFirst, nCount, GetManager() ) );

  0005c	8b 4f f0	 mov	 ecx, DWORD PTR [edi-16]
  0005f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00061	ff 50 10	 call	 DWORD PTR [eax+16]
  00064	50		 push	 eax
  00065	56		 push	 esi
  00066	8b 74 24 1c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+20]
  0006a	03 fb		 add	 edi, ebx
  0006c	57		 push	 edi
  0006d	8b ce		 mov	 ecx, esi
  0006f	e8 00 00 00 00	 call	 ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>
  00074	5f		 pop	 edi
  00075	8b c6		 mov	 eax, esi
  00077	5e		 pop	 esi
  00078	5b		 pop	 ebx

; 1739 : 	}

  00079	59		 pop	 ecx
  0007a	c2 0c 00	 ret	 12			; 0000000cH
?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@HH@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Mid
_TEXT	ENDS
PUBLIC	?Left@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Left
; Function compile flags: /Ogty
;	COMDAT ?Left@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z
_TEXT	SEGMENT
$T154532 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_nCount$ = 12						; size = 4
?Left@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Left, COMDAT
; _this$ = ecx

; 1759 : 	{

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 1760 : 		// nCount is in XCHARs
; 1761 : 		if (nCount < 0)

  00003	8b 7c 24 14	 mov	 edi, DWORD PTR _nCount$[esp+8]
  00007	85 ff		 test	 edi, edi
  00009	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T154532[esp+12], 0
  00011	7d 02		 jge	 SHORT $L152498

; 1762 : 			nCount = 0;

  00013	33 ff		 xor	 edi, edi
$L152498:

; 1763 : 
; 1764 : 		int nLength = GetLength();

  00015	8b 31		 mov	 esi, DWORD PTR [ecx]

; 1765 : 		if( nCount >= nLength )

  00017	3b 7e f4	 cmp	 edi, DWORD PTR [esi-12]
  0001a	7c 1d		 jl	 SHORT $L152500

; 1766 : 		{
; 1767 : 			return( *this );

  0001c	8d 46 f0	 lea	 eax, DWORD PTR [esi-16]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData
  00025	83 c4 04	 add	 esp, 4
  00028	8b c8		 mov	 ecx, eax
  0002a	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  0002e	83 c1 10	 add	 ecx, 16			; 00000010H
  00031	5f		 pop	 edi
  00032	89 08		 mov	 DWORD PTR [eax], ecx
  00034	5e		 pop	 esi

; 1771 : 	}

  00035	59		 pop	 ecx
  00036	c2 08 00	 ret	 8
$L152500:

; 1768 : 		}
; 1769 : 
; 1770 : 		return( CStringT( GetString(), nCount, GetManager() ) );

  00039	8b 4e f0	 mov	 ecx, DWORD PTR [esi-16]
  0003c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003e	ff 52 10	 call	 DWORD PTR [edx+16]
  00041	50		 push	 eax
  00042	57		 push	 edi
  00043	56		 push	 esi
  00044	8b 74 24 1c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+20]
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>
  0004f	5f		 pop	 edi
  00050	8b c6		 mov	 eax, esi
  00052	5e		 pop	 esi

; 1771 : 	}

  00053	59		 pop	 ecx
  00054	c2 08 00	 ret	 8
?Left@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Left
_TEXT	ENDS
PUBLIC	?Format@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAAXPBDZZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Format
; Function compile flags: /Ogty
;	COMDAT ?Format@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAAXPBDZZ
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pszFormat$ = 12					; size = 4
?Format@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAAXPBDZZ PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Format, COMDAT

; 1796 : 		ATLASSERT( AtlIsValidString( pszFormat ) );
; 1797 : 		
; 1798 : 		va_list argList;
; 1799 : 		va_start( argList, pszFormat );
; 1800 : 		FormatV( pszFormat, argList );

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR _pszFormat$[esp-4]
  00004	8d 44 24 0c	 lea	 eax, DWORD PTR _pszFormat$[esp]
  00008	50		 push	 eax
  00009	51		 push	 ecx
  0000a	8b 4c 24 0c	 mov	 ecx, DWORD PTR _this$[esp+4]
  0000e	e8 00 00 00 00	 call	 ?FormatV@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEXPBDPAD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::FormatV

; 1801 : 		va_end( argList );
; 1802 : 	}

  00013	c3		 ret	 0
?Format@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAAXPBDZZ ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Format
_TEXT	ENDS
PUBLIC	??HATL@@YA?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@0@ABV10@0@Z ; ATL::operator+
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
xdata$x	SEGMENT
$T154733 DD	0ffffffffH
	DD	FLAT:$L154601
$T154730 DD	019930520H
	DD	01H
	DD	FLAT:$T154733
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
xdata$x	ENDS
;	COMDAT ??HATL@@YA?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@0@ABV10@0@Z
_TEXT	SEGMENT
$T154603 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_strResult$ = 12					; size = 4
_str1$ = 12						; size = 4
_str2$ = 16						; size = 4
??HATL@@YA?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@0@ABV10@0@Z PROC NEAR ; ATL::operator+, COMDAT

; 2014 : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??HATL@@YA?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@0@ABV10@0@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi

; 2015 : 		CStringT strResult( str1.GetManager() );

  00017	8b 74 24 1c	 mov	 esi, DWORD PTR _str1$[esp+16]
  0001b	8b 06		 mov	 eax, DWORD PTR [esi]
  0001d	8b 48 f0	 mov	 ecx, DWORD PTR [eax-16]
  00020	8b 11		 mov	 edx, DWORD PTR [ecx]
  00022	57		 push	 edi
  00023	33 ff		 xor	 edi, edi
  00025	89 7c 24 08	 mov	 DWORD PTR $T154603[esp+24], edi
  00029	ff 52 10	 call	 DWORD PTR [edx+16]
  0002c	8b 10		 mov	 edx, DWORD PTR [eax]
  0002e	8b c8		 mov	 ecx, eax
  00030	ff 52 0c	 call	 DWORD PTR [edx+12]
  00033	83 c0 10	 add	 eax, 16			; 00000010H
  00036	89 44 24 20	 mov	 DWORD PTR _strResult$[esp+20], eax

; 2016 : 
; 2017 : 		Concatenate( strResult, str1, str1.GetLength(), str2, str2.GetLength() );

  0003a	8b 44 24 24	 mov	 eax, DWORD PTR _str2$[esp+20]
  0003e	8b 00		 mov	 eax, DWORD PTR [eax]
  00040	8b 50 f4	 mov	 edx, DWORD PTR [eax-12]
  00043	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00045	8b 71 f4	 mov	 esi, DWORD PTR [ecx-12]
  00048	52		 push	 edx
  00049	50		 push	 eax
  0004a	56		 push	 esi
  0004b	51		 push	 ecx
  0004c	8d 4c 24 30	 lea	 ecx, DWORD PTR _strResult$[esp+36]
  00050	51		 push	 ecx
  00051	89 7c 24 28	 mov	 DWORD PTR __$EHRec$[esp+52], edi
  00055	e8 00 00 00 00	 call	 ?Concatenate@?$CSimpleStringT@D$0A@@ATL@@KAXAAV12@PBDH1H@Z ; ATL::CSimpleStringT<char,0>::Concatenate

; 2018 : 
; 2019 : 		return( strResult );

  0005a	8b 74 24 34	 mov	 esi, DWORD PTR _strResult$[esp+40]
  0005e	83 c6 f0	 add	 esi, -16		; fffffff0H
  00061	56		 push	 esi
  00062	e8 00 00 00 00	 call	 ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData
  00067	8b 7c 24 34	 mov	 edi, DWORD PTR ___$ReturnUdt$[esp+44]
  0006b	83 c0 10	 add	 eax, 16			; 00000010H
  0006e	89 07		 mov	 DWORD PTR [edi], eax
  00070	83 c4 18	 add	 esp, 24			; 00000018H
  00073	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+32], -1
  0007b	8d 56 0c	 lea	 edx, DWORD PTR [esi+12]
  0007e	83 c8 ff	 or	 eax, -1
  00081	f0 0f c1 02	 lock	  xadd	 DWORD PTR [edx], eax
  00085	48		 dec	 eax
  00086	85 c0		 test	 eax, eax
  00088	7f 08		 jg	 SHORT $L154731
  0008a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0008c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008e	56		 push	 esi
  0008f	ff 52 04	 call	 DWORD PTR [edx+4]
$L154731:

; 2020 : 	}

  00092	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00096	8b c7		 mov	 eax, edi
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000a1	83 c4 10	 add	 esp, 16			; 00000010H
  000a4	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L154601:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _strResult$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
__ehhandler$??HATL@@YA?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@0@ABV10@0@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T154730
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??HATL@@YA?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@0@ABV10@0@Z ENDP ; ATL::operator+
PUBLIC	?Append@?$CSimpleStringT@D$0A@@ATL@@QAEXABV12@@Z ; ATL::CSimpleStringT<char,0>::Append
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?Append@?$CSimpleStringT@D$0A@@ATL@@QAEXABV12@@Z
_TEXT	SEGMENT
_strSrc$ = 8						; size = 4
?Append@?$CSimpleStringT@D$0A@@ATL@@QAEXABV12@@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::Append, COMDAT
; _this$ = ecx

; 413  : 		Append( strSrc.GetString(), strSrc.GetLength() );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _strSrc$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]
  00006	8b 50 f4	 mov	 edx, DWORD PTR [eax-12]
  00009	52		 push	 edx
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ?Append@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::Append

; 414  : 	}

  00010	c2 04 00	 ret	 4
?Append@?$CSimpleStringT@D$0A@@ATL@@QAEXABV12@@Z ENDP	; ATL::CSimpleStringT<char,0>::Append
_TEXT	ENDS
PUBLIC	??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::operator=
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_strSrc$ = 8						; size = 4
??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@ABV01@@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::operator=, COMDAT
; _this$ = ecx

; 968  : 		CThisSimpleString::operator=( strSrc );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _strSrc$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CSimpleStringT<char,0>::operator=

; 969  : 
; 970  : 		return( *this );

  0000d	8b c6		 mov	 eax, esi
  0000f	5e		 pop	 esi

; 971  : 	}

  00010	c2 04 00	 ret	 4
??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@ABV01@@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::operator=
_TEXT	ENDS
PUBLIC	?LoadStringA@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEHI@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::LoadStringA
; Function compile flags: /Ogty
;	COMDAT ?LoadStringA@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEHI@Z
_TEXT	SEGMENT
_nID$ = 8						; size = 4
?LoadStringA@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEHI@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::LoadStringA, COMDAT
; _this$ = ecx

; 1969 : 	{

  00000	56		 push	 esi
  00001	57		 push	 edi

; 1970 : 		HINSTANCE hInst = StringTraits::FindStringResourceInstance( nID );

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR _nID$[esp+4]
  00006	6a 00		 push	 0
  00008	57		 push	 edi
  00009	8b f1		 mov	 esi, ecx
  0000b	e8 00 00 00 00	 call	 ?AtlFindStringResourceInstance@ATL@@YAPAUHINSTANCE__@@IG@Z ; ATL::AtlFindStringResourceInstance
  00010	83 c4 08	 add	 esp, 8

; 1971 : 		if( hInst == NULL )

  00013	85 c0		 test	 eax, eax
  00015	75 05		 jne	 SHORT $L146732
  00017	5f		 pop	 edi
  00018	5e		 pop	 esi

; 1977 : 	}

  00019	c2 04 00	 ret	 4
$L146732:

; 1972 : 		{
; 1973 : 			return( FALSE );
; 1974 : 		}
; 1975 : 
; 1976 : 		return( LoadString( hInst, nID ) );		

  0001c	57		 push	 edi
  0001d	50		 push	 eax
  0001e	8b ce		 mov	 ecx, esi
  00020	e8 00 00 00 00	 call	 ?LoadStringA@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEHPAUHINSTANCE__@@I@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::LoadStringA
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 1977 : 	}

  00027	c2 04 00	 ret	 4
?LoadStringA@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEHI@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::LoadStringA
_TEXT	ENDS
PUBLIC	?CheckImplicitLoad@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@AAE_NPBX@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CheckImplicitLoad
; Function compile flags: /Ogty
;	COMDAT ?CheckImplicitLoad@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@AAE_NPBX@Z
_TEXT	SEGMENT
_pv$ = 8						; size = 4
?CheckImplicitLoad@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@AAE_NPBX@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CheckImplicitLoad, COMDAT
; _this$ = ecx

; 2229 : 	{

  00000	57		 push	 edi
  00001	8b f9		 mov	 edi, ecx

; 2230 : 		bool bRet = false;
; 2231 : 
; 2232 : 		if( (pv != NULL) && IS_INTRESOURCE( pv ) )

  00003	8b 4c 24 08	 mov	 ecx, DWORD PTR _pv$[esp]
  00007	32 c0		 xor	 al, al
  00009	85 c9		 test	 ecx, ecx
  0000b	74 27		 je	 SHORT $L148794
  0000d	f7 c1 00 00 ff
	ff		 test	 ecx, -65536		; ffff0000H
  00013	75 1f		 jne	 SHORT $L148794
  00015	56		 push	 esi

; 2233 : 		{
; 2234 : 			UINT nID = LOWORD( reinterpret_cast< DWORD_PTR >( pv ) );

  00016	0f b7 f1	 movzx	 esi, cx

; 2235 : 			if( !LoadString( nID ) )

  00019	6a 00		 push	 0
  0001b	56		 push	 esi
  0001c	e8 00 00 00 00	 call	 ?AtlFindStringResourceInstance@ATL@@YAPAUHINSTANCE__@@IG@Z ; ATL::AtlFindStringResourceInstance
  00021	83 c4 08	 add	 esp, 8
  00024	85 c0		 test	 eax, eax
  00026	74 09		 je	 SHORT $L154771
  00028	56		 push	 esi
  00029	50		 push	 eax
  0002a	8b cf		 mov	 ecx, edi
  0002c	e8 00 00 00 00	 call	 ?LoadStringA@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEHPAUHINSTANCE__@@I@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::LoadStringA
$L154771:

; 2236 : 			{
; 2237 : 				ATLTRACE( atlTraceString, 2, _T( "Warning: implicit LoadString(%u) failed\n" ), nID );
; 2238 : 			}
; 2239 : 			bRet = true;

  00031	b0 01		 mov	 al, 1
  00033	5e		 pop	 esi
$L148794:
  00034	5f		 pop	 edi

; 2240 : 		}
; 2241 : 
; 2242 : 		return( bRet );
; 2243 : 	}

  00035	c2 04 00	 ret	 4
?CheckImplicitLoad@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@AAE_NPBX@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CheckImplicitLoad
_TEXT	ENDS
PUBLIC	??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@PBD@Z	; ATL::CSimpleStringT<char,0>::operator=
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
_pszSrc$ = 8						; size = 4
??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@PBD@Z PROC NEAR	; ATL::CSimpleStringT<char,0>::operator=, COMDAT
; _this$ = ecx

; 316  : 		SetString( pszSrc );

  00000	8b 54 24 04	 mov	 edx, DWORD PTR _pszSrc$[esp-4]
  00004	85 d2		 test	 edx, edx
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
  00009	75 0f		 jne	 SHORT $L154789
  0000b	33 c0		 xor	 eax, eax
  0000d	50		 push	 eax
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::SetString

; 317  : 
; 318  : 		return( *this );

  00014	8b c7		 mov	 eax, edi
  00016	5f		 pop	 edi

; 319  : 	}

  00017	c2 04 00	 ret	 4

; 316  : 		SetString( pszSrc );

$L154789:
  0001a	8b c2		 mov	 eax, edx
  0001c	56		 push	 esi
  0001d	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$L154791:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $L154791
  00027	2b c6		 sub	 eax, esi
  00029	5e		 pop	 esi
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	8b cf		 mov	 ecx, edi
  0002e	e8 00 00 00 00	 call	 ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::SetString

; 317  : 
; 318  : 		return( *this );

  00033	8b c7		 mov	 eax, edi
  00035	5f		 pop	 edi

; 319  : 	}

  00036	c2 04 00	 ret	 4
??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@PBD@Z ENDP	; ATL::CSimpleStringT<char,0>::operator=
_TEXT	ENDS
PUBLIC	?BuildNetString@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0@Z ; CTTextLinker::BuildNetString
PUBLIC	??_C@_08EAKGLGNO@?$CF04X?$CF04X?$AA@		; `string'
;	COMDAT xdata$x
xdata$x	SEGMENT
$T154908 DD	0ffffffffH
	DD	FLAT:$L154796
	DD	00H
	DD	FLAT:$L154797
$T154905 DD	019930520H
	DD	02H
	DD	FLAT:$T154908
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_08EAKGLGNO@?$CF04X?$CF04X?$AA@
CONST	SEGMENT
??_C@_08EAKGLGNO@?$CF04X?$CF04X?$AA@ DB '%04X%04X', 00H	; `string'
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\ttextlinker.cpp
CONST	ENDS
;	COMDAT ?BuildNetString@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0@Z
_TEXT	SEGMENT
$T154799 = -16						; size = 4
_strSIZE$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_strHeader$ = 12					; size = 4
$T154795 = 16						; size = 4
_strBody$ = 16						; size = 4
?BuildNetString@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0@Z PROC NEAR ; CTTextLinker::BuildNetString, COMDAT
; _this$ = ecx

; 136  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?BuildNetString@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR $T154799[esp+20], 0

; 137  : 	CString strSIZE;

  0001f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_strmgr@ATL@@3VCAtlStringMgr@1@A
  00024	57		 push	 edi
  00025	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_strmgr@ATL@@3VCAtlStringMgr@1@A ; ATL::g_strmgr
  0002a	ff 50 0c	 call	 DWORD PTR [eax+12]
  0002d	83 c0 10	 add	 eax, 16			; 00000010H
  00030	89 44 24 08	 mov	 DWORD PTR _strSIZE$[esp+24], eax

; 138  : 
; 139  : 	strSIZE.Format( _T("%04X%04X"), strHeader.GetLength(), strBody.GetLength());

  00034	8b 74 24 24	 mov	 esi, DWORD PTR _strBody$[esp+20]
  00038	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003a	8b 41 f4	 mov	 eax, DWORD PTR [ecx-12]
  0003d	8b 7c 24 20	 mov	 edi, DWORD PTR _strHeader$[esp+20]
  00041	8b 17		 mov	 edx, DWORD PTR [edi]
  00043	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  00046	50		 push	 eax
  00047	51		 push	 ecx
  00048	8d 44 24 10	 lea	 eax, DWORD PTR _strSIZE$[esp+32]
  0004c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08EAKGLGNO@?$CF04X?$CF04X?$AA@
  00051	50		 push	 eax
  00052	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+48], 0
  0005a	e8 00 00 00 00	 call	 ?Format@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAAXPBDZZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Format

; 140  : 	return strSIZE + strHeader + strBody;

  0005f	57		 push	 edi
  00060	8d 4c 24 1c	 lea	 ecx, DWORD PTR _strSIZE$[esp+44]
  00064	51		 push	 ecx
  00065	8d 54 24 3c	 lea	 edx, DWORD PTR $T154795[esp+44]
  00069	52		 push	 edx
  0006a	e8 00 00 00 00	 call	 ??HATL@@YA?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@0@ABV10@0@Z ; ATL::operator+
  0006f	56		 push	 esi
  00070	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  00074	50		 push	 eax
  00075	56		 push	 esi
  00076	c6 44 24 3c 01	 mov	 BYTE PTR __$EHRec$[esp+72], 1
  0007b	e8 00 00 00 00	 call	 ??HATL@@YA?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@0@ABV10@0@Z ; ATL::operator+
  00080	8b 44 24 4c	 mov	 eax, DWORD PTR $T154795[esp+60]
  00084	83 c0 f0	 add	 eax, -16		; fffffff0H
  00087	83 c4 28	 add	 esp, 40			; 00000028H
  0008a	c6 44 24 14 00	 mov	 BYTE PTR __$EHRec$[esp+32], 0
  0008f	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00092	83 ca ff	 or	 edx, -1
  00095	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00099	4a		 dec	 edx
  0009a	85 d2		 test	 edx, edx
  0009c	7f 08		 jg	 SHORT $L154873
  0009e	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a2	50		 push	 eax
  000a3	ff 52 04	 call	 DWORD PTR [edx+4]
$L154873:
  000a6	8b 44 24 08	 mov	 eax, DWORD PTR _strSIZE$[esp+24]
  000aa	83 c0 f0	 add	 eax, -16		; fffffff0H
  000ad	c7 44 24 14 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+32], -1
  000b5	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  000b8	83 ca ff	 or	 edx, -1
  000bb	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  000bf	4a		 dec	 edx
  000c0	85 d2		 test	 edx, edx
  000c2	7f 08		 jg	 SHORT $L154906
  000c4	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c8	50		 push	 eax
  000c9	ff 52 04	 call	 DWORD PTR [edx+4]
$L154906:

; 141  : }

  000cc	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  000d0	5f		 pop	 edi
  000d1	8b c6		 mov	 eax, esi
  000d3	5e		 pop	 esi
  000d4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000db	83 c4 10	 add	 esp, 16			; 00000010H
  000de	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L154796:
  00000	8d 4d f0	 lea	 ecx, DWORD PTR _strSIZE$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L154797:
  00008	8d 4d 0c	 lea	 ecx, DWORD PTR $T154795[ebp-4]
  0000b	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
__ehhandler$?BuildNetString@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0@Z:
  00010	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T154905
  00015	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?BuildNetString@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0@Z ENDP ; CTTextLinker::BuildNetString
PUBLIC	?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Mid
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z
_TEXT	SEGMENT
$T154915 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_iFirst$ = 12						; size = 4
?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Mid, COMDAT
; _this$ = ecx

; 1706 : 	{

  00000	51		 push	 ecx

; 1707 : 		return( Mid( iFirst, GetLength()-iFirst ) );

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	8b 50 f4	 mov	 edx, DWORD PTR [eax-12]
  00006	8b 44 24 0c	 mov	 eax, DWORD PTR _iFirst$[esp]
  0000a	56		 push	 esi
  0000b	8b 74 24 0c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+4]
  0000f	2b d0		 sub	 edx, eax
  00011	52		 push	 edx
  00012	50		 push	 eax
  00013	56		 push	 esi
  00014	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR $T154915[esp+20], 0
  0001c	e8 00 00 00 00	 call	 ?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@HH@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Mid
  00021	8b c6		 mov	 eax, esi
  00023	5e		 pop	 esi

; 1708 : 	}

  00024	59		 pop	 ecx
  00025	c2 08 00	 ret	 8
?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Mid
_TEXT	ENDS
PUBLIC	??Y?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CSimpleStringT<char,0>::operator+=
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ??Y?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_strSrc$ = 8						; size = 4
??Y?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::operator+=, COMDAT
; _this$ = ecx

; 323  : 		Append( strSrc );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _strSrc$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  0000c	51		 push	 ecx
  0000d	50		 push	 eax
  0000e	8b ce		 mov	 ecx, esi
  00010	e8 00 00 00 00	 call	 ?Append@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::Append

; 324  : 
; 325  : 		return( *this );

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi

; 326  : 	}

  00018	c2 04 00	 ret	 4
??Y?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z ENDP	; ATL::CSimpleStringT<char,0>::operator+=
_TEXT	ENDS
PUBLIC	?FromStr@CTTextLinkData@@QAEXABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ; CTTextLinkData::FromStr
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\ttextlinkdata.h
;	COMDAT ?FromStr@CTTextLinkData@@QAEXABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
?FromStr@CTTextLinkData@@QAEXABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z PROC NEAR ; CTTextLinkData::FromStr, COMDAT
; _this$ = ecx

; 68   : 	void FromStr(const CString& str)			{ m_vData = str; }

  00000	83 c1 04	 add	 ecx, 4
  00003	e9 00 00 00 00	 jmp	 ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CSimpleStringT<char,0>::operator=
?FromStr@CTTextLinkData@@QAEXABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ENDP ; CTTextLinkData::FromStr
_TEXT	ENDS
PUBLIC	??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@PBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::operator=
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
_pszSrc$ = 8						; size = 4
??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@PBD@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::operator=, COMDAT
; _this$ = ecx

; 983  : 		CThisSimpleString::operator=( pszSrc );

  00000	8b 54 24 04	 mov	 edx, DWORD PTR _pszSrc$[esp-4]
  00004	85 d2		 test	 edx, edx
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
  00009	75 0f		 jne	 SHORT $L154979
  0000b	33 c0		 xor	 eax, eax
  0000d	50		 push	 eax
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::SetString

; 984  : 
; 985  : 		return( *this );

  00014	8b c7		 mov	 eax, edi
  00016	5f		 pop	 edi

; 986  : 	}

  00017	c2 04 00	 ret	 4

; 983  : 		CThisSimpleString::operator=( pszSrc );

$L154979:
  0001a	8b c2		 mov	 eax, edx
  0001c	56		 push	 esi
  0001d	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$L154980:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $L154980
  00027	2b c6		 sub	 eax, esi
  00029	5e		 pop	 esi
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	8b cf		 mov	 ecx, edi
  0002e	e8 00 00 00 00	 call	 ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::SetString

; 984  : 
; 985  : 		return( *this );

  00033	8b c7		 mov	 eax, edi
  00035	5f		 pop	 edi

; 986  : 	}

  00036	c2 04 00	 ret	 4
??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@PBD@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::operator=
_TEXT	ENDS
PUBLIC	??Y?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@ABV?$CSimpleStringT@D$0A@@1@@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::operator+=
; Function compile flags: /Ogty
;	COMDAT ??Y?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@ABV?$CSimpleStringT@D$0A@@1@@Z
_TEXT	SEGMENT
_str$ = 8						; size = 4
??Y?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@ABV?$CSimpleStringT@D$0A@@1@@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::operator+=, COMDAT
; _this$ = ecx

; 1029 : 		CThisSimpleString::operator+=( str );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _str$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  0000c	51		 push	 ecx
  0000d	50		 push	 eax
  0000e	8b ce		 mov	 ecx, esi
  00010	e8 00 00 00 00	 call	 ?Append@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::Append

; 1030 : 
; 1031 : 		return( *this );

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi

; 1032 : 	}

  00018	c2 04 00	 ret	 4
??Y?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@ABV?$CSimpleStringT@D$0A@@1@@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::operator+=
_TEXT	ENDS
PUBLIC	??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
xdata$x	SEGMENT
$T155100 DD	0ffffffffH
	DD	FLAT:$L155020
$T155094 DD	019930520H
	DD	01H
	DD	FLAT:$T155100
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
xdata$x	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pszSrc$ = 8						; size = 4
??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >, COMDAT
; _this$ = ecx

; 830  : 	{

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_strmgr@ATL@@3VCAtlStringMgr@1@A
  0001b	56		 push	 esi
  0001c	8b f1		 mov	 esi, ecx
  0001e	57		 push	 edi
  0001f	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_strmgr@ATL@@3VCAtlStringMgr@1@A ; ATL::g_strmgr
  00024	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00028	ff 50 0c	 call	 DWORD PTR [eax+12]
  0002b	83 c0 10	 add	 eax, 16			; 00000010H
  0002e	89 06		 mov	 DWORD PTR [esi], eax

; 831  : 		if( !CheckImplicitLoad( pszSrc ) )

  00030	8b 54 24 1c	 mov	 edx, DWORD PTR _pszSrc$[esp+20]
  00034	85 d2		 test	 edx, edx
  00036	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  0003e	74 38		 je	 SHORT $L155096
  00040	f7 c2 00 00 ff
	ff		 test	 edx, -65536		; ffff0000H
  00046	75 34		 jne	 SHORT $L155092
  00048	0f b7 fa	 movzx	 edi, dx
  0004b	6a 00		 push	 0
  0004d	57		 push	 edi
  0004e	e8 00 00 00 00	 call	 ?AtlFindStringResourceInstance@ATL@@YAPAUHINSTANCE__@@IG@Z ; ATL::AtlFindStringResourceInstance
  00053	83 c4 08	 add	 esp, 8
  00056	85 c0		 test	 eax, eax
  00058	74 39		 je	 SHORT $L155098
  0005a	57		 push	 edi
  0005b	50		 push	 eax
  0005c	8b ce		 mov	 ecx, esi
  0005e	e8 00 00 00 00	 call	 ?LoadStringA@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEHPAUHINSTANCE__@@I@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::LoadStringA
  00063	5f		 pop	 edi

; 835  : 		}
; 836  : 	}

  00064	8b c6		 mov	 eax, esi
  00066	5e		 pop	 esi
  00067	8b 4c 24 04	 mov	 ecx, DWORD PTR __$EHRec$[esp+16]
  0006b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00072	83 c4 10	 add	 esp, 16			; 00000010H
  00075	c2 04 00	 ret	 4
$L155096:

; 832  : 		{
; 833  : 			// nDestLength is in XCHARs
; 834  : 			*this = pszSrc;

  00078	33 c0		 xor	 eax, eax
  0007a	eb 0e		 jmp	 SHORT $L155091
$L155092:
  0007c	8b c2		 mov	 eax, edx
  0007e	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$L155097:
  00081	8a 08		 mov	 cl, BYTE PTR [eax]
  00083	40		 inc	 eax
  00084	84 c9		 test	 cl, cl
  00086	75 f9		 jne	 SHORT $L155097
  00088	2b c7		 sub	 eax, edi
$L155091:
  0008a	50		 push	 eax
  0008b	52		 push	 edx
  0008c	8b ce		 mov	 ecx, esi
  0008e	e8 00 00 00 00	 call	 ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::SetString
$L155098:

; 835  : 		}
; 836  : 	}

  00093	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00097	5f		 pop	 edi
  00098	8b c6		 mov	 eax, esi
  0009a	5e		 pop	 esi
  0009b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000a2	83 c4 10	 add	 esp, 16			; 00000010H
  000a5	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L155020:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ ; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>
__ehhandler$??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T155094
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?NewTextLinkData@CTTextLinker@@QAEKPAPAVCTTextLinkData@@@Z ; CTTextLinker::NewTextLinkData
;	COMDAT xdata$x
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\ttextlinkdata.h
xdata$x	SEGMENT
$T155152 DD	0ffffffffH
	DD	FLAT:$L155107
$T155150 DD	019930520H
	DD	01H
	DD	FLAT:$T155152
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\ttextlinker.cpp
CONST	ENDS
;	COMDAT ?NewTextLinkData@CTTextLinker@@QAEKPAPAVCTTextLinkData@@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
$T155106 = 8						; size = 4
_pOut$ = 8						; size = 4
?NewTextLinkData@CTTextLinker@@QAEKPAPAVCTTextLinkData@@@Z PROC NEAR ; CTTextLinker::NewTextLinkData, COMDAT
; _this$ = ecx

; 34   : {

  00000	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00006	6a ff		 push	 -1
  00008	68 00 00 00 00	 push	 __ehhandler$?NewTextLinkData@CTTextLinker@@QAEKPAPAVCTTextLinkData@@@Z
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	56		 push	 esi
  00016	8b f1		 mov	 esi, ecx

; 35   : 	*pOut = &(m_pTextLinkDataPool[ m_nTextLinkDataPos ]);

  00018	8b 06		 mov	 eax, DWORD PTR [esi]
  0001a	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001d	57		 push	 edi
  0001e	8b 7c 24 18	 mov	 edi, DWORD PTR _pOut$[esp+16]
  00022	c1 e0 04	 shl	 eax, 4
  00025	03 c2		 add	 eax, edx

; 36   : 	
; 37   : 	(*pOut)->FromStr("");

  00027	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0002c	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T155106[esp+20]
  00030	89 07		 mov	 DWORD PTR [edi], eax
  00032	e8 00 00 00 00	 call	 ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
  00037	8b 07		 mov	 eax, DWORD PTR [edi]
  00039	8d 54 24 18	 lea	 edx, DWORD PTR $T155106[esp+16]
  0003d	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00040	52		 push	 edx
  00041	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00049	e8 00 00 00 00	 call	 ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CSimpleStringT<char,0>::operator=
  0004e	8b 44 24 18	 mov	 eax, DWORD PTR $T155106[esp+16]
  00052	83 c0 f0	 add	 eax, -16		; fffffff0H
  00055	c7 44 24 10 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+28], -1
  0005d	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00060	83 ca ff	 or	 edx, -1
  00063	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00067	4a		 dec	 edx
  00068	85 d2		 test	 edx, edx
  0006a	7f 08		 jg	 SHORT $L155144
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00070	50		 push	 eax
  00071	ff 52 04	 call	 DWORD PTR [edx+4]
$L155144:

; 38   : 	(*pOut)->ResetPosition();

  00074	8b 07		 mov	 eax, DWORD PTR [edi]
  00076	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 39   : 
; 40   : 	DWORD nRetID = m_nTextLinkDataPos;

  0007c	8b 06		 mov	 eax, DWORD PTR [esi]

; 41   : 	if( m_nTextLinkDataPos >= LINK_DATA_POOL_SIZE-1 )

  0007e	83 f8 63	 cmp	 eax, 99			; 00000063H
  00081	72 19		 jb	 SHORT $L152267

; 42   : 		m_nTextLinkDataPos = 0;

  00083	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 45   : 
; 46   : 	return nRetID;
; 47   : }

  00089	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  0008d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00094	5f		 pop	 edi
  00095	5e		 pop	 esi
  00096	83 c4 0c	 add	 esp, 12			; 0000000cH
  00099	c2 04 00	 ret	 4
$L152267:

; 43   : 	else
; 44   : 		++m_nTextLinkDataPos;

  0009c	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  0009f	89 0e		 mov	 DWORD PTR [esi], ecx

; 45   : 
; 46   : 	return nRetID;
; 47   : }

  000a1	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  000a5	5f		 pop	 edi
  000a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ad	5e		 pop	 esi
  000ae	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b1	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L155107:
  00000	8d 4d 04	 lea	 ecx, DWORD PTR $T155106[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
__ehhandler$?NewTextLinkData@CTTextLinker@@QAEKPAPAVCTTextLinkData@@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T155150
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?NewTextLinkData@CTTextLinker@@QAEKPAPAVCTTextLinkData@@@Z ENDP ; CTTextLinker::NewTextLinkData
PUBLIC	?MakeItemNetText@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@ABV?$vector@KV?$allocator@K@std@@@std@@@Z ; CTTextLinker::MakeItemNetText
PUBLIC	??_C@_02DKCKIIND@?$CFs?$AA@			; `string'
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
xdata$x	SEGMENT
$T156081 DD	0ffffffffH
	DD	FLAT:$L155167
	DD	00H
	DD	FLAT:$L155168
	DD	01H
	DD	FLAT:$L155169
	DD	01H
	DD	FLAT:$L155170
	DD	03H
	DD	FLAT:$L155171
	DD	01H
	DD	FLAT:$L155175
	DD	01H
	DD	FLAT:$L155176
	DD	06H
	DD	FLAT:$L155177
	DD	01H
	DD	FLAT:$L155178
	DD	01H
	DD	FLAT:$L155179
	DD	09H
	DD	FLAT:$L155180
	DD	01H
	DD	FLAT:$L155181
$T156065 DD	019930520H
	DD	0cH
	DD	FLAT:$T156081
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs?$AA@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs?$AA@ DB '%s', 00H		; `string'
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\ttextlinker.cpp
CONST	ENDS
;	COMDAT ?MakeItemNetText@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@ABV?$vector@KV?$allocator@K@std@@@std@@@Z
_TEXT	SEGMENT
_strBODY$ = -48						; size = 4
_strHEAD$ = -44						; size = 4
_wSIZE$ = -40						; size = 2
_this$ = -36						; size = 4
_nPOS$152287 = -32					; size = 4
_i$152283 = -28						; size = 4
_strSIZE$152308 = -24					; size = 4
$T155173 = -20						; size = 4
$T155158 = -20						; size = 4
$T155166 = -16						; size = 4
$T155162 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
$T155165 = 12						; size = 4
$T155163 = 12						; size = 4
$T155161 = 12						; size = 4
$T155160 = 12						; size = 4
_strFormat$ = 12					; size = 4
$T155164 = 16						; size = 4
$T155159 = 16						; size = 4
_vItemID$ = 16						; size = 4
?MakeItemNetText@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@ABV?$vector@KV?$allocator@K@std@@@std@@@Z PROC NEAR ; CTTextLinker::MakeItemNetText, COMDAT
; _this$ = ecx

; 56   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?MakeItemNetText@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@ABV?$vector@KV?$allocator@K@std@@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 24	 sub	 esp, 36			; 00000024H
  00018	53		 push	 ebx
  00019	55		 push	 ebp
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	89 4c 24 1c	 mov	 DWORD PTR _this$[esp+64], ecx
  00020	33 db		 xor	 ebx, ebx

; 57   : 	WORD wSIZE = TCHAT_DWORD_SIZE;
; 58   : 	WORD wPOS = 0;
; 59   : 
; 60   : 	CString strHEAD(_T(""));

  00022	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00027	8d 4c 24 18	 lea	 ecx, DWORD PTR _strHEAD$[esp+68]
  0002b	89 5c 24 30	 mov	 DWORD PTR $T155173[esp+68], ebx
  0002f	c7 44 24 1c 08
	00 00 00	 mov	 DWORD PTR _wSIZE$[esp+68], 8
  00037	e8 00 00 00 00	 call	 ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >

; 61   : 	CString strBODY(_T(""));

  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00041	8d 4c 24 14	 lea	 ecx, DWORD PTR _strBODY$[esp+68]
  00045	89 5c 24 40	 mov	 DWORD PTR __$EHRec$[esp+76], ebx
  00049	e8 00 00 00 00	 call	 ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
  0004e	c6 44 24 3c 01	 mov	 BYTE PTR __$EHRec$[esp+72], 1

; 62   : 
; 63   : 	for( int i=0; i<INT(vItemID.size()); i++)

  00053	89 5c 24 24	 mov	 DWORD PTR _i$152283[esp+64], ebx
$L152284:
  00057	8b 74 24 4c	 mov	 esi, DWORD PTR _vItemID$[esp+60]
  0005b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0005e	85 c9		 test	 ecx, ecx
  00060	75 04		 jne	 SHORT $L155186
  00062	33 c0		 xor	 eax, eax
  00064	eb 08		 jmp	 SHORT $L155187
$L155186:
  00066	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00069	2b c1		 sub	 eax, ecx
  0006b	c1 f8 02	 sar	 eax, 2
$L155187:
  0006e	39 44 24 24	 cmp	 DWORD PTR _i$152283[esp+64], eax

; 64   : 	{
; 65   : 		int nPOS = strFormat.Find( _T("%s"), wPOS);

  00072	8b 7c 24 48	 mov	 edi, DWORD PTR _strFormat$[esp+60]
  00076	0f 8d 9b 02 00
	00		 jge	 $L152286
  0007c	8b 07		 mov	 eax, DWORD PTR [edi]
  0007e	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00081	0f b7 eb	 movzx	 ebp, bx
  00084	85 ed		 test	 ebp, ebp
  00086	7c 20		 jl	 SHORT $L155228
  00088	3b e9		 cmp	 ebp, ecx
  0008a	7f 1c		 jg	 SHORT $L155228
  0008c	03 c5		 add	 eax, ebp
  0008e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02DKCKIIND@?$CFs?$AA@
  00093	50		 push	 eax
  00094	e8 00 00 00 00	 call	 __mbsstr
  00099	83 c4 08	 add	 esp, 8
  0009c	85 c0		 test	 eax, eax
  0009e	74 08		 je	 SHORT $L155228
  000a0	2b 07		 sub	 eax, DWORD PTR [edi]
  000a2	89 44 24 20	 mov	 DWORD PTR _nPOS$152287[esp+64], eax
  000a6	eb 08		 jmp	 SHORT $L155224
$L155228:
  000a8	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR _nPOS$152287[esp+64], -1
$L155224:

; 66   : 
; 67   : 		if( nPOS < wPOS )

  000b0	8b 4c 24 20	 mov	 ecx, DWORD PTR _nPOS$152287[esp+64]
  000b4	3b cd		 cmp	 ecx, ebp
  000b6	0f 8c 5b 02 00
	00		 jl	 $L152286

; 68   : 			break;
; 69   : 
; 70   : 		CTTextLinkData *pLINK = GetTextLinkData(vItemID[i]);

  000bc	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000bf	8b 54 24 24	 mov	 edx, DWORD PTR _i$152283[esp+64]
  000c3	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]
  000c6	8b 44 24 1c	 mov	 eax, DWORD PTR _this$[esp+64]
  000ca	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  000cd	c1 e7 04	 shl	 edi, 4

; 71   : 		WORD wLEN = nPOS - wPOS;

  000d0	8b f1		 mov	 esi, ecx
  000d2	2b f3		 sub	 esi, ebx
  000d4	03 fa		 add	 edi, edx

; 72   : 
; 73   : 		if(wLEN)

  000d6	66 85 f6	 test	 si, si
  000d9	74 5f		 je	 SHORT $L156071

; 74   : 		{
; 75   : 			strBODY += strFormat.Mid( wPOS, wLEN);

  000db	0f b7 ce	 movzx	 ecx, si
  000de	51		 push	 ecx
  000df	8b 4c 24 4c	 mov	 ecx, DWORD PTR _strFormat$[esp+64]
  000e3	55		 push	 ebp
  000e4	8d 54 24 34	 lea	 edx, DWORD PTR $T155158[esp+72]
  000e8	52		 push	 edx
  000e9	e8 00 00 00 00	 call	 ?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@HH@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Mid
  000ee	8b 00		 mov	 eax, DWORD PTR [eax]
  000f0	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  000f3	51		 push	 ecx
  000f4	50		 push	 eax
  000f5	8d 4c 24 18	 lea	 ecx, DWORD PTR _strBODY$[esp+72]
  000f9	c6 44 24 44 02	 mov	 BYTE PTR __$EHRec$[esp+80], 2
  000fe	e8 00 00 00 00	 call	 ?Append@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::Append
  00103	8b 44 24 2c	 mov	 eax, DWORD PTR $T155158[esp+64]
  00107	83 c0 f0	 add	 eax, -16		; fffffff0H
  0010a	c6 44 24 3c 01	 mov	 BYTE PTR __$EHRec$[esp+72], 1
  0010f	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00112	83 ca ff	 or	 edx, -1
  00115	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00119	4a		 dec	 edx
  0011a	85 d2		 test	 edx, edx
  0011c	7f 08		 jg	 SHORT $L155346
  0011e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00120	8b 11		 mov	 edx, DWORD PTR [ecx]
  00122	50		 push	 eax
  00123	ff 52 04	 call	 DWORD PTR [edx+4]
$L155346:

; 76   : 			wSIZE += wLEN;

  00126	8b 44 24 18	 mov	 eax, DWORD PTR _wSIZE$[esp+64]
  0012a	03 c6		 add	 eax, esi

; 77   : 
; 78   : 			if( wSIZE > TCHAT_CHAR_MAX )

  0012c	66 3d 00 02	 cmp	 ax, 512			; 00000200H
  00130	89 44 24 18	 mov	 DWORD PTR _wSIZE$[esp+64], eax
  00134	0f 87 f6 00 00
	00		 ja	 $L156068
$L156071:

; 87   : 			}
; 88   : 		}
; 89   : 
; 90   : 		if(pLINK)

  0013a	85 ff		 test	 edi, edi
  0013c	0f 84 d9 00 00
	00		 je	 $L156070

; 91   : 		{
; 92   : 			const CString& strLINK = pLINK->ToStr();
; 93   : 			WORD vLINK[2] = {
; 94   : 				strLINK.GetLength(),

  00142	8b 47 04	 mov	 eax, DWORD PTR [edi+4]

; 95   : 				strBODY.GetLength()};

  00145	8b 4c 24 10	 mov	 ecx, DWORD PTR _strBODY$[esp+64]
  00149	8b 69 f4	 mov	 ebp, DWORD PTR [ecx-12]
  0014c	8d 77 04	 lea	 esi, DWORD PTR [edi+4]
  0014f	8b 78 f4	 mov	 edi, DWORD PTR [eax-12]

; 96   : 
; 97   : 			if(vLINK[0])

  00152	66 85 ff	 test	 di, di
  00155	0f 84 c0 00 00
	00		 je	 $L156070

; 98   : 			{
; 99   : 				CString strSIZE;

  0015b	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_strmgr@ATL@@3VCAtlStringMgr@1@A
  00161	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_strmgr@ATL@@3VCAtlStringMgr@1@A ; ATL::g_strmgr
  00166	ff 52 0c	 call	 DWORD PTR [edx+12]
  00169	8d 58 10	 lea	 ebx, DWORD PTR [eax+16]
  0016c	89 5c 24 28	 mov	 DWORD PTR _strSIZE$152308[esp+64], ebx

; 100  : 
; 101  : 				if( wSIZE + vLINK[0] + TCHAT_DWORD_SIZE > TCHAT_CHAR_MAX )

  00170	0f b7 4c 24 18	 movzx	 ecx, WORD PTR _wSIZE$[esp+64]
  00175	0f b7 c7	 movzx	 eax, di
  00178	8d 54 01 08	 lea	 edx, DWORD PTR [ecx+eax+8]
  0017c	81 fa 00 02 00
	00		 cmp	 edx, 512		; 00000200H
  00182	c6 44 24 3c 06	 mov	 BYTE PTR __$EHRec$[esp+72], 6
  00187	0f 8f 58 01 00
	00		 jg	 $L156069

; 103  : 
; 104  : 				strSIZE.Format( _T("%04X%04X"), vLINK[0], vLINK[1]);

  0018d	0f b7 cd	 movzx	 ecx, bp
  00190	51		 push	 ecx
  00191	50		 push	 eax
  00192	8d 54 24 30	 lea	 edx, DWORD PTR _strSIZE$152308[esp+72]
  00196	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_08EAKGLGNO@?$CF04X?$CF04X?$AA@
  0019b	52		 push	 edx
  0019c	e8 00 00 00 00	 call	 ?Format@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAAXPBDZZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Format

; 105  : 				strHEAD += strSIZE + strLINK;

  001a1	56		 push	 esi
  001a2	8d 44 24 3c	 lea	 eax, DWORD PTR _strSIZE$152308[esp+84]
  001a6	50		 push	 eax
  001a7	8d 4c 24 48	 lea	 ecx, DWORD PTR $T155162[esp+88]
  001ab	51		 push	 ecx
  001ac	e8 00 00 00 00	 call	 ??HATL@@YA?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@0@ABV10@0@Z ; ATL::operator+
  001b1	83 c4 1c	 add	 esp, 28			; 0000001cH
  001b4	8b 00		 mov	 eax, DWORD PTR [eax]
  001b6	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  001b9	51		 push	 ecx
  001ba	50		 push	 eax
  001bb	8d 4c 24 1c	 lea	 ecx, DWORD PTR _strHEAD$[esp+72]
  001bf	c6 44 24 44 07	 mov	 BYTE PTR __$EHRec$[esp+80], 7
  001c4	e8 00 00 00 00	 call	 ?Append@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::Append
  001c9	8b 44 24 30	 mov	 eax, DWORD PTR $T155162[esp+64]
  001cd	83 c0 f0	 add	 eax, -16		; fffffff0H
  001d0	c6 44 24 3c 06	 mov	 BYTE PTR __$EHRec$[esp+72], 6
  001d5	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  001d8	83 c9 ff	 or	 ecx, -1
  001db	f0 0f c1 0a	 lock	  xadd	 DWORD PTR [edx], ecx
  001df	49		 dec	 ecx
  001e0	85 c9		 test	 ecx, ecx
  001e2	7f 08		 jg	 SHORT $L155748
  001e4	8b 08		 mov	 ecx, DWORD PTR [eax]
  001e6	8b 11		 mov	 edx, DWORD PTR [ecx]
  001e8	50		 push	 eax
  001e9	ff 52 04	 call	 DWORD PTR [edx+4]
$L155748:

; 106  : 				wSIZE += vLINK[0] + TCHAT_DWORD_SIZE;

  001ec	8b 44 24 18	 mov	 eax, DWORD PTR _wSIZE$[esp+64]
  001f0	8d 4c 38 08	 lea	 ecx, DWORD PTR [eax+edi+8]

; 107  : 			}

  001f4	8b 44 24 28	 mov	 eax, DWORD PTR _strSIZE$152308[esp+64]
  001f8	83 c0 f0	 add	 eax, -16		; fffffff0H
  001fb	89 4c 24 18	 mov	 DWORD PTR _wSIZE$[esp+64], ecx
  001ff	c6 44 24 3c 01	 mov	 BYTE PTR __$EHRec$[esp+72], 1
  00204	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  00207	83 c9 ff	 or	 ecx, -1
  0020a	f0 0f c1 0a	 lock	  xadd	 DWORD PTR [edx], ecx
  0020e	49		 dec	 ecx
  0020f	85 c9		 test	 ecx, ecx
  00211	7f 08		 jg	 SHORT $L156070
  00213	8b 08		 mov	 ecx, DWORD PTR [eax]
  00215	8b 11		 mov	 edx, DWORD PTR [ecx]
  00217	50		 push	 eax
  00218	ff 52 04	 call	 DWORD PTR [edx+4]
$L156070:

; 108  : 		}
; 109  : 
; 110  : 		wPOS = nPOS + 2;

  0021b	8b 5c 24 20	 mov	 ebx, DWORD PTR _nPOS$152287[esp+64]
  0021f	8b 44 24 24	 mov	 eax, DWORD PTR _i$152283[esp+64]
  00223	83 c3 02	 add	 ebx, 2
  00226	40		 inc	 eax
  00227	89 44 24 24	 mov	 DWORD PTR _i$152283[esp+64], eax
  0022b	e9 27 fe ff ff	 jmp	 $L152284
$L156068:

; 79   : 			{
; 80   : 				wLEN = strBODY.GetLength();

  00230	8b 4c 24 10	 mov	 ecx, DWORD PTR _strBODY$[esp+64]
  00234	8b 49 f4	 mov	 ecx, DWORD PTR [ecx-12]

; 81   : 				wSIZE -= TCHAT_CHAR_MAX;

  00237	05 00 fe 00 00	 add	 eax, 65024		; 0000fe00H

; 82   : 
; 83   : 				if( wSIZE > wLEN )

  0023c	66 3b c1	 cmp	 ax, cx
  0023f	76 56		 jbe	 SHORT $L152298

; 84   : 					return BuildNetString( CString(_T("")), CString(_T("")));

  00241	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00246	8d 4c 24 50	 lea	 ecx, DWORD PTR $T155159[esp+64]
  0024a	e8 00 00 00 00	 call	 ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
  0024f	8b f0		 mov	 esi, eax
  00251	b3 03		 mov	 bl, 3
  00253	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00258	8d 4c 24 4c	 lea	 ecx, DWORD PTR $T155160[esp+64]
  0025c	88 5c 24 40	 mov	 BYTE PTR __$EHRec$[esp+76], bl
  00260	e8 00 00 00 00	 call	 ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
  00265	8b 4c 24 1c	 mov	 ecx, DWORD PTR _this$[esp+64]
  00269	56		 push	 esi
  0026a	8b 74 24 48	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+64]
  0026e	50		 push	 eax
  0026f	56		 push	 esi
  00270	c6 44 24 48 04	 mov	 BYTE PTR __$EHRec$[esp+84], 4
  00275	e8 00 00 00 00	 call	 ?BuildNetString@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0@Z ; CTTextLinker::BuildNetString
  0027a	8b 44 24 48	 mov	 eax, DWORD PTR $T155160[esp+60]
  0027e	83 c0 f0	 add	 eax, -16		; fffffff0H
  00281	88 5c 24 3c	 mov	 BYTE PTR __$EHRec$[esp+72], bl
  00285	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  00288	83 c9 ff	 or	 ecx, -1
  0028b	f0 0f c1 0a	 lock	  xadd	 DWORD PTR [edx], ecx
  0028f	49		 dec	 ecx
  00290	85 c9		 test	 ecx, ecx
  00292	e9 50 01 00 00	 jmp	 $L156080
$L152298:

; 85   : 
; 86   : 				return BuildNetString( strHEAD, strBODY.Left(wLEN - wSIZE));

  00297	0f b7 c9	 movzx	 ecx, cx
  0029a	0f b7 d0	 movzx	 edx, ax
  0029d	2b ca		 sub	 ecx, edx
  0029f	51		 push	 ecx
  002a0	8d 44 24 4c	 lea	 eax, DWORD PTR $T155161[esp+64]
  002a4	50		 push	 eax
  002a5	8d 4c 24 18	 lea	 ecx, DWORD PTR _strBODY$[esp+72]
  002a9	e8 00 00 00 00	 call	 ?Left@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Left
  002ae	8b 74 24 44	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+60]
  002b2	50		 push	 eax
  002b3	8d 4c 24 18	 lea	 ecx, DWORD PTR _strHEAD$[esp+68]
  002b7	51		 push	 ecx
  002b8	8b 4c 24 24	 mov	 ecx, DWORD PTR _this$[esp+72]
  002bc	56		 push	 esi
  002bd	c6 44 24 48 05	 mov	 BYTE PTR __$EHRec$[esp+84], 5
  002c2	e8 00 00 00 00	 call	 ?BuildNetString@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0@Z ; CTTextLinker::BuildNetString
  002c7	8b 44 24 48	 mov	 eax, DWORD PTR $T155161[esp+60]
  002cb	83 c0 f0	 add	 eax, -16		; fffffff0H
  002ce	c6 44 24 3c 01	 mov	 BYTE PTR __$EHRec$[esp+72], 1
  002d3	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  002d6	83 c9 ff	 or	 ecx, -1
  002d9	f0 0f c1 0a	 lock	  xadd	 DWORD PTR [edx], ecx
  002dd	49		 dec	 ecx
  002de	85 c9		 test	 ecx, ecx
  002e0	e9 25 01 00 00	 jmp	 $L156078
$L156069:

; 102  : 					return BuildNetString( strHEAD, strBODY);

  002e5	8b 74 24 44	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+60]
  002e9	8d 44 24 10	 lea	 eax, DWORD PTR _strBODY$[esp+64]
  002ed	50		 push	 eax
  002ee	8d 4c 24 18	 lea	 ecx, DWORD PTR _strHEAD$[esp+68]
  002f2	51		 push	 ecx
  002f3	8b 4c 24 24	 mov	 ecx, DWORD PTR _this$[esp+72]
  002f7	56		 push	 esi
  002f8	e8 00 00 00 00	 call	 ?BuildNetString@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0@Z ; CTTextLinker::BuildNetString
  002fd	8d 43 f0	 lea	 eax, DWORD PTR [ebx-16]
  00300	c6 44 24 3c 01	 mov	 BYTE PTR __$EHRec$[esp+72], 1
  00305	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  00308	83 c9 ff	 or	 ecx, -1
  0030b	f0 0f c1 0a	 lock	  xadd	 DWORD PTR [edx], ecx
  0030f	49		 dec	 ecx
  00310	85 c9		 test	 ecx, ecx
  00312	e9 f3 00 00 00	 jmp	 $L156078
$L152286:

; 111  : 	}
; 112  : 
; 113  : 	WORD wLEN = strFormat.GetLength();

  00317	8b 07		 mov	 eax, DWORD PTR [edi]
  00319	8b 68 f4	 mov	 ebp, DWORD PTR [eax-12]

; 114  : 	if( wPOS < wLEN )

  0031c	66 3b dd	 cmp	 bx, bp
  0031f	0f 83 53 01 00
	00		 jae	 $L156009

; 115  : 	{
; 116  : 		strBODY += strFormat.Mid(wPOS);

  00325	0f b7 cb	 movzx	 ecx, bx
  00328	51		 push	 ecx
  00329	8d 54 24 4c	 lea	 edx, DWORD PTR $T155163[esp+64]
  0032d	52		 push	 edx
  0032e	8b cf		 mov	 ecx, edi
  00330	e8 00 00 00 00	 call	 ?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Mid
  00335	8b 00		 mov	 eax, DWORD PTR [eax]
  00337	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  0033a	51		 push	 ecx
  0033b	50		 push	 eax
  0033c	8d 4c 24 18	 lea	 ecx, DWORD PTR _strBODY$[esp+72]
  00340	c6 44 24 44 08	 mov	 BYTE PTR __$EHRec$[esp+80], 8
  00345	e8 00 00 00 00	 call	 ?Append@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::Append
  0034a	8b 44 24 48	 mov	 eax, DWORD PTR $T155163[esp+60]
  0034e	83 c0 f0	 add	 eax, -16		; fffffff0H
  00351	c6 44 24 3c 01	 mov	 BYTE PTR __$EHRec$[esp+72], 1
  00356	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00359	83 ca ff	 or	 edx, -1
  0035c	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00360	4a		 dec	 edx
  00361	85 d2		 test	 edx, edx
  00363	7f 08		 jg	 SHORT $L155858
  00365	8b 08		 mov	 ecx, DWORD PTR [eax]
  00367	8b 11		 mov	 edx, DWORD PTR [ecx]
  00369	50		 push	 eax
  0036a	ff 52 04	 call	 DWORD PTR [edx+4]
$L155858:

; 117  : 		wSIZE += wLEN - wPOS;

  0036d	8b 4c 24 18	 mov	 ecx, DWORD PTR _wSIZE$[esp+64]
  00371	2b eb		 sub	 ebp, ebx
  00373	03 cd		 add	 ecx, ebp

; 118  : 
; 119  : 		if( wSIZE > TCHAT_CHAR_MAX )

  00375	66 81 f9 00 02	 cmp	 cx, 512			; 00000200H
  0037a	0f 86 f8 00 00
	00		 jbe	 $L156009

; 120  : 		{
; 121  : 			wLEN = strBODY.GetLength();

  00380	8b 44 24 10	 mov	 eax, DWORD PTR _strBODY$[esp+64]
  00384	8b 40 f4	 mov	 eax, DWORD PTR [eax-12]

; 122  : 			wSIZE -= TCHAT_CHAR_MAX;

  00387	81 c1 00 fe 00
	00		 add	 ecx, 65024		; 0000fe00H

; 123  : 
; 124  : 			if( wSIZE > wLEN )

  0038d	66 3b c8	 cmp	 cx, ax
  00390	0f 86 99 00 00
	00		 jbe	 $L152317

; 125  : 				return BuildNetString( CString(_T("")), CString(_T("")));

  00396	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0039b	8d 4c 24 50	 lea	 ecx, DWORD PTR $T155164[esp+64]
  0039f	e8 00 00 00 00	 call	 ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
  003a4	8b f8		 mov	 edi, eax
  003a6	b3 09		 mov	 bl, 9
  003a8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  003ad	8d 4c 24 4c	 lea	 ecx, DWORD PTR $T155165[esp+64]
  003b1	88 5c 24 40	 mov	 BYTE PTR __$EHRec$[esp+76], bl
  003b5	e8 00 00 00 00	 call	 ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
  003ba	8b 74 24 44	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+60]
  003be	8b 4c 24 1c	 mov	 ecx, DWORD PTR _this$[esp+64]
  003c2	57		 push	 edi
  003c3	50		 push	 eax
  003c4	56		 push	 esi
  003c5	c6 44 24 48 0a	 mov	 BYTE PTR __$EHRec$[esp+84], 10 ; 0000000aH
  003ca	e8 00 00 00 00	 call	 ?BuildNetString@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0@Z ; CTTextLinker::BuildNetString
  003cf	8b 44 24 48	 mov	 eax, DWORD PTR $T155165[esp+60]
  003d3	83 c0 f0	 add	 eax, -16		; fffffff0H
  003d6	88 5c 24 3c	 mov	 BYTE PTR __$EHRec$[esp+72], bl
  003da	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  003dd	83 ca ff	 or	 edx, -1
  003e0	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  003e4	4a		 dec	 edx
  003e5	85 d2		 test	 edx, edx
$L156080:
  003e7	7f 08		 jg	 SHORT $L155894
  003e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  003eb	8b 11		 mov	 edx, DWORD PTR [ecx]
  003ed	50		 push	 eax
  003ee	ff 52 04	 call	 DWORD PTR [edx+4]
$L155894:
  003f1	8b 44 24 4c	 mov	 eax, DWORD PTR $T155164[esp+60]
  003f5	83 c0 f0	 add	 eax, -16		; fffffff0H
  003f8	c6 44 24 3c 01	 mov	 BYTE PTR __$EHRec$[esp+72], 1
  003fd	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00400	83 ca ff	 or	 edx, -1
  00403	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00407	4a		 dec	 edx
  00408	85 d2		 test	 edx, edx
$L156078:
  0040a	7f 08		 jg	 SHORT $L155921
  0040c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0040e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00410	50		 push	 eax
  00411	ff 52 04	 call	 DWORD PTR [edx+4]
$L155921:
  00414	8b 44 24 10	 mov	 eax, DWORD PTR _strBODY$[esp+64]
  00418	83 c0 f0	 add	 eax, -16		; fffffff0H
  0041b	c6 44 24 3c 00	 mov	 BYTE PTR __$EHRec$[esp+72], 0
  00420	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00423	83 ca ff	 or	 edx, -1
  00426	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0042a	4a		 dec	 edx
  0042b	85 d2		 test	 edx, edx
  0042d	eb 7a		 jmp	 SHORT $L156077
$L152317:

; 126  : 
; 127  : 			strBODY = strBODY.Left(wLEN - wSIZE);

  0042f	0f b7 c9	 movzx	 ecx, cx
  00432	0f b7 c0	 movzx	 eax, ax
  00435	2b c1		 sub	 eax, ecx
  00437	50		 push	 eax
  00438	8d 54 24 34	 lea	 edx, DWORD PTR $T155166[esp+68]
  0043c	52		 push	 edx
  0043d	8d 4c 24 18	 lea	 ecx, DWORD PTR _strBODY$[esp+72]
  00441	e8 00 00 00 00	 call	 ?Left@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Left
  00446	50		 push	 eax
  00447	8d 4c 24 14	 lea	 ecx, DWORD PTR _strBODY$[esp+68]
  0044b	c6 44 24 40 0b	 mov	 BYTE PTR __$EHRec$[esp+76], 11 ; 0000000bH
  00450	e8 00 00 00 00	 call	 ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CSimpleStringT<char,0>::operator=
  00455	8b 44 24 30	 mov	 eax, DWORD PTR $T155166[esp+64]
  00459	83 c0 f0	 add	 eax, -16		; fffffff0H
  0045c	c6 44 24 3c 01	 mov	 BYTE PTR __$EHRec$[esp+72], 1
  00461	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00464	83 ca ff	 or	 edx, -1
  00467	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0046b	4a		 dec	 edx
  0046c	85 d2		 test	 edx, edx
  0046e	7f 08		 jg	 SHORT $L156009
  00470	8b 08		 mov	 ecx, DWORD PTR [eax]
  00472	8b 11		 mov	 edx, DWORD PTR [ecx]
  00474	50		 push	 eax
  00475	ff 52 04	 call	 DWORD PTR [edx+4]
$L156009:

; 128  : 		}
; 129  : 	}
; 130  : 
; 131  : 	return BuildNetString( strHEAD, strBODY);

  00478	8b 74 24 44	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+60]
  0047c	8d 44 24 10	 lea	 eax, DWORD PTR _strBODY$[esp+64]
  00480	50		 push	 eax
  00481	8d 4c 24 18	 lea	 ecx, DWORD PTR _strHEAD$[esp+68]
  00485	51		 push	 ecx
  00486	8b 4c 24 24	 mov	 ecx, DWORD PTR _this$[esp+72]
  0048a	56		 push	 esi
  0048b	e8 00 00 00 00	 call	 ?BuildNetString@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0@Z ; CTTextLinker::BuildNetString
  00490	8b 44 24 10	 mov	 eax, DWORD PTR _strBODY$[esp+64]
  00494	83 c0 f0	 add	 eax, -16		; fffffff0H
  00497	c6 44 24 3c 00	 mov	 BYTE PTR __$EHRec$[esp+72], 0
  0049c	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  0049f	83 c9 ff	 or	 ecx, -1
  004a2	f0 0f c1 0a	 lock	  xadd	 DWORD PTR [edx], ecx
  004a6	49		 dec	 ecx
  004a7	85 c9		 test	 ecx, ecx
$L156077:
  004a9	7f 08		 jg	 SHORT $L156036
  004ab	8b 08		 mov	 ecx, DWORD PTR [eax]
  004ad	8b 11		 mov	 edx, DWORD PTR [ecx]
  004af	50		 push	 eax
  004b0	ff 52 04	 call	 DWORD PTR [edx+4]
$L156036:
  004b3	8b 44 24 14	 mov	 eax, DWORD PTR _strHEAD$[esp+64]
  004b7	83 c0 f0	 add	 eax, -16		; fffffff0H
  004ba	c7 44 24 3c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+72], -1
  004c2	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  004c5	83 ca ff	 or	 edx, -1
  004c8	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  004cc	4a		 dec	 edx
  004cd	85 d2		 test	 edx, edx
  004cf	7f 08		 jg	 SHORT $L156063
  004d1	8b 08		 mov	 ecx, DWORD PTR [eax]
  004d3	8b 11		 mov	 edx, DWORD PTR [ecx]
  004d5	50		 push	 eax
  004d6	ff 52 04	 call	 DWORD PTR [edx+4]
$L156063:

; 132  : }

  004d9	8b 4c 24 34	 mov	 ecx, DWORD PTR __$EHRec$[esp+64]
  004dd	5f		 pop	 edi
  004de	8b c6		 mov	 eax, esi
  004e0	5e		 pop	 esi
  004e1	5d		 pop	 ebp
  004e2	5b		 pop	 ebx
  004e3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  004ea	83 c4 30	 add	 esp, 48			; 00000030H
  004ed	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L155167:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR _strHEAD$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L155168:
  00008	8d 4d d0	 lea	 ecx, DWORD PTR _strBODY$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L155169:
  00010	8d 4d ec	 lea	 ecx, DWORD PTR $T155158[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L155176:
  00018	8d 4d e8	 lea	 ecx, DWORD PTR _strSIZE$152308[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L155177:
  00020	8d 4d f0	 lea	 ecx, DWORD PTR $T155162[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L155170:
  00028	8d 4d 0c	 lea	 ecx, DWORD PTR $T155159[ebp-4]
  0002b	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L155171:
  00030	8d 4d 08	 lea	 ecx, DWORD PTR $T155160[ebp-4]
  00033	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L155175:
  00038	8d 4d 08	 lea	 ecx, DWORD PTR $T155161[ebp-4]
  0003b	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L155178:
  00040	8d 4d 08	 lea	 ecx, DWORD PTR $T155163[ebp-4]
  00043	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L155179:
  00048	8d 4d 0c	 lea	 ecx, DWORD PTR $T155164[ebp-4]
  0004b	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L155180:
  00050	8d 4d 08	 lea	 ecx, DWORD PTR $T155165[ebp-4]
  00053	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L155181:
  00058	8d 4d f0	 lea	 ecx, DWORD PTR $T155166[ebp]
  0005b	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
__ehhandler$?MakeItemNetText@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@ABV?$vector@KV?$allocator@K@std@@@std@@@Z:
  00060	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T156065
  00065	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?MakeItemNetText@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@ABV?$vector@KV?$allocator@K@std@@@std@@@Z ENDP ; CTTextLinker::MakeItemNetText
PUBLIC	?AppendNetString@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0@Z ; CTTextLinker::AppendNetString
PUBLIC	??_C@_02EMFKHFLK@?$CFX?$AA@			; `string'
PUBLIC	??_C@_04JIMNDDED@?$CF08X?$AA@			; `string'
EXTRN	_sscanf:NEAR
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
xdata$x	SEGMENT
$T156954 DD	0ffffffffH
	DD	FLAT:$L156099
	DD	00H
	DD	FLAT:$L156100
	DD	0ffffffffH
	DD	FLAT:$L156105
	DD	02H
	DD	FLAT:$L156106
	DD	0ffffffffH
	DD	FLAT:$L156107
	DD	04H
	DD	FLAT:$L156108
	DD	05H
	DD	FLAT:$L156109
	DD	06H
	DD	FLAT:$L156111
	DD	06H
	DD	FLAT:$L156112
	DD	06H
	DD	FLAT:$L156113
	DD	09H
	DD	FLAT:$L156115
	DD	0aH
	DD	FLAT:$L156116
	DD	09H
	DD	FLAT:$L156117
$T156942 DD	019930520H
	DD	0dH
	DD	FLAT:$T156954
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_02EMFKHFLK@?$CFX?$AA@
CONST	SEGMENT
??_C@_02EMFKHFLK@?$CFX?$AA@ DB '%X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JIMNDDED@?$CF08X?$AA@
CONST	SEGMENT
??_C@_04JIMNDDED@?$CF08X?$AA@ DB '%08X', 00H		; `string'
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\ttextlinker.cpp
CONST	ENDS
;	COMDAT ?AppendNetString@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0@Z
_TEXT	SEGMENT
_strDATA$ = -52						; size = 4
$T156126 = -48						; size = 4
_strBODY$ = -48						; size = 4
_strHEAD$ = -44						; size = 4
$T156090 = -44						; size = 4
$T156089 = -44						; size = 4
$T156087 = -44						; size = 4
$T156095 = -40						; size = 4
tv775 = -36						; size = 4
_wBODY$ = -32						; size = 2
$T156097 = -28						; size = 4
$T156096 = -24						; size = 4
$T156102 = -20						; size = 4
$T156098 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_dwCODE$ = 12						; size = 4
_strMSG1$ = 12						; size = 4
_strSIZE$152374 = 16					; size = 4
$T156094 = 16						; size = 4
$T156093 = 16						; size = 4
$T156092 = 16						; size = 4
$T156091 = 16						; size = 4
$T156088 = 16						; size = 4
_strMSG2$ = 16						; size = 4
?AppendNetString@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0@Z PROC NEAR ; CTTextLinker::AppendNetString, COMDAT
; _this$ = ecx

; 145  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?AppendNetString@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 28	 sub	 esp, 40			; 00000028H
  00018	53		 push	 ebx
  00019	55		 push	 ebp
  0001a	33 db		 xor	 ebx, ebx
  0001c	89 5c 24 28	 mov	 DWORD PTR $T156102[esp+60], ebx
  00020	56		 push	 esi

; 146  : 	WORD wLENGTH = strMSG1.GetLength();

  00021	8b 74 24 48	 mov	 esi, DWORD PTR _strMSG1$[esp+60]
  00025	8b 06		 mov	 eax, DWORD PTR [esi]
  00027	8b 40 f4	 mov	 eax, DWORD PTR [eax-12]

; 147  : 
; 148  : 	if( wLENGTH < TCHAT_DWORD_SIZE )

  0002a	66 3d 08 00	 cmp	 ax, 8
  0002e	8b e9		 mov	 ebp, ecx
  00030	89 6c 24 30	 mov	 DWORD PTR _this$[esp+64], ebp
  00034	89 44 24 10	 mov	 DWORD PTR $T156126[esp+64], eax
  00038	0f 83 86 00 00
	00		 jae	 $L152339

; 149  : 		return BuildNetString( CString(_T("")), CString(_T("")));

  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00043	8d 4c 24 18	 lea	 ecx, DWORD PTR $T156087[esp+68]
  00047	e8 00 00 00 00	 call	 ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
  0004c	8b f0		 mov	 esi, eax
  0004e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00053	8d 4c 24 50	 lea	 ecx, DWORD PTR $T156088[esp+64]
  00057	89 5c 24 40	 mov	 DWORD PTR __$EHRec$[esp+76], ebx
  0005b	e8 00 00 00 00	 call	 ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
  00060	56		 push	 esi
  00061	8b 74 24 48	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+64]
  00065	50		 push	 eax
  00066	56		 push	 esi
  00067	8b cd		 mov	 ecx, ebp
  00069	c6 44 24 48 01	 mov	 BYTE PTR __$EHRec$[esp+84], 1
  0006e	e8 00 00 00 00	 call	 ?BuildNetString@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0@Z ; CTTextLinker::BuildNetString
  00073	8b 44 24 4c	 mov	 eax, DWORD PTR $T156088[esp+60]
  00077	83 c0 f0	 add	 eax, -16		; fffffff0H
  0007a	88 5c 24 3c	 mov	 BYTE PTR __$EHRec$[esp+72], bl
  0007e	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00081	83 ca ff	 or	 edx, -1
  00084	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00088	4a		 dec	 edx
  00089	85 d2		 test	 edx, edx
  0008b	7f 08		 jg	 SHORT $L156153
  0008d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00091	50		 push	 eax
  00092	ff 52 04	 call	 DWORD PTR [edx+4]
$L156153:
  00095	8b 44 24 14	 mov	 eax, DWORD PTR $T156087[esp+64]
  00099	83 c0 f0	 add	 eax, -16		; fffffff0H
  0009c	c7 44 24 3c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+72], -1
  000a4	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  000a7	83 ca ff	 or	 edx, -1
  000aa	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  000ae	4a		 dec	 edx
  000af	85 d2		 test	 edx, edx
  000b1	0f 8f e4 04 00
	00		 jg	 $L156180
  000b7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b9	8b 11		 mov	 edx, DWORD PTR [ecx]
  000bb	50		 push	 eax
  000bc	ff 52 04	 call	 DWORD PTR [edx+4]
  000bf	e9 d7 04 00 00	 jmp	 $L156180
$L152339:

; 150  : 
; 151  : 	DWORD dwCODE = 0;
; 152  : 	WORD wHEAD = 0;
; 153  : 	WORD wBODY = 0;
; 154  : 	WORD wBASE = 0;
; 155  : 
; 156  : 	sscanf( LPCSTR(strMSG1.Left(TCHAT_DWORD_SIZE)), _T("%X"), &dwCODE);

  000c4	6a 08		 push	 8
  000c6	8d 44 24 18	 lea	 eax, DWORD PTR $T156089[esp+68]
  000ca	50		 push	 eax
  000cb	8b ce		 mov	 ecx, esi
  000cd	89 5c 24 50	 mov	 DWORD PTR _dwCODE$[esp+68], ebx
  000d1	e8 00 00 00 00	 call	 ?Left@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Left
  000d6	8b 00		 mov	 eax, DWORD PTR [eax]
  000d8	8d 4c 24 48	 lea	 ecx, DWORD PTR _dwCODE$[esp+60]
  000dc	51		 push	 ecx
  000dd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02EMFKHFLK@?$CFX?$AA@
  000e2	50		 push	 eax
  000e3	e8 00 00 00 00	 call	 _sscanf
  000e8	8b 44 24 20	 mov	 eax, DWORD PTR $T156089[esp+76]
  000ec	83 c0 f0	 add	 eax, -16		; fffffff0H
  000ef	83 c4 0c	 add	 esp, 12			; 0000000cH
  000f2	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  000f5	83 c9 ff	 or	 ecx, -1
  000f8	f0 0f c1 0a	 lock	  xadd	 DWORD PTR [edx], ecx
  000fc	49		 dec	 ecx
  000fd	85 c9		 test	 ecx, ecx
  000ff	7f 08		 jg	 SHORT $L156212
  00101	8b 08		 mov	 ecx, DWORD PTR [eax]
  00103	8b 11		 mov	 edx, DWORD PTR [ecx]
  00105	50		 push	 eax
  00106	ff 52 04	 call	 DWORD PTR [edx+4]
$L156212:

; 157  : 	wHEAD = HIWORD(dwCODE);

  00109	8b 44 24 48	 mov	 eax, DWORD PTR _dwCODE$[esp+60]

; 158  : 	wBODY = LOWORD(dwCODE);
; 159  : 
; 160  : 	if( wHEAD + wBODY + TCHAT_DWORD_SIZE != wLENGTH )

  0010d	0f b7 54 24 10	 movzx	 edx, WORD PTR $T156126[esp+64]
  00112	8b c8		 mov	 ecx, eax
  00114	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00117	57		 push	 edi
  00118	89 44 24 24	 mov	 DWORD PTR _wBODY$[esp+68], eax
  0011c	0f b7 c0	 movzx	 eax, ax
  0011f	0f b7 f9	 movzx	 edi, cx
  00122	8d 4c 07 08	 lea	 ecx, DWORD PTR [edi+eax+8]
  00126	3b ca		 cmp	 ecx, edx
  00128	89 44 24 20	 mov	 DWORD PTR tv775[esp+68], eax
  0012c	74 68		 je	 SHORT $L152353

; 161  : 		return BuildNetString( CString(_T("")), CString(_T("")));

  0012e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00133	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T156090[esp+72]
  00137	e8 00 00 00 00	 call	 ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
  0013c	8b f0		 mov	 esi, eax
  0013e	bb 02 00 00 00	 mov	 ebx, 2
  00143	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00148	8d 4c 24 54	 lea	 ecx, DWORD PTR $T156091[esp+68]
  0014c	89 5c 24 44	 mov	 DWORD PTR __$EHRec$[esp+80], ebx
  00150	e8 00 00 00 00	 call	 ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
  00155	56		 push	 esi
  00156	8b 74 24 4c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+68]
  0015a	50		 push	 eax
  0015b	56		 push	 esi
  0015c	8b cd		 mov	 ecx, ebp
  0015e	c6 44 24 4c 03	 mov	 BYTE PTR __$EHRec$[esp+88], 3
  00163	e8 00 00 00 00	 call	 ?BuildNetString@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0@Z ; CTTextLinker::BuildNetString
  00168	8b 44 24 50	 mov	 eax, DWORD PTR $T156091[esp+64]
  0016c	83 c0 f0	 add	 eax, -16		; fffffff0H
  0016f	88 5c 24 40	 mov	 BYTE PTR __$EHRec$[esp+76], bl
  00173	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00176	83 ca ff	 or	 edx, -1
  00179	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0017d	4a		 dec	 edx
  0017e	85 d2		 test	 edx, edx
  00180	7f 08		 jg	 SHORT $L156239
  00182	8b 08		 mov	 ecx, DWORD PTR [eax]
  00184	8b 11		 mov	 edx, DWORD PTR [ecx]
  00186	50		 push	 eax
  00187	ff 52 04	 call	 DWORD PTR [edx+4]
$L156239:
  0018a	8b 44 24 18	 mov	 eax, DWORD PTR $T156090[esp+68]

; 178  : 		return strMSG1;

  0018e	83 c0 f0	 add	 eax, -16		; fffffff0H
  00191	e9 e5 03 00 00	 jmp	 $L156949
$L152353:

; 162  : 
; 163  : 	CString strBODY = strMSG1.Mid( TCHAT_DWORD_SIZE + wHEAD, wBODY);

  00196	50		 push	 eax
  00197	8d 47 08	 lea	 eax, DWORD PTR [edi+8]
  0019a	50		 push	 eax
  0019b	8d 4c 24 1c	 lea	 ecx, DWORD PTR _strBODY$[esp+76]
  0019f	51		 push	 ecx
  001a0	8b ce		 mov	 ecx, esi
  001a2	e8 00 00 00 00	 call	 ?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@HH@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Mid

; 164  : 	CString strHEAD = strMSG1.Mid( TCHAT_DWORD_SIZE, wHEAD);

  001a7	57		 push	 edi
  001a8	6a 08		 push	 8
  001aa	8d 54 24 20	 lea	 edx, DWORD PTR _strHEAD$[esp+76]
  001ae	52		 push	 edx
  001af	8b ce		 mov	 ecx, esi
  001b1	c7 44 24 4c 04
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+88], 4
  001b9	e8 00 00 00 00	 call	 ?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@HH@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Mid

; 165  : 	CString strDATA(_T(""));

  001be	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  001c3	8d 4c 24 14	 lea	 ecx, DWORD PTR _strDATA$[esp+72]
  001c7	c6 44 24 44 05	 mov	 BYTE PTR __$EHRec$[esp+80], 5
  001cc	e8 00 00 00 00	 call	 ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >

; 166  : 
; 167  : 	wLENGTH = strMSG2.GetLength();

  001d1	8b 7c 24 50	 mov	 edi, DWORD PTR _strMSG2$[esp+64]
  001d5	8b 07		 mov	 eax, DWORD PTR [edi]
  001d7	8b 58 f4	 mov	 ebx, DWORD PTR [eax-12]

; 168  : 	wBASE = wBODY;
; 169  : 
; 170  : 	if( wLENGTH < TCHAT_DWORD_SIZE )

  001da	66 83 fb 08	 cmp	 bx, 8
  001de	c6 44 24 40 06	 mov	 BYTE PTR __$EHRec$[esp+76], 6
  001e3	73 19		 jae	 SHORT $L152362

; 171  : 		return strMSG1;

  001e5	8b 36		 mov	 esi, DWORD PTR [esi]
  001e7	83 ee 10	 sub	 esi, 16			; 00000010H
  001ea	56		 push	 esi
  001eb	e8 00 00 00 00	 call	 ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData
  001f0	8b 74 24 4c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+68]
  001f4	83 c4 04	 add	 esp, 4
  001f7	83 c0 10	 add	 eax, 16			; 00000010H
  001fa	89 06		 mov	 DWORD PTR [esi], eax
  001fc	eb 67		 jmp	 SHORT $L156953
$L152362:

; 172  : 
; 173  : 	sscanf( LPCSTR(strMSG2.Left(TCHAT_DWORD_SIZE)), _T("%X"), &dwCODE);

  001fe	6a 08		 push	 8
  00200	8d 44 24 54	 lea	 eax, DWORD PTR $T156092[esp+68]
  00204	50		 push	 eax
  00205	8b cf		 mov	 ecx, edi
  00207	e8 00 00 00 00	 call	 ?Left@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Left
  0020c	8b 00		 mov	 eax, DWORD PTR [eax]
  0020e	8d 4c 24 4c	 lea	 ecx, DWORD PTR _dwCODE$[esp+64]
  00212	51		 push	 ecx
  00213	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02EMFKHFLK@?$CFX?$AA@
  00218	50		 push	 eax
  00219	e8 00 00 00 00	 call	 _sscanf
  0021e	8b 44 24 5c	 mov	 eax, DWORD PTR $T156092[esp+76]
  00222	83 c0 f0	 add	 eax, -16		; fffffff0H
  00225	83 c4 0c	 add	 esp, 12			; 0000000cH
  00228	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  0022b	83 c9 ff	 or	 ecx, -1
  0022e	f0 0f c1 0a	 lock	  xadd	 DWORD PTR [edx], ecx
  00232	49		 dec	 ecx
  00233	85 c9		 test	 ecx, ecx
  00235	7f 08		 jg	 SHORT $L156424
  00237	8b 08		 mov	 ecx, DWORD PTR [eax]
  00239	8b 11		 mov	 edx, DWORD PTR [ecx]
  0023b	50		 push	 eax
  0023c	ff 52 04	 call	 DWORD PTR [edx+4]
$L156424:

; 174  : 	wHEAD = HIWORD(dwCODE);

  0023f	8b 4c 24 4c	 mov	 ecx, DWORD PTR _dwCODE$[esp+64]

; 175  : 	wBODY = LOWORD(dwCODE);
; 176  : 
; 177  : 	if( wHEAD + wBODY + TCHAT_DWORD_SIZE != wLENGTH )

  00243	0f b7 44 24 4c	 movzx	 eax, WORD PTR _dwCODE$[esp+64]
  00248	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0024b	0f b7 e9	 movzx	 ebp, cx
  0024e	0f b7 d3	 movzx	 edx, bx
  00251	8d 4c 28 08	 lea	 ecx, DWORD PTR [eax+ebp+8]
  00255	3b ca		 cmp	 ecx, edx
  00257	74 5e		 je	 SHORT $L152368

; 178  : 		return strMSG1;

  00259	56		 push	 esi
  0025a	8b 74 24 4c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+68]
  0025e	8b ce		 mov	 ecx, esi
  00260	e8 00 00 00 00	 call	 ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@ABV01@@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L156953:
  00265	8b 44 24 10	 mov	 eax, DWORD PTR _strDATA$[esp+68]
  00269	83 c0 f0	 add	 eax, -16		; fffffff0H
  0026c	c6 44 24 40 05	 mov	 BYTE PTR __$EHRec$[esp+76], 5
  00271	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00274	83 ca ff	 or	 edx, -1
  00277	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0027b	4a		 dec	 edx
  0027c	85 d2		 test	 edx, edx
  0027e	7f 08		 jg	 SHORT $L156451
  00280	8b 08		 mov	 ecx, DWORD PTR [eax]
  00282	8b 11		 mov	 edx, DWORD PTR [ecx]
  00284	50		 push	 eax
  00285	ff 52 04	 call	 DWORD PTR [edx+4]
$L156451:
  00288	8b 44 24 18	 mov	 eax, DWORD PTR _strHEAD$[esp+68]
  0028c	83 c0 f0	 add	 eax, -16		; fffffff0H
  0028f	c6 44 24 40 04	 mov	 BYTE PTR __$EHRec$[esp+76], 4
  00294	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00297	83 ca ff	 or	 edx, -1
  0029a	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0029e	4a		 dec	 edx
  0029f	85 d2		 test	 edx, edx
  002a1	7f 08		 jg	 SHORT $L156477
  002a3	8b 08		 mov	 ecx, DWORD PTR [eax]
  002a5	8b 11		 mov	 edx, DWORD PTR [ecx]
  002a7	50		 push	 eax
  002a8	ff 52 04	 call	 DWORD PTR [edx+4]
$L156477:
  002ab	8b 44 24 14	 mov	 eax, DWORD PTR _strBODY$[esp+68]
  002af	83 c0 f0	 add	 eax, -16		; fffffff0H
  002b2	e9 c4 02 00 00	 jmp	 $L156949
$L152368:

; 179  : 
; 180  : 	strBODY += strMSG2.Mid( TCHAT_DWORD_SIZE + wHEAD, wBODY);

  002b7	50		 push	 eax
  002b8	8d 45 08	 lea	 eax, DWORD PTR [ebp+8]
  002bb	50		 push	 eax
  002bc	8d 4c 24 58	 lea	 ecx, DWORD PTR $T156093[esp+72]
  002c0	51		 push	 ecx
  002c1	8b cf		 mov	 ecx, edi
  002c3	e8 00 00 00 00	 call	 ?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@HH@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Mid
  002c8	8b 00		 mov	 eax, DWORD PTR [eax]
  002ca	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  002cd	51		 push	 ecx
  002ce	50		 push	 eax
  002cf	8d 4c 24 1c	 lea	 ecx, DWORD PTR _strBODY$[esp+76]
  002d3	c6 44 24 48 07	 mov	 BYTE PTR __$EHRec$[esp+84], 7
  002d8	e8 00 00 00 00	 call	 ?Append@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::Append
  002dd	8b 44 24 50	 mov	 eax, DWORD PTR $T156093[esp+64]
  002e1	83 c0 f0	 add	 eax, -16		; fffffff0H
  002e4	c6 44 24 40 06	 mov	 BYTE PTR __$EHRec$[esp+76], 6
  002e9	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  002ec	83 c9 ff	 or	 ecx, -1
  002ef	f0 0f c1 0a	 lock	  xadd	 DWORD PTR [edx], ecx
  002f3	49		 dec	 ecx
  002f4	85 c9		 test	 ecx, ecx
  002f6	7f 08		 jg	 SHORT $L156578
  002f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  002fa	8b 11		 mov	 edx, DWORD PTR [ecx]
  002fc	50		 push	 eax
  002fd	ff 52 04	 call	 DWORD PTR [edx+4]
$L156578:

; 181  : 	strDATA = strMSG2.Mid( TCHAT_DWORD_SIZE, wHEAD);

  00300	55		 push	 ebp
  00301	6a 08		 push	 8
  00303	8d 44 24 58	 lea	 eax, DWORD PTR $T156094[esp+72]
  00307	50		 push	 eax
  00308	8b cf		 mov	 ecx, edi
  0030a	e8 00 00 00 00	 call	 ?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@HH@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Mid
  0030f	50		 push	 eax
  00310	8d 4c 24 14	 lea	 ecx, DWORD PTR _strDATA$[esp+72]
  00314	c6 44 24 44 08	 mov	 BYTE PTR __$EHRec$[esp+80], 8
  00319	e8 00 00 00 00	 call	 ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CSimpleStringT<char,0>::operator=
  0031e	8b 44 24 50	 mov	 eax, DWORD PTR $T156094[esp+64]
  00322	83 c0 f0	 add	 eax, -16		; fffffff0H
  00325	c6 44 24 40 06	 mov	 BYTE PTR __$EHRec$[esp+76], 6
  0032a	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  0032d	83 ca ff	 or	 edx, -1
  00330	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00334	4a		 dec	 edx
  00335	85 d2		 test	 edx, edx
  00337	7f 08		 jg	 SHORT $L156609
  00339	8b 08		 mov	 ecx, DWORD PTR [eax]
  0033b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0033d	50		 push	 eax
  0033e	ff 52 04	 call	 DWORD PTR [edx+4]
$L156609:

; 182  : 
; 183  : 	wLENGTH = strDATA.GetLength();

  00341	8b 44 24 10	 mov	 eax, DWORD PTR _strDATA$[esp+68]
  00345	8b 70 f4	 mov	 esi, DWORD PTR [eax-12]

; 184  : 	wBODY = strBODY.GetLength();
; 185  : 
; 186  : 	while( wLENGTH >= TCHAT_DWORD_SIZE )

  00348	66 83 fe 08	 cmp	 si, 8
  0034c	8b 6c 24 14	 mov	 ebp, DWORD PTR _strBODY$[esp+68]
  00350	8b 7d f4	 mov	 edi, DWORD PTR [ebp-12]
  00353	0f 82 c1 01 00
	00		 jb	 $L152373
  00359	b3 09		 mov	 bl, 9
  0035b	eb 03 8d 49 00	 npad	 5
$L152372:

; 187  : 	{
; 188  : 		CString strSIZE;

  00360	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_strmgr@ATL@@3VCAtlStringMgr@1@A
  00366	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_strmgr@ATL@@3VCAtlStringMgr@1@A ; ATL::g_strmgr
  0036b	ff 52 0c	 call	 DWORD PTR [edx+12]
  0036e	83 c0 10	 add	 eax, 16			; 00000010H
  00371	89 44 24 50	 mov	 DWORD PTR _strSIZE$152374[esp+64], eax

; 189  : 
; 190  : 		sscanf( LPCSTR(strDATA.Left(TCHAT_DWORD_SIZE)), _T("%X"), &dwCODE);

  00375	6a 08		 push	 8
  00377	8d 44 24 20	 lea	 eax, DWORD PTR $T156095[esp+72]
  0037b	50		 push	 eax
  0037c	8d 4c 24 18	 lea	 ecx, DWORD PTR _strDATA$[esp+76]
  00380	88 5c 24 48	 mov	 BYTE PTR __$EHRec$[esp+84], bl
  00384	e8 00 00 00 00	 call	 ?Left@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Left
  00389	8b 00		 mov	 eax, DWORD PTR [eax]
  0038b	8d 4c 24 4c	 lea	 ecx, DWORD PTR _dwCODE$[esp+64]
  0038f	51		 push	 ecx
  00390	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02EMFKHFLK@?$CFX?$AA@
  00395	50		 push	 eax
  00396	e8 00 00 00 00	 call	 _sscanf
  0039b	8b 44 24 28	 mov	 eax, DWORD PTR $T156095[esp+80]
  0039f	83 c0 f0	 add	 eax, -16		; fffffff0H
  003a2	83 c4 0c	 add	 esp, 12			; 0000000cH
  003a5	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  003a8	83 c9 ff	 or	 ecx, -1
  003ab	f0 0f c1 0a	 lock	  xadd	 DWORD PTR [edx], ecx
  003af	49		 dec	 ecx
  003b0	85 c9		 test	 ecx, ecx
  003b2	7f 08		 jg	 SHORT $L156682
  003b4	8b 08		 mov	 ecx, DWORD PTR [eax]
  003b6	8b 11		 mov	 edx, DWORD PTR [ecx]
  003b8	50		 push	 eax
  003b9	ff 52 04	 call	 DWORD PTR [edx+4]
$L156682:

; 191  : 		LPWORD pPOS = LPWORD(&dwCODE);
; 192  : 
; 193  : 		if( wLENGTH < TCHAT_DWORD_SIZE + pPOS[1] ||
; 194  : 			wBODY < wBASE + pPOS[0] )

  003bc	0f b7 44 24 4e	 movzx	 eax, WORD PTR _dwCODE$[esp+66]
  003c1	0f b7 ce	 movzx	 ecx, si
  003c4	83 c0 08	 add	 eax, 8
  003c7	3b c8		 cmp	 ecx, eax
  003c9	0f 8c 3d 01 00
	00		 jl	 $L156944
  003cf	0f b7 54 24 4c	 movzx	 edx, WORD PTR _dwCODE$[esp+64]
  003d4	8b 74 24 20	 mov	 esi, DWORD PTR tv775[esp+68]
  003d8	0f b7 c7	 movzx	 eax, di
  003db	03 d6		 add	 edx, esi
  003dd	3b c2		 cmp	 eax, edx
  003df	0f 8c 27 01 00
	00		 jl	 $L156944

; 196  : 
; 197  : 		pPOS[0] += wBASE;

  003e5	66 8b 4c 24 24	 mov	 cx, WORD PTR _wBODY$[esp+68]
  003ea	66 01 4c 24 4c	 add	 WORD PTR _dwCODE$[esp+64], cx

; 198  : 		strSIZE.Format( _T("%08X"), dwCODE);

  003ef	8b 54 24 4c	 mov	 edx, DWORD PTR _dwCODE$[esp+64]
  003f3	52		 push	 edx
  003f4	8d 44 24 54	 lea	 eax, DWORD PTR _strSIZE$152374[esp+68]
  003f8	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04JIMNDDED@?$CF08X?$AA@
  003fd	50		 push	 eax
  003fe	e8 00 00 00 00	 call	 ?Format@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAAXPBDZZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Format

; 199  : 
; 200  : 		strHEAD += strSIZE + strDATA.Mid( TCHAT_DWORD_SIZE, pPOS[1]);

  00403	0f b7 4c 24 5a	 movzx	 ecx, WORD PTR _dwCODE$[esp+78]
  00408	83 c4 0c	 add	 esp, 12			; 0000000cH
  0040b	51		 push	 ecx
  0040c	6a 08		 push	 8
  0040e	8d 54 24 34	 lea	 edx, DWORD PTR $T156096[esp+76]
  00412	52		 push	 edx
  00413	8d 4c 24 1c	 lea	 ecx, DWORD PTR _strDATA$[esp+80]
  00417	e8 00 00 00 00	 call	 ?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@HH@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Mid
  0041c	50		 push	 eax
  0041d	8d 44 24 54	 lea	 eax, DWORD PTR _strSIZE$152374[esp+68]
  00421	50		 push	 eax
  00422	8d 4c 24 30	 lea	 ecx, DWORD PTR $T156097[esp+76]
  00426	51		 push	 ecx
  00427	c6 44 24 4c 0a	 mov	 BYTE PTR __$EHRec$[esp+88], 10 ; 0000000aH
  0042c	e8 00 00 00 00	 call	 ??HATL@@YA?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@0@ABV10@0@Z ; ATL::operator+
  00431	83 c4 0c	 add	 esp, 12			; 0000000cH
  00434	8b 00		 mov	 eax, DWORD PTR [eax]
  00436	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00439	51		 push	 ecx
  0043a	50		 push	 eax
  0043b	8d 4c 24 20	 lea	 ecx, DWORD PTR _strHEAD$[esp+76]
  0043f	c6 44 24 48 0b	 mov	 BYTE PTR __$EHRec$[esp+84], 11 ; 0000000bH
  00444	e8 00 00 00 00	 call	 ?Append@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::Append
  00449	8b 44 24 28	 mov	 eax, DWORD PTR $T156097[esp+68]
  0044d	83 c0 f0	 add	 eax, -16		; fffffff0H
  00450	c6 44 24 40 0a	 mov	 BYTE PTR __$EHRec$[esp+76], 10 ; 0000000aH
  00455	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  00458	83 c9 ff	 or	 ecx, -1
  0045b	f0 0f c1 0a	 lock	  xadd	 DWORD PTR [edx], ecx
  0045f	49		 dec	 ecx
  00460	85 c9		 test	 ecx, ecx
  00462	7f 08		 jg	 SHORT $L156762
  00464	8b 08		 mov	 ecx, DWORD PTR [eax]
  00466	8b 11		 mov	 edx, DWORD PTR [ecx]
  00468	50		 push	 eax
  00469	ff 52 04	 call	 DWORD PTR [edx+4]
$L156762:
  0046c	8b 44 24 2c	 mov	 eax, DWORD PTR $T156096[esp+68]
  00470	83 c0 f0	 add	 eax, -16		; fffffff0H
  00473	88 5c 24 40	 mov	 BYTE PTR __$EHRec$[esp+76], bl
  00477	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  0047a	83 ca ff	 or	 edx, -1
  0047d	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00481	4a		 dec	 edx
  00482	85 d2		 test	 edx, edx
  00484	7f 08		 jg	 SHORT $L156789
  00486	8b 08		 mov	 ecx, DWORD PTR [eax]
  00488	8b 11		 mov	 edx, DWORD PTR [ecx]
  0048a	50		 push	 eax
  0048b	ff 52 04	 call	 DWORD PTR [edx+4]
$L156789:

; 201  : 		strDATA = strDATA.Mid(TCHAT_DWORD_SIZE + pPOS[1]);

  0048e	0f b7 44 24 4e	 movzx	 eax, WORD PTR _dwCODE$[esp+66]
  00493	83 c0 08	 add	 eax, 8
  00496	50		 push	 eax
  00497	8d 4c 24 34	 lea	 ecx, DWORD PTR $T156098[esp+72]
  0049b	51		 push	 ecx
  0049c	8d 4c 24 18	 lea	 ecx, DWORD PTR _strDATA$[esp+76]
  004a0	e8 00 00 00 00	 call	 ?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Mid
  004a5	50		 push	 eax
  004a6	8d 4c 24 14	 lea	 ecx, DWORD PTR _strDATA$[esp+72]
  004aa	c6 44 24 44 0c	 mov	 BYTE PTR __$EHRec$[esp+80], 12 ; 0000000cH
  004af	e8 00 00 00 00	 call	 ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CSimpleStringT<char,0>::operator=
  004b4	8b 44 24 30	 mov	 eax, DWORD PTR $T156098[esp+68]
  004b8	83 c0 f0	 add	 eax, -16		; fffffff0H
  004bb	88 5c 24 40	 mov	 BYTE PTR __$EHRec$[esp+76], bl
  004bf	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  004c2	83 c9 ff	 or	 ecx, -1
  004c5	f0 0f c1 0a	 lock	  xadd	 DWORD PTR [edx], ecx
  004c9	49		 dec	 ecx
  004ca	85 c9		 test	 ecx, ecx
  004cc	7f 08		 jg	 SHORT $L156820
  004ce	8b 08		 mov	 ecx, DWORD PTR [eax]
  004d0	8b 11		 mov	 edx, DWORD PTR [ecx]
  004d2	50		 push	 eax
  004d3	ff 52 04	 call	 DWORD PTR [edx+4]
$L156820:

; 202  : 		wLENGTH = strDATA.GetLength();

  004d6	8b 44 24 10	 mov	 eax, DWORD PTR _strDATA$[esp+68]
  004da	8b 70 f4	 mov	 esi, DWORD PTR [eax-12]

; 203  : 	}

  004dd	8b 44 24 50	 mov	 eax, DWORD PTR _strSIZE$152374[esp+64]
  004e1	83 c0 f0	 add	 eax, -16		; fffffff0H
  004e4	c6 44 24 40 06	 mov	 BYTE PTR __$EHRec$[esp+76], 6
  004e9	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  004ec	83 ca ff	 or	 edx, -1
  004ef	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  004f3	4a		 dec	 edx
  004f4	85 d2		 test	 edx, edx
  004f6	7f 08		 jg	 SHORT $L156856
  004f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  004fa	8b 11		 mov	 edx, DWORD PTR [ecx]
  004fc	50		 push	 eax
  004fd	ff 52 04	 call	 DWORD PTR [edx+4]
$L156856:

; 184  : 	wBODY = strBODY.GetLength();
; 185  : 
; 186  : 	while( wLENGTH >= TCHAT_DWORD_SIZE )

  00500	66 83 fe 08	 cmp	 si, 8
  00504	0f 83 56 fe ff
	ff		 jae	 $L152372

; 191  : 		LPWORD pPOS = LPWORD(&dwCODE);
; 192  : 
; 193  : 		if( wLENGTH < TCHAT_DWORD_SIZE + pPOS[1] ||
; 194  : 			wBODY < wBASE + pPOS[0] )

  0050a	eb 0e		 jmp	 SHORT $L152373
$L156944:

; 195  : 			break;

  0050c	8d 4c 24 50	 lea	 ecx, DWORD PTR _strSIZE$152374[esp+64]
  00510	c6 44 24 40 06	 mov	 BYTE PTR __$EHRec$[esp+76], 6
  00515	e8 00 00 00 00	 call	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L152373:

; 204  : 
; 205  : 	return BuildNetString( strHEAD, strBODY);

  0051a	8b 74 24 48	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+64]
  0051e	8d 44 24 14	 lea	 eax, DWORD PTR _strBODY$[esp+68]
  00522	50		 push	 eax
  00523	8d 4c 24 1c	 lea	 ecx, DWORD PTR _strHEAD$[esp+72]
  00527	51		 push	 ecx
  00528	8b 4c 24 3c	 mov	 ecx, DWORD PTR _this$[esp+76]
  0052c	56		 push	 esi
  0052d	e8 00 00 00 00	 call	 ?BuildNetString@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0@Z ; CTTextLinker::BuildNetString
  00532	8b 44 24 10	 mov	 eax, DWORD PTR _strDATA$[esp+68]
  00536	83 c0 f0	 add	 eax, -16		; fffffff0H
  00539	c6 44 24 40 05	 mov	 BYTE PTR __$EHRec$[esp+76], 5
  0053e	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  00541	83 c9 ff	 or	 ecx, -1
  00544	f0 0f c1 0a	 lock	  xadd	 DWORD PTR [edx], ecx
  00548	49		 dec	 ecx
  00549	85 c9		 test	 ecx, ecx
  0054b	7f 08		 jg	 SHORT $L156883
  0054d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0054f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00551	50		 push	 eax
  00552	ff 52 04	 call	 DWORD PTR [edx+4]
$L156883:
  00555	8b 44 24 18	 mov	 eax, DWORD PTR _strHEAD$[esp+68]
  00559	83 c0 f0	 add	 eax, -16		; fffffff0H
  0055c	c6 44 24 40 04	 mov	 BYTE PTR __$EHRec$[esp+76], 4
  00561	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00564	83 ca ff	 or	 edx, -1
  00567	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0056b	4a		 dec	 edx
  0056c	85 d2		 test	 edx, edx
  0056e	7f 08		 jg	 SHORT $L156910
  00570	8b 08		 mov	 ecx, DWORD PTR [eax]
  00572	8b 11		 mov	 edx, DWORD PTR [ecx]
  00574	50		 push	 eax
  00575	ff 52 04	 call	 DWORD PTR [edx+4]
$L156910:
  00578	8d 45 f0	 lea	 eax, DWORD PTR [ebp-16]
$L156949:
  0057b	c7 44 24 40 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+76], -1
  00583	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00586	83 ca ff	 or	 edx, -1
  00589	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0058d	4a		 dec	 edx
  0058e	85 d2		 test	 edx, edx
  00590	7f 08		 jg	 SHORT $L156937
  00592	8b 08		 mov	 ecx, DWORD PTR [eax]
  00594	8b 11		 mov	 edx, DWORD PTR [ecx]
  00596	50		 push	 eax
  00597	ff 52 04	 call	 DWORD PTR [edx+4]
$L156937:
  0059a	5f		 pop	 edi

; 149  : 		return BuildNetString( CString(_T("")), CString(_T("")));

$L156180:

; 206  : }

  0059b	8b 4c 24 34	 mov	 ecx, DWORD PTR __$EHRec$[esp+64]
  0059f	8b c6		 mov	 eax, esi
  005a1	5e		 pop	 esi
  005a2	5d		 pop	 ebp
  005a3	5b		 pop	 ebx
  005a4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  005ab	83 c4 34	 add	 esp, 52			; 00000034H
  005ae	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L156099:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR $T156087[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L156100:
  00008	8d 4d 0c	 lea	 ecx, DWORD PTR $T156088[ebp-4]
  0000b	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L156105:
  00010	8d 4d d4	 lea	 ecx, DWORD PTR $T156090[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L156106:
  00018	8d 4d 0c	 lea	 ecx, DWORD PTR $T156091[ebp-4]
  0001b	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L156107:
  00020	8d 4d d0	 lea	 ecx, DWORD PTR _strBODY$[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L156108:
  00028	8d 4d d4	 lea	 ecx, DWORD PTR _strHEAD$[ebp]
  0002b	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L156109:
  00030	8d 4d cc	 lea	 ecx, DWORD PTR _strDATA$[ebp]
  00033	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L156111:
  00038	8d 4d 0c	 lea	 ecx, DWORD PTR $T156093[ebp-4]
  0003b	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L156112:
  00040	8d 4d 0c	 lea	 ecx, DWORD PTR $T156094[ebp-4]
  00043	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L156113:
  00048	8d 4d 0c	 lea	 ecx, DWORD PTR _strSIZE$152374[ebp-4]
  0004b	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L156115:
  00050	8d 4d e8	 lea	 ecx, DWORD PTR $T156096[ebp]
  00053	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L156116:
  00058	8d 4d e4	 lea	 ecx, DWORD PTR $T156097[ebp]
  0005b	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L156117:
  00060	8d 4d ec	 lea	 ecx, DWORD PTR $T156098[ebp]
  00063	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
__ehhandler$?AppendNetString@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0@Z:
  00068	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T156942
  0006d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?AppendNetString@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0@Z ENDP ; CTTextLinker::AppendNetString
PUBLIC	?SplitTextByCrLf@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0AAHH@Z ; CTTextLinker::SplitTextByCrLf
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
xdata$x	SEGMENT
$T157409 DD	0ffffffffH
	DD	FLAT:$L156970
	DD	00H
	DD	FLAT:$L156971
	DD	01H
	DD	FLAT:$L156972
	DD	02H
	DD	FLAT:$L156973
	DD	02H
	DD	FLAT:$L156975
	DD	04H
	DD	FLAT:$L156976
	DD	05H
	DD	FLAT:$L156977
	DD	02H
	DD	FLAT:$L156978
$T157398 DD	019930520H
	DD	08H
	DD	FLAT:$T157409
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\ttextlinker.cpp
xdata$x	ENDS
;	COMDAT ?SplitTextByCrLf@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0AAHH@Z
_TEXT	SEGMENT
_strBODY$ = -48						; size = 4
$T156987 = -44						; size = 4
_strDATA$ = -44						; size = 4
_strHEAD$ = -40						; size = 4
_wBODY$ = -36						; size = 2
_strSIZE$152428 = -36					; size = 4
$T156961 = -36						; size = 4
$T156960 = -36						; size = 4
$T156962 = -32						; size = 4
$T156964 = -28						; size = 4
$T156963 = -24						; size = 4
$T156967 = -20						; size = 4
$T156965 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_dwCODE$ = 12						; size = 4
_strMSG$ = 12						; size = 4
_strTOK$ = 16						; size = 4
_nPos$ = 20						; size = 4
_bTrimCrLf$ = 24					; size = 4
?SplitTextByCrLf@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0AAHH@Z PROC NEAR ; CTTextLinker::SplitTextByCrLf, COMDAT
; _this$ = ecx

; 210  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SplitTextByCrLf@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0AAHH@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 24	 sub	 esp, 36			; 00000024H
  00018	89 4c 24 20	 mov	 DWORD PTR _this$[esp+48], ecx
  0001c	33 c9		 xor	 ecx, ecx
  0001e	89 4c 24 1c	 mov	 DWORD PTR $T156967[esp+48], ecx
  00022	55		 push	 ebp

; 211  : 	WORD wLENGTH = strMSG.GetLength();

  00023	8b 6c 24 3c	 mov	 ebp, DWORD PTR _strMSG$[esp+48]
  00027	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  0002a	8b 40 f4	 mov	 eax, DWORD PTR [eax-12]

; 212  : 
; 213  : 	if( wLENGTH < TCHAT_DWORD_SIZE )

  0002d	66 3d 08 00	 cmp	 ax, 8
  00031	56		 push	 esi
  00032	89 44 24 0c	 mov	 DWORD PTR $T156987[esp+56], eax
  00036	73 25		 jae	 SHORT $L152393

; 214  : 		return CString(_T(""));

  00038	8b 74 24 3c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+52]
  0003c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00041	8b ce		 mov	 ecx, esi
  00043	e8 00 00 00 00	 call	 ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >

; 225  : 		return CString(_T(""));

  00048	8b c6		 mov	 eax, esi
  0004a	5e		 pop	 esi
  0004b	5d		 pop	 ebp

; 281  : }

  0004c	8b 4c 24 24	 mov	 ecx, DWORD PTR __$EHRec$[esp+48]
  00050	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00057	83 c4 30	 add	 esp, 48			; 00000030H
  0005a	c2 14 00	 ret	 20			; 00000014H
$L152393:

; 215  : 
; 216  : 	DWORD dwCODE = 0;

  0005d	89 4c 24 40	 mov	 DWORD PTR _dwCODE$[esp+52], ecx

; 217  : 	WORD wHEAD = 0;
; 218  : 	WORD wBODY = 0;
; 219  : 
; 220  : 	sscanf( LPCSTR(strMSG.Left(TCHAT_DWORD_SIZE)), _T("%X"), &dwCODE);

  00061	6a 08		 push	 8
  00063	8d 4c 24 18	 lea	 ecx, DWORD PTR $T156960[esp+60]
  00067	51		 push	 ecx
  00068	8b cd		 mov	 ecx, ebp
  0006a	e8 00 00 00 00	 call	 ?Left@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Left
  0006f	8b 00		 mov	 eax, DWORD PTR [eax]
  00071	8d 54 24 40	 lea	 edx, DWORD PTR _dwCODE$[esp+52]
  00075	52		 push	 edx
  00076	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02EMFKHFLK@?$CFX?$AA@
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 _sscanf
  00081	8b 44 24 20	 mov	 eax, DWORD PTR $T156960[esp+68]
  00085	83 c0 f0	 add	 eax, -16		; fffffff0H
  00088	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008b	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  0008e	83 ca ff	 or	 edx, -1
  00091	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00095	4a		 dec	 edx
  00096	85 d2		 test	 edx, edx
  00098	7f 08		 jg	 SHORT $L157017
  0009a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009e	50		 push	 eax
  0009f	ff 52 04	 call	 DWORD PTR [edx+4]
$L157017:

; 221  : 	wHEAD = HIWORD(dwCODE);

  000a2	8b 44 24 40	 mov	 eax, DWORD PTR _dwCODE$[esp+52]

; 222  : 	wBODY = LOWORD(dwCODE);
; 223  : 
; 224  : 	if( wHEAD + wBODY + TCHAT_DWORD_SIZE != wLENGTH || wBODY < nPos )

  000a6	0f b7 4c 24 0c	 movzx	 ecx, WORD PTR $T156987[esp+56]
  000ab	53		 push	 ebx
  000ac	8b d8		 mov	 ebx, eax
  000ae	c1 eb 10	 shr	 ebx, 16			; 00000010H
  000b1	57		 push	 edi
  000b2	0f b7 f0	 movzx	 esi, ax
  000b5	0f b7 fb	 movzx	 edi, bx
  000b8	89 44 24 1c	 mov	 DWORD PTR _wBODY$[esp+64], eax
  000bc	8d 44 3e 08	 lea	 eax, DWORD PTR [esi+edi+8]
  000c0	3b c1		 cmp	 eax, ecx
  000c2	0f 85 9e 03 00
	00		 jne	 $L152404
  000c8	8b 54 24 50	 mov	 edx, DWORD PTR _nPos$[esp+60]
  000cc	8b 02		 mov	 eax, DWORD PTR [edx]
  000ce	3b f0		 cmp	 esi, eax
  000d0	0f 8c 90 03 00
	00		 jl	 $L152404

; 226  : 
; 227  : 	CString strBODY = strMSG.Mid( TCHAT_DWORD_SIZE + wHEAD + nPos, wBODY - nPos);

  000d6	8b ce		 mov	 ecx, esi
  000d8	2b c8		 sub	 ecx, eax
  000da	51		 push	 ecx
  000db	8d 54 38 08	 lea	 edx, DWORD PTR [eax+edi+8]
  000df	52		 push	 edx
  000e0	8d 44 24 18	 lea	 eax, DWORD PTR _strBODY$[esp+72]
  000e4	50		 push	 eax
  000e5	8b cd		 mov	 ecx, ebp
  000e7	e8 00 00 00 00	 call	 ?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@HH@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Mid

; 228  : 	CString strDATA = strMSG.Mid( TCHAT_DWORD_SIZE, wHEAD);

  000ec	57		 push	 edi
  000ed	6a 08		 push	 8
  000ef	8d 4c 24 1c	 lea	 ecx, DWORD PTR _strDATA$[esp+72]
  000f3	51		 push	 ecx
  000f4	8b cd		 mov	 ecx, ebp
  000f6	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+84], 0
  000fe	e8 00 00 00 00	 call	 ?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@HH@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Mid

; 229  : 	CString strHEAD(_T(""));

  00103	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00108	8d 4c 24 1c	 lea	 ecx, DWORD PTR _strHEAD$[esp+68]
  0010c	c6 44 24 40 01	 mov	 BYTE PTR __$EHRec$[esp+76], 1
  00111	e8 00 00 00 00	 call	 ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >

; 230  : 
; 231  : 	if(bTrimCrLf)

  00116	8b 44 24 54	 mov	 eax, DWORD PTR _bTrimCrLf$[esp+60]
  0011a	85 c0		 test	 eax, eax
  0011c	c6 44 24 3c 02	 mov	 BYTE PTR __$EHRec$[esp+72], 2
  00121	74 10		 je	 SHORT $L157403

; 232  : 		strBODY.TrimLeft(strTOK);

  00123	8b 54 24 4c	 mov	 edx, DWORD PTR _strTOK$[esp+60]
  00127	8b 02		 mov	 eax, DWORD PTR [edx]
  00129	50		 push	 eax
  0012a	8d 4c 24 14	 lea	 ecx, DWORD PTR _strBODY$[esp+68]
  0012e	e8 00 00 00 00	 call	 ?TrimLeft@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV12@PBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::TrimLeft
$L157403:

; 233  : 
; 234  : 	wLENGTH = strBODY.GetLength();

  00133	8b 6c 24 10	 mov	 ebp, DWORD PTR _strBODY$[esp+64]
  00137	8b 7d f4	 mov	 edi, DWORD PTR [ebp-12]

; 235  : 	if( wBODY < wLENGTH )

  0013a	66 39 7c 24 1c	 cmp	 WORD PTR _wBODY$[esp+64], di
  0013f	0f 83 81 00 00
	00		 jae	 $L152412

; 236  : 		return CString(_T(""));

  00145	8b 74 24 44	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+60]
  00149	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0014e	8b ce		 mov	 ecx, esi
  00150	e8 00 00 00 00	 call	 ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
  00155	8b 44 24 18	 mov	 eax, DWORD PTR _strHEAD$[esp+64]
  00159	83 c0 f0	 add	 eax, -16		; fffffff0H
  0015c	c6 44 24 3c 01	 mov	 BYTE PTR __$EHRec$[esp+72], 1
  00161	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00164	83 ca ff	 or	 edx, -1
  00167	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0016b	4a		 dec	 edx
  0016c	85 d2		 test	 edx, edx
  0016e	7f 08		 jg	 SHORT $L157059
  00170	8b 08		 mov	 ecx, DWORD PTR [eax]
  00172	8b 11		 mov	 edx, DWORD PTR [ecx]
  00174	50		 push	 eax
  00175	ff 52 04	 call	 DWORD PTR [edx+4]
$L157059:
  00178	8b 44 24 14	 mov	 eax, DWORD PTR _strDATA$[esp+64]
  0017c	83 c0 f0	 add	 eax, -16		; fffffff0H
  0017f	c6 44 24 3c 00	 mov	 BYTE PTR __$EHRec$[esp+72], 0
  00184	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00187	83 ca ff	 or	 edx, -1
  0018a	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0018e	4a		 dec	 edx
  0018f	85 d2		 test	 edx, edx
  00191	7f 08		 jg	 SHORT $L157086
  00193	8b 08		 mov	 ecx, DWORD PTR [eax]
  00195	8b 11		 mov	 edx, DWORD PTR [ecx]
  00197	50		 push	 eax
  00198	ff 52 04	 call	 DWORD PTR [edx+4]
$L157086:
  0019b	8d 45 f0	 lea	 eax, DWORD PTR [ebp-16]
  0019e	c7 44 24 3c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+72], -1
  001a6	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  001a9	83 ca ff	 or	 edx, -1
  001ac	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  001b0	4a		 dec	 edx
  001b1	85 d2		 test	 edx, edx
  001b3	0f 8f bd 02 00
	00		 jg	 $L157113
  001b9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001bb	8b 11		 mov	 edx, DWORD PTR [ecx]
  001bd	50		 push	 eax
  001be	ff 52 04	 call	 DWORD PTR [edx+4]
  001c1	e9 b0 02 00 00	 jmp	 $L157113
$L152412:

; 237  : 
; 238  : 	int nFIND = strBODY.FindOneOf(strTOK);

  001c6	8b 44 24 4c	 mov	 eax, DWORD PTR _strTOK$[esp+60]
  001ca	8b 00		 mov	 eax, DWORD PTR [eax]
  001cc	50		 push	 eax
  001cd	8d 4c 24 14	 lea	 ecx, DWORD PTR _strBODY$[esp+68]
  001d1	e8 00 00 00 00	 call	 ?FindOneOf@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBEHPBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::FindOneOf

; 239  : 	int nPOS = wBODY - wLENGTH;

  001d6	0f b7 cf	 movzx	 ecx, di
  001d9	8b e8		 mov	 ebp, eax
  001db	2b f1		 sub	 esi, ecx

; 240  : 
; 241  : 	if( nFIND >= 0 )

  001dd	85 ed		 test	 ebp, ebp
  001df	7c 31		 jl	 SHORT $L152416

; 242  : 		strBODY = strBODY.Left(nFIND + 1);

  001e1	8d 55 01	 lea	 edx, DWORD PTR [ebp+1]
  001e4	52		 push	 edx
  001e5	8d 44 24 20	 lea	 eax, DWORD PTR $T156961[esp+68]
  001e9	50		 push	 eax
  001ea	8d 4c 24 18	 lea	 ecx, DWORD PTR _strBODY$[esp+72]
  001ee	e8 00 00 00 00	 call	 ?Left@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Left
  001f3	50		 push	 eax
  001f4	8d 4c 24 14	 lea	 ecx, DWORD PTR _strBODY$[esp+68]
  001f8	c6 44 24 40 03	 mov	 BYTE PTR __$EHRec$[esp+76], 3
  001fd	e8 00 00 00 00	 call	 ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CSimpleStringT<char,0>::operator=
  00202	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T156961[esp+64]
  00206	c6 44 24 3c 02	 mov	 BYTE PTR __$EHRec$[esp+72], 2
  0020b	e8 00 00 00 00	 call	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >

; 243  : 	else

  00210	eb 07		 jmp	 SHORT $L157126
$L152416:

; 244  : 		nFIND = strBODY.GetLength();

  00212	8b 4c 24 10	 mov	 ecx, DWORD PTR _strBODY$[esp+64]
  00216	8b 69 f4	 mov	 ebp, DWORD PTR [ecx-12]
$L157126:

; 245  : 	nFIND++;

  00219	45		 inc	 ebp

; 246  : 
; 247  : 	while( wHEAD >= TCHAT_DWORD_SIZE )

  0021a	66 83 fb 08	 cmp	 bx, 8
  0021e	0f 82 c5 01 00
	00		 jb	 $L157400
$L152420:

; 248  : 	{
; 249  : 		sscanf( LPCSTR(strDATA.Left(TCHAT_DWORD_SIZE)), _T("%X"), &dwCODE);

  00224	6a 08		 push	 8
  00226	8d 54 24 24	 lea	 edx, DWORD PTR $T156962[esp+68]
  0022a	52		 push	 edx
  0022b	8d 4c 24 1c	 lea	 ecx, DWORD PTR _strDATA$[esp+72]
  0022f	e8 00 00 00 00	 call	 ?Left@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Left
  00234	8b 00		 mov	 eax, DWORD PTR [eax]
  00236	8d 4c 24 48	 lea	 ecx, DWORD PTR _dwCODE$[esp+60]
  0023a	51		 push	 ecx
  0023b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02EMFKHFLK@?$CFX?$AA@
  00240	50		 push	 eax
  00241	e8 00 00 00 00	 call	 _sscanf
  00246	8b 44 24 2c	 mov	 eax, DWORD PTR $T156962[esp+76]
  0024a	83 c0 f0	 add	 eax, -16		; fffffff0H
  0024d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00250	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  00253	83 c9 ff	 or	 ecx, -1
  00256	f0 0f c1 0a	 lock	  xadd	 DWORD PTR [edx], ecx
  0025a	49		 dec	 ecx
  0025b	85 c9		 test	 ecx, ecx
  0025d	7f 08		 jg	 SHORT $L157161
  0025f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00261	8b 11		 mov	 edx, DWORD PTR [ecx]
  00263	50		 push	 eax
  00264	ff 52 04	 call	 DWORD PTR [edx+4]
$L157161:

; 250  : 		LPWORD pPOS = LPWORD(&dwCODE);
; 251  : 
; 252  : 		if( wHEAD < TCHAT_DWORD_SIZE + pPOS[1] ||
; 253  : 			nPOS + nFIND <= pPOS[0] )

  00267	0f b7 44 24 4a	 movzx	 eax, WORD PTR _dwCODE$[esp+62]
  0026c	0f b7 cb	 movzx	 ecx, bx
  0026f	83 c0 08	 add	 eax, 8
  00272	3b c8		 cmp	 ecx, eax
  00274	0f 8c 6f 01 00
	00		 jl	 $L157400
  0027a	66 8b 4c 24 48	 mov	 cx, WORD PTR _dwCODE$[esp+60]
  0027f	0f b7 c1	 movzx	 eax, cx
  00282	8d 14 2e	 lea	 edx, DWORD PTR [esi+ebp]
  00285	3b d0		 cmp	 edx, eax
  00287	0f 8e 5c 01 00
	00		 jle	 $L157400

; 254  : 			break;
; 255  : 
; 256  : 		if( nPos <= pPOS[0] && pPOS[0] < nPOS )

  0028d	8b 54 24 50	 mov	 edx, DWORD PTR _nPos$[esp+60]
  00291	39 02		 cmp	 DWORD PTR [edx], eax
  00293	7f 0c		 jg	 SHORT $L152426
  00295	3b c6		 cmp	 eax, esi
  00297	7d 08		 jge	 SHORT $L152426

; 257  : 			pPOS[0] = nPOS;

  00299	66 8b ce	 mov	 cx, si
  0029c	66 89 4c 24 48	 mov	 WORD PTR _dwCODE$[esp+60], cx
$L152426:

; 258  : 
; 259  : 		if( nPOS <= pPOS[0] )

  002a1	0f b7 c1	 movzx	 eax, cx
  002a4	3b f0		 cmp	 esi, eax
  002a6	0f 8f e2 00 00
	00		 jg	 $L157402

; 260  : 		{
; 261  : 			CString strSIZE;

  002ac	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_strmgr@ATL@@3VCAtlStringMgr@1@A
  002b2	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_strmgr@ATL@@3VCAtlStringMgr@1@A ; ATL::g_strmgr
  002b7	ff 52 0c	 call	 DWORD PTR [edx+12]
  002ba	83 c0 10	 add	 eax, 16			; 00000010H
  002bd	89 44 24 1c	 mov	 DWORD PTR _strSIZE$152428[esp+64], eax

; 262  : 
; 263  : 			pPOS[0] -= nPOS;

  002c1	66 29 74 24 48	 sub	 WORD PTR _dwCODE$[esp+60], si

; 264  : 			strSIZE.Format( _T("%08X"), dwCODE);

  002c6	8b 44 24 48	 mov	 eax, DWORD PTR _dwCODE$[esp+60]
  002ca	50		 push	 eax
  002cb	8d 4c 24 20	 lea	 ecx, DWORD PTR _strSIZE$152428[esp+68]
  002cf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04JIMNDDED@?$CF08X?$AA@
  002d4	51		 push	 ecx
  002d5	c6 44 24 48 04	 mov	 BYTE PTR __$EHRec$[esp+84], 4
  002da	e8 00 00 00 00	 call	 ?Format@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAAXPBDZZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Format

; 265  : 
; 266  : 			strHEAD += strSIZE + strDATA.Mid( TCHAT_DWORD_SIZE, pPOS[1]);

  002df	0f b7 54 24 56	 movzx	 edx, WORD PTR _dwCODE$[esp+74]
  002e4	83 c4 0c	 add	 esp, 12			; 0000000cH
  002e7	52		 push	 edx
  002e8	6a 08		 push	 8
  002ea	8d 44 24 30	 lea	 eax, DWORD PTR $T156963[esp+72]
  002ee	50		 push	 eax
  002ef	8d 4c 24 20	 lea	 ecx, DWORD PTR _strDATA$[esp+76]
  002f3	e8 00 00 00 00	 call	 ?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@HH@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Mid
  002f8	50		 push	 eax
  002f9	8d 4c 24 20	 lea	 ecx, DWORD PTR _strSIZE$152428[esp+68]
  002fd	51		 push	 ecx
  002fe	8d 54 24 2c	 lea	 edx, DWORD PTR $T156964[esp+72]
  00302	52		 push	 edx
  00303	c6 44 24 48 05	 mov	 BYTE PTR __$EHRec$[esp+84], 5
  00308	e8 00 00 00 00	 call	 ??HATL@@YA?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@0@ABV10@0@Z ; ATL::operator+
  0030d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00310	8b 00		 mov	 eax, DWORD PTR [eax]
  00312	8b 48 f4	 mov	 ecx, DWORD PTR [eax-12]
  00315	51		 push	 ecx
  00316	50		 push	 eax
  00317	8d 4c 24 20	 lea	 ecx, DWORD PTR _strHEAD$[esp+72]
  0031b	c6 44 24 44 06	 mov	 BYTE PTR __$EHRec$[esp+80], 6
  00320	e8 00 00 00 00	 call	 ?Append@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::Append
  00325	8b 44 24 24	 mov	 eax, DWORD PTR $T156964[esp+64]
  00329	83 c0 f0	 add	 eax, -16		; fffffff0H
  0032c	c6 44 24 3c 05	 mov	 BYTE PTR __$EHRec$[esp+72], 5
  00331	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00334	83 ca ff	 or	 edx, -1
  00337	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0033b	4a		 dec	 edx
  0033c	85 d2		 test	 edx, edx
  0033e	7f 08		 jg	 SHORT $L157266
  00340	8b 08		 mov	 ecx, DWORD PTR [eax]
  00342	8b 11		 mov	 edx, DWORD PTR [ecx]
  00344	50		 push	 eax
  00345	ff 52 04	 call	 DWORD PTR [edx+4]
$L157266:
  00348	8b 44 24 28	 mov	 eax, DWORD PTR $T156963[esp+64]
  0034c	83 c0 f0	 add	 eax, -16		; fffffff0H
  0034f	c6 44 24 3c 04	 mov	 BYTE PTR __$EHRec$[esp+72], 4
  00354	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00357	83 ca ff	 or	 edx, -1
  0035a	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0035e	4a		 dec	 edx
  0035f	85 d2		 test	 edx, edx
  00361	7f 08		 jg	 SHORT $L157293
  00363	8b 08		 mov	 ecx, DWORD PTR [eax]
  00365	8b 11		 mov	 edx, DWORD PTR [ecx]
  00367	50		 push	 eax
  00368	ff 52 04	 call	 DWORD PTR [edx+4]
$L157293:

; 267  : 		}

  0036b	8b 44 24 1c	 mov	 eax, DWORD PTR _strSIZE$152428[esp+64]
  0036f	83 c0 f0	 add	 eax, -16		; fffffff0H
  00372	c6 44 24 3c 02	 mov	 BYTE PTR __$EHRec$[esp+72], 2
  00377	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  0037a	83 ca ff	 or	 edx, -1
  0037d	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00381	4a		 dec	 edx
  00382	85 d2		 test	 edx, edx
  00384	7f 08		 jg	 SHORT $L157402
  00386	8b 08		 mov	 ecx, DWORD PTR [eax]
  00388	8b 11		 mov	 edx, DWORD PTR [ecx]
  0038a	50		 push	 eax
  0038b	ff 52 04	 call	 DWORD PTR [edx+4]
$L157402:

; 268  : 
; 269  : 		strDATA = strDATA.Mid(TCHAT_DWORD_SIZE + pPOS[1]);

  0038e	0f b7 44 24 4a	 movzx	 eax, WORD PTR _dwCODE$[esp+62]
  00393	83 c0 08	 add	 eax, 8
  00396	50		 push	 eax
  00397	8d 4c 24 30	 lea	 ecx, DWORD PTR $T156965[esp+68]
  0039b	51		 push	 ecx
  0039c	8d 4c 24 1c	 lea	 ecx, DWORD PTR _strDATA$[esp+72]
  003a0	e8 00 00 00 00	 call	 ?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Mid
  003a5	50		 push	 eax
  003a6	8d 4c 24 18	 lea	 ecx, DWORD PTR _strDATA$[esp+68]
  003aa	c6 44 24 40 07	 mov	 BYTE PTR __$EHRec$[esp+76], 7
  003af	e8 00 00 00 00	 call	 ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CSimpleStringT<char,0>::operator=
  003b4	8b 44 24 2c	 mov	 eax, DWORD PTR $T156965[esp+64]
  003b8	83 c0 f0	 add	 eax, -16		; fffffff0H
  003bb	c6 44 24 3c 02	 mov	 BYTE PTR __$EHRec$[esp+72], 2
  003c0	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  003c3	83 c9 ff	 or	 ecx, -1
  003c6	f0 0f c1 0a	 lock	  xadd	 DWORD PTR [edx], ecx
  003ca	49		 dec	 ecx
  003cb	85 c9		 test	 ecx, ecx
  003cd	7f 08		 jg	 SHORT $L157351
  003cf	8b 08		 mov	 ecx, DWORD PTR [eax]
  003d1	8b 11		 mov	 edx, DWORD PTR [ecx]
  003d3	50		 push	 eax
  003d4	ff 52 04	 call	 DWORD PTR [edx+4]
$L157351:

; 270  : 		wHEAD = strDATA.GetLength();

  003d7	8b 44 24 14	 mov	 eax, DWORD PTR _strDATA$[esp+64]
  003db	66 8b 58 f4	 mov	 bx, WORD PTR [eax-12]
  003df	66 83 fb 08	 cmp	 bx, 8
  003e3	0f 83 3b fe ff
	ff		 jae	 $L152420
$L157400:

; 271  : 	}
; 272  : 
; 273  : 	if(bTrimCrLf)

  003e9	8b 44 24 54	 mov	 eax, DWORD PTR _bTrimCrLf$[esp+60]
  003ed	85 c0		 test	 eax, eax
  003ef	74 10		 je	 SHORT $L152432

; 274  : 		strBODY.TrimRight(strTOK);

  003f1	8b 4c 24 4c	 mov	 ecx, DWORD PTR _strTOK$[esp+60]
  003f5	8b 11		 mov	 edx, DWORD PTR [ecx]
  003f7	52		 push	 edx
  003f8	8d 4c 24 14	 lea	 ecx, DWORD PTR _strBODY$[esp+68]
  003fc	e8 00 00 00 00	 call	 ?TrimRight@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV12@PBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::TrimRight
$L152432:

; 275  : 	nPos = nPOS + nFIND;

  00401	8b 44 24 50	 mov	 eax, DWORD PTR _nPos$[esp+60]

; 276  : 
; 277  : 	if( strHEAD.IsEmpty() && strBODY.IsEmpty() )

  00405	8b 4c 24 18	 mov	 ecx, DWORD PTR _strHEAD$[esp+64]
  00409	03 f5		 add	 esi, ebp
  0040b	89 30		 mov	 DWORD PTR [eax], esi
  0040d	8b 41 f4	 mov	 eax, DWORD PTR [ecx-12]
  00410	85 c0		 test	 eax, eax
  00412	75 1d		 jne	 SHORT $L152433
  00414	8b 54 24 10	 mov	 edx, DWORD PTR _strBODY$[esp+64]
  00418	8b 42 f4	 mov	 eax, DWORD PTR [edx-12]
  0041b	85 c0		 test	 eax, eax
  0041d	75 12		 jne	 SHORT $L152433

; 278  : 		return CString(_T(""));

  0041f	8b 74 24 44	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+60]
  00423	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00428	8b ce		 mov	 ecx, esi
  0042a	e8 00 00 00 00	 call	 ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
  0042f	eb 18		 jmp	 SHORT $L157407
$L152433:

; 279  : 
; 280  : 	return BuildNetString( strHEAD, strBODY);

  00431	8b 74 24 44	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+60]
  00435	8d 44 24 10	 lea	 eax, DWORD PTR _strBODY$[esp+64]
  00439	50		 push	 eax
  0043a	8d 4c 24 1c	 lea	 ecx, DWORD PTR _strHEAD$[esp+68]
  0043e	51		 push	 ecx
  0043f	8b 4c 24 38	 mov	 ecx, DWORD PTR _this$[esp+72]
  00443	56		 push	 esi
  00444	e8 00 00 00 00	 call	 ?BuildNetString@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0@Z ; CTTextLinker::BuildNetString
$L157407:
  00449	8d 4c 24 18	 lea	 ecx, DWORD PTR _strHEAD$[esp+64]
  0044d	e8 00 00 00 00	 call	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
  00452	8d 4c 24 14	 lea	 ecx, DWORD PTR _strDATA$[esp+64]
  00456	e8 00 00 00 00	 call	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
  0045b	8d 4c 24 10	 lea	 ecx, DWORD PTR _strBODY$[esp+64]
  0045f	e8 00 00 00 00	 call	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
  00464	eb 10		 jmp	 SHORT $L157113
$L152404:

; 225  : 		return CString(_T(""));

  00466	8b 74 24 44	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+60]
  0046a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0046f	8b ce		 mov	 ecx, esi
  00471	e8 00 00 00 00	 call	 ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >

; 236  : 		return CString(_T(""));

$L157113:

; 281  : }

  00476	8b 4c 24 34	 mov	 ecx, DWORD PTR __$EHRec$[esp+64]
  0047a	5f		 pop	 edi
  0047b	5b		 pop	 ebx
  0047c	8b c6		 mov	 eax, esi
  0047e	5e		 pop	 esi
  0047f	5d		 pop	 ebp
  00480	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00487	83 c4 30	 add	 esp, 48			; 00000030H
  0048a	c2 14 00	 ret	 20			; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L156970:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _strBODY$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L156971:
  00008	8d 4d d4	 lea	 ecx, DWORD PTR _strDATA$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L156972:
  00010	8d 4d d8	 lea	 ecx, DWORD PTR _strHEAD$[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L156973:
  00018	8d 4d dc	 lea	 ecx, DWORD PTR $T156961[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L156975:
  00020	8d 4d dc	 lea	 ecx, DWORD PTR _strSIZE$152428[ebp]
  00023	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L156976:
  00028	8d 4d e8	 lea	 ecx, DWORD PTR $T156963[ebp]
  0002b	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L156977:
  00030	8d 4d e4	 lea	 ecx, DWORD PTR $T156964[ebp]
  00033	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L156978:
  00038	8d 4d ec	 lea	 ecx, DWORD PTR $T156965[ebp]
  0003b	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
__ehhandler$?SplitTextByCrLf@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0AAHH@Z:
  00040	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T157398
  00045	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SplitTextByCrLf@CTTextLinker@@QAE?AV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABV23@0AAHH@Z ENDP ; CTTextLinker::SplitTextByCrLf
PUBLIC	??_C@_02LIIHNNHG@?6?$AN?$AA@			; `string'
CRT$XCU	SEGMENT
_$S7	DD	FLAT:_$E5
CRT$XCU	ENDS
;	COMDAT ??_C@_02LIIHNNHG@?6?$AN?$AA@
CONST	SEGMENT
??_C@_02LIIHNNHG@?6?$AN?$AA@ DB 0aH, 0dH, 00H		; `string'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT _$E5
text$yc	SEGMENT
_$E5	PROC NEAR					; COMDAT

; 5    : const CString	CTTextLinker::LINK_DEF_TOK(_T("\n\r"));

  00000	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02LIIHNNHG@?6?$AN?$AA@
  00005	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?LINK_DEF_TOK@CTTextLinker@@2V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@B ; CTTextLinker::LINK_DEF_TOK
  0000a	e8 00 00 00 00	 call	 ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
  0000f	68 00 00 00 00	 push	 OFFSET FLAT:_$E6
  00014	e8 00 00 00 00	 call	 _atexit
  00019	59		 pop	 ecx
  0001a	c3		 ret	 0
_$E5	ENDP
; Function compile flags: /Ogty
text$yc	ENDS
;	COMDAT _$E9
text$yd	SEGMENT
_$E9	PROC NEAR					; COMDAT
  00000	a1 04 00 00 00	 mov	 eax, DWORD PTR ?instance@?1??GetInstance@CTTextLinker@@SAPAV2@XZ@4V2@A+4
  00005	85 c0		 test	 eax, eax
  00007	74 1f		 je	 SHORT $L157434
  00009	8b 48 fc	 mov	 ecx, DWORD PTR [eax-4]
  0000c	56		 push	 esi
  0000d	8d 70 fc	 lea	 esi, DWORD PTR [eax-4]
  00010	68 00 00 00 00	 push	 OFFSET FLAT:??1CTTextLinkData@@QAE@XZ ; CTTextLinkData::~CTTextLinkData
  00015	51		 push	 ecx
  00016	6a 10		 push	 16			; 00000010H
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??_M@YGXPAXIHP6EX0@Z@Z
  0001e	56		 push	 esi
  0001f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00024	83 c4 04	 add	 esp, 4
  00027	5e		 pop	 esi
$L157434:
  00028	c3		 ret	 0
_$E9	ENDP
; Function compile flags: /Ogty
text$yd	ENDS
;	COMDAT _$E6
text$yd	SEGMENT
_$E6	PROC NEAR					; COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?LINK_DEF_TOK@CTTextLinker@@2V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@B ; CTTextLinker::LINK_DEF_TOK
  00005	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
_$E6	ENDP
text$yd	ENDS
PUBLIC	?LINK_DEF_TOK@CTTextLinker@@2V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@B ; CTTextLinker::LINK_DEF_TOK
_BSS	SEGMENT
?LINK_DEF_TOK@CTTextLinker@@2V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@B DD 01H DUP (?) ; CTTextLinker::LINK_DEF_TOK
_BSS	ENDS
END
