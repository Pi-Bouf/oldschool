; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\QuestDieMon.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_1EO@BGAEGJFB@?$AA?$HL?$AA5?$AA1?$AAA?$AAB?$AA7?$AAA?$AA3?$AA0?$AA?9?$AA9?$AA9?$AA5?$AAA?$AA?9?$AA4?$AA4?$AAA?$AAB?$AA?9@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CH@JJOAEHDK@?$HL51AB7A30?9995A?944AB?9B869?97D79E92@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@OGFEPDED@LocalService?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02CCDHMLDD@?9?1?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@MIGBKCMN@UnregServer?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09LJBJJPCG@RegServer?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07LMLHFMEG@Service?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07PNHNHBAB@Install?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09LAEJNBCE@UnInstall?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04FABLJDN@Name?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@DBFDLFJJ@?$CFs?5?9Name?5?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BP@GECJKCAK@Could?5not?5open?5Service?5Manager?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06HCEGMCNE@RPCSS?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@HDJFCBEP@Could?5not?5start?5service?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@JMOCNDDL@Could?5not?5open?5service?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@GKJBBOLK@Could?5not?5stop?5service?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NMBIIKKI@Could?5not?5delete?5service?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?GetAppId@CTMapSvrModule@@SAPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAppIdT@CTMapSvrModule@@SAPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateRegistryAppId@CTMapSvrModule@@SGJH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterAppId@CTMapSvrModule@@QAEJ_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Install@CTMapSvrModule@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CQuestDieMon@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCQuestDieMon@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CQuestDieMon@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ExecQuest@CQuestDieMon@@UAEXPAVCTPlayer@@KPAV?$map@EPAV?$map@KPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@@std@@@2@@std@@U?$less@E@2@V?$allocator@U?$pair@$$CBEPAV?$map@KPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@@std@@@2@@std@@@std@@@2@@std@@PAV?$map@KPAUtagQUESTTEMP@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUtagQUESTTEMP@@@std@@@3@@4@PAV?$map@GPAUtagTITEM@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUtagTITEM@@@std@@@3@@4@PAV?$map@GPAVCTSkillTemp@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkillTemp@@@std@@@3@@4@PAV?$map@GPAUtagTMONSTER@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUtagTMONSTER@@@std@@@3@@4@PAV?$map@EPAUtagTSTAT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTSTAT@@@std@@@3@@4@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Tokenize@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@PBDAAH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Format@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAAXPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QAEAAPAUtagQUESTTERM@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAPAVCTMonster@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@_N@2@ABU?$pair@$$CB_J_J@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@AB_J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnregisterAppId@?$CAtlServiceModuleT@VCTMapSvrModule@@$0GE@@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsInstalled@?$CAtlServiceModuleT@VCTMapSvrModule@@$0GE@@ATL@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Uninstall@?$CAtlServiceModuleT@VCTMapSvrModule@@$0GE@@ATL@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CAtlExeModuleT@VCTMapSvrModule@@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CAtlExeModuleT@VCTMapSvrModule@@@ATL@@UAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterServer@?$CAtlModuleT@VCTMapSvrModule@@@ATL@@QAEJHPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnregisterServer@?$CAtlModuleT@VCTMapSvrModule@@@ATL@@QAEJHPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddCommonRGSReplacements@?$CAtlModuleT@VCTMapSvrModule@@@ATL@@UAEJPAUIRegistrarBase@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBGPAVCTMonSpawn@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBEAAU?$pair@$$CB_J_J@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$pair@$$CB_J_J@std@@QAE@AB_J0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CAtlExeModuleT@VCTMapSvrModule@@@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CAtlModuleT@VCTMapSvrModule@@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FormatV@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEXPBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetManager@?$CSimpleStringT@D$0A@@ATL@@QBEPAUIAtlStringMgr@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringSpanIncluding@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringSpanExcluding@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$less@G@std@@QBE_NABG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAB_JPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@AB_J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Insert@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@ABU?$pair@$$CB_J_J@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Kfn@?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@SAAB_JABU?$pair@$$CB_J_J@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$less@_J@std@@QBE_NAB_J0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAABGPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UninitializeCom@?$CAtlExeModuleT@VCTMapSvrModule@@@ATL@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBGPAVCTMonSpawn@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@3@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Fiterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBEABU?$pair@$$CB_J_J@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@3@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@1@AB_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEAAPAVCTMonster@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Color@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myval@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAAU?$pair@$$CB_J_J@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lbound@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@AB_J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CB_J_J@2@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myval@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBGPAVCTMonSpawn@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lbound@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@ABG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Kfn@?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@SAABGABU?$pair@$$CBGPAVCTMonSpawn@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Fconst_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE@PAPAVCTMonster@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEABQAVCTMonster@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@U?$pair@$$CB_J_J@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE@PAPAVCTMonster@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CB_J_J@2@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Max@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@GIG@std@@YAXPAGIABGAAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagTAICONDITION@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTAICONDITION@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagTAICONDITION@@V?$allocator@PAUtagTAICONDITION@@@std@@@std@@YAXPAPAUtagTAICONDITION@@0AAV?$allocator@PAUtagTAICONDITION@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagTMONITEM@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTMONITEM@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagTMONITEM@@V?$allocator@PAUtagTMONITEM@@@std@@@std@@YAXPAPAUtagTMONITEM@@0AAV?$allocator@PAUtagTMONITEM@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagTMAPMON@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTMAPMON@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@YAXPAPAUtagTMAPMON@@0AAV?$allocator@PAUtagTMAPMON@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagPATHPOINT@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagPATHPOINT@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagPATHPOINT@@V?$allocator@PAUtagPATHPOINT@@@std@@@std@@YAXPAPAUtagPATHPOINT@@0AAV?$allocator@PAUtagPATHPOINT@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagQUESTCONDITION@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagQUESTCONDITION@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagQUESTCONDITION@@V?$allocator@PAUtagQUESTCONDITION@@@std@@@std@@YAXPAPAUtagQUESTCONDITION@@0AAV?$allocator@PAUtagQUESTCONDITION@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagQUESTREWARD@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagQUESTREWARD@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagQUESTREWARD@@V?$allocator@PAUtagQUESTREWARD@@@std@@@std@@YAXPAPAUtagQUESTREWARD@@0AAV?$allocator@PAUtagQUESTREWARD@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagQUESTTERM@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagQUESTTERM@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@YAXPAPAUtagQUESTTERM@@0AAV?$allocator@PAUtagQUESTTERM@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagTCASHITMSALE@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagTCASHITMSALE@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagTCASHITMSALE@@IU1@V?$allocator@UtagTCASHITMSALE@@@std@@@std@@YAXPAUtagTCASHITMSALE@@IABU1@AAV?$allocator@UtagTCASHITMSALE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagMONREGEN@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagMONREGEN@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagMONREGEN@@IU1@V?$allocator@UtagMONREGEN@@@std@@@std@@YAXPAUtagMONREGEN@@IABU1@AAV?$allocator@UtagMONREGEN@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagLOTTERY@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagLOTTERY@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagLOTTERY@@IU1@V?$allocator@UtagLOTTERY@@@std@@@std@@YAXPAUtagLOTTERY@@IABU1@AAV?$allocator@UtagLOTTERY@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@GV?$allocator@G@std@@@std@@YAXPAG0AAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAGPAGV?$allocator@G@std@@@std@@YAPAGPAG00AAV?$allocator@G@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAGPAG@std@@YAPAGPAG00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@VCTPlayer@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCTPlayer@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAVCTPlayer@@V?$allocator@PAVCTPlayer@@@std@@@std@@YAXPAPAVCTPlayer@@0AAV?$allocator@PAVCTPlayer@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagTCASHITMSALE@@V?$allocator@UtagTCASHITMSALE@@@std@@@std@@YAXPAUtagTCASHITMSALE@@0AAV?$allocator@UtagTCASHITMSALE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAUtagTCASHITMSALE@@PAU1@V?$allocator@UtagTCASHITMSALE@@@std@@@std@@YAPAUtagTCASHITMSALE@@PAU1@00AAV?$allocator@UtagTCASHITMSALE@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUtagTCASHITMSALE@@PAU1@@std@@YAPAUtagTCASHITMSALE@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@YAXPAUtagMONREGEN@@0AAV?$allocator@UtagMONREGEN@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAUtagMONREGEN@@PAU1@V?$allocator@UtagMONREGEN@@@std@@@std@@YAPAUtagMONREGEN@@PAU1@00AAV?$allocator@UtagMONREGEN@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUtagMONREGEN@@PAU1@@std@@YAPAUtagMONREGEN@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@YAXPAUtagLOTTERY@@0AAV?$allocator@UtagLOTTERY@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAUtagLOTTERY@@PAU1@V?$allocator@UtagLOTTERY@@@std@@@std@@YAPAUtagLOTTERY@@PAU1@00AAV?$allocator@UtagLOTTERY@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUtagLOTTERY@@PAU1@@std@@YAPAUtagLOTTERY@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@UtagTCASHITMSALE@@@std@@QAEXPAUtagTCASHITMSALE@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagTCASHITMSALE@@@std@@QAEXPAUtagTCASHITMSALE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@UtagMONREGEN@@@std@@QAEXPAUtagMONREGEN@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagMONREGEN@@@std@@QAEXPAUtagMONREGEN@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@UtagLOTTERY@@@std@@QAEXPAUtagLOTTERY@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagLOTTERY@@@std@@QAEXPAUtagLOTTERY@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill_n@PAGIG@std@@YAXPAGIABG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@GG@std@@YAPAGPAG00AAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagTCASHITMSALE@@PAU1@V?$allocator@UtagTCASHITMSALE@@@std@@@std@@YAPAUtagTCASHITMSALE@@PAU1@00AAV?$allocator@UtagTCASHITMSALE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagMONREGEN@@PAU1@V?$allocator@UtagMONREGEN@@@std@@@std@@YAPAUtagMONREGEN@@PAU1@00AAV?$allocator@UtagMONREGEN@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagLOTTERY@@PAU1@V?$allocator@UtagLOTTERY@@@std@@@std@@YAPAUtagLOTTERY@@PAU1@00AAV?$allocator@UtagLOTTERY@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@UtagTCASHITMSALE@@U1@@std@@YAXPAUtagTCASHITMSALE@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagTCASHITMSALE@@@std@@YAXPAUtagTCASHITMSALE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@UtagMONREGEN@@U1@@std@@YAXPAUtagMONREGEN@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagMONREGEN@@@std@@YAXPAUtagMONREGEN@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@UtagLOTTERY@@U1@@std@@YAXPAUtagLOTTERY@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagLOTTERY@@@std@@YAXPAUtagLOTTERY@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetGITPtr@CAtlModule@ATL@@UAEJPAPAUIGlobalInterfaceTable@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_StdGlobalInterfaceTable
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetLockCount@CAtlModule@ATL@@UAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@CAtlModule@ATL@@UAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Increment@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@G@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyChars@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QAE@PAPAUtagQUESTTERM@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QAE@PAPAUtagQUESTTERM@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReleaseBufferSetLength@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Format@?$ChTraitsCRT@D@ATL@@SAHPADPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBuffer@?$CSimpleStringT@D$0A@@ATL@@QAEPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrepareWrite@?$CSimpleStringT@D$0A@@ATL@@AAEPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Fork@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reallocate@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFormattedLength@?$ChTraitsCRT@D@ATL@@SAHPBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CAtlModule@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Decrement@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Term@CAtlModule@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlCallTermFunc@ATL@@YGXPAU_ATL_MODULE70@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlRaiseException@ATL@@YAXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Term@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@CAtlModule@ATL@@UAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QBEAAPAUtagQUESTTERM@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QBEABQAUtagQUESTTERM@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLength@?$CSimpleStringT@D$0A@@ATL@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CAtlException@ATL@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __TI1?AVCAtlException@ATL@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA1?AVCAtlException@ATL@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVCAtlException@ATL@@@84
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVCAtlException@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?size@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CQuestDieMon@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AtlLoadString@ATL@@YAHIPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUIAtlStringMgr@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyCharsOverlapped@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckImplicitLoad@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@AAE_NPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadStringA@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindStringResourceInstance@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlFindStringResourceInstance@ATL@@YAPAUHINSTANCE__@@IG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@IG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadStringA@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEHPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@D@ATL@@SAHPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertToBaseType@?$ChTraitsCRT@D@ATL@@SAXPADHPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringLength@?$CSimpleStringT@D$0A@@ATL@@SAHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WordCmpI@CAtlModule@ATL@@SAHPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindOneOf@CAtlModule@ATL@@SAPBDPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStringValue@CRegKey@ATL@@QAEJPBD0K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteValue@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCRegKey@ATL@@QBEPAUHKEY__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@CRegKey@ATL@@QAEJPAUHKEY__@@PBDPADKKPAU_SECURITY_ATTRIBUTES@@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Close@CRegKey@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlHresultFromWin32@ATL@@YAJK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Open@CRegKey@ATL@@QAEJPAUHKEY__@@PBDK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?UpdateRegistryFromResourceS@CAtlModule@ATL@@QAGJIHPAU_ATL_REGMAP_ENTRY@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRegObject@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IRegistrarBase@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CRegObject@ATL@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?QueryInterface@CRegObject@ATL@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CRegObject@ATL@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CRegObject@ATL@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClearReplacements@CRegObject@ATL@@UAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@CComFakeCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClearReplacements@CExpansionVector@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetKeyAt@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QBEAAPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetValueAt@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QBEAAPAGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveAll@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@CComFakeCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRegObject@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CExpansionVector@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CExpansionVector@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRegObject@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@CCRTAllocator@ATL@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlHresultFromLastError@ATL@@YAJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPAGPAGPBDHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlVerifyStackAvailable@_ATL_SAFE_ALLOCA_IMPL@ATL@@YA_NK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@CAtlSafeAllocBufferNode@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EscapeSingleQuote@CAtlModule@ATL@@SAXPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocscpy@@YAPAGPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocslen@@YAHPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_1O@MNLDABAF@?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AddReplacement@CRegObject@ATL@@UAGJPBG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPBGHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@CExpansionVector@ATL@@QAEHPBDPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAEHABQADABQAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalSetAtIndex@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAEXHABQADABQAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?2PAD@?$Wrapper@PAD@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@SAPAXIPAPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?3PAD@?$Wrapper@PAD@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@SAXPAXPAPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$Wrapper@PAD@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAE@ABQAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?2PAG@?$Wrapper@PAG@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@SAPAXIPAPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?3PAG@?$Wrapper@PAG@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@SAXPAXPAPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$Wrapper@PAG@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAE@ABQAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_1BG@JBACFMF@?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA_?$AAR?$AAa?$AAw?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1BC@KAILKFFG@?$AAR?$AAE?$AAG?$AAI?$AAS?$AAT?$AAR?$AAY?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?ResourceRegister@CRegObject@ATL@@QAGJPBGI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterFromResource@CRegObject@ATL@@IAEJPBGPBD1H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRegParser@ATL@@QAE@PAVCRegObject@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeHeap@?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateBytes@?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateHeap@?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterBuffer@CRegParser@ATL@@QAEJPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PreProcessBuffer@CRegParser@ATL@@QAEJPADPAPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CParseBuffer@CRegParser@ATL@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CParseBuffer@CRegParser@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StrChrA@CRegParser@ATL@@KAPADPADD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StrFromMap@CRegObject@ATL@@QAEPBGPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lookup@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QBEPAGABQAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindKey@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QBEHABQAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEqualKey@CExpansionVectorEqualHelper@ATL@@SA_NQAD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddString@CParseBuffer@CRegParser@ATL@@QAEHPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@CParseBuffer@CRegParser@ATL@@QAEHPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddChar@CParseBuffer@CRegParser@ATL@@QAEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Detach@CParseBuffer@CRegParser@ATL@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HKeyFromString@CRegParser@ATL@@KAPAUHKEY__@@PAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04OHBKMIBJ@HKCR?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04KIFLFONO@HKCU?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04CBBMIBLK@HKLM?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03DLBIJLAB@HKU?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04OFOCGAOH@HKPD?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04POMNGLEL@HKDD?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04LEMDOLAJ@HKCC?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@JBJOLKMF@HKEY_CLASSES_ROOT?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@GMMMKLBI@HKEY_CURRENT_USER?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@GIIFIKDM@HKEY_LOCAL_MACHINE?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@OEMMANAM@HKEY_USERS?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@IDBEHNDO@HKEY_PERFORMANCE_DATA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@MJDLIIGK@HKEY_DYN_DATA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@NLNNHLLF@HKEY_CURRENT_CONFIG?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?map@?2??HKeyFromString@CRegParser@ATL@@KAPAUHKEY__@@PAD@Z@4QBUkeymap@23@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?NextToken@CRegParser@ATL@@IAEJPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndOfVar@CRegParser@ATL@@IAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsSpace@CRegParser@ATL@@IAEHD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GenerateError@CRegParser@ATL@@IAEJI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterSubkeys@CRegParser@ATL@@IAEJPADPAUHKEY__@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AddValue@CRegParser@ATL@@IAEJAAVCRegKey@2@PBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VTFromRegType@CRegParser@ATL@@KAHPBDAAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?map@?2??VTFromRegType@CRegParser@ATL@@KAHPBDAAG@Z@4QBUtypemap@23@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?$S4@?2??VTFromRegType@CRegParser@ATL@@KAHPBDAAG@Z@4IA
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT ??0?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeHeap@?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateBytes@?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateHeap@?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetMultiStringValue@CRegKey@ATL@@QAEJPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetDWORDValue@CRegKey@ATL@@QAEJPBDK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeHeap@?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@QAEPAEI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateBytes@?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@QAEPAEI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateHeap@?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ChToByte@CRegParser@ATL@@KAED@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@QBEPAEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SkipAssignment@CRegParser@ATL@@IAEJPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HasSubKeys@CRegParser@ATL@@IAEHPAUHKEY__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CanForceRemoveKey@CRegParser@ATL@@IAEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?RecurseDeleteKey@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@CRegKey@ATL@@QAEXPAUHKEY__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteSubKey@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Detach@CRegKey@ATL@@QAEPAUHKEY__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SkipWhiteSpace@CRegParser@ATL@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ResourceUnregister@CRegObject@ATL@@QAGJPBGI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_1M@PPPPCDEP@?$AAA?$AAP?$AAP?$AAI?$AAD?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?rgszNeverDelete@CRegParser@ATL@@1QBQBDB	; ATL::CRegParser::rgszNeverDelete
PUBLIC	?g_pfnGetThreadACP@ATL@@3P6GIXZA		; ATL::g_pfnGetThreadACP
PUBLIC	?_AtlGetThreadACPThunk@ATL@@YGIXZ		; ATL::_AtlGetThreadACPThunk
PUBLIC	??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@	; `string'
PUBLIC	??_C@_08PICKODJL@FileType?$AA@			; `string'
PUBLIC	??_C@_09JKPGEJCH@Interface?$AA@			; `string'
PUBLIC	??_C@_08PPIOJEA@Hardware?$AA@			; `string'
PUBLIC	??_C@_04IHBFOLAC@Mime?$AA@			; `string'
PUBLIC	??_C@_03DDIMFGBA@SAM?$AA@			; `string'
PUBLIC	??_C@_08LOPHEHKG@SECURITY?$AA@			; `string'
PUBLIC	??_C@_06FDHFNJBJ@SYSTEM?$AA@			; `string'
PUBLIC	??_C@_08KEKAJNJI@Software?$AA@			; `string'
PUBLIC	??_C@_07KJLOKDKB@TypeLib?$AA@			; `string'
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?m_libid@CAtlModule@ATL@@2U_GUID@@A		; ATL::CAtlModule::m_libid
PUBLIC	_CLSID_StdGlobalInterfaceTable
PUBLIC	??_C@_05GIBEAPNE@CLSID?$AA@			; `string'
PUBLIC	??_C@_05PDIKPLII@AppID?$AA@			; `string'
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	??_C@_03LAIAPFCB@Val?$AA@			; `string'
PUBLIC	??_C@_0M@DBGDLGLL@ForceRemove?$AA@		; `string'
PUBLIC	??_C@_08KAAPDIAN@NoRemove?$AA@			; `string'
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CAtlModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CAtlModule::m_libid
_BSS	ENDS
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT
?g_pfnGetThreadACP@ATL@@3P6GIXZA DD FLAT:?_AtlGetThreadACPThunk@ATL@@YGIXZ ; ATL::g_pfnGetThreadACP
_DATA	ENDS
;	COMDAT _CLSID_StdGlobalInterfaceTable
CONST	SEGMENT
_CLSID_StdGlobalInterfaceTable DD 0323H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
_szStringVal DD	FLAT:??_C@_01CPLAODJH@S?$AA@
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
_multiszStringVal DD FLAT:??_C@_01PLPBNMEI@M?$AA@
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
_szDwordVal DD	FLAT:??_C@_01CKDDGHAB@D?$AA@
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
_szBinaryVal DD	FLAT:??_C@_01HMGJMAIH@B?$AA@
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT
??_C@_03LAIAPFCB@Val?$AA@ DB 'Val', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
_szValToken DD	FLAT:??_C@_03LAIAPFCB@Val?$AA@
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT
??_C@_0M@DBGDLGLL@ForceRemove?$AA@ DB 'ForceRemove', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
_szForceRemove DD FLAT:??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT
??_C@_08KAAPDIAN@NoRemove?$AA@ DB 'NoRemove', 00H	; `string'
CONST	ENDS
CONST	SEGMENT
_szNoRemove DD	FLAT:??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
_szDelete DD	FLAT:??_C@_06JBKGCNBB@Delete?$AA@
CONST	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT
??_C@_05PDIKPLII@AppID?$AA@ DB 'AppID', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT
??_C@_05GIBEAPNE@CLSID?$AA@ DB 'CLSID', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT
??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@ DB 'Component Categories', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT
??_C@_08PICKODJL@FileType?$AA@ DB 'FileType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT
??_C@_09JKPGEJCH@Interface?$AA@ DB 'Interface', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT
??_C@_08PPIOJEA@Hardware?$AA@ DB 'Hardware', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT
??_C@_04IHBFOLAC@Mime?$AA@ DB 'Mime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT
??_C@_03DDIMFGBA@SAM?$AA@ DB 'SAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT
??_C@_08LOPHEHKG@SECURITY?$AA@ DB 'SECURITY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT
??_C@_06FDHFNJBJ@SYSTEM?$AA@ DB 'SYSTEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT
??_C@_08KEKAJNJI@Software?$AA@ DB 'Software', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT
??_C@_07KJLOKDKB@TypeLib?$AA@ DB 'TypeLib', 00H		; `string'
CONST	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT
?rgszNeverDelete@CRegParser@ATL@@1QBQBDB DD FLAT:??_C@_05PDIKPLII@AppID?$AA@ ; ATL::CRegParser::rgszNeverDelete
	DD	FLAT:??_C@_05GIBEAPNE@CLSID?$AA@
	DD	FLAT:??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
	DD	FLAT:??_C@_08PICKODJL@FileType?$AA@
	DD	FLAT:??_C@_09JKPGEJCH@Interface?$AA@
	DD	FLAT:??_C@_08PPIOJEA@Hardware?$AA@
	DD	FLAT:??_C@_04IHBFOLAC@Mime?$AA@
	DD	FLAT:??_C@_03DDIMFGBA@SAM?$AA@
	DD	FLAT:??_C@_08LOPHEHKG@SECURITY?$AA@
	DD	FLAT:??_C@_06FDHFNJBJ@SYSTEM?$AA@
	DD	FLAT:??_C@_08KEKAJNJI@Software?$AA@
	DD	FLAT:??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	ENDS
PUBLIC	??0CQuestDieMon@@QAE@XZ				; CQuestDieMon::CQuestDieMon
PUBLIC	?ExecQuest@CQuestDieMon@@UAEXPAVCTPlayer@@KPAV?$map@EPAV?$map@KPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@@std@@@2@@std@@U?$less@E@2@V?$allocator@U?$pair@$$CBEPAV?$map@KPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@@std@@@2@@std@@@std@@@2@@std@@PAV?$map@KPAUtagQUESTTEMP@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUtagQUESTTEMP@@@std@@@3@@4@PAV?$map@GPAUtagTITEM@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUtagTITEM@@@std@@@3@@4@PAV?$map@GPAVCTSkillTemp@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkillTemp@@@std@@@3@@4@PAV?$map@GPAUtagTMONSTER@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUtagTMONSTER@@@std@@@3@@4@PAV?$map@EPAUtagTSTAT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTSTAT@@@std@@@3@@4@@Z ; CQuestDieMon::ExecQuest
PUBLIC	??_7CQuestDieMon@@6B@				; CQuestDieMon::`vftable'
PUBLIC	??_GCQuestDieMon@@UAEPAXI@Z			; CQuestDieMon::`scalar deleting destructor'
EXTRN	?CheckComplete@CQuest@@UAEPAUtagQUESTTERM@@PAVCTPlayer@@K@Z:NEAR ; CQuest::CheckComplete
EXTRN	?CheckComplete@CQuest@@UAEEPAVCTPlayer@@KPAUtagQUESTTERM@@@Z:NEAR ; CQuest::CheckComplete
EXTRN	??0CQuest@@QAE@XZ:NEAR				; CQuest::CQuest
EXTRN	??_ECQuestDieMon@@UAEPAXI@Z:NEAR		; CQuestDieMon::`vector deleting destructor'
;	COMDAT ??_7CQuestDieMon@@6B@
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\questdiemon.cpp
CONST	SEGMENT
??_7CQuestDieMon@@6B@ DD FLAT:?CheckComplete@CQuest@@UAEEPAVCTPlayer@@KPAUtagQUESTTERM@@@Z ; CQuestDieMon::`vftable'
	DD	FLAT:?CheckComplete@CQuest@@UAEPAUtagQUESTTERM@@PAVCTPlayer@@K@Z
	DD	FLAT:?ExecQuest@CQuestDieMon@@UAEXPAVCTPlayer@@KPAV?$map@EPAV?$map@KPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@@std@@@2@@std@@U?$less@E@2@V?$allocator@U?$pair@$$CBEPAV?$map@KPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@@std@@@2@@std@@@std@@@2@@std@@PAV?$map@KPAUtagQUESTTEMP@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUtagQUESTTEMP@@@std@@@3@@4@PAV?$map@GPAUtagTITEM@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUtagTITEM@@@std@@@3@@4@PAV?$map@GPAVCTSkillTemp@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkillTemp@@@std@@@3@@4@PAV?$map@GPAUtagTMONSTER@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUtagTMONSTER@@@std@@@3@@4@PAV?$map@EPAUtagTSTAT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTSTAT@@@std@@@3@@4@@Z
	DD	FLAT:??_ECQuestDieMon@@UAEPAXI@Z
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0CQuestDieMon@@QAE@XZ
_TEXT	SEGMENT
??0CQuestDieMon@@QAE@XZ PROC NEAR			; CQuestDieMon::CQuestDieMon, COMDAT
; _this$ = ecx

; 6    : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??0CQuest@@QAE@XZ	; CQuest::CQuest
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CQuestDieMon@@6B@

; 7    : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0CQuestDieMon@@QAE@XZ ENDP				; CQuestDieMon::CQuestDieMon
_TEXT	ENDS
PUBLIC	??1CQuestDieMon@@UAE@XZ				; CQuestDieMon::~CQuestDieMon
EXTRN	??1CQuest@@UAE@XZ:NEAR				; CQuest::~CQuest
; Function compile flags: /Ogty
;	COMDAT ??1CQuestDieMon@@UAE@XZ
_TEXT	SEGMENT
??1CQuestDieMon@@UAE@XZ PROC NEAR			; CQuestDieMon::~CQuestDieMon, COMDAT
; _this$ = ecx

; 10   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CQuestDieMon@@6B@

; 11   : }

  00006	e9 00 00 00 00	 jmp	 ??1CQuest@@UAE@XZ	; CQuest::~CQuest
??1CQuestDieMon@@UAE@XZ ENDP				; CQuestDieMon::~CQuestDieMon
_TEXT	ENDS
PUBLIC	?size@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEIXZ ; std::vector<CTMonster *,std::allocator<CTMonster *> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?size@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<CTMonster *,std::allocator<CTMonster *> >::size, COMDAT
; _this$ = ecx

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L176966
  00007	33 c0		 xor	 eax, eax

; 517  : 		}

  00009	c3		 ret	 0
$L176966:

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  0000a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2

; 517  : 		}

  00012	c3		 ret	 0
?size@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEIXZ ENDP ; std::vector<CTMonster *,std::allocator<CTMonster *> >::size
_TEXT	ENDS
PUBLIC	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z	; InterlockedExchangePointer
EXTRN	__imp__InterlockedExchange@8:NEAR
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_pNew$ = 12						; size = 4
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z PROC NEAR	; InterlockedExchangePointer, COMDAT

; 92   : 	return( reinterpret_cast<void*>(static_cast<LONG_PTR>(::InterlockedExchange(reinterpret_cast<LONG*>(pp), static_cast<LONG>(reinterpret_cast<LONG_PTR>(pNew))))) );

  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__InterlockedExchange@8
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ENDP	; InterlockedExchangePointer
_TEXT	ENDS
PUBLIC	?_AtlGetThreadACPFake@ATL@@YGIXZ		; ATL::_AtlGetThreadACPFake
EXTRN	__imp__GetACP@0:NEAR
EXTRN	__imp__GetLocaleInfoA@16:NEAR
EXTRN	__imp__GetThreadLocale@0:NEAR
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
; Function compile flags: /Ogty
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT
_szACP$ = -12						; size = 7
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPFake@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPFake, COMDAT

; 101  : {

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	56		 push	 esi
  00009	89 44 24 0c	 mov	 DWORD PTR __$ArrayPad$[esp+16], eax

; 102  : 	UINT nACP = 0;

  0000d	33 f6		 xor	 esi, esi

; 103  : 
; 104  : 	LCID lcidThread = ::GetThreadLocale();

  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetThreadLocale@0

; 105  : 
; 106  : 	char szACP[7];
; 107  : 	// GetLocaleInfoA will fail for a Unicode-only LCID, but those are only supported on 
; 108  : 	// Windows 2000.  Since Windows 2000 supports CP_THREAD_ACP, this code path is never
; 109  : 	// executed on Windows 2000.
; 110  : 	if (::GetLocaleInfoA(lcidThread, LOCALE_IDEFAULTANSICODEPAGE, szACP, 7) != 0)

  00015	6a 07		 push	 7
  00017	8d 4c 24 08	 lea	 ecx, DWORD PTR _szACP$[esp+20]
  0001b	51		 push	 ecx
  0001c	68 04 10 00 00	 push	 4100			; 00001004H
  00021	50		 push	 eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocaleInfoA@16
  00028	85 c0		 test	 eax, eax
  0002a	74 21		 je	 SHORT $L176978

; 111  : 	{
; 112  : 		char* pch = szACP;
; 113  : 		while (*pch != '\0')

  0002c	8a 44 24 04	 mov	 al, BYTE PTR _szACP$[esp+16]
  00030	84 c0		 test	 al, al
  00032	8d 4c 24 04	 lea	 ecx, DWORD PTR _szACP$[esp+16]
  00036	74 15		 je	 SHORT $L176978
$L58550:

; 114  : 		{
; 115  : 			nACP *= 10;
; 116  : 			nACP += *pch++ - '0';

  00038	0f be c0	 movsx	 eax, al
  0003b	8d 14 b6	 lea	 edx, DWORD PTR [esi+esi*4]
  0003e	41		 inc	 ecx
  0003f	8d 74 50 d0	 lea	 esi, DWORD PTR [eax+edx*2-48]
  00043	8a 01		 mov	 al, BYTE PTR [ecx]
  00045	84 c0		 test	 al, al
  00047	75 ef		 jne	 SHORT $L58550

; 117  : 		}
; 118  : 	}
; 119  : 	// Use the Default ANSI Code Page if we were unable to get the thread ACP or if one does not exist.
; 120  : 	if (nACP == 0)

  00049	85 f6		 test	 esi, esi
  0004b	75 14		 jne	 SHORT $L176979
$L176978:

; 121  : 		nACP = ::GetACP();

  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetACP@0
  00053	5e		 pop	 esi

; 122  : 
; 123  : 	return nACP;
; 124  : }

  00054	8b 4c 24 08	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+12]
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00060	c3		 ret	 0
$L176979:
  00061	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+16]
  00065	8b c6		 mov	 eax, esi
  00067	5e		 pop	 esi
  00068	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00070	c3		 ret	 0
?_AtlGetThreadACPFake@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPFake
_TEXT	ENDS
PUBLIC	?_AtlGetThreadACPReal@ATL@@YGIXZ		; ATL::_AtlGetThreadACPReal
; Function compile flags: /Ogty
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetThreadACPReal@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPReal, COMDAT

; 128  : 	return( CP_THREAD_ACP );

  00000	b8 03 00 00 00	 mov	 eax, 3

; 129  : }

  00005	c3		 ret	 0
?_AtlGetThreadACPReal@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPReal
_TEXT	ENDS
EXTRN	__imp__GetVersionExA@4:NEAR
; Function compile flags: /Ogty
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT
_ver$ = -152						; size = 148
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPThunk@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPThunk, COMDAT

; 134  : {

  00000	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	89 84 24 94 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+152], eax

; 135  : 	OSVERSIONINFO ver;
; 136  : 	ATLGETTHREADACP pfnGetThreadACP;
; 137  : 
; 138  : 	ver.dwOSVersionInfoSize = sizeof( ver );
; 139  : 	::GetVersionEx( &ver );

  00012	8d 04 24	 lea	 eax, DWORD PTR _ver$[esp+152]
  00015	50		 push	 eax
  00016	c7 44 24 04 94
	00 00 00	 mov	 DWORD PTR _ver$[esp+156], 148 ; 00000094H
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4

; 140  : 	if( (ver.dwPlatformId == VER_PLATFORM_WIN32_NT) && (ver.dwMajorVersion >= 5) )

  00024	83 7c 24 10 02	 cmp	 DWORD PTR _ver$[esp+168], 2
  00029	75 0c		 jne	 SHORT $L58560
  0002b	83 7c 24 04 05	 cmp	 DWORD PTR _ver$[esp+156], 5

; 141  : 	{
; 142  : 		// On Win2K, CP_THREAD_ACP is supported
; 143  : 		pfnGetThreadACP = _AtlGetThreadACPReal;

  00030	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?_AtlGetThreadACPReal@ATL@@YGIXZ ; ATL::_AtlGetThreadACPReal
  00035	73 05		 jae	 SHORT $L58561
$L58560:

; 144  : 	}
; 145  : 	else
; 146  : 	{
; 147  : 		pfnGetThreadACP = _AtlGetThreadACPFake;

  00037	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?_AtlGetThreadACPFake@ATL@@YGIXZ ; ATL::_AtlGetThreadACPFake
$L58561:

; 148  : 	}
; 149  : 	InterlockedExchangePointer( reinterpret_cast< void** >(&g_pfnGetThreadACP), pfnGetThreadACP );

  0003c	50		 push	 eax
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedExchange@8

; 150  : 
; 151  : 	return( g_pfnGetThreadACP() );

  00048	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP

; 152  : }

  0004e	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+152]
  00055	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005a	81 c4 98 00 00
	00		 add	 esp, 152		; 00000098H
  00060	c3		 ret	 0
?_AtlGetThreadACPThunk@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPThunk
_TEXT	ENDS
PUBLIC	??8const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::operator==
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::operator==, COMDAT
; _this$ = ecx

; 241  : 			return (_Ptr == _Right._Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	f7 d8		 neg	 eax
  0000a	1b c0		 sbb	 eax, eax
  0000c	40		 inc	 eax

; 242  : 			}

  0000d	c2 04 00	 ret	 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::operator==
_TEXT	ENDS
PUBLIC	??0?$pair@$$CB_J_J@std@@QAE@AB_J0@Z		; std::pair<__int64 const ,__int64>::pair<__int64 const ,__int64>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\utility
;	COMDAT ??0?$pair@$$CB_J_J@std@@QAE@AB_J0@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@$$CB_J_J@std@@QAE@AB_J0@Z PROC NEAR		; std::pair<__int64 const ,__int64>::pair<__int64 const ,__int64>, COMDAT
; _this$ = ecx

; 34   : 		{	// construct from specified values

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Val1$[esp-4]
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	89 10		 mov	 DWORD PTR [eax], edx
  0000a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0000d	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00010	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val2$[esp-4]
  00014	8b 11		 mov	 edx, DWORD PTR [ecx]
  00016	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00019	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001c	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 35   : 		}

  0001f	c2 08 00	 ret	 8
??0?$pair@$$CB_J_J@std@@QAE@AB_J0@Z ENDP		; std::pair<__int64 const ,__int64>::pair<__int64 const ,__int64>
_TEXT	ENDS
PUBLIC	??R?$less@G@std@@QBE_NABG0@Z			; std::less<unsigned short>::operator()
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\functional
;	COMDAT ??R?$less@G@std@@QBE_NABG0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@G@std@@QBE_NABG0@Z PROC NEAR			; std::less<unsigned short>::operator(), COMDAT
; _this$ = ecx

; 139  : 		return (_Left < _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	66 8b 08	 mov	 cx, WORD PTR [eax]
  00007	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000b	66 3b 0a	 cmp	 cx, WORD PTR [edx]
  0000e	1b c0		 sbb	 eax, eax
  00010	f7 d8		 neg	 eax

; 140  : 		}

  00012	c2 08 00	 ret	 8
??R?$less@G@std@@QBE_NABG0@Z ENDP			; std::less<unsigned short>::operator()
_TEXT	ENDS
PUBLIC	?_Isnil@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Isnil
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Isnil, COMDAT

; 137  : 		return ((_Charref)(*_Pnode)._Isnil);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 21	 add	 eax, 33			; 00000021H

; 138  : 		}

  00007	c3		 ret	 0
?_Isnil@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Isnil
_TEXT	ENDS
PUBLIC	?_Left@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Left
; Function compile flags: /Ogty
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Left, COMDAT

; 147  : 		return ((_Nodepref)(*_Pnode)._Left);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 148  : 		}

  00004	c3		 ret	 0
?_Left@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Left
_TEXT	ENDS
PUBLIC	?_Right@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Right
; Function compile flags: /Ogty
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Right, COMDAT

; 157  : 		return ((_Nodepref)(*_Pnode)._Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 08	 add	 eax, 8

; 158  : 		}

  00007	c3		 ret	 0
?_Right@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Right
_TEXT	ENDS
PUBLIC	?_Kfn@?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@SAAB_JABU?$pair@$$CB_J_J@2@@Z ; std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0>::_Kfn
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\map
;	COMDAT ?_Kfn@?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@SAAB_JABU?$pair@$$CB_J_J@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@SAAB_JABU?$pair@$$CB_J_J@2@@Z PROC NEAR ; std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0>::_Kfn, COMDAT

; 64   : 		return (_Val.first);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val$[esp-4]

; 65   : 		}

  00004	c3		 ret	 0
?_Kfn@?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@SAAB_JABU?$pair@$$CB_J_J@2@@Z ENDP ; std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0>::_Kfn
_TEXT	ENDS
PUBLIC	??R?$less@_J@std@@QBE_NAB_J0@Z			; std::less<__int64>::operator()
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\functional
;	COMDAT ??R?$less@_J@std@@QBE_NAB_J0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@_J@std@@QBE_NAB_J0@Z PROC NEAR		; std::less<__int64>::operator(), COMDAT
; _this$ = ecx

; 139  : 		return (_Left < _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00008	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0000b	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  0000e	7f 10		 jg	 SHORT $L177018
  00010	7c 06		 jl	 SHORT $L177020
  00012	8b 00		 mov	 eax, DWORD PTR [eax]
  00014	3b 01		 cmp	 eax, DWORD PTR [ecx]
  00016	73 08		 jae	 SHORT $L177018
$L177020:
  00018	b8 01 00 00 00	 mov	 eax, 1

; 140  : 		}

  0001d	c2 08 00	 ret	 8
$L177018:

; 139  : 		return (_Left < _Right);

  00020	33 c0		 xor	 eax, eax

; 140  : 		}

  00022	c2 08 00	 ret	 8
??R?$less@_J@std@@QBE_NAB_J0@Z ENDP			; std::less<__int64>::operator()
_TEXT	ENDS
PUBLIC	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::_Mynode
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@3@XZ
_TEXT	SEGMENT
?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@3@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::_Mynode, COMDAT
; _this$ = ecx

; 284  : 			return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 285  : 			}

  00002	c3		 ret	 0
?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@3@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::_Mynode
_TEXT	ENDS
PUBLIC	??8const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::const_iterator::operator==
; Function compile flags: /Ogty
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::const_iterator::operator==, COMDAT
; _this$ = ecx

; 241  : 			return (_Ptr == _Right._Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	f7 d8		 neg	 eax
  0000a	1b c0		 sbb	 eax, eax
  0000c	40		 inc	 eax

; 242  : 			}

  0000d	c2 04 00	 ret	 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::const_iterator::operator==
_TEXT	ENDS
PUBLIC	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::const_iterator::_Mynode
; Function compile flags: /Ogty
;	COMDAT ?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@3@XZ
_TEXT	SEGMENT
?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@3@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::const_iterator::_Mynode, COMDAT
; _this$ = ecx

; 284  : 			return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 285  : 			}

  00002	c3		 ret	 0
?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@3@XZ ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::const_iterator::_Mynode
_TEXT	ENDS
PUBLIC	??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@1@AB_N@Z ; std::pair<std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::iterator,bool>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\utility
;	COMDAT ??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@1@AB_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@1@AB_N@Z PROC NEAR ; std::pair<std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::iterator,bool>, COMDAT
; _this$ = ecx

; 34   : 		{	// construct from specified values

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Val1$[esp-4]
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val2$[esp-4]
  0000c	89 10		 mov	 DWORD PTR [eax], edx
  0000e	8a 11		 mov	 dl, BYTE PTR [ecx]
  00010	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 35   : 		}

  00013	c2 08 00	 ret	 8
??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@1@AB_N@Z ENDP ; std::pair<std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::iterator,bool>
_TEXT	ENDS
PUBLIC	?_Color@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Color
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Color@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Color, COMDAT

; 132  : 		return ((_Charref)(*_Pnode)._Color);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 20	 add	 eax, 32			; 00000020H

; 133  : 		}

  00007	c3		 ret	 0
?_Color@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Color
_TEXT	ENDS
PUBLIC	?_Parent@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Parent
; Function compile flags: /Ogty
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Parent, COMDAT

; 152  : 		return ((_Nodepref)(*_Pnode)._Parent);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 153  : 		}

  00007	c3		 ret	 0
?_Parent@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Parent
_TEXT	ENDS
PUBLIC	?_Myval@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAAU?$pair@$$CB_J_J@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Myval
; Function compile flags: /Ogty
;	COMDAT ?_Myval@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAAU?$pair@$$CB_J_J@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAAU?$pair@$$CB_J_J@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Myval, COMDAT

; 162  : 		return ((_Vref)(*_Pnode)._Myval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 10	 add	 eax, 16			; 00000010H

; 163  : 		}

  00007	c3		 ret	 0
?_Myval@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAAU?$pair@$$CB_J_J@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Myval
_TEXT	ENDS
PUBLIC	?_Lmost@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Lmost
; Function compile flags: /Ogty
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 1005 : 		return (_Left(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1006 : 		}

  00003	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Lmost
_TEXT	ENDS
PUBLIC	?_Rmost@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Rmost
; Function compile flags: /Ogty
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 1049 : 		return (_Right(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 08	 add	 eax, 8

; 1050 : 		}

  00006	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Rmost
_TEXT	ENDS
PUBLIC	?_Myval@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBGPAVCTMonSpawn@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Myval
; Function compile flags: /Ogty
;	COMDAT ?_Myval@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBGPAVCTMonSpawn@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBGPAVCTMonSpawn@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Myval, COMDAT

; 162  : 		return ((_Vref)(*_Pnode)._Myval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 0c	 add	 eax, 12			; 0000000cH

; 163  : 		}

  00007	c3		 ret	 0
?_Myval@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBGPAVCTMonSpawn@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Myval
_TEXT	ENDS
PUBLIC	?_Kfn@?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@SAABGABU?$pair@$$CBGPAVCTMonSpawn@@@2@@Z ; std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0>::_Kfn
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\map
;	COMDAT ?_Kfn@?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@SAABGABU?$pair@$$CBGPAVCTMonSpawn@@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@SAABGABU?$pair@$$CBGPAVCTMonSpawn@@@2@@Z PROC NEAR ; std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0>::_Kfn, COMDAT

; 64   : 		return (_Val.first);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val$[esp-4]

; 65   : 		}

  00004	c3		 ret	 0
?_Kfn@?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@SAABGABU?$pair@$$CBGPAVCTMonSpawn@@@2@@Z ENDP ; std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0>::_Kfn
_TEXT	ENDS
PUBLIC	??0const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::const_iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 200  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 201  : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??0const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::const_iterator::const_iterator
; Function compile flags: /Ogty
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 200  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 201  : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??Yiterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAV012@H@Z ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::operator+=
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Yiterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Yiterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::operator+=, COMDAT
; _this$ = ecx

; 255  : 			{	// increment by integer

  00000	8b c1		 mov	 eax, ecx

; 256  : 			this->_Myptr += _Off;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  0000d	01 10		 add	 DWORD PTR [eax], edx

; 257  : 			return (*this);
; 258  : 			}

  0000f	c2 04 00	 ret	 4
??Yiterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::operator+=
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEABQAVCTMonster@@XZ ; std::vector<CTMonster *,std::allocator<CTMonster *> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEABQAVCTMonster@@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEABQAVCTMonster@@XZ PROC NEAR ; std::vector<CTMonster *,std::allocator<CTMonster *> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 80   : 
; 81   : 
; 82   : 			return (*_Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 83   : 			}

  00002	c3		 ret	 0
??Dconst_iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEABQAVCTMonster@@XZ ENDP ; std::vector<CTMonster *,std::allocator<CTMonster *> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Root
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Root, COMDAT
; _this$ = ecx

; 1064 : 		return (_Parent(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 04	 add	 eax, 4

; 1065 : 		}

  00006	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Root
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@U?$pair@$$CB_J_J@std@@@std@@QBEIXZ ; std::allocator<std::pair<__int64 const ,__int64> >::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?max_size@?$allocator@U?$pair@$$CB_J_J@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$pair@$$CB_J_J@std@@@std@@QBEIXZ PROC NEAR ; std::allocator<std::pair<__int64 const ,__int64> >::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 159  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$pair@$$CB_J_J@std@@@std@@QBEIXZ ENDP ; std::allocator<std::pair<__int64 const ,__int64> >::max_size
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Node>::deallocate
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Ogty
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@I@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	?_Isnil@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Isnil
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Isnil, COMDAT

; 137  : 		return ((_Charref)(*_Pnode)._Isnil);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 15	 add	 eax, 21			; 00000015H

; 138  : 		}

  00007	c3		 ret	 0
?_Isnil@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Isnil
_TEXT	ENDS
PUBLIC	?_Left@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Left
; Function compile flags: /Ogty
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Left, COMDAT

; 147  : 		return ((_Nodepref)(*_Pnode)._Left);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 148  : 		}

  00004	c3		 ret	 0
?_Left@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Left
_TEXT	ENDS
PUBLIC	?_Right@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Right
; Function compile flags: /Ogty
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Right, COMDAT

; 157  : 		return ((_Nodepref)(*_Pnode)._Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 08	 add	 eax, 8

; 158  : 		}

  00007	c3		 ret	 0
?_Right@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Right
_TEXT	ENDS
PUBLIC	??0const_iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE@PAPAVCTMonster@@@Z ; std::vector<CTMonster *,std::allocator<CTMonster *> >::const_iterator::const_iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0const_iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE@PAPAVCTMonster@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0const_iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE@PAPAVCTMonster@@@Z PROC NEAR ; std::vector<CTMonster *,std::allocator<CTMonster *> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 73   : 		const_iterator(_Tptr _Ptr)

  00000	8b c1		 mov	 eax, ecx

; 74   : 			{	// construct with pointer _Ptr
; 75   : 			_Myptr = _Ptr;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 76   : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE@PAPAVCTMonster@@@Z ENDP ; std::vector<CTMonster *,std::allocator<CTMonster *> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??0_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CB_J_J@2@D@Z ; std::_Tree_nod<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Node::_Node
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CB_J_J@2@D@Z
_TEXT	SEGMENT
__Larg$ = 8						; size = 4
__Parg$ = 12						; size = 4
__Rarg$ = 16						; size = 4
__Val$ = 20						; size = 4
__Carg$ = 24						; size = 1
??0_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CB_J_J@2@D@Z PROC NEAR ; std::_Tree_nod<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Node::_Node, COMDAT
; _this$ = ecx

; 40   : 			{	// construct a node with value

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Parg$[esp-4]
  00004	8b c1		 mov	 eax, ecx
  00006	8b 4c 24 04	 mov	 ecx, DWORD PTR __Larg$[esp-4]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Rarg$[esp-4]
  00010	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00013	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00016	8b 4c 24 10	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0001a	56		 push	 esi
  0001b	8b 31		 mov	 esi, DWORD PTR [ecx]
  0001d	8d 50 10	 lea	 edx, DWORD PTR [eax+16]
  00020	89 32		 mov	 DWORD PTR [edx], esi
  00022	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00025	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00028	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  0002b	89 72 08	 mov	 DWORD PTR [edx+8], esi
  0002e	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  00031	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  00034	8a 54 24 18	 mov	 dl, BYTE PTR __Carg$[esp]
  00038	88 50 20	 mov	 BYTE PTR [eax+32], dl
  0003b	c6 40 21 00	 mov	 BYTE PTR [eax+33], 0
  0003f	5e		 pop	 esi

; 41   : 			}

  00040	c2 14 00	 ret	 20			; 00000014H
??0_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CB_J_J@2@D@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Node::_Node
_TEXT	ENDS
PUBLIC	?_Max@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Max
; Function compile flags: /Ogty
;	COMDAT ?_Max@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Max, COMDAT

; 1035 : 		while (!_Isnil(_Right(_Pnode)))

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00007	8a 51 21	 mov	 dl, BYTE PTR [ecx+33]
  0000a	84 d2		 test	 dl, dl
  0000c	75 0e		 jne	 SHORT $L176063
  0000e	8b ff		 npad	 2
$L176062:

; 1036 : 			_Pnode = _Right(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00015	8a 51 21	 mov	 dl, BYTE PTR [ecx+33]
  00018	84 d2		 test	 dl, dl
  0001a	74 f4		 je	 SHORT $L176062
$L176063:

; 1037 : 		return (_Pnode);
; 1038 : 		}

  0001c	c3		 ret	 0
?_Max@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Max
_TEXT	ENDS
PUBLIC	?_Parent@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Parent
; Function compile flags: /Ogty
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Parent, COMDAT

; 152  : 		return ((_Nodepref)(*_Pnode)._Parent);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 153  : 		}

  00007	c3		 ret	 0
?_Parent@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Parent
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Node>
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@0@IPAU120@@Z PROC NEAR ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Node>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00007	c1 e0 03	 shl	 eax, 3
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	83 c4 04	 add	 esp, 4

; 35   : 	}

  00013	c3		 ret	 0
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Node>
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__P$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC NEAR				; operator new, COMDAT

; 109  :         {return (_P); }

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __P$[esp-4]
  00004	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogty
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC NEAR					; operator delete, COMDAT

; 112  :         {return; }

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC NEAR	; std::char_traits<char>::assign, COMDAT

; 331  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 332  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogty
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC NEAR		; std::char_traits<char>::length, COMDAT

; 352  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$L177135:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $L177135
  0000e	2b c2		 sub	 eax, edx

; 353  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
; Function compile flags: /Ogty
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::copy, COMDAT

; 358  : 		return ((_Elem *)::memcpy(_First1, _First2, _Count));

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR __First2$[esp]
  00009	57		 push	 edi
  0000a	8b 7c 24 0c	 mov	 edi, DWORD PTR __First1$[esp+4]
  0000e	8b c1		 mov	 eax, ecx
  00010	8b d7		 mov	 edx, edi
  00012	c1 e9 02	 shr	 ecx, 2
  00015	f3 a5		 rep movsd
  00017	8b c8		 mov	 ecx, eax
  00019	83 e1 03	 and	 ecx, 3
  0001c	f3 a4		 rep movsb
  0001e	5f		 pop	 edi
  0001f	8b c2		 mov	 eax, edx
  00021	5e		 pop	 esi

; 359  : 		}

  00022	c3		 ret	 0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	_memmove:NEAR
; Function compile flags: /Ogty
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::move, COMDAT

; 370  : 		return ((_Elem *)::memmove(_First1, _First2, _Count));

  00000	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1109 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1110 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L177149
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  00009	c3		 ret	 0
$L177149:

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC NEAR		; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?size@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QBEIXZ ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?size@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::size, COMDAT
; _this$ = ecx

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L177157
  00007	33 c0		 xor	 eax, eax

; 517  : 		}

  00009	c3		 ret	 0
$L177157:

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  0000a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2

; 517  : 		}

  00012	c3		 ret	 0
?size@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L177162
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  00009	c3		 ret	 0
$L177162:

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC NEAR	; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QBEABQAUtagQUESTTERM@@XZ ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::const_iterator::operator*
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Dconst_iterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QBEABQAUtagQUESTTERM@@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QBEABQAUtagQUESTTERM@@XZ PROC NEAR ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 80   : 
; 81   : 
; 82   : 			return (*_Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 83   : 			}

  00002	c3		 ret	 0
??Dconst_iterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QBEABQAUtagQUESTTERM@@XZ ENDP ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1494 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi

; 1495 : 		if (_Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00001	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  00004	83 fe 10	 cmp	 esi, 16			; 00000010H
  00007	57		 push	 edi
  00008	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0000b	72 04		 jb	 SHORT $L177177
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	eb 02		 jmp	 SHORT $L177178
$L177177:
  00011	8b d0		 mov	 edx, eax
$L177178:
  00013	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00017	3b fa		 cmp	 edi, edx
  00019	72 17		 jb	 SHORT $L150517
  0001b	83 fe 10	 cmp	 esi, 16			; 00000010H
  0001e	72 02		 jb	 SHORT $L177185
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
$L177185:
  00022	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00025	03 c8		 add	 ecx, eax
  00027	3b cf		 cmp	 ecx, edi
  00029	76 07		 jbe	 SHORT $L150517
  0002b	5f		 pop	 edi

; 1497 : 		else
; 1498 : 			return (true);

  0002c	b0 01		 mov	 al, 1
  0002e	5e		 pop	 esi

; 1499 : 		}

  0002f	c2 04 00	 ret	 4
$L150517:
  00032	5f		 pop	 edi

; 1496 : 			return (false);	// don't ask

  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 1499 : 		}

  00036	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	??Yiterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QAEAAV012@H@Z ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::iterator::operator+=
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Yiterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Yiterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::iterator::operator+=, COMDAT
; _this$ = ecx

; 255  : 			{	// increment by integer

  00000	8b c1		 mov	 eax, ecx

; 256  : 			this->_Myptr += _Off;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  0000d	01 10		 add	 DWORD PTR [eax], edx

; 257  : 			return (*this);
; 258  : 			}

  0000f	c2 04 00	 ret	 4
??Yiterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::iterator::operator+=
_TEXT	ENDS
PUBLIC	??0const_iterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QAE@PAPAUtagQUESTTERM@@@Z ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::const_iterator::const_iterator
; Function compile flags: /Ogty
;	COMDAT ??0const_iterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QAE@PAPAUtagQUESTTERM@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0const_iterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QAE@PAPAUtagQUESTTERM@@@Z PROC NEAR ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 73   : 		const_iterator(_Tptr _Ptr)

  00000	8b c1		 mov	 eax, ecx

; 74   : 			{	// construct with pointer _Ptr
; 75   : 			_Myptr = _Ptr;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 76   : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QAE@PAPAUtagQUESTTERM@@@Z ENDP ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC NEAR			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC NEAR		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 159  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogty
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC NEAR		; std::_Allocate<char>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 35   : 	}

  0000d	c3		 ret	 0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_GCQuestDieMon@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCQuestDieMon@@UAEPAXI@Z PROC NEAR			; CQuestDieMon::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1CQuestDieMon@@UAE@XZ	; CQuestDieMon::~CQuestDieMon
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L177207
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L177207:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GCQuestDieMon@@UAEPAXI@Z ENDP			; CQuestDieMon::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??9const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::const_iterator::operator!=
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::const_iterator::operator!=, COMDAT
; _this$ = ecx

; 246  : 			return (!(*this == _Right));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Right$[esp-4]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]
  00009	33 c9		 xor	 ecx, ecx
  0000b	3b c6		 cmp	 eax, esi
  0000d	0f 95 c1	 setne	 cl
  00010	8a c1		 mov	 al, cl
  00012	5e		 pop	 esi

; 247  : 			}

  00013	c2 04 00	 ret	 4
??9const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::const_iterator::operator!=
_TEXT	ENDS
PUBLIC	?_Key@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAB_JPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Key
; Function compile flags: /Ogty
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAB_JPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAB_JPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Key, COMDAT

; 142  : 		return (_Mybase::_Kfn(_Myval(_Pnode)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 10	 add	 eax, 16			; 00000010H

; 143  : 		}

  00007	c3		 ret	 0
?_Key@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@KAAB_JPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Key
_TEXT	ENDS
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Root
; Function compile flags: /Ogty
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Root, COMDAT
; _this$ = ecx

; 1059 : 		return (_Parent(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 04	 add	 eax, 4

; 1060 : 		}

  00006	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Root
_TEXT	ENDS
PUBLIC	?_Key@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAABGPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Key
; Function compile flags: /Ogty
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAABGPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAABGPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Key, COMDAT

; 142  : 		return (_Mybase::_Kfn(_Myval(_Pnode)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 0c	 add	 eax, 12			; 0000000cH

; 143  : 		}

  00007	c3		 ret	 0
?_Key@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAABGPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Key
_TEXT	ENDS
PUBLIC	??Hiterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QBE?AV012@H@Z ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::iterator::operator+
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Hiterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Hiterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::iterator::operator+, COMDAT
; _this$ = ecx

; 262  : 			iterator _Tmp = *this;
; 263  : 			return (_Tmp += _Off);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 08	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00009	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000d	89 10		 mov	 DWORD PTR [eax], edx

; 264  : 			}

  0000f	c2 08 00	 ret	 8
??Hiterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QBE?AV012@H@Z ENDP ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::iterator::operator+
_TEXT	ENDS
PUBLIC	??0iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::iterator::iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::iterator::iterator, COMDAT
; _this$ = ecx

; 312  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 313  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBGPAVCTMonSpawn@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBGPAVCTMonSpawn@@@2@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBGPAVCTMonSpawn@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 205  : 			return (_Myval(_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 206  : 			}

  00005	c3		 ret	 0
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBGPAVCTMonSpawn@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	??0iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::iterator::iterator
; Function compile flags: /Ogty
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::iterator::iterator, COMDAT
; _this$ = ecx

; 312  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 313  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBEABU?$pair@$$CB_J_J@2@XZ ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBEABU?$pair@$$CB_J_J@2@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBEABU?$pair@$$CB_J_J@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 205  : 			return (_Myval(_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 206  : 			}

  00005	c3		 ret	 0
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBEABU?$pair@$$CB_J_J@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	??Diterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEAAPAVCTMonster@@XZ ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::operator*
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Diterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEAAPAVCTMonster@@XZ
_TEXT	SEGMENT
??Diterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEAAPAVCTMonster@@XZ PROC NEAR ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::operator*, COMDAT
; _this$ = ecx

; 220  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 221  : 			}

  00002	c3		 ret	 0
??Diterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEAAPAVCTMonster@@XZ ENDP ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::operator*
_TEXT	ENDS
PUBLIC	??Hiterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBE?AV012@H@Z ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::operator+
; Function compile flags: /Ogty
;	COMDAT ??Hiterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Hiterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::operator+, COMDAT
; _this$ = ecx

; 262  : 			iterator _Tmp = *this;
; 263  : 			return (_Tmp += _Off);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 08	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00009	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000d	89 10		 mov	 DWORD PTR [eax], edx

; 264  : 			}

  0000f	c2 08 00	 ret	 8
??Hiterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBE?AV012@H@Z ENDP ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::operator+
_TEXT	ENDS
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBEIXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::max_size, COMDAT
; _this$ = ecx

; 453  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 0f	 mov	 eax, 268435455		; 0fffffffH

; 454  : 		}

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::max_size
_TEXT	ENDS
PUBLIC	?_Lbound@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@AB_J@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Lbound
; Function compile flags: /Ogty
;	COMDAT ?_Lbound@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@AB_J@Z
_TEXT	SEGMENT
__Keyval$ = 8						; size = 4
?_Lbound@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@AB_J@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Lbound, COMDAT
; _this$ = ecx

; 988  : 		_Nodeptr _Pnode = _Root();

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 989  : 		_Nodeptr _Wherenode = _Myhead;	// end() if search fails
; 990  : 
; 991  : 		while (!_Isnil(_Pnode))

  00006	8a 51 21	 mov	 dl, BYTE PTR [ecx+33]
  00009	84 d2		 test	 dl, dl
  0000b	75 36		 jne	 SHORT $L175937
  0000d	8b 54 24 04	 mov	 edx, DWORD PTR __Keyval$[esp-4]
  00011	53		 push	 ebx
  00012	56		 push	 esi
  00013	8b 32		 mov	 esi, DWORD PTR [edx]
  00015	8b 52 04	 mov	 edx, DWORD PTR [edx+4]
  00018	57		 push	 edi
  00019	8d a4 24 00 00
	00 00		 npad	 7
$L175936:

; 992  : 			if (this->comp(_Key(_Pnode), _Keyval))

  00020	8b 79 14	 mov	 edi, DWORD PTR [ecx+20]
  00023	3b fa		 cmp	 edi, edx
  00025	7f 0e		 jg	 SHORT $L175938
  00027	7c 07		 jl	 SHORT $L177334
  00029	8b 79 10	 mov	 edi, DWORD PTR [ecx+16]
  0002c	3b fe		 cmp	 edi, esi
  0002e	73 05		 jae	 SHORT $L175938
$L177334:

; 993  : 				_Pnode = _Right(_Pnode);	// descend right subtree

  00030	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 994  : 			else

  00033	eb 04		 jmp	 SHORT $L175939
$L175938:

; 995  : 				{	// _Pnode not less than _Keyval, remember it
; 996  : 				_Wherenode = _Pnode;

  00035	8b c1		 mov	 eax, ecx

; 997  : 				_Pnode = _Left(_Pnode);	// descend left subtree

  00037	8b 09		 mov	 ecx, DWORD PTR [ecx]
$L175939:
  00039	8a 59 21	 mov	 bl, BYTE PTR [ecx+33]
  0003c	84 db		 test	 bl, bl
  0003e	74 e0		 je	 SHORT $L175936
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
$L175937:

; 998  : 				}
; 999  : 
; 1000 : 		return (_Wherenode);	// return best remembered candidate
; 1001 : 		}

  00043	c2 04 00	 ret	 4
?_Lbound@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@AB_J@Z ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Lbound
_TEXT	ENDS
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Lrotate
; Function compile flags: /Ogty
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 1015 : 		_Nodeptr _Pnode = _Right(_Wherenode);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Wherenode$[esp-4]
  00004	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00007	53		 push	 ebx
  00008	56		 push	 esi

; 1016 : 		_Right(_Wherenode) = _Left(_Pnode);

  00009	8b 30		 mov	 esi, DWORD PTR [eax]
  0000b	89 72 08	 mov	 DWORD PTR [edx+8], esi

; 1017 : 
; 1018 : 		if (!_Isnil(_Left(_Pnode)))

  0000e	8b 30		 mov	 esi, DWORD PTR [eax]
  00010	8a 5e 21	 mov	 bl, BYTE PTR [esi+33]
  00013	84 db		 test	 bl, bl
  00015	75 03		 jne	 SHORT $L175945

; 1019 : 			_Parent(_Left(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$L175945:

; 1020 : 		_Parent(_Pnode) = _Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1021 : 
; 1022 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00026	75 0d		 jne	 SHORT $L175946

; 1023 : 			_Root() = _Pnode;

  00028	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0002b	5e		 pop	 esi

; 1028 : 
; 1029 : 		_Left(_Pnode) = _Wherenode;

  0002c	89 10		 mov	 DWORD PTR [eax], edx

; 1030 : 		_Parent(_Wherenode) = _Pnode;

  0002e	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00031	5b		 pop	 ebx

; 1031 : 		}

  00032	c2 04 00	 ret	 4
$L175946:

; 1024 : 		else if (_Wherenode == _Left(_Parent(_Wherenode)))

  00035	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00038	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0003a	75 0c		 jne	 SHORT $L175948

; 1025 : 			_Left(_Parent(_Wherenode)) = _Pnode;

  0003c	89 01		 mov	 DWORD PTR [ecx], eax
  0003e	5e		 pop	 esi

; 1028 : 
; 1029 : 		_Left(_Pnode) = _Wherenode;

  0003f	89 10		 mov	 DWORD PTR [eax], edx

; 1030 : 		_Parent(_Wherenode) = _Pnode;

  00041	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00044	5b		 pop	 ebx

; 1031 : 		}

  00045	c2 04 00	 ret	 4
$L175948:

; 1026 : 		else
; 1027 : 			_Right(_Parent(_Wherenode)) = _Pnode;

  00048	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0004b	5e		 pop	 esi

; 1028 : 
; 1029 : 		_Left(_Pnode) = _Wherenode;

  0004c	89 10		 mov	 DWORD PTR [eax], edx

; 1030 : 		_Parent(_Wherenode) = _Pnode;

  0004e	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00051	5b		 pop	 ebx

; 1031 : 		}

  00052	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Lrotate
_TEXT	ENDS
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Rrotate
; Function compile flags: /Ogty
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 1069 : 		_Nodeptr _Pnode = _Left(_Wherenode);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Wherenode$[esp-4]
  00004	8b 02		 mov	 eax, DWORD PTR [edx]
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 1070 : 		_Left(_Wherenode) = _Right(_Pnode);

  00008	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0000b	89 32		 mov	 DWORD PTR [edx], esi

; 1071 : 
; 1072 : 		if (!_Isnil(_Right(_Pnode)))

  0000d	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00010	8a 5e 21	 mov	 bl, BYTE PTR [esi+33]
  00013	84 db		 test	 bl, bl
  00015	75 03		 jne	 SHORT $L175955

; 1073 : 			_Parent(_Right(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$L175955:

; 1074 : 		_Parent(_Pnode) = _Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1075 : 
; 1076 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00026	75 0e		 jne	 SHORT $L175956

; 1077 : 			_Root() = _Pnode;

  00028	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0002b	5e		 pop	 esi

; 1082 : 
; 1083 : 		_Right(_Pnode) = _Wherenode;

  0002c	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1084 : 		_Parent(_Wherenode) = _Pnode;

  0002f	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00032	5b		 pop	 ebx

; 1085 : 		}

  00033	c2 04 00	 ret	 4
$L175956:

; 1078 : 		else if (_Wherenode == _Right(_Parent(_Wherenode)))

  00036	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00039	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003c	75 0e		 jne	 SHORT $L175958

; 1079 : 			_Right(_Parent(_Wherenode)) = _Pnode;

  0003e	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00041	5e		 pop	 esi

; 1082 : 
; 1083 : 		_Right(_Pnode) = _Wherenode;

  00042	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1084 : 		_Parent(_Wherenode) = _Pnode;

  00045	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00048	5b		 pop	 ebx

; 1085 : 		}

  00049	c2 04 00	 ret	 4
$L175958:

; 1080 : 		else
; 1081 : 			_Left(_Parent(_Wherenode)) = _Pnode;

  0004c	89 01		 mov	 DWORD PTR [ecx], eax
  0004e	5e		 pop	 esi

; 1082 : 
; 1083 : 		_Right(_Pnode) = _Wherenode;

  0004f	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1084 : 		_Parent(_Wherenode) = _Pnode;

  00052	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00055	5b		 pop	 ebx

; 1085 : 		}

  00056	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Rrotate
_TEXT	ENDS
PUBLIC	??0iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE@PAPAVCTMonster@@@Z ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE@PAPAVCTMonster@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE@PAPAVCTMonster@@@Z PROC NEAR ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::iterator, COMDAT
; _this$ = ecx

; 215  : 			{	// construct with pointer _Ptr

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 216  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE@PAPAVCTMonster@@@Z ENDP ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::iterator
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Node>::allocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@I@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00007	c1 e0 03	 shl	 eax, 3
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	83 c4 04	 add	 esp, 4

; 138  : 		}

  00013	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Root
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Root, COMDAT
; _this$ = ecx

; 1064 : 		return (_Parent(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 04	 add	 eax, 4

; 1065 : 		}

  00006	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Root
_TEXT	ENDS
PUBLIC	?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::const_iterator::_Dec
; Function compile flags: /Ogty
;	COMDAT ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::const_iterator::_Dec, COMDAT
; _this$ = ecx

; 251  : 			if (_Isnil(_Ptr))

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8a 50 21	 mov	 dl, BYTE PTR [eax+33]
  00005	84 d2		 test	 dl, dl
  00007	74 06		 je	 SHORT $L176043

; 252  : 				_Ptr = _Right(_Ptr);	// end() ==> rightmost

  00009	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000c	89 01		 mov	 DWORD PTR [ecx], eax

; 263  : 				}
; 264  : 			}

  0000e	c3		 ret	 0
$L176043:

; 253  : 			else if (!_Isnil(_Left(_Ptr)))

  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	53		 push	 ebx
  00012	8a 5a 21	 mov	 bl, BYTE PTR [edx+33]
  00015	84 db		 test	 bl, bl
  00017	75 1a		 jne	 SHORT $L177553

; 254  : 				_Ptr = _Max(_Left(_Ptr));	// ==> largest of left subtree

  00019	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001c	8a 58 21	 mov	 bl, BYTE PTR [eax+33]
  0001f	84 db		 test	 bl, bl
  00021	75 0c		 jne	 SHORT $L177538
$L177537:
  00023	8b d0		 mov	 edx, eax
  00025	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00028	8a 58 21	 mov	 bl, BYTE PTR [eax+33]
  0002b	84 db		 test	 bl, bl
  0002d	74 f4		 je	 SHORT $L177537
$L177538:
  0002f	89 11		 mov	 DWORD PTR [ecx], edx
  00031	5b		 pop	 ebx

; 263  : 				}
; 264  : 			}

  00032	c3		 ret	 0
$L177553:

; 255  : 			else
; 256  : 				{	// climb looking for left subtree
; 257  : 				_Nodeptr _Pnode;
; 258  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 259  : 					&& _Ptr == _Left(_Pnode))

  00033	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00036	8a 50 21	 mov	 dl, BYTE PTR [eax+33]
  00039	84 d2		 test	 dl, dl
  0003b	75 1e		 jne	 SHORT $L177556
  0003d	8d 49 00	 npad	 3
$L176049:
  00040	8b 11		 mov	 edx, DWORD PTR [ecx]
  00042	3b 10		 cmp	 edx, DWORD PTR [eax]
  00044	75 0c		 jne	 SHORT $L176050

; 260  : 					_Ptr = _Pnode;	// ==> parent while left subtree

  00046	89 01		 mov	 DWORD PTR [ecx], eax
  00048	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004b	8a 50 21	 mov	 dl, BYTE PTR [eax+33]
  0004e	84 d2		 test	 dl, dl
  00050	74 ee		 je	 SHORT $L176049
$L176050:

; 261  : 				if (!_Isnil(_Pnode))

  00052	8a 50 21	 mov	 dl, BYTE PTR [eax+33]
  00055	84 d2		 test	 dl, dl
  00057	75 02		 jne	 SHORT $L177556

; 262  : 					_Ptr = _Pnode;	// ==> parent if not head

  00059	89 01		 mov	 DWORD PTR [ecx], eax
$L177556:
  0005b	5b		 pop	 ebx

; 263  : 				}
; 264  : 			}

  0005c	c3		 ret	 0
?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::const_iterator::_Dec
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC NEAR ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 34   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 35   : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??Diterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QBEAAPAUtagQUESTTERM@@XZ ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::iterator::operator*
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Diterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QBEAAPAUtagQUESTTERM@@XZ
_TEXT	SEGMENT
??Diterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QBEAAPAUtagQUESTTERM@@XZ PROC NEAR ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::iterator::operator*, COMDAT
; _this$ = ecx

; 220  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 221  : 			}

  00002	c3		 ret	 0
??Diterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QBEAAPAUtagQUESTTERM@@XZ ENDP ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::iterator::operator*
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $L177580
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1476 : 		}

  00014	c2 04 00	 ret	 4

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$L177580:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 1476 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	??0iterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QAE@PAPAUtagQUESTTERM@@@Z ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::iterator::iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0iterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QAE@PAPAUtagQUESTTERM@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0iterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QAE@PAPAUtagQUESTTERM@@@Z PROC NEAR ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::iterator::iterator, COMDAT
; _this$ = ecx

; 215  : 			{	// construct with pointer _Ptr

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 216  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QAE@PAPAUtagQUESTTERM@@@Z ENDP ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::iterator::iterator
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1114 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1115 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1116 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC NEAR	; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 138  : 		}

  0000d	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::end
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::end, COMDAT
; _this$ = ecx

; 418  : 		return (_TREE_ITERATOR(_Myhead));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 419  : 		}

  00009	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::end
_TEXT	ENDS
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::end
; Function compile flags: /Ogty
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::end, COMDAT
; _this$ = ecx

; 418  : 		return (_TREE_ITERATOR(_Myhead));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 419  : 		}

  00009	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::end
_TEXT	ENDS
PUBLIC	??Diterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBGPAVCTMonSpawn@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Diterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBGPAVCTMonSpawn@@@2@XZ
_TEXT	SEGMENT
??Diterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBGPAVCTMonSpawn@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::iterator::operator*, COMDAT
; _this$ = ecx

; 317  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 318  : 			}

  00005	c3		 ret	 0
??Diterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBGPAVCTMonSpawn@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::iterator::operator*
_TEXT	ENDS
PUBLIC	??Diterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBEAAU?$pair@$$CB_J_J@2@XZ ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Diterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBEAAU?$pair@$$CB_J_J@2@XZ
_TEXT	SEGMENT
??Diterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBEAAU?$pair@$$CB_J_J@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::iterator::operator*, COMDAT
; _this$ = ecx

; 317  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 10	 add	 eax, 16			; 00000010H

; 318  : 			}

  00005	c3		 ret	 0
??Diterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QBEAAU?$pair@$$CB_J_J@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::iterator::operator*
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::begin
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?begin@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::begin, COMDAT
; _this$ = ecx

; 463  : 		return (iterator(_Myfirst));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 464  : 		}

  00009	c2 04 00	 ret	 4
?begin@?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::begin
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<CTMonster *,std::allocator<CTMonster *> >::begin
; Function compile flags: /Ogty
;	COMDAT ?begin@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<CTMonster *,std::allocator<CTMonster *> >::begin, COMDAT
; _this$ = ecx

; 463  : 		return (iterator(_Myfirst));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 464  : 		}

  00009	c2 04 00	 ret	 4
?begin@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<CTMonster *,std::allocator<CTMonster *> >::begin
_TEXT	ENDS
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::begin
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::begin, COMDAT
; _this$ = ecx

; 408  : 		return (_TREE_ITERATOR(_Lmost()));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 08		 mov	 ecx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 409  : 		}

  0000b	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::begin
_TEXT	ENDS
PUBLIC	?lower_bound@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@AB_J@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::lower_bound
; Function compile flags: /Ogty
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@AB_J@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@AB_J@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 810  : 		return (_TREE_ITERATOR(_Lbound(_Keyval)));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Keyval$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ?_Lbound@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@AB_J@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Lbound
  0000a	8b 4c 24 04	 mov	 ecx, DWORD PTR ___$ReturnUdt$[esp-4]
  0000e	89 01		 mov	 DWORD PTR [ecx], eax
  00010	8b c1		 mov	 eax, ecx

; 811  : 		}

  00012	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@AB_J@Z ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::lower_bound
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CB_J_J@2@D@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Buynode
EXTRN	__CxxThrowException@8:NEAR
; Function compile flags: /Ogty
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CB_J_J@2@D@Z
_TEXT	SEGMENT
__Larg$ = 8						; size = 4
__Parg$ = 12						; size = 4
__Rarg$ = 16						; size = 4
__Val$ = 20						; size = 4
__Carg$ = 24						; size = 1
?_Buynode@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CB_J_J@2@D@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 1131 : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

  00000	6a 28		 push	 40			; 00000028H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 1132 : 		_TRY_BEGIN
; 1133 : 		new (_Wherenode) _Node(_Larg, _Parg, _Rarg, _Val, _Carg);

  0000a	85 c0		 test	 eax, eax
  0000c	74 3e		 je	 SHORT $L177718
  0000e	8b 4c 24 04	 mov	 ecx, DWORD PTR __Larg$[esp-4]
  00012	8b 54 24 08	 mov	 edx, DWORD PTR __Parg$[esp-4]
  00016	89 08		 mov	 DWORD PTR [eax], ecx
  00018	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Rarg$[esp-4]
  0001c	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001f	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00022	8b 4c 24 10	 mov	 ecx, DWORD PTR __Val$[esp-4]
  00026	56		 push	 esi
  00027	8b 31		 mov	 esi, DWORD PTR [ecx]
  00029	8d 50 10	 lea	 edx, DWORD PTR [eax+16]
  0002c	89 32		 mov	 DWORD PTR [edx], esi
  0002e	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00031	89 72 04	 mov	 DWORD PTR [edx+4], esi
  00034	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00037	89 72 08	 mov	 DWORD PTR [edx+8], esi
  0003a	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0003d	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  00040	8a 54 24 18	 mov	 dl, BYTE PTR __Carg$[esp]
  00044	88 50 20	 mov	 BYTE PTR [eax+32], dl
  00047	c6 40 21 00	 mov	 BYTE PTR [eax+33], 0
  0004b	5e		 pop	 esi
$L177718:

; 1134 : 		_CATCH_ALL
; 1135 : 		this->_Alnod.deallocate(_Wherenode, 1);
; 1136 : 		_RERAISE;
; 1137 : 		_CATCH_END
; 1138 : 		return (_Wherenode);
; 1139 : 		}

  0004c	c2 14 00	 ret	 20			; 00000014H
?_Buynode@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CB_J_J@2@D@Z ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Buynode
_TEXT	ENDS
PUBLIC	?_Lbound@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@ABG@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Lbound
; Function compile flags: /Ogty
;	COMDAT ?_Lbound@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@ABG@Z
_TEXT	SEGMENT
__Keyval$ = 8						; size = 4
?_Lbound@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@ABG@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Lbound, COMDAT
; _this$ = ecx

; 988  : 		_Nodeptr _Pnode = _Root();

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 989  : 		_Nodeptr _Wherenode = _Myhead;	// end() if search fails
; 990  : 
; 991  : 		while (!_Isnil(_Pnode))

  00006	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00009	84 d2		 test	 dl, dl
  0000b	75 1f		 jne	 SHORT $L175992
  0000d	8b 54 24 04	 mov	 edx, DWORD PTR __Keyval$[esp-4]
  00011	66 8b 12	 mov	 dx, WORD PTR [edx]
  00014	53		 push	 ebx
$L175991:

; 992  : 			if (this->comp(_Key(_Pnode), _Keyval))

  00015	66 39 51 0c	 cmp	 WORD PTR [ecx+12], dx
  00019	73 05		 jae	 SHORT $L175993

; 993  : 				_Pnode = _Right(_Pnode);	// descend right subtree

  0001b	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 994  : 			else

  0001e	eb 04		 jmp	 SHORT $L175994
$L175993:

; 995  : 				{	// _Pnode not less than _Keyval, remember it
; 996  : 				_Wherenode = _Pnode;

  00020	8b c1		 mov	 eax, ecx

; 997  : 				_Pnode = _Left(_Pnode);	// descend left subtree

  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
$L175994:
  00024	8a 59 15	 mov	 bl, BYTE PTR [ecx+21]
  00027	84 db		 test	 bl, bl
  00029	74 ea		 je	 SHORT $L175991
  0002b	5b		 pop	 ebx
$L175992:

; 998  : 				}
; 999  : 
; 1000 : 		return (_Wherenode);	// return best remembered candidate
; 1001 : 		}

  0002c	c2 04 00	 ret	 4
?_Lbound@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@ABG@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Lbound
_TEXT	ENDS
PUBLIC	??Fconst_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::const_iterator::operator--
; Function compile flags: /Ogty
;	COMDAT ??Fconst_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Fconst_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::const_iterator::operator--, COMDAT
; _this$ = ecx

; 227  : 			{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 228  : 			_Dec();

  00003	e8 00 00 00 00	 call	 ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::const_iterator::_Dec

; 229  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 230  : 			}

  0000b	c3		 ret	 0
??Fconst_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::const_iterator::operator--
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1510 : 		if (!_Built)

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Built$[esp-4]
  00004	84 c0		 test	 al, al
  00006	53		 push	 ebx
  00007	55		 push	 ebp
  00008	8b 6c 24 10	 mov	 ebp, DWORD PTR __Newsize$[esp+4]
  0000c	8b d9		 mov	 ebx, ecx
  0000e	74 2f		 je	 SHORT $L177794

; 1511 : 			;
; 1512 : 		else if (_BUF_SIZE <= _Myres)

  00010	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  00014	72 29		 jb	 SHORT $L177794

; 1513 : 			{	// copy any leftovers to small buffer and deallocate
; 1514 : 			_Elem *_Ptr = _Bx._Ptr;
; 1515 : 			if (0 < _Newsize)

  00016	85 ed		 test	 ebp, ebp
  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	57		 push	 edi
  0001c	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  0001f	76 14		 jbe	 SHORT $L177791
  00021	56		 push	 esi

; 1516 : 				_Traits::copy(_Bx._Buf, _Ptr, _Newsize);

  00022	8b cd		 mov	 ecx, ebp
  00024	8b d1		 mov	 edx, ecx
  00026	c1 e9 02	 shr	 ecx, 2
  00029	8b f0		 mov	 esi, eax
  0002b	f3 a5		 rep movsd
  0002d	8b ca		 mov	 ecx, edx
  0002f	83 e1 03	 and	 ecx, 3
  00032	f3 a4		 rep movsb
  00034	5e		 pop	 esi
$L177791:

; 1517 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4
  0003e	5f		 pop	 edi
$L177794:

; 1518 : 			}
; 1519 : 		_Myres = _BUF_SIZE - 1;
; 1520 : 		_Eos(_Newsize);

  0003f	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00042	c7 43 18 0f 00
	00 00		 mov	 DWORD PTR [ebx+24], 15	; 0000000fH
  00049	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0004e	5d		 pop	 ebp
  0004f	5b		 pop	 ebx

; 1521 : 		}

  00050	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
EXTRN	?_Xran@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xran
; Function compile flags: /Ogty
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 792  : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp

; 793  : 		if (_Mysize < _Off)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	39 6e 14	 cmp	 DWORD PTR [esi+20], ebp
  0000b	57		 push	 edi
  0000c	73 05		 jae	 SHORT $L149765

; 794  : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L149765:

; 795  : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c5		 sub	 eax, ebp
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $L149766

; 796  : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$L149766:

; 797  : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 47		 jbe	 SHORT $L177860

; 798  : 			{	// move elements down
; 799  : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 800  : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0002c	53		 push	 ebx
  0002d	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  00030	72 04		 jb	 SHORT $L177826
  00032	8b 13		 mov	 edx, DWORD PTR [ebx]
  00034	eb 02		 jmp	 SHORT $L177827
$L177826:
  00036	8b d3		 mov	 edx, ebx
$L177827:
  00038	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0003b	72 04		 jb	 SHORT $L177833
  0003d	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0003f	eb 02		 jmp	 SHORT $L177834
$L177833:
  00041	8b cb		 mov	 ecx, ebx
$L177834:
  00043	2b c7		 sub	 eax, edi

; 803  : 			}
; 804  : 		return (*this);

  00045	03 d5		 add	 edx, ebp
  00047	50		 push	 eax
  00048	03 d7		 add	 edx, edi
  0004a	52		 push	 edx
  0004b	03 cd		 add	 ecx, ebp
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 _memmove
  00053	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00056	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00059	2b c7		 sub	 eax, edi
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005e	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00061	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00064	72 02		 jb	 SHORT $L177857

; 801  : 			size_type _Newsize = _Mysize - _Count;
; 802  : 			_Eos(_Newsize);

  00066	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$L177857:
  00068	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0
  0006c	5b		 pop	 ebx
$L177860:
  0006d	5f		 pop	 edi

; 803  : 			}
; 804  : 		return (*this);

  0006e	8b c6		 mov	 eax, esi
  00070	5e		 pop	 esi
  00071	5d		 pop	 ebp

; 805  : 		}

  00072	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T178065 DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
$T178067 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L177867
$T178068 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L177865
$T178066 DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T178067
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:$T178068
$T178059 DD	019930520H
	DD	04H
	DD	FLAT:$T178065
	DD	02H
	DD	FLAT:$T178066
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1444 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1445 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	8b d8		 mov	 ebx, eax
  00022	83 cb 0f	 or	 ebx, 15			; 0000000fH

; 1446 : 		if (max_size() < _Newres)

  00025	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00028	57		 push	 edi
  00029	8b f1		 mov	 esi, ecx
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00031	76 04		 jbe	 SHORT $L150507

; 1447 : 			_Newres = _Newsize;	// undo roundup if too big

  00033	8b d8		 mov	 ebx, eax

; 1448 : 		else if (_Newres / 3 < _Myres / 2

  00035	eb 22		 jmp	 SHORT $L150509
$L150507:

; 1449 : 			&& _Myres <= max_size() - _Myres / 2)

  00037	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  0003a	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0003f	f7 e3		 mul	 ebx
  00041	8b cf		 mov	 ecx, edi
  00043	d1 e9		 shr	 ecx, 1
  00045	d1 ea		 shr	 edx, 1
  00047	3b d1		 cmp	 edx, ecx
  00049	73 0e		 jae	 SHORT $L150509
  0004b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00050	2b c1		 sub	 eax, ecx
  00052	3b f8		 cmp	 edi, eax
  00054	77 03		 ja	 SHORT $L150509

; 1450 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00056	8d 1c 39	 lea	 ebx, DWORD PTR [ecx+edi]
$L150509:

; 1451 : 		_Elem *_Ptr;
; 1452 : 
; 1453 : 		_TRY_BEGIN
; 1454 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00059	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  0005c	51		 push	 ecx
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00064	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00069	8b d0		 mov	 edx, eax
  0006b	83 c4 04	 add	 esp, 4
  0006e	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
  00071	eb 29		 jmp	 SHORT $L150511
$L177865:

; 1455 : 		_CATCH_ALL
; 1456 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  00073	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00076	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 1457 : 			_TRY_BEGIN
; 1458 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00079	40		 inc	 eax
  0007a	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0007d	50		 push	 eax
  0007e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00082	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00087	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0008a	83 c4 04	 add	 esp, 4

; 1462 : 			_CATCH_END
; 1463 : 		_CATCH_END

  0008d	b8 00 00 00 00	 mov	 eax, $L178060
  00092	c3		 ret	 0
$L178060:
  00093	8b 5d e8	 mov	 ebx, DWORD PTR __Newres$[ebp]
  00096	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00099	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$L150511:

; 1464 : 
; 1465 : 		if (0 < _Oldlen)

  0009c	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  0009f	85 c9		 test	 ecx, ecx
  000a1	76 24		 jbe	 SHORT $L177984

; 1466 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  000a3	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000a7	72 05		 jb	 SHORT $L177981
  000a9	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000ac	eb 03		 jmp	 SHORT $L177982
$L177981:
  000ae	83 c6 04	 add	 esi, 4
$L177982:
  000b1	8b c1		 mov	 eax, ecx
  000b3	c1 e9 02	 shr	 ecx, 2
  000b6	8b fa		 mov	 edi, edx
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb
  000c1	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000c4	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
$L177984:

; 1467 : 		_Tidy(true);

  000c7	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000cb	72 12		 jb	 SHORT $L178026
  000cd	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000d0	51		 push	 ecx
  000d1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d6	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000d9	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000dc	83 c4 04	 add	 esp, 4
$L178026:

; 1468 : 		_Bx._Ptr = _Ptr;
; 1469 : 		_Myres = _Newres;
; 1470 : 		_Eos(_Oldlen);

  000df	83 fb 10	 cmp	 ebx, 16			; 00000010H
  000e2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000e5	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e8	89 10		 mov	 DWORD PTR [eax], edx
  000ea	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  000ed	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  000f0	72 02		 jb	 SHORT $L178055
  000f2	8b c2		 mov	 eax, edx
$L178055:

; 1471 : 		}

  000f4	5f		 pop	 edi
  000f5	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  000f9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fc	5e		 pop	 esi
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00104	5b		 pop	 ebx
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c2 08 00	 ret	 8
$L177867:

; 1459 : 			_CATCH_ALL
; 1460 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010b	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0010e	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00112	72 0c		 jb	 SHORT $L177965
  00114	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00117	52		 push	 edx
  00118	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0011d	83 c4 04	 add	 esp, 4
$L177965:

; 1461 : 			_RERAISE;

  00120	6a 00		 push	 0
  00122	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00129	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00130	6a 00		 push	 0
  00132	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00136	e8 00 00 00 00	 call	 __CxxThrowException@8
$L178070:
$L178064:
  0013b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T178059
  00005	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	??A?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QAEAAPAUtagQUESTTERM@@I@Z ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::operator[]
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??A?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QAEAAPAUtagQUESTTERM@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QAEAAPAUtagQUESTTERM@@I@Z PROC NEAR ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::operator[], COMDAT
; _this$ = ecx

; 555  : 		return (*(begin() + _Pos));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pos$[esp-4]
  00007	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 556  : 		}

  0000a	c2 04 00	 ret	 4
??A?$vector@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@QAEAAPAUtagQUESTTERM@@I@Z ENDP ; std::vector<tagQUESTTERM *,std::allocator<tagQUESTTERM *> >::operator[]
_TEXT	ENDS
PUBLIC	??A?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAPAVCTMonster@@I@Z ; std::vector<CTMonster *,std::allocator<CTMonster *> >::operator[]
; Function compile flags: /Ogty
;	COMDAT ??A?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAPAVCTMonster@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAPAVCTMonster@@I@Z PROC NEAR ; std::vector<CTMonster *,std::allocator<CTMonster *> >::operator[], COMDAT
; _this$ = ecx

; 555  : 		return (*(begin() + _Pos));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pos$[esp-4]
  00007	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 556  : 		}

  0000a	c2 04 00	 ret	 4
??A?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAPAVCTMonster@@I@Z ENDP ; std::vector<CTMonster *,std::allocator<CTMonster *> >::operator[]
_TEXT	ENDS
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@AB_J@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::find
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@AB_J@Z
_TEXT	SEGMENT
$T178154 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@AB_J@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::find, COMDAT
; _this$ = ecx

; 787  : 		{	// find an element in mutable sequence that matches _Keyval

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 788  : 		iterator _Where = lower_bound(_Keyval);

  00003	8b 7c 24 14	 mov	 edi, DWORD PTR __Keyval$[esp+8]
  00007	57		 push	 edi
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ?_Lbound@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@AB_J@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Lbound

; 789  : 		return (_Where == end() || this->comp(_Keyval, _Key(_Where._Mynode()))
; 790  : 			? end() : _Where);

  0000f	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00012	3b c6		 cmp	 eax, esi
  00014	89 44 24 14	 mov	 DWORD PTR __Where$[esp+8], eax
  00018	74 23		 je	 SHORT $L178153
  0001a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0001d	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00020	7c 1b		 jl	 SHORT $L178153
  00022	7f 07		 jg	 SHORT $L178231
  00024	8b 17		 mov	 edx, DWORD PTR [edi]
  00026	3b 50 10	 cmp	 edx, DWORD PTR [eax+16]
  00029	72 12		 jb	 SHORT $L178153
$L178231:
  0002b	8d 44 24 14	 lea	 eax, DWORD PTR __Where$[esp+8]
  0002f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00031	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  00035	5f		 pop	 edi
  00036	89 08		 mov	 DWORD PTR [eax], ecx
  00038	5e		 pop	 esi

; 791  : 		}

  00039	59		 pop	 ecx
  0003a	c2 08 00	 ret	 8
$L178153:

; 789  : 		return (_Where == end() || this->comp(_Keyval, _Key(_Where._Mynode()))
; 790  : 			? end() : _Where);

  0003d	8d 44 24 08	 lea	 eax, DWORD PTR $T178154[esp+12]
  00041	89 74 24 08	 mov	 DWORD PTR $T178154[esp+12], esi
  00045	8b 08		 mov	 ecx, DWORD PTR [eax]
  00047	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  0004b	5f		 pop	 edi
  0004c	89 08		 mov	 DWORD PTR [eax], ecx
  0004e	5e		 pop	 esi

; 791  : 		}

  0004f	59		 pop	 ecx
  00050	c2 08 00	 ret	 8
?find@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@AB_J@Z ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::find
_TEXT	ENDS
PUBLIC	?lower_bound@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABG@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::lower_bound
; Function compile flags: /Ogty
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABG@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABG@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 810  : 		return (_TREE_ITERATOR(_Lbound(_Keyval)));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00009	84 d2		 test	 dl, dl
  0000b	75 1f		 jne	 SHORT $L178304
  0000d	8b 54 24 08	 mov	 edx, DWORD PTR __Keyval$[esp-4]
  00011	66 8b 12	 mov	 dx, WORD PTR [edx]
  00014	53		 push	 ebx
$L178291:
  00015	66 39 50 0c	 cmp	 WORD PTR [eax+12], dx
  00019	73 05		 jae	 SHORT $L178293
  0001b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0001e	eb 04		 jmp	 SHORT $L178294
$L178293:
  00020	8b c8		 mov	 ecx, eax
  00022	8b 00		 mov	 eax, DWORD PTR [eax]
$L178294:
  00024	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  00027	84 db		 test	 bl, bl
  00029	74 ea		 je	 SHORT $L178291
  0002b	5b		 pop	 ebx
$L178304:
  0002c	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00030	89 08		 mov	 DWORD PTR [eax], ecx

; 811  : 		}

  00032	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABG@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::lower_bound
_TEXT	ENDS
PUBLIC	??Fiterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::iterator::operator--
; Function compile flags: /Ogty
;	COMDAT ??Fiterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Fiterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::iterator::operator--, COMDAT
; _this$ = ecx

; 339  : 			{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 340  : 			--(*(const_iterator *)this);

  00003	e8 00 00 00 00	 call	 ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::const_iterator::_Dec

; 341  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 342  : 			}

  0000b	c3		 ret	 0
??Fiterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::iterator::operator--
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 456  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 457  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $L178348
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$L178348:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 458  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xlen
; Function compile flags: /Ogty
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1480 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	56		 push	 esi

; 1481 : 		if (max_size() < _Newsize)

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR __Newsize$[esp+4]
  00006	83 fe fe	 cmp	 esi, -2			; fffffffeH
  00009	8b e9		 mov	 ebp, ecx
  0000b	76 05		 jbe	 SHORT $L149774

; 1482 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L149774:

; 1483 : 		if (_Myres < _Newsize)

  00012	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00015	3b c6		 cmp	 eax, esi
  00017	73 19		 jae	 SHORT $L149775

; 1484 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0001c	50		 push	 eax
  0001d	56		 push	 esi
  0001e	8b cd		 mov	 ecx, ebp
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c0		 xor	 eax, eax
  00027	3b c6		 cmp	 eax, esi
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5d		 pop	 ebp

; 1491 : 		}

  0002f	c2 08 00	 ret	 8
$L149775:

; 1485 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	8a 4c 24 10	 mov	 cl, BYTE PTR __Trim$[esp+4]
  00036	84 c9		 test	 cl, cl
  00038	74 5c		 je	 SHORT $L149777
  0003a	83 fe 10	 cmp	 esi, 16			; 00000010H
  0003d	73 57		 jae	 SHORT $L149777
  0003f	53		 push	 ebx

; 1486 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1487 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  00040	8b 5d 14	 mov	 ebx, DWORD PTR [ebp+20]
  00043	3b f3		 cmp	 esi, ebx
  00045	73 02		 jae	 SHORT $L178368
  00047	8b de		 mov	 ebx, esi
$L178368:
  00049	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004c	72 2b		 jb	 SHORT $L178423
  0004e	85 db		 test	 ebx, ebx
  00050	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00053	57		 push	 edi
  00054	8d 7d 04	 lea	 edi, DWORD PTR [ebp+4]
  00057	76 16		 jbe	 SHORT $L178421
  00059	8b cb		 mov	 ecx, ebx
  0005b	8b d1		 mov	 edx, ecx
  0005d	c1 e9 02	 shr	 ecx, 2
  00060	8b f0		 mov	 esi, eax
  00062	f3 a5		 rep movsd
  00064	8b ca		 mov	 ecx, edx
  00066	83 e1 03	 and	 ecx, 3
  00069	f3 a4		 rep movsb
  0006b	8b 74 24 14	 mov	 esi, DWORD PTR __Newsize$[esp+12]
$L178421:
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00075	83 c4 04	 add	 esp, 4
  00078	5f		 pop	 edi
$L178423:
  00079	89 5d 14	 mov	 DWORD PTR [ebp+20], ebx

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  0007c	33 c0		 xor	 eax, eax
  0007e	c7 45 18 0f 00
	00 00		 mov	 DWORD PTR [ebp+24], 15	; 0000000fH
  00085	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0008a	3b c6		 cmp	 eax, esi
  0008c	5b		 pop	 ebx
  0008d	1b c0		 sbb	 eax, eax
  0008f	5e		 pop	 esi
  00090	f7 d8		 neg	 eax
  00092	5d		 pop	 ebp

; 1491 : 		}

  00093	c2 08 00	 ret	 8
$L149777:

; 1488 : 		else if (_Newsize == 0)

  00096	85 f6		 test	 esi, esi
  00098	75 23		 jne	 SHORT $L178460

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

  0009a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0009d	89 75 14	 mov	 DWORD PTR [ebp+20], esi
  000a0	72 14		 jb	 SHORT $L178456
  000a2	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000a5	33 c0		 xor	 eax, eax
  000a7	3b c6		 cmp	 eax, esi
  000a9	1b c0		 sbb	 eax, eax
  000ab	5e		 pop	 esi
  000ac	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
  000b0	f7 d8		 neg	 eax
  000b2	5d		 pop	 ebp

; 1491 : 		}

  000b3	c2 08 00	 ret	 8

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

$L178456:
  000b6	83 c5 04	 add	 ebp, 4
  000b9	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
$L178460:

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000bd	33 c0		 xor	 eax, eax
  000bf	3b c6		 cmp	 eax, esi
  000c1	1b c0		 sbb	 eax, eax
  000c3	5e		 pop	 esi
  000c4	f7 d8		 neg	 eax
  000c6	5d		 pop	 ebp

; 1491 : 		}

  000c7	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABG@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::find
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABG@Z
_TEXT	SEGMENT
$T178468 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABG@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::find, COMDAT
; _this$ = ecx

; 787  : 		{	// find an element in mutable sequence that matches _Keyval

  00000	51		 push	 ecx

; 788  : 		iterator _Where = lower_bound(_Keyval);

  00001	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00004	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00007	53		 push	 ebx
  00008	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  0000b	84 db		 test	 bl, bl
  0000d	57		 push	 edi
  0000e	8b 7c 24 14	 mov	 edi, DWORD PTR __Keyval$[esp+8]
  00012	75 1b		 jne	 SHORT $L178563
  00014	56		 push	 esi
  00015	66 8b 37	 mov	 si, WORD PTR [edi]
$L178562:
  00018	66 39 70 0c	 cmp	 WORD PTR [eax+12], si
  0001c	73 05		 jae	 SHORT $L178564
  0001e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00021	eb 04		 jmp	 SHORT $L178565
$L178564:
  00023	8b d0		 mov	 edx, eax
  00025	8b 00		 mov	 eax, DWORD PTR [eax]
$L178565:
  00027	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  0002a	84 db		 test	 bl, bl
  0002c	74 ea		 je	 SHORT $L178562
  0002e	5e		 pop	 esi
$L178563:

; 789  : 		return (_Where == end() || this->comp(_Keyval, _Key(_Where._Mynode()))
; 790  : 			? end() : _Where);

  0002f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00032	3b d0		 cmp	 edx, eax
  00034	89 54 24 14	 mov	 DWORD PTR __Where$[esp+8], edx
  00038	74 1b		 je	 SHORT $L178467
  0003a	66 8b 0f	 mov	 cx, WORD PTR [edi]
  0003d	66 3b 4a 0c	 cmp	 cx, WORD PTR [edx+12]
  00041	72 12		 jb	 SHORT $L178467
  00043	8d 44 24 14	 lea	 eax, DWORD PTR __Where$[esp+8]
  00047	8b 10		 mov	 edx, DWORD PTR [eax]
  00049	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  0004d	5f		 pop	 edi
  0004e	89 10		 mov	 DWORD PTR [eax], edx
  00050	5b		 pop	 ebx

; 791  : 		}

  00051	59		 pop	 ecx
  00052	c2 08 00	 ret	 8
$L178467:

; 789  : 		return (_Where == end() || this->comp(_Keyval, _Key(_Where._Mynode()))
; 790  : 			? end() : _Where);

  00055	89 44 24 08	 mov	 DWORD PTR $T178468[esp+12], eax
  00059	8d 44 24 08	 lea	 eax, DWORD PTR $T178468[esp+12]
  0005d	8b 10		 mov	 edx, DWORD PTR [eax]
  0005f	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  00063	5f		 pop	 edi
  00064	89 10		 mov	 DWORD PTR [eax], edx
  00066	5b		 pop	 ebx

; 791  : 		}

  00067	59		 pop	 ecx
  00068	c2 08 00	 ret	 8
?find@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABG@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::find
_TEXT	ENDS
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:NEAR		; std::logic_error::`vector deleting destructor'
EXTRN	??1exception@@UAE@XZ:NEAR			; exception::~exception
;	COMDAT ??_7logic_error@std@@6B@
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
CONST	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC NEAR			; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 23   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L178687
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L178687:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC NEAR		; std::logic_error::what, COMDAT
; _this$ = ecx

; 27   : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L178721
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  00009	c3		 ret	 0

; 27   : 		return (_Str.c_str());

$L178721:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  0000d	c3		 ret	 0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC NEAR		; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1logic_error@std@@UAE@XZ ; std::logic_error::~logic_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L178727
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L178727:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 590  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 591  : 		if (_Right.size() < _Roff)

  00003	8b 74 24 14	 mov	 esi, DWORD PTR __Roff$[esp+8]
  00007	57		 push	 edi
  00008	8b 7c 24 14	 mov	 edi, DWORD PTR __Right$[esp+12]
  0000c	39 77 14	 cmp	 DWORD PTR [edi+20], esi
  0000f	8b d9		 mov	 ebx, ecx
  00011	73 05		 jae	 SHORT $L148837

; 592  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L148837:

; 593  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 6f 14	 mov	 ebp, DWORD PTR [edi+20]

; 594  : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b ee		 sub	 ebp, esi
  00021	3b c5		 cmp	 eax, ebp
  00023	73 02		 jae	 SHORT $L148839

; 595  : 			_Num = _Count;	// trim _Num to size

  00025	8b e8		 mov	 ebp, eax
$L148839:

; 596  : 
; 597  : 		if (this == &_Right)

  00027	3b df		 cmp	 ebx, edi
  00029	75 1f		 jne	 SHORT $L148840

; 598  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 ee		 add	 ebp, esi
  0002f	55		 push	 ebp
  00030	8b cb		 mov	 ecx, ebx
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	56		 push	 esi
  00038	6a 00		 push	 0
  0003a	8b cb		 mov	 ecx, ebx
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00044	8b c3		 mov	 eax, ebx
  00046	5b		 pop	 ebx

; 605  : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$L148840:

; 599  : 		else if (_Grow(_Num))

  0004a	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  0004d	76 07		 jbe	 SHORT $L178836
  0004f	8b cb		 mov	 ecx, ebx
  00051	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L178836:
  00056	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00059	3b c5		 cmp	 eax, ebp
  0005b	73 21		 jae	 SHORT $L178837
  0005d	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00060	50		 push	 eax
  00061	55		 push	 ebp
  00062	8b cb		 mov	 ecx, ebx
  00064	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00069	85 ed		 test	 ebp, ebp
$L178924:
  0006b	76 6d		 jbe	 SHORT $L178923

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  0006d	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00070	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00075	3b c8		 cmp	 ecx, eax
  00077	72 2f		 jb	 SHORT $L178889
  00079	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0007c	eb 2d		 jmp	 SHORT $L178890

; 599  : 		else if (_Grow(_Num))

$L178837:
  0007e	85 ed		 test	 ebp, ebp
  00080	75 e9		 jne	 SHORT $L178924
  00082	83 f8 10	 cmp	 eax, 16			; 00000010H
  00085	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00088	72 0f		 jb	 SHORT $L178880
  0008a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	c6 00 00	 mov	 BYTE PTR [eax], 0
  00092	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00093	8b c3		 mov	 eax, ebx
  00095	5b		 pop	 ebx

; 605  : 		}

  00096	c2 0c 00	 ret	 12			; 0000000cH

; 599  : 		else if (_Grow(_Num))

$L178880:
  00099	5f		 pop	 edi
  0009a	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  0009d	5e		 pop	 esi
  0009e	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a1	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000a2	8b c3		 mov	 eax, ebx
  000a4	5b		 pop	 ebx

; 605  : 		}

  000a5	c2 0c 00	 ret	 12			; 0000000cH

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

$L178889:
  000a8	8d 57 04	 lea	 edx, DWORD PTR [edi+4]
$L178890:
  000ab	39 43 18	 cmp	 DWORD PTR [ebx+24], eax
  000ae	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000b1	72 04		 jb	 SHORT $L178896
  000b3	8b 38		 mov	 edi, DWORD PTR [eax]
  000b5	eb 02		 jmp	 SHORT $L178897
$L178896:
  000b7	8b f8		 mov	 edi, eax
$L178897:
  000b9	03 f2		 add	 esi, edx
  000bb	8b cd		 mov	 ecx, ebp
  000bd	8b d1		 mov	 edx, ecx
  000bf	c1 e9 02	 shr	 ecx, 2
  000c2	f3 a5		 rep movsd
  000c4	8b ca		 mov	 ecx, edx
  000c6	83 e1 03	 and	 ecx, 3
  000c9	f3 a4		 rep movsb

; 602  : 			_Eos(_Num);

  000cb	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000cf	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000d2	72 02		 jb	 SHORT $L178920
  000d4	8b 00		 mov	 eax, DWORD PTR [eax]
$L178920:
  000d6	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L178923:
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000dd	8b c3		 mov	 eax, ebx
  000df	5b		 pop	 ebx

; 605  : 		}

  000e0	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Num$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 608  : 		{	// assign [_Ptr, _Ptr + _Num)

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 609  : 		if (_Inside(_Ptr))

  00003	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  00006	83 fa 10	 cmp	 edx, 16			; 00000010H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	72 05		 jb	 SHORT $L178946
  0000d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00010	eb 03		 jmp	 SHORT $L178947
$L178946:
  00012	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$L178947:
  00015	8b 74 24 10	 mov	 esi, DWORD PTR __Ptr$[esp+8]
  00019	3b f0		 cmp	 esi, eax
  0001b	72 34		 jb	 SHORT $L149761
  0001d	83 fa 10	 cmp	 edx, 16			; 00000010H
  00020	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00023	72 04		 jb	 SHORT $L178950
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	eb 02		 jmp	 SHORT $L178951
$L178950:
  00029	8b c8		 mov	 ecx, eax
$L178951:
  0002b	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  0002e	03 f9		 add	 edi, ecx
  00030	3b fe		 cmp	 edi, esi
  00032	76 1d		 jbe	 SHORT $L149761

; 610  : 			return (assign(*this, _Ptr - _Myptr(), _Num));	// substring

  00034	83 fa 10	 cmp	 edx, 16			; 00000010H
  00037	72 02		 jb	 SHORT $L178963
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$L178963:
  0003b	8b 4c 24 14	 mov	 ecx, DWORD PTR __Num$[esp+8]
  0003f	51		 push	 ecx
  00040	2b f0		 sub	 esi, eax
  00042	56		 push	 esi
  00043	53		 push	 ebx
  00044	8b cb		 mov	 ecx, ebx
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx

; 618  : 		}

  0004e	c2 08 00	 ret	 8
$L149761:
  00051	55		 push	 ebp

; 611  : 
; 612  : 		if (_Grow(_Num))

  00052	8b 6c 24 18	 mov	 ebp, DWORD PTR __Num$[esp+12]
  00056	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  00059	76 07		 jbe	 SHORT $L179061
  0005b	8b cb		 mov	 ecx, ebx
  0005d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L179061:
  00062	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00065	3b c5		 cmp	 eax, ebp
  00067	73 1b		 jae	 SHORT $L179062
  00069	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  0006c	52		 push	 edx
  0006d	55		 push	 ebp
  0006e	8b cb		 mov	 ecx, ebx
  00070	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00075	85 ed		 test	 ebp, ebp
$L179142:
  00077	76 68		 jbe	 SHORT $L179139

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

  00079	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0007d	72 2f		 jb	 SHORT $L179114
  0007f	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00082	eb 2d		 jmp	 SHORT $L179115

; 611  : 
; 612  : 		if (_Grow(_Num))

$L179062:
  00084	85 ed		 test	 ebp, ebp
  00086	75 ef		 jne	 SHORT $L179142
  00088	83 f8 10	 cmp	 eax, 16			; 00000010H
  0008b	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  0008e	72 0f		 jb	 SHORT $L179105
  00090	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00093	5d		 pop	 ebp
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0
  00098	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  00099	8b c3		 mov	 eax, ebx
  0009b	5b		 pop	 ebx

; 618  : 		}

  0009c	c2 08 00	 ret	 8

; 611  : 
; 612  : 		if (_Grow(_Num))

$L179105:
  0009f	5d		 pop	 ebp
  000a0	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000a3	5f		 pop	 edi
  000a4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a7	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000a8	8b c3		 mov	 eax, ebx
  000aa	5b		 pop	 ebx

; 618  : 		}

  000ab	c2 08 00	 ret	 8

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

$L179114:
  000ae	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
$L179115:
  000b1	8b cd		 mov	 ecx, ebp
  000b3	8b c1		 mov	 eax, ecx
  000b5	c1 e9 02	 shr	 ecx, 2
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb

; 615  : 			_Eos(_Num);

  000c1	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000c5	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000c8	72 10		 jb	 SHORT $L179137
  000ca	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000cd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  000d1	5d		 pop	 ebp
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000d4	8b c3		 mov	 eax, ebx
  000d6	5b		 pop	 ebx

; 618  : 		}

  000d7	c2 08 00	 ret	 8

; 615  : 			_Eos(_Num);

$L179137:
  000da	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000dd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L179139:
  000e1	5d		 pop	 ebp
  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000e4	8b c3		 mov	 eax, ebx
  000e6	5b		 pop	 ebx

; 618  : 		}

  000e7	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 323  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 324  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 325  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 326  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 621  : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 622  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$L179215:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $L179215
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 623  : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 361  : 		_Tidy();
; 362  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$L179290:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $L179290
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 363  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
EXTRN	??0exception@@QAE@XZ:NEAR			; exception::exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T179393 DD	0ffffffffH
	DD	FLAT:$L179294
$T179391 DD	019930520H
	DD	01H
	DD	FLAT:$T179393
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 19   : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	89 74 24 04	 mov	 DWORD PTR _this$[esp+20], esi
  0001d	e8 00 00 00 00	 call	 ??0exception@@QAE@XZ	; exception::exception
  00022	33 c0		 xor	 eax, eax
  00024	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  0002d	6a ff		 push	 -1
  0002f	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00032	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00039	50		 push	 eax
  0003a	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  0003e	88 41 04	 mov	 BYTE PTR [ecx+4], al
  00041	8b 44 24 20	 mov	 eax, DWORD PTR __Message$[esp+24]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 20   : 		}

  0004b	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  0004f	8b c6		 mov	 eax, esi
  00051	5e		 pop	 esi
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L179294:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T179391
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_Glength_error@std@@UAEPAXI@Z			; std::length_error::`scalar deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:NEAR		; std::length_error::`vector deleting destructor'
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 95   : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@

; 96   : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
; Function compile flags: /Ogty
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC NEAR		; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1length_error@std@@UAE@XZ ; std::length_error::~length_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L179403
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L179403:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC NEAR			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 99   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L179491
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L179491:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVexception@@@8				; exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
PUBLIC	?_Insert@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@ABU?$pair@$$CB_J_J@2@@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Insert
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	??0exception@@QAE@ABV0@@Z:NEAR			; exception::exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
xdata$x	SEGMENT
$T179884 DD	0ffffffffH
	DD	FLAT:$L179515
$T179879 DD	019930520H
	DD	01H
	DD	FLAT:$T179884
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
CONST	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT
??_R0?AVexception@@@8 DD FLAT:??_7type_info@@6B@	; exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@@', 00H
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?_Insert@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@ABU?$pair@$$CB_J_J@2@@Z
_TEXT	SEGMENT
$T179514 = -80						; size = 28
$T179513 = -52						; size = 40
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Newnode$ = 20						; size = 4
__Val$ = 20						; size = 4
?_Insert@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@ABU?$pair@$$CB_J_J@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Insert, COMDAT
; _this$ = ecx

; 911  : 		{	// add node with value next to _Wherenode, to left if _Addnode

  00000	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00006	6a ff		 push	 -1
  00008	68 00 00 00 00	 push	 __ehhandler$?_Insert@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@ABU?$pair@$$CB_J_J@2@@Z
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 44	 sub	 esp, 68			; 00000044H
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8b f9		 mov	 edi, ecx

; 912  : 		if (max_size() - 1 <= _Mysize)

  0001c	81 7f 08 fe ff
	ff 0f		 cmp	 DWORD PTR [edi+8], 268435454 ; 0ffffffeH
  00023	72 4c		 jb	 SHORT $L175854

; 913  : 			_THROW(length_error, "map/set<T> too long");

  00025	6a 13		 push	 19			; 00000013H
  00027	33 f6		 xor	 esi, esi
  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
  0002e	8d 4c 24 10	 lea	 ecx, DWORD PTR $T179514[esp+96]
  00032	c7 44 24 28 0f
	00 00 00	 mov	 DWORD PTR $T179514[esp+120], 15 ; 0000000fH
  0003a	89 74 24 24	 mov	 DWORD PTR $T179514[esp+116], esi
  0003e	c6 44 24 14 00	 mov	 BYTE PTR $T179514[esp+100], 0
  00043	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00048	8d 44 24 08	 lea	 eax, DWORD PTR $T179514[esp+88]
  0004c	50		 push	 eax
  0004d	8d 4c 24 28	 lea	 ecx, DWORD PTR $T179513[esp+92]
  00051	89 74 24 58	 mov	 DWORD PTR __$EHRec$[esp+100], esi
  00055	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0005a	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVlength_error@std@@
  0005f	8d 4c 24 28	 lea	 ecx, DWORD PTR $T179513[esp+92]
  00063	51		 push	 ecx
  00064	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR $T179513[esp+96], OFFSET FLAT:??_7length_error@std@@6B@
  0006c	e8 00 00 00 00	 call	 __CxxThrowException@8
$L179885:
$L175854:

; 914  : 		_Nodeptr _Newnode = _Buynode(_Myhead, _Wherenode, _Myhead,
; 915  : 			_Val, _Red);

  00071	8b 54 24 68	 mov	 edx, DWORD PTR __Val$[esp+84]
  00075	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00078	8b 74 24 64	 mov	 esi, DWORD PTR __Wherenode$[esp+84]
  0007c	53		 push	 ebx
  0007d	6a 00		 push	 0
  0007f	52		 push	 edx
  00080	50		 push	 eax
  00081	56		 push	 esi
  00082	50		 push	 eax
  00083	8b cf		 mov	 ecx, edi
  00085	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CB_J_J@2@D@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Buynode

; 916  : 
; 917  : 		++_Mysize;

  0008a	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0008d	8b c8		 mov	 ecx, eax

; 918  : 		if (_Wherenode == _Myhead)

  0008f	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00092	43		 inc	 ebx
  00093	3b f0		 cmp	 esi, eax
  00095	89 4c 24 6c	 mov	 DWORD PTR __Newnode$[esp+88], ecx
  00099	89 5f 08	 mov	 DWORD PTR [edi+8], ebx
  0009c	75 10		 jne	 SHORT $L175860

; 919  : 			{	// first node in tree, just set head values
; 920  : 			_Root() = _Newnode;

  0009e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 921  : 			_Lmost() = _Newnode, _Rmost() = _Newnode;

  000a1	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a4	89 08		 mov	 DWORD PTR [eax], ecx
  000a6	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  000a9	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 922  : 			}
; 923  : 		else if (_Addleft)

  000ac	eb 23		 jmp	 SHORT $L175865
$L175860:
  000ae	8a 44 24 64	 mov	 al, BYTE PTR __Addleft$[esp+88]
  000b2	84 c0		 test	 al, al
  000b4	74 0d		 je	 SHORT $L175862

; 924  : 			{	// add to left of _Wherenode
; 925  : 			_Left(_Wherenode) = _Newnode;

  000b6	89 0e		 mov	 DWORD PTR [esi], ecx

; 926  : 			if (_Wherenode == _Lmost())

  000b8	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000bb	3b 30		 cmp	 esi, DWORD PTR [eax]
  000bd	75 12		 jne	 SHORT $L175865

; 927  : 				_Lmost() = _Newnode;

  000bf	89 08		 mov	 DWORD PTR [eax], ecx

; 928  : 			}
; 929  : 		else

  000c1	eb 0e		 jmp	 SHORT $L175865
$L175862:

; 930  : 			{	// add to right of _Wherenode
; 931  : 			_Right(_Wherenode) = _Newnode;

  000c3	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 932  : 			if (_Wherenode == _Rmost())

  000c6	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000c9	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  000cc	75 03		 jne	 SHORT $L175865

; 933  : 				_Rmost() = _Newnode;

  000ce	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$L175865:

; 934  : 			}
; 935  : 
; 936  : 		for (_Nodeptr _Pnode = _Newnode; _Color(_Parent(_Pnode)) == _Red; )

  000d1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d4	80 7a 20 00	 cmp	 BYTE PTR [edx+32], 0
  000d8	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  000db	8b f1		 mov	 esi, ecx
  000dd	b3 01		 mov	 bl, 1
  000df	0f 85 a5 00 00
	00		 jne	 $L175869
  000e5	55		 push	 ebp
$L175868:

; 937  : 			if (_Parent(_Pnode) == _Left(_Parent(_Parent(_Pnode))))

  000e6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e8	8b 69 04	 mov	 ebp, DWORD PTR [ecx+4]
  000eb	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  000ee	3b ca		 cmp	 ecx, edx
  000f0	75 50		 jne	 SHORT $L175870

; 938  : 				{	// fixup red-red in left subtree
; 939  : 				_Wherenode = _Right(_Parent(_Parent(_Pnode)));

  000f2	8b 55 08	 mov	 edx, DWORD PTR [ebp+8]

; 940  : 				if (_Color(_Wherenode) == _Red)

  000f5	80 7a 20 00	 cmp	 BYTE PTR [edx+32], 0
  000f9	75 18		 jne	 SHORT $L175871
$L179883:

; 941  : 					{	// parent has two red children, blacken both
; 942  : 					_Color(_Parent(_Pnode)) = _Black;

  000fb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fd	88 59 20	 mov	 BYTE PTR [ecx+32], bl

; 943  : 					_Color(_Wherenode) = _Black;

  00100	88 5a 20	 mov	 BYTE PTR [edx+32], bl

; 944  : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

  00103	8b 10		 mov	 edx, DWORD PTR [eax]
  00105	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00108	c6 41 20 00	 mov	 BYTE PTR [ecx+32], 0

; 945  : 					_Pnode = _Parent(_Parent(_Pnode));

  0010c	8b 10		 mov	 edx, DWORD PTR [eax]
  0010e	8b 72 04	 mov	 esi, DWORD PTR [edx+4]

; 946  : 					}
; 947  : 				else

  00111	eb 61		 jmp	 SHORT $L175876
$L175871:

; 948  : 					{	// parent has red and black children
; 949  : 					if (_Pnode == _Right(_Parent(_Pnode)))

  00113	3b 71 08	 cmp	 esi, DWORD PTR [ecx+8]
  00116	75 0a		 jne	 SHORT $L175873

; 950  : 						{	// rotate right child to left
; 951  : 						_Pnode = _Parent(_Pnode);

  00118	8b f1		 mov	 esi, ecx

; 952  : 						_Lrotate(_Pnode);

  0011a	56		 push	 esi
  0011b	8b cf		 mov	 ecx, edi
  0011d	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Lrotate
$L175873:

; 953  : 						}
; 954  : 					_Color(_Parent(_Pnode)) = _Black;	// propagate red up

  00122	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00125	88 58 20	 mov	 BYTE PTR [eax+32], bl

; 955  : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

  00128	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0012b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0012e	c6 42 20 00	 mov	 BYTE PTR [edx+32], 0

; 956  : 					_Rrotate(_Parent(_Parent(_Pnode)));

  00132	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00135	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00138	51		 push	 ecx
  00139	8b cf		 mov	 ecx, edi
  0013b	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Rrotate

; 957  : 					}
; 958  : 				}
; 959  : 			else

  00140	eb 32		 jmp	 SHORT $L175876
$L175870:

; 960  : 				{	// fixup red-red in right subtree
; 961  : 				_Wherenode = _Left(_Parent(_Parent(_Pnode)));
; 962  : 				if (_Color(_Wherenode) == _Red)

  00142	80 7a 20 00	 cmp	 BYTE PTR [edx+32], 0

; 963  : 					{	// parent has two red children, blacken both
; 964  : 					_Color(_Parent(_Pnode)) = _Black;
; 965  : 					_Color(_Wherenode) = _Black;
; 966  : 					_Color(_Parent(_Parent(_Pnode))) = _Red;
; 967  : 					_Pnode = _Parent(_Parent(_Pnode));
; 968  : 					}
; 969  : 				else

  00146	74 b3		 je	 SHORT $L179883

; 970  : 					{	// parent has red and black children
; 971  : 					if (_Pnode == _Left(_Parent(_Pnode)))

  00148	3b 31		 cmp	 esi, DWORD PTR [ecx]
  0014a	75 0a		 jne	 SHORT $L175877

; 972  : 						{	// rotate left child to right
; 973  : 						_Pnode = _Parent(_Pnode);

  0014c	8b f1		 mov	 esi, ecx

; 974  : 						_Rrotate(_Pnode);

  0014e	56		 push	 esi
  0014f	8b cf		 mov	 ecx, edi
  00151	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Rrotate
$L175877:

; 975  : 						}
; 976  : 					_Color(_Parent(_Pnode)) = _Black;	// propagate red up

  00156	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00159	88 58 20	 mov	 BYTE PTR [eax+32], bl

; 977  : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

  0015c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0015f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00162	c6 42 20 00	 mov	 BYTE PTR [edx+32], 0

; 978  : 					_Lrotate(_Parent(_Parent(_Pnode)));

  00166	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00169	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0016c	51		 push	 ecx
  0016d	8b cf		 mov	 ecx, edi
  0016f	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Lrotate
$L175876:
  00174	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00177	8a 4a 20	 mov	 cl, BYTE PTR [edx+32]
  0017a	84 c9		 test	 cl, cl
  0017c	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0017f	0f 84 61 ff ff
	ff		 je	 $L175868
  00185	8b 4c 24 70	 mov	 ecx, DWORD PTR __Newnode$[esp+92]
  00189	5d		 pop	 ebp
$L175869:

; 979  : 					}
; 980  : 				}
; 981  : 
; 982  : 		_Color(_Root()) = _Black;	// root is always black

  0018a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0018d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 983  : 		return (_TREE_ITERATOR(_Newnode));

  00190	8b 44 24 60	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+88]
  00194	88 5a 20	 mov	 BYTE PTR [edx+32], bl
  00197	5b		 pop	 ebx
  00198	89 08		 mov	 DWORD PTR [eax], ecx

; 984  : 		}

  0019a	8b 4c 24 4c	 mov	 ecx, DWORD PTR __$EHRec$[esp+88]
  0019e	5f		 pop	 edi
  0019f	5e		 pop	 esi
  001a0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001a7	83 c4 50	 add	 esp, 80			; 00000050H
  001aa	c2 10 00	 ret	 16			; 00000010H
$L179882:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L179515:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T179514[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Insert@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@ABU?$pair@$$CB_J_J@2@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T179879
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Insert@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@ABU?$pair@$$CB_J_J@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Insert
;	COMDAT xdata$x
xdata$x	SEGMENT
$T179990 DD	0ffffffffH
	DD	FLAT:$L179891
$T179988 DD	019930520H
	DD	01H
	DD	FLAT:$T179990
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC NEAR		; std::logic_error::logic_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 1c	 mov	 edi, DWORD PTR ___that$[esp+20]
  0001c	8b f1		 mov	 esi, ecx
  0001e	57		 push	 edi
  0001f	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00023	e8 00 00 00 00	 call	 ??0exception@@QAE@ABV0@@Z ; exception::exception
  00028	33 c0		 xor	 eax, eax
  0002a	6a ff		 push	 -1
  0002c	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00035	50		 push	 eax
  00036	83 c7 0c	 add	 edi, 12			; 0000000cH
  00039	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00040	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00043	57		 push	 edi
  00044	89 44 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], eax
  00048	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00050	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00054	5f		 pop	 edi
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L179891:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T179988
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Ogty
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC NEAR		; std::length_error::length_error, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	?insert@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@_N@2@ABU?$pair@$$CB_J_J@2@@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::insert
; Function compile flags: /Ogty
;	COMDAT ?insert@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@_N@2@ABU?$pair@$$CB_J_J@2@@Z
_TEXT	SEGMENT
__Addleft$ = -4						; size = 1
___$ReturnUdt$ = 8					; size = 4
$T180008 = 12						; size = 4
$T180006 = 12						; size = 4
__Where$175654 = 12					; size = 4
__Val$ = 12						; size = 4
?insert@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@_N@2@ABU?$pair@$$CB_J_J@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::insert, COMDAT
; _this$ = ecx

; 477  : 		{	// try to insert node with value _Val

  00000	51		 push	 ecx
  00001	55		 push	 ebp

; 478  : 		_Nodeptr _Trynode = _Root();
; 479  : 		_Nodeptr _Wherenode = _Myhead;
; 480  : 		bool _Addleft = true;	// add to left of head if tree empty
; 481  : 		while (!_Isnil(_Trynode))

  00002	8b 6c 24 10	 mov	 ebp, DWORD PTR __Val$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0000d	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00010	8a 50 21	 mov	 dl, BYTE PTR [eax+33]
  00013	84 d2		 test	 dl, dl
  00015	8b f1		 mov	 esi, ecx
  00017	b1 01		 mov	 cl, 1
  00019	88 4c 24 0c	 mov	 BYTE PTR __Addleft$[esp+16], cl
  0001d	75 2f		 jne	 SHORT $L175644
  0001f	8b 55 04	 mov	 edx, DWORD PTR [ebp+4]
  00022	53		 push	 ebx
  00023	8b 5d 00	 mov	 ebx, DWORD PTR [ebp]
$L175643:

; 482  : 			{	// look for leaf to insert before (_Addleft) or after
; 483  : 			_Wherenode = _Trynode;
; 484  : 			_Addleft = this->comp(this->_Kfn(_Val), _Key(_Trynode));

  00026	3b 50 14	 cmp	 edx, DWORD PTR [eax+20]
  00029	8b f0		 mov	 esi, eax
  0002b	7f 11		 jg	 SHORT $L180042
  0002d	7c 05		 jl	 SHORT $L180143
  0002f	3b 58 10	 cmp	 ebx, DWORD PTR [eax+16]
  00032	73 0a		 jae	 SHORT $L180042
$L180143:

; 485  : 			_Trynode = _Addleft ? _Left(_Trynode) : _Right(_Trynode);

  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	b1 01		 mov	 cl, 1
  00038	88 4c 24 10	 mov	 BYTE PTR __Addleft$[esp+20], cl
  0003c	eb 09		 jmp	 SHORT $L180001

; 482  : 			{	// look for leaf to insert before (_Addleft) or after
; 483  : 			_Wherenode = _Trynode;
; 484  : 			_Addleft = this->comp(this->_Kfn(_Val), _Key(_Trynode));

$L180042:

; 485  : 			_Trynode = _Addleft ? _Left(_Trynode) : _Right(_Trynode);

  0003e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00041	32 c9		 xor	 cl, cl
  00043	88 4c 24 10	 mov	 BYTE PTR __Addleft$[esp+20], cl
$L180001:

; 478  : 		_Nodeptr _Trynode = _Root();
; 479  : 		_Nodeptr _Wherenode = _Myhead;
; 480  : 		bool _Addleft = true;	// add to left of head if tree empty
; 481  : 		while (!_Isnil(_Trynode))

  00047	80 78 21 00	 cmp	 BYTE PTR [eax+33], 0
  0004b	74 d9		 je	 SHORT $L175643
  0004d	5b		 pop	 ebx
$L175644:

; 486  : 			}
; 487  : 
; 488  : 		if (this->_Multi)
; 489  : 			return (_Pairib(_Insert(_Addleft, _Wherenode, _Val), true));
; 490  : 		else
; 491  : 			{	// insert only if unique
; 492  : 			iterator _Where = _TREE_ITERATOR(_Wherenode);
; 493  : 			if (!_Addleft)

  0004e	84 c9		 test	 cl, cl
  00050	8b d6		 mov	 edx, esi
  00052	89 54 24 18	 mov	 DWORD PTR __Where$175654[esp+12], edx
  00056	74 33		 je	 SHORT $L180104

; 494  : 				;	// need to test if insert after is okay
; 495  : 			else if (_Where == begin())

  00058	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0005b	3b 30		 cmp	 esi, DWORD PTR [eax]

; 496  : 				return (_Pairib(_Insert(true, _Wherenode, _Val), true));

  0005d	8d 4c 24 18	 lea	 ecx, DWORD PTR $T180006[esp+12]
  00061	75 1f		 jne	 SHORT $L175659
  00063	55		 push	 ebp
  00064	56		 push	 esi
  00065	6a 01		 push	 1
  00067	51		 push	 ecx
  00068	8b cf		 mov	 ecx, edi
  0006a	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@ABU?$pair@$$CB_J_J@2@@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Insert
  0006f	8b 10		 mov	 edx, DWORD PTR [eax]
  00071	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  00075	5f		 pop	 edi
  00076	5e		 pop	 esi
  00077	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 502  : 			else
; 503  : 				return (_Pairib(_Where, false));

  0007b	89 10		 mov	 DWORD PTR [eax], edx
  0007d	5d		 pop	 ebp

; 504  : 			}
; 505  : 		}

  0007e	59		 pop	 ecx
  0007f	c2 08 00	 ret	 8
$L175659:

; 497  : 			else
; 498  : 				--_Where;	// need to test if insert before is okay

  00082	e8 00 00 00 00	 call	 ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::const_iterator::_Dec
  00087	8b 54 24 18	 mov	 edx, DWORD PTR __Where$175654[esp+12]
$L180104:

; 499  : 
; 500  : 			if (this->comp(_Key(_Where._Mynode()), this->_Kfn(_Val)))

  0008b	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0008e	3b 45 04	 cmp	 eax, DWORD PTR [ebp+4]
  00091	7f 30		 jg	 SHORT $L175664
  00093	7c 08		 jl	 SHORT $L180144
  00095	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00098	3b 4d 00	 cmp	 ecx, DWORD PTR [ebp]
  0009b	73 26		 jae	 SHORT $L175664
$L180144:

; 501  : 				return (_Pairib(_Insert(_Addleft, _Wherenode, _Val), true));

  0009d	8b 54 24 0c	 mov	 edx, DWORD PTR __Addleft$[esp+16]
  000a1	55		 push	 ebp
  000a2	56		 push	 esi
  000a3	52		 push	 edx
  000a4	8d 44 24 24	 lea	 eax, DWORD PTR $T180008[esp+24]
  000a8	50		 push	 eax
  000a9	8b cf		 mov	 ecx, edi
  000ab	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@2@ABU?$pair@$$CB_J_J@2@@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::_Insert
  000b0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b2	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	89 08		 mov	 DWORD PTR [eax], ecx
  000ba	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  000be	5d		 pop	 ebp

; 504  : 			}
; 505  : 		}

  000bf	59		 pop	 ecx
  000c0	c2 08 00	 ret	 8
$L175664:

; 502  : 			else
; 503  : 				return (_Pairib(_Where, false));

  000c3	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
  000cd	89 10		 mov	 DWORD PTR [eax], edx
  000cf	5d		 pop	 ebp

; 504  : 			}
; 505  : 		}

  000d0	59		 pop	 ecx
  000d1	c2 08 00	 ret	 8
?insert@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@_N@2@ABU?$pair@$$CB_J_J@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::insert
_TEXT	ENDS
EXTRN	?CanRunQuest@CTPlayer@@QAEEPAUtagQUESTTEMP@@KAAE@Z:NEAR ; CTPlayer::CanRunQuest
EXTRN	?ExecQuest@CQuest@@UAEXPAVCTPlayer@@KPAV?$map@EPAV?$map@KPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@@std@@@2@@std@@U?$less@E@2@V?$allocator@U?$pair@$$CBEPAV?$map@KPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@@std@@@2@@std@@@std@@@2@@std@@PAV?$map@KPAUtagQUESTTEMP@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUtagQUESTTEMP@@@std@@@3@@4@PAV?$map@GPAUtagTITEM@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUtagTITEM@@@std@@@3@@4@PAV?$map@GPAVCTSkillTemp@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkillTemp@@@std@@@3@@4@PAV?$map@GPAUtagTMONSTER@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUtagTMONSTER@@@std@@@3@@4@PAV?$map@EPAUtagTSTAT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTSTAT@@@std@@@3@@4@@Z:NEAR ; CQuest::ExecQuest
EXTRN	?SetKeeper@CTMonster@@QAEXEK@Z:NEAR		; CTMonster::SetKeeper
EXTRN	?Transformation@CTMonster@@QAEEXZ:NEAR		; CTMonster::Transformation
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\questdiemon.cpp
;	COMDAT ?ExecQuest@CQuestDieMon@@UAEXPAVCTPlayer@@KPAV?$map@EPAV?$map@KPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@@std@@@2@@std@@U?$less@E@2@V?$allocator@U?$pair@$$CBEPAV?$map@KPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@@std@@@2@@std@@@std@@@2@@std@@PAV?$map@KPAUtagQUESTTEMP@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUtagQUESTTEMP@@@std@@@3@@4@PAV?$map@GPAUtagTITEM@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUtagTITEM@@@std@@@3@@4@PAV?$map@GPAVCTSkillTemp@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkillTemp@@@std@@@3@@4@PAV?$map@GPAUtagTMONSTER@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUtagTMONSTER@@@std@@@3@@4@PAV?$map@EPAUtagTSTAT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTSTAT@@@std@@@3@@4@@Z
_TEXT	SEGMENT
_bLevel$ = -61						; size = 1
_i$175347 = -60						; size = 4
_wSpawnID$175239 = -56					; size = 2
_dwKeeper$175356 = -56					; size = 4
_i$175234 = -52						; size = 4
_it$175318 = -48					; size = 4
_finder$175435 = -44					; size = 4
_bType$175355 = -40					; size = 1
_this$ = -36						; size = 4
_nKey$175353 = -32					; size = 8
$T180156 = -24						; size = 8
$T180155 = -16						; size = 16
_pPlayer$ = 8						; size = 4
_dwTick$ = 12						; size = 4
_pTRIGGER$ = 16						; size = 4
_pQUESTTEMP$ = 20					; size = 4
_pITEMTEMP$ = 24					; size = 4
_pSKILLTEMP$ = 28					; size = 4
_pMONTEMP$ = 32						; size = 4
_pCLASS$ = 36						; size = 4
?ExecQuest@CQuestDieMon@@UAEXPAVCTPlayer@@KPAV?$map@EPAV?$map@KPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@@std@@@2@@std@@U?$less@E@2@V?$allocator@U?$pair@$$CBEPAV?$map@KPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@@std@@@2@@std@@@std@@@2@@std@@PAV?$map@KPAUtagQUESTTEMP@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUtagQUESTTEMP@@@std@@@3@@4@PAV?$map@GPAUtagTITEM@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUtagTITEM@@@std@@@3@@4@PAV?$map@GPAVCTSkillTemp@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkillTemp@@@std@@@3@@4@PAV?$map@GPAUtagTMONSTER@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUtagTMONSTER@@@std@@@3@@4@PAV?$map@EPAUtagTSTAT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTSTAT@@@std@@@3@@4@@Z PROC NEAR ; CQuestDieMon::ExecQuest, COMDAT
; _this$ = ecx

; 21   : {

  00000	83 ec 40	 sub	 esp, 64			; 00000040H
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 22   : 	if(!m_pMap)

  00006	8b 43 24	 mov	 eax, DWORD PTR [ebx+36]
  00009	85 c0		 test	 eax, eax
  0000b	89 5c 24 20	 mov	 DWORD PTR _this$[esp+68], ebx
  0000f	0f 84 cc 02 00
	00		 je	 $L175233

; 23   : 		return;
; 24   : 
; 25   : 	CTMonSpawn * pSPAWN = NULL;
; 26   : 	BYTE bLevel;
; 27   : 	if(!pPlayer->CanRunQuest( m_pQUEST, dwTick, bLevel))

  00015	8b 4c 24 4c	 mov	 ecx, DWORD PTR _dwTick$[esp+64]
  00019	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  0001c	55		 push	 ebp
  0001d	8b 6c 24 4c	 mov	 ebp, DWORD PTR _pPlayer$[esp+68]
  00021	8d 44 24 0b	 lea	 eax, DWORD PTR _bLevel$[esp+72]
  00025	50		 push	 eax
  00026	51		 push	 ecx
  00027	52		 push	 edx
  00028	8b cd		 mov	 ecx, ebp
  0002a	e8 00 00 00 00	 call	 ?CanRunQuest@CTPlayer@@QAEEPAUtagQUESTTEMP@@KAAE@Z ; CTPlayer::CanRunQuest
  0002f	84 c0		 test	 al, al
  00031	0f 85 a9 02 00
	00		 jne	 $L181233
  00037	56		 push	 esi
  00038	57		 push	 edi

; 28   : 	{
; 29   : 		for( int i=0; i<INT(m_pQUEST->m_vTerm.size()); i++)

  00039	33 f6		 xor	 esi, esi
$L181235:
  0003b	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0003e	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  00041	85 d2		 test	 edx, edx
  00043	89 74 24 1c	 mov	 DWORD PTR _i$175234[esp+80], esi
  00047	75 04		 jne	 SHORT $L180162
  00049	33 c0		 xor	 eax, eax
  0004b	eb 08		 jmp	 SHORT $L180163
$L180162:
  0004d	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00050	2b c2		 sub	 eax, edx
  00052	c1 f8 02	 sar	 eax, 2
$L180163:
  00055	3b f0		 cmp	 esi, eax
  00057	0f 8d 56 02 00
	00		 jge	 $L175237
  0005d	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]

; 30   : 			if( m_pQUEST->m_vTerm[i]->m_bTermType == QTT_SPAWNID )

  00060	8b 0c b0	 mov	 ecx, DWORD PTR [eax+esi*4]
  00063	80 79 04 10	 cmp	 BYTE PTR [ecx+4], 16	; 00000010H
  00067	8d 04 b0	 lea	 eax, DWORD PTR [eax+esi*4]
  0006a	0f 85 39 02 00
	00		 jne	 $L175236

; 31   : 			{
; 32   : 				WORD wSpawnID = (WORD)m_pQUEST->m_vTerm[i]->m_dwTermID;
; 33   : 				MAPTMONSPAWN::iterator it = m_pMap->m_mapTMONSPAWN.find(wSpawnID);

  00070	8b 73 24	 mov	 esi, DWORD PTR [ebx+36]
  00073	8b d1		 mov	 edx, ecx
  00075	33 c0		 xor	 eax, eax
  00077	66 8b 02	 mov	 ax, WORD PTR [edx]
  0007a	8d 4c 24 18	 lea	 ecx, DWORD PTR _wSpawnID$175239[esp+80]
  0007e	51		 push	 ecx
  0007f	8d 54 24 24	 lea	 edx, DWORD PTR _it$175318[esp+84]
  00083	52		 push	 edx
  00084	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00087	89 44 24 20	 mov	 DWORD PTR _wSpawnID$175239[esp+88], eax
  0008b	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABG@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::find

; 34   : 				if(it == m_pMap->m_mapTMONSPAWN.end())

  00090	8b 44 24 20	 mov	 eax, DWORD PTR _it$175318[esp+80]
  00094	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  00097	0f 84 0c 02 00
	00		 je	 $L175236

; 35   : 					continue;
; 36   : 
; 37   : 				pSPAWN = (*it).second;

  0009d	8b 70 10	 mov	 esi, DWORD PTR [eax+16]

; 38   : 				if(pSPAWN->m_pSPAWN->m_bEvent == SE_QUESTDEL)

  000a0	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000a3	80 78 5c 03	 cmp	 BYTE PTR [eax+92], 3
  000a7	75 66		 jne	 SHORT $L175340

; 39   : 				{
; 40   : 					for(DWORD i=0; i<pSPAWN->m_vTMON.size(); i++)

  000a9	33 ff		 xor	 edi, edi
  000ab	eb 03 8d 49 00	 npad	 5
$L175342:
  000b0	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  000b3	85 c9		 test	 ecx, ecx
  000b5	0f 84 ee 01 00
	00		 je	 $L175236
  000bb	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000be	2b c1		 sub	 eax, ecx
  000c0	c1 f8 02	 sar	 eax, 2
  000c3	3b f8		 cmp	 edi, eax
  000c5	0f 83 de 01 00
	00		 jae	 $L175236
  000cb	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000ce	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]

; 41   : 					{
; 42   : 						pSPAWN->m_vTMON[i]->m_bRemove = TRUE;

  000d5	8b 14 08	 mov	 edx, DWORD PTR [eax+ecx]
  000d8	03 c1		 add	 eax, ecx
  000da	c6 82 74 01 00
	00 01		 mov	 BYTE PTR [edx+372], 1
  000e1	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000e4	03 c1		 add	 eax, ecx

; 43   : 
; 44   : 						if(pSPAWN->m_vTMON[i]->m_bStatus != OS_DEAD &&
; 45   : 							pSPAWN->m_vTMON[i]->m_bStatus != OS_DISAPPEAR)

  000e6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e8	80 b9 cc 00 00
	00 03		 cmp	 BYTE PTR [ecx+204], 3
  000ef	74 1b		 je	 SHORT $L175343
  000f1	8b d1		 mov	 edx, ecx
  000f3	8a 8a cc 00 00
	00		 mov	 cl, BYTE PTR [edx+204]
  000f9	84 c9		 test	 cl, cl
  000fb	74 0f		 je	 SHORT $L175343

; 46   : 							pSPAWN->m_vTMON[i]->OnDie(0,OT_NONE,0);

  000fd	6a 00		 push	 0
  000ff	8b c2		 mov	 eax, edx
  00101	8b 10		 mov	 edx, DWORD PTR [eax]
  00103	6a 00		 push	 0
  00105	6a 00		 push	 0
  00107	8b c8		 mov	 ecx, eax
  00109	ff 52 18	 call	 DWORD PTR [edx+24]
$L175343:

; 39   : 				{
; 40   : 					for(DWORD i=0; i<pSPAWN->m_vTMON.size(); i++)

  0010c	47		 inc	 edi
  0010d	eb a1		 jmp	 SHORT $L175342
$L175340:

; 47   : 					}
; 48   : 				}
; 49   : 				else
; 50   : 				{
; 51   : 					for(DWORD i=0; i<pSPAWN->m_vTMON.size(); i++)

  0010f	33 db		 xor	 ebx, ebx
$L181234:
  00111	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00114	85 c9		 test	 ecx, ecx
  00116	89 5c 24 14	 mov	 DWORD PTR _i$175347[esp+80], ebx
  0011a	0f 84 85 01 00
	00		 je	 $L181231
  00120	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00123	2b c1		 sub	 eax, ecx
  00125	c1 f8 02	 sar	 eax, 2
  00128	3b d8		 cmp	 ebx, eax
  0012a	0f 83 75 01 00
	00		 jae	 $L181231
  00130	8b c1		 mov	 eax, ecx
  00132	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]

; 52   : 						if( pSPAWN->m_vTMON[i]->m_bStatus != OS_DEAD  &&
; 53   : 							pSPAWN->m_vTMON[i]->m_bStatus != OS_DISAPPEAR && 
; 54   : 							!pSPAWN->m_vTMON[i]->Transformation() )

  00139	8b 0c 38	 mov	 ecx, DWORD PTR [eax+edi]
  0013c	8a 91 cc 00 00
	00		 mov	 dl, BYTE PTR [ecx+204]
  00142	03 c7		 add	 eax, edi
  00144	80 fa 03	 cmp	 dl, 3
  00147	0f 84 52 01 00
	00		 je	 $L175349
  0014d	8b d1		 mov	 edx, ecx
  0014f	8a 8a cc 00 00
	00		 mov	 cl, BYTE PTR [edx+204]
  00155	84 c9		 test	 cl, cl
  00157	0f 84 42 01 00
	00		 je	 $L175349
  0015d	8b ca		 mov	 ecx, edx
  0015f	e8 00 00 00 00	 call	 ?Transformation@CTMonster@@QAEEXZ ; CTMonster::Transformation
  00164	84 c0		 test	 al, al
  00166	0f 85 33 01 00
	00		 jne	 $L175349

; 55   : 						{
; 56   : 							WORD wPartyID = pPlayer->GetPartyID();

  0016c	8b 85 00 01 01
	00		 mov	 eax, DWORD PTR [ebp+65792]
  00172	8d 8d 00 01 01
	00		 lea	 ecx, DWORD PTR [ebp+65792]
  00178	ff 50 0c	 call	 DWORD PTR [eax+12]

; 57   : 							__int64 nKey = wPartyID ? MAKEINT64( wPartyID, 0) : pPlayer->m_dwID;

  0017b	33 db		 xor	 ebx, ebx
  0017d	8b c8		 mov	 ecx, eax
  0017f	66 3b cb	 cmp	 cx, bx
  00182	74 0e		 je	 SHORT $L180150
  00184	0f b7 c1	 movzx	 eax, cx
  00187	99		 cdq
  00188	89 5c 24 30	 mov	 DWORD PTR _nKey$175353[esp+80], ebx
  0018c	89 44 24 34	 mov	 DWORD PTR _nKey$175353[esp+84], eax
  00190	eb 0e		 jmp	 SHORT $L180151
$L180150:
  00192	8b 95 44 01 01
	00		 mov	 edx, DWORD PTR [ebp+65860]
  00198	89 54 24 30	 mov	 DWORD PTR _nKey$175353[esp+80], edx
  0019c	89 5c 24 34	 mov	 DWORD PTR _nKey$175353[esp+84], ebx
$L180151:
  001a0	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 58   : 							__int64 nValue = MAKEINT64( pPlayer->m_dwID, pSPAWN->m_vTMON[i]->m_dwHP);

  001a3	8b 14 07	 mov	 edx, DWORD PTR [edi+eax]
  001a6	8b 9d 44 01 01
	00		 mov	 ebx, DWORD PTR [ebp+65860]
  001ac	03 f8		 add	 edi, eax
  001ae	8b 42 5c	 mov	 eax, DWORD PTR [edx+92]
  001b1	33 ed		 xor	 ebp, ebp
  001b3	33 d2		 xor	 edx, edx
  001b5	0b e8		 or	 ebp, eax
  001b7	0b da		 or	 ebx, edx

; 59   : 
; 60   : 							BYTE bType = wPartyID ? OWNER_PARTY : OWNER_PRIVATE;

  001b9	66 85 c9	 test	 cx, cx
  001bc	0f 95 c0	 setne	 al
  001bf	fe c0		 inc	 al

; 61   : 							DWORD dwKeeper = wPartyID ? wPartyID : pPlayer->m_dwID;

  001c1	66 85 c9	 test	 cx, cx
  001c4	88 44 24 28	 mov	 BYTE PTR _bType$175355[esp+80], al
  001c8	74 09		 je	 SHORT $L180152
  001ca	0f b7 c9	 movzx	 ecx, cx
  001cd	89 4c 24 18	 mov	 DWORD PTR _dwKeeper$175356[esp+80], ecx
  001d1	eb 0e		 jmp	 SHORT $L180153
$L180152:
  001d3	8b 54 24 54	 mov	 edx, DWORD PTR _pPlayer$[esp+76]
  001d7	8b 82 44 01 01
	00		 mov	 eax, DWORD PTR [edx+65860]
  001dd	89 44 24 18	 mov	 DWORD PTR _dwKeeper$175356[esp+80], eax
$L180153:

; 62   : 							DWORD dwTotal = pSPAWN->m_vTMON[i]->m_dwHP;
; 63   : 
; 64   : 							MAPINT64::iterator finder = pSPAWN->m_vTMON[i]->m_mapDamage.find(nKey);

  001e1	8d 44 24 30	 lea	 eax, DWORD PTR _nKey$175353[esp+80]
  001e5	50		 push	 eax
  001e6	8d 4c 24 28	 lea	 ecx, DWORD PTR _finder$175435[esp+84]
  001ea	51		 push	 ecx
  001eb	8b 0f		 mov	 ecx, DWORD PTR [edi]
  001ed	81 c1 50 01 00
	00		 add	 ecx, 336		; 00000150H
  001f3	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@AB_J@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::find

; 65   : 							if(finder!=pSPAWN->m_vTMON[i]->m_mapDamage.end())

  001f8	8b 17		 mov	 edx, DWORD PTR [edi]
  001fa	8b 44 24 24	 mov	 eax, DWORD PTR _finder$175435[esp+80]
  001fe	3b 82 54 01 00
	00		 cmp	 eax, DWORD PTR [edx+340]
  00204	74 30		 je	 SHORT $L175438

; 66   : 							{
; 67   : 								(*finder).second += pSPAWN->m_vTMON[i]->m_dwHP;

  00206	8b 78 18	 mov	 edi, DWORD PTR [eax+24]
  00209	8b ca		 mov	 ecx, edx
  0020b	8b 51 5c	 mov	 edx, DWORD PTR [ecx+92]
  0020e	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00211	03 fa		 add	 edi, edx

; 68   : 								dwTotal = DWORD((*finder).second);
; 69   : 								nValue = MAKEINT64( pPlayer->m_dwID, dwTotal);

  00213	8b 54 24 54	 mov	 edx, DWORD PTR _pPlayer$[esp+76]
  00217	83 d1 00	 adc	 ecx, 0
  0021a	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  0021d	89 78 18	 mov	 DWORD PTR [eax+24], edi
  00220	8b 92 44 01 01
	00		 mov	 edx, DWORD PTR [edx+65860]
  00226	33 c9		 xor	 ecx, ecx

; 70   : 								(*finder).second = nValue;

  00228	33 db		 xor	 ebx, ebx
  0022a	0b cf		 or	 ecx, edi
  0022c	0b d3		 or	 edx, ebx
  0022e	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  00231	89 50 1c	 mov	 DWORD PTR [eax+28], edx

; 71   : 							}
; 72   : 							else

  00234	eb 2f		 jmp	 SHORT $L175457
$L175438:

; 73   : 								pSPAWN->m_vTMON[i]->m_mapDamage.insert(MAPINT64::value_type( nKey, nValue));

  00236	8b 44 24 30	 mov	 eax, DWORD PTR _nKey$175353[esp+80]
  0023a	8b 4c 24 34	 mov	 ecx, DWORD PTR _nKey$175353[esp+84]
  0023e	89 4c 24 44	 mov	 DWORD PTR $T180155[esp+84], ecx
  00242	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00244	8d 54 24 40	 lea	 edx, DWORD PTR $T180155[esp+80]
  00248	89 44 24 40	 mov	 DWORD PTR $T180155[esp+80], eax
  0024c	52		 push	 edx
  0024d	8d 44 24 3c	 lea	 eax, DWORD PTR $T180156[esp+84]
  00251	50		 push	 eax
  00252	81 c1 50 01 00
	00		 add	 ecx, 336		; 00000150H
  00258	89 6c 24 50	 mov	 DWORD PTR $T180155[esp+96], ebp
  0025c	89 5c 24 54	 mov	 DWORD PTR $T180155[esp+100], ebx
  00260	e8 00 00 00 00	 call	 ?insert@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@_J_JU?$less@_J@std@@V?$allocator@U?$pair@$$CB_J_J@std@@@2@$0A@@std@@@std@@_N@2@ABU?$pair@$$CB_J_J@2@@Z ; std::_Tree<std::_Tmap_traits<__int64,__int64,std::less<__int64>,std::allocator<std::pair<__int64 const ,__int64> >,0> >::insert
$L175457:
  00265	8b 7c 24 14	 mov	 edi, DWORD PTR _i$175347[esp+80]
  00269	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 74   : 							pSPAWN->m_vTMON[i]->SetKeeper( bType, dwKeeper);

  0026c	8b 4c 24 18	 mov	 ecx, DWORD PTR _dwKeeper$175356[esp+80]
  00270	8b 54 24 28	 mov	 edx, DWORD PTR _bType$175355[esp+80]
  00274	c1 e7 02	 shl	 edi, 2
  00277	51		 push	 ecx
  00278	8b 0c 38	 mov	 ecx, DWORD PTR [eax+edi]
  0027b	03 c7		 add	 eax, edi
  0027d	52		 push	 edx
  0027e	e8 00 00 00 00	 call	 ?SetKeeper@CTMonster@@QAEXEK@Z ; CTMonster::SetKeeper
  00283	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]

; 75   : 
; 76   : 							pSPAWN->m_vTMON[i]->OnDie(0,OT_NONE,0); 

  00286	6a 00		 push	 0
  00288	03 c7		 add	 eax, edi
  0028a	8b 00		 mov	 eax, DWORD PTR [eax]
  0028c	8b 10		 mov	 edx, DWORD PTR [eax]
  0028e	6a 00		 push	 0
  00290	6a 00		 push	 0
  00292	8b c8		 mov	 ecx, eax
  00294	ff 52 18	 call	 DWORD PTR [edx+24]
  00297	8b 5c 24 14	 mov	 ebx, DWORD PTR _i$175347[esp+80]
  0029b	8b 6c 24 54	 mov	 ebp, DWORD PTR _pPlayer$[esp+76]
$L175349:

; 47   : 					}
; 48   : 				}
; 49   : 				else
; 50   : 				{
; 51   : 					for(DWORD i=0; i<pSPAWN->m_vTMON.size(); i++)

  0029f	43		 inc	 ebx
  002a0	e9 6c fe ff ff	 jmp	 $L181234
$L181231:
  002a5	8b 5c 24 2c	 mov	 ebx, DWORD PTR _this$[esp+80]
$L175236:

; 28   : 	{
; 29   : 		for( int i=0; i<INT(m_pQUEST->m_vTerm.size()); i++)

  002a9	8b 74 24 1c	 mov	 esi, DWORD PTR _i$175234[esp+80]
  002ad	46		 inc	 esi
  002ae	e9 88 fd ff ff	 jmp	 $L181235
$L175237:

; 77   : 						}
; 78   : 				}
; 79   : 			}
; 80   : 
; 81   : 		CQuest::ExecQuest(
; 82   : 			pPlayer,
; 83   : 			dwTick,
; 84   : 			pTRIGGER,
; 85   : 			pQUESTTEMP,
; 86   : 			pITEMTEMP,
; 87   : 			pSKILLTEMP,
; 88   : 			pMONTEMP,
; 89   : 			pCLASS);

  002b3	8b 44 24 70	 mov	 eax, DWORD PTR _pCLASS$[esp+76]
  002b7	8b 4c 24 6c	 mov	 ecx, DWORD PTR _pMONTEMP$[esp+76]
  002bb	8b 54 24 68	 mov	 edx, DWORD PTR _pSKILLTEMP$[esp+76]
  002bf	50		 push	 eax
  002c0	8b 44 24 68	 mov	 eax, DWORD PTR _pITEMTEMP$[esp+80]
  002c4	51		 push	 ecx
  002c5	8b 4c 24 68	 mov	 ecx, DWORD PTR _pQUESTTEMP$[esp+84]
  002c9	52		 push	 edx
  002ca	8b 54 24 68	 mov	 edx, DWORD PTR _pTRIGGER$[esp+88]
  002ce	50		 push	 eax
  002cf	8b 44 24 68	 mov	 eax, DWORD PTR _dwTick$[esp+92]
  002d3	51		 push	 ecx
  002d4	52		 push	 edx
  002d5	50		 push	 eax
  002d6	55		 push	 ebp
  002d7	8b cb		 mov	 ecx, ebx
  002d9	e8 00 00 00 00	 call	 ?ExecQuest@CQuest@@UAEXPAVCTPlayer@@KPAV?$map@EPAV?$map@KPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@@std@@@2@@std@@U?$less@E@2@V?$allocator@U?$pair@$$CBEPAV?$map@KPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@@std@@@2@@std@@@std@@@2@@std@@PAV?$map@KPAUtagQUESTTEMP@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUtagQUESTTEMP@@@std@@@3@@4@PAV?$map@GPAUtagTITEM@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUtagTITEM@@@std@@@3@@4@PAV?$map@GPAVCTSkillTemp@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkillTemp@@@std@@@3@@4@PAV?$map@GPAUtagTMONSTER@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUtagTMONSTER@@@std@@@3@@4@PAV?$map@EPAUtagTSTAT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTSTAT@@@std@@@3@@4@@Z ; CQuest::ExecQuest
  002de	5f		 pop	 edi
  002df	5e		 pop	 esi
$L181233:
  002e0	5d		 pop	 ebp
$L175233:
  002e1	5b		 pop	 ebx

; 90   : 	}
; 91   : }

  002e2	83 c4 40	 add	 esp, 64			; 00000040H
  002e5	c2 20 00	 ret	 32			; 00000020H
?ExecQuest@CQuestDieMon@@UAEXPAVCTPlayer@@KPAV?$map@EPAV?$map@KPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@@std@@@2@@std@@U?$less@E@2@V?$allocator@U?$pair@$$CBEPAV?$map@KPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@U?$less@K@2@V?$allocator@U?$pair@$$CBKPAV?$vector@PAUtagQUESTTEMP@@V?$allocator@PAUtagQUESTTEMP@@@std@@@std@@@std@@@2@@std@@@std@@@2@@std@@PAV?$map@KPAUtagQUESTTEMP@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAUtagQUESTTEMP@@@std@@@3@@4@PAV?$map@GPAUtagTITEM@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUtagTITEM@@@std@@@3@@4@PAV?$map@GPAVCTSkillTemp@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkillTemp@@@std@@@3@@4@PAV?$map@GPAUtagTMONSTER@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAUtagTMONSTER@@@std@@@3@@4@PAV?$map@EPAUtagTSTAT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTSTAT@@@std@@@3@@4@@Z ENDP ; CQuestDieMon::ExecQuest
_TEXT	ENDS
END
