; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\TAICmdRegen.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_1EO@BGAEGJFB@?$AA?$HL?$AA5?$AA1?$AAA?$AAB?$AA7?$AAA?$AA3?$AA0?$AA?9?$AA9?$AA9?$AA5?$AAA?$AA?9?$AA4?$AA4?$AAA?$AAB?$AA?9@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CH@JJOAEHDK@?$HL51AB7A30?9995A?944AB?9B869?97D79E92@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@OGFEPDED@LocalService?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02CCDHMLDD@?9?1?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@MIGBKCMN@UnregServer?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09LJBJJPCG@RegServer?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07LMLHFMEG@Service?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07PNHNHBAB@Install?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09LAEJNBCE@UnInstall?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04FABLJDN@Name?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@DBFDLFJJ@?$CFs?5?9Name?5?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BP@GECJKCAK@Could?5not?5open?5Service?5Manager?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06HCEGMCNE@RPCSS?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@HDJFCBEP@Could?5not?5start?5service?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CJ@JEEKFGOG@?$CFd?5Monster?5have?5no?5data?5in?5TMONS@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CO@GPAJNNPI@?$CFd?5Monster?5have?5no?5ATTR?5data?5in?5@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@JMOCNDDL@Could?5not?5open?5service?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@GKJBBOLK@Could?5not?5stop?5service?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NMBIIKKI@Could?5not?5delete?5service?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?GetAppId@CTMapSvrModule@@SAPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAppIdT@CTMapSvrModule@@SAPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateRegistryAppId@CTMapSvrModule@@SGJH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterAppId@CTMapSvrModule@@QAEJ_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Install@CTMapSvrModule@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTAICmdRegen@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTAICmdRegen@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CTAICmdRegen@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDelay@CTAICmdRegen@@UAEKPAVCTMonster@@KKE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CanRun@CTAICmdRegen@@UAEEPAVCTMonster@@KKE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ExecAI@CTAICmdRegen@@UAEEPAVCTMonster@@KKE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Tokenize@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@PBDAAH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Format@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAAXPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QAEAAPAUtagTMAPMON@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?empty@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAPAVCTMonster@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?back@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAPAVCTMonster@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBGPAVCTSkill@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnregisterAppId@?$CAtlServiceModuleT@VCTMapSvrModule@@$0GE@@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsInstalled@?$CAtlServiceModuleT@VCTMapSvrModule@@$0GE@@ATL@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Uninstall@?$CAtlServiceModuleT@VCTMapSvrModule@@$0GE@@ATL@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LogEvent@?$CAtlServiceModuleT@VCTMapSvrModule@@$0GE@@ATL@@QAAXPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CAtlExeModuleT@VCTMapSvrModule@@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CAtlExeModuleT@VCTMapSvrModule@@@ATL@@UAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterServer@?$CAtlModuleT@VCTMapSvrModule@@@ATL@@QAEJHPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnregisterServer@?$CAtlModuleT@VCTMapSvrModule@@@ATL@@QAEJHPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddCommonRGSReplacements@?$CAtlModuleT@VCTMapSvrModule@@@ATL@@UAEJPAUIRegistrarBase@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?empty@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?at@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QAEAAPAUtagTMONSPAWN@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBGPAVCTMonSpawn@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$pair@$$CBGPAVCTSkill@@@std@@QAE@ABGABQAVCTSkill@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBEPAVCTItem@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CAtlExeModuleT@VCTMapSvrModule@@@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CAtlModuleT@VCTMapSvrModule@@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FormatV@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEXPBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetManager@?$CSimpleStringT@D$0A@@ATL@@QBEPAUIAtlStringMgr@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringSpanIncluding@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringSpanExcluding@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$less@G@std@@QBE_NABG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAABGPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Insert@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBGPAVCTSkill@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Kfn@?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@SAABGABU?$pair@$$CBGPAVCTSkill@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAABGPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UninitializeCom@?$CAtlExeModuleT@VCTMapSvrModule@@@ATL@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xran@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBGPAVCTMonSpawn@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@3@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@1@AB_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Fiterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@3@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBEPAVCTItem@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEAAPAVCTMonster@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Giterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QBEAAPAUtagTMONSPAWN@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Color@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myval@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBGPAVCTSkill@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBGPAVCTSkill@@@2@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myval@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBEPAVCTItem@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myval@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBGPAVCTMonSpawn@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lbound@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@ABG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Kfn@?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@SAABGABU?$pair@$$CBGPAVCTMonSpawn@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Fconst_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE@PAPAVCTMonster@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Ziterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEABQAVCTMonster@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QAE@PAPAUtagTMONSPAWN@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QBEABQAUtagTMONSPAWN@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE@PAPAVCTMonster@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QAE@PAPAUtagTMONSPAWN@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBGPAVCTSkill@@@2@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Max@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@GIG@std@@YAXPAGIABGAAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagTAICONDITION@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTAICONDITION@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagTAICONDITION@@V?$allocator@PAUtagTAICONDITION@@@std@@@std@@YAXPAPAUtagTAICONDITION@@0AAV?$allocator@PAUtagTAICONDITION@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagTMONITEM@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTMONITEM@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagTMONITEM@@V?$allocator@PAUtagTMONITEM@@@std@@@std@@YAXPAPAUtagTMONITEM@@0AAV?$allocator@PAUtagTMONITEM@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagTMAPMON@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTMAPMON@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@YAXPAPAUtagTMAPMON@@0AAV?$allocator@PAUtagTMAPMON@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagPATHPOINT@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagPATHPOINT@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagPATHPOINT@@V?$allocator@PAUtagPATHPOINT@@@std@@@std@@YAXPAPAUtagPATHPOINT@@0AAV?$allocator@PAUtagPATHPOINT@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagQUESTCONDITION@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagQUESTCONDITION@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagQUESTCONDITION@@V?$allocator@PAUtagQUESTCONDITION@@@std@@@std@@YAXPAPAUtagQUESTCONDITION@@0AAV?$allocator@PAUtagQUESTCONDITION@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagQUESTREWARD@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagQUESTREWARD@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagQUESTREWARD@@V?$allocator@PAUtagQUESTREWARD@@@std@@@std@@YAXPAPAUtagQUESTREWARD@@0AAV?$allocator@PAUtagQUESTREWARD@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagQUESTTERM@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagQUESTTERM@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@YAXPAPAUtagQUESTTERM@@0AAV?$allocator@PAUtagQUESTTERM@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagTCASHITMSALE@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagTCASHITMSALE@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagTCASHITMSALE@@IU1@V?$allocator@UtagTCASHITMSALE@@@std@@@std@@YAXPAUtagTCASHITMSALE@@IABU1@AAV?$allocator@UtagTCASHITMSALE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagMONREGEN@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagMONREGEN@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagMONREGEN@@IU1@V?$allocator@UtagMONREGEN@@@std@@@std@@YAXPAUtagMONREGEN@@IABU1@AAV?$allocator@UtagMONREGEN@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagLOTTERY@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagLOTTERY@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagLOTTERY@@IU1@V?$allocator@UtagLOTTERY@@@std@@@std@@YAXPAUtagLOTTERY@@IABU1@AAV?$allocator@UtagLOTTERY@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@GV?$allocator@G@std@@@std@@YAXPAG0AAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAGPAGV?$allocator@G@std@@@std@@YAPAGPAG00AAV?$allocator@G@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAGPAG@std@@YAPAGPAG00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@VCTPlayer@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCTPlayer@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAVCTPlayer@@V?$allocator@PAVCTPlayer@@@std@@@std@@YAXPAPAVCTPlayer@@0AAV?$allocator@PAVCTPlayer@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagTCASHITMSALE@@V?$allocator@UtagTCASHITMSALE@@@std@@@std@@YAXPAUtagTCASHITMSALE@@0AAV?$allocator@UtagTCASHITMSALE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAUtagTCASHITMSALE@@PAU1@V?$allocator@UtagTCASHITMSALE@@@std@@@std@@YAPAUtagTCASHITMSALE@@PAU1@00AAV?$allocator@UtagTCASHITMSALE@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUtagTCASHITMSALE@@PAU1@@std@@YAPAUtagTCASHITMSALE@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@YAXPAUtagMONREGEN@@0AAV?$allocator@UtagMONREGEN@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAUtagMONREGEN@@PAU1@V?$allocator@UtagMONREGEN@@@std@@@std@@YAPAUtagMONREGEN@@PAU1@00AAV?$allocator@UtagMONREGEN@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUtagMONREGEN@@PAU1@@std@@YAPAUtagMONREGEN@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@YAXPAUtagLOTTERY@@0AAV?$allocator@UtagLOTTERY@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAUtagLOTTERY@@PAU1@V?$allocator@UtagLOTTERY@@@std@@@std@@YAPAUtagLOTTERY@@PAU1@00AAV?$allocator@UtagLOTTERY@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUtagLOTTERY@@PAU1@@std@@YAPAUtagLOTTERY@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@UtagTCASHITMSALE@@@std@@QAEXPAUtagTCASHITMSALE@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagTCASHITMSALE@@@std@@QAEXPAUtagTCASHITMSALE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@UtagMONREGEN@@@std@@QAEXPAUtagMONREGEN@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagMONREGEN@@@std@@QAEXPAUtagMONREGEN@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@UtagLOTTERY@@@std@@QAEXPAUtagLOTTERY@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagLOTTERY@@@std@@QAEXPAUtagLOTTERY@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill_n@PAGIG@std@@YAXPAGIABG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@GG@std@@YAPAGPAG00AAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagTCASHITMSALE@@PAU1@V?$allocator@UtagTCASHITMSALE@@@std@@@std@@YAPAUtagTCASHITMSALE@@PAU1@00AAV?$allocator@UtagTCASHITMSALE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagMONREGEN@@PAU1@V?$allocator@UtagMONREGEN@@@std@@@std@@YAPAUtagMONREGEN@@PAU1@00AAV?$allocator@UtagMONREGEN@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagLOTTERY@@PAU1@V?$allocator@UtagLOTTERY@@@std@@@std@@YAPAUtagLOTTERY@@PAU1@00AAV?$allocator@UtagLOTTERY@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@UtagTCASHITMSALE@@U1@@std@@YAXPAUtagTCASHITMSALE@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagTCASHITMSALE@@@std@@YAXPAUtagTCASHITMSALE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@UtagMONREGEN@@U1@@std@@YAXPAUtagMONREGEN@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagMONREGEN@@@std@@YAXPAUtagMONREGEN@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@UtagLOTTERY@@U1@@std@@YAXPAUtagLOTTERY@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagLOTTERY@@@std@@YAXPAUtagLOTTERY@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetGITPtr@CAtlModule@ATL@@UAEJPAPAUIGlobalInterfaceTable@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_StdGlobalInterfaceTable
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetLockCount@CAtlModule@ATL@@UAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@CAtlModule@ATL@@UAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Increment@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@G@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyChars@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QAE@PAPAUtagTMAPMON@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QAE@PAPAUtagTMAPMON@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReleaseBufferSetLength@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Format@?$ChTraitsCRT@D@ATL@@SAHPADPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBuffer@?$CSimpleStringT@D$0A@@ATL@@QAEPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrepareWrite@?$CSimpleStringT@D$0A@@ATL@@AAEPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Fork@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reallocate@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFormattedLength@?$ChTraitsCRT@D@ATL@@SAHPBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CAtlModule@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Decrement@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Term@CAtlModule@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlCallTermFunc@ATL@@YGXPAU_ATL_MODULE70@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlRaiseException@ATL@@YAXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Term@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@CAtlModule@ATL@@UAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QBEAAPAUtagTMAPMON@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QBEABQAUtagTMAPMON@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLength@?$CSimpleStringT@D$0A@@ATL@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CAtlException@ATL@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __TI1?AVCAtlException@ATL@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA1?AVCAtlException@ATL@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVCAtlException@ATL@@@84
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVCAtlException@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _sinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _cosf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@GV?$allocator@G@std@@@std@@QAEAAGI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$vector@GV?$allocator@G@std@@@std@@QBEAAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@GV?$allocator@G@std@@@std@@QBEABGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@GV?$allocator@G@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@GV?$allocator@G@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@GV?$allocator@G@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@GV?$allocator@G@std@@@std@@QAE@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@GV?$allocator@G@std@@@std@@QAE@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CTAICmdRegen@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AtlLoadString@ATL@@YAHIPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUIAtlStringMgr@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyCharsOverlapped@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckImplicitLoad@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@AAE_NPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadStringA@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindStringResourceInstance@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlFindStringResourceInstance@ATL@@YAPAUHINSTANCE__@@IG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@IG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadStringA@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEHPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@D@ATL@@SAHPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertToBaseType@?$ChTraitsCRT@D@ATL@@SAXPADHPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringLength@?$CSimpleStringT@D$0A@@ATL@@SAHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WordCmpI@CAtlModule@ATL@@SAHPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindOneOf@CAtlModule@ATL@@SAPBDPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStringValue@CRegKey@ATL@@QAEJPBD0K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteValue@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCRegKey@ATL@@QBEPAUHKEY__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@CRegKey@ATL@@QAEJPAUHKEY__@@PBDPADKKPAU_SECURITY_ATTRIBUTES@@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Close@CRegKey@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlHresultFromWin32@ATL@@YAJK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Open@CRegKey@ATL@@QAEJPAUHKEY__@@PBDK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?UpdateRegistryFromResourceS@CAtlModule@ATL@@QAGJIHPAU_ATL_REGMAP_ENTRY@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRegObject@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IRegistrarBase@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CRegObject@ATL@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?QueryInterface@CRegObject@ATL@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CRegObject@ATL@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CRegObject@ATL@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClearReplacements@CRegObject@ATL@@UAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@CComFakeCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClearReplacements@CExpansionVector@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetKeyAt@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QBEAAPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetValueAt@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QBEAAPAGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveAll@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@CComFakeCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRegObject@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CExpansionVector@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CExpansionVector@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRegObject@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@CCRTAllocator@ATL@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlHresultFromLastError@ATL@@YAJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPAGPAGPBDHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlVerifyStackAvailable@_ATL_SAFE_ALLOCA_IMPL@ATL@@YA_NK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@CAtlSafeAllocBufferNode@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EscapeSingleQuote@CAtlModule@ATL@@SAXPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocscpy@@YAPAGPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocslen@@YAHPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_1O@MNLDABAF@?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AddReplacement@CRegObject@ATL@@UAGJPBG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPBGHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@CExpansionVector@ATL@@QAEHPBDPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAEHABQADABQAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalSetAtIndex@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAEXHABQADABQAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?2PAD@?$Wrapper@PAD@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@SAPAXIPAPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?3PAD@?$Wrapper@PAD@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@SAXPAXPAPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$Wrapper@PAD@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAE@ABQAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?2PAG@?$Wrapper@PAG@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@SAPAXIPAPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?3PAG@?$Wrapper@PAG@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@SAXPAXPAPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$Wrapper@PAG@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAE@ABQAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_1BG@JBACFMF@?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA_?$AAR?$AAa?$AAw?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1BC@KAILKFFG@?$AAR?$AAE?$AAG?$AAI?$AAS?$AAT?$AAR?$AAY?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?ResourceRegister@CRegObject@ATL@@QAGJPBGI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterFromResource@CRegObject@ATL@@IAEJPBGPBD1H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRegParser@ATL@@QAE@PAVCRegObject@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeHeap@?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateBytes@?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateHeap@?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterBuffer@CRegParser@ATL@@QAEJPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PreProcessBuffer@CRegParser@ATL@@QAEJPADPAPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CParseBuffer@CRegParser@ATL@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CParseBuffer@CRegParser@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StrChrA@CRegParser@ATL@@KAPADPADD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StrFromMap@CRegObject@ATL@@QAEPBGPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lookup@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QBEPAGABQAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindKey@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QBEHABQAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEqualKey@CExpansionVectorEqualHelper@ATL@@SA_NQAD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddString@CParseBuffer@CRegParser@ATL@@QAEHPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@CParseBuffer@CRegParser@ATL@@QAEHPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddChar@CParseBuffer@CRegParser@ATL@@QAEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Detach@CParseBuffer@CRegParser@ATL@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HKeyFromString@CRegParser@ATL@@KAPAUHKEY__@@PAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04OHBKMIBJ@HKCR?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04KIFLFONO@HKCU?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04CBBMIBLK@HKLM?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03DLBIJLAB@HKU?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04OFOCGAOH@HKPD?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04POMNGLEL@HKDD?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04LEMDOLAJ@HKCC?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@JBJOLKMF@HKEY_CLASSES_ROOT?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@GMMMKLBI@HKEY_CURRENT_USER?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@GIIFIKDM@HKEY_LOCAL_MACHINE?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@OEMMANAM@HKEY_USERS?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@IDBEHNDO@HKEY_PERFORMANCE_DATA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@MJDLIIGK@HKEY_DYN_DATA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@NLNNHLLF@HKEY_CURRENT_CONFIG?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?map@?2??HKeyFromString@CRegParser@ATL@@KAPAUHKEY__@@PAD@Z@4QBUkeymap@23@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?NextToken@CRegParser@ATL@@IAEJPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndOfVar@CRegParser@ATL@@IAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsSpace@CRegParser@ATL@@IAEHD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GenerateError@CRegParser@ATL@@IAEJI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterSubkeys@CRegParser@ATL@@IAEJPADPAUHKEY__@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AddValue@CRegParser@ATL@@IAEJAAVCRegKey@2@PBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VTFromRegType@CRegParser@ATL@@KAHPBDAAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?map@?2??VTFromRegType@CRegParser@ATL@@KAHPBDAAG@Z@4QBUtypemap@23@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?$S4@?2??VTFromRegType@CRegParser@ATL@@KAHPBDAAG@Z@4IA
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT ??0?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeHeap@?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateBytes@?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateHeap@?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetMultiStringValue@CRegKey@ATL@@QAEJPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetDWORDValue@CRegKey@ATL@@QAEJPBDK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeHeap@?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@QAEPAEI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateBytes@?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@QAEPAEI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateHeap@?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ChToByte@CRegParser@ATL@@KAED@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@QBEPAEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SkipAssignment@CRegParser@ATL@@IAEJPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HasSubKeys@CRegParser@ATL@@IAEHPAUHKEY__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CanForceRemoveKey@CRegParser@ATL@@IAEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?RecurseDeleteKey@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@CRegKey@ATL@@QAEXPAUHKEY__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteSubKey@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Detach@CRegKey@ATL@@QAEPAUHKEY__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SkipWhiteSpace@CRegParser@ATL@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ResourceUnregister@CRegObject@ATL@@QAGJPBGI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_1M@PPPPCDEP@?$AAA?$AAP?$AAP?$AAI?$AAD?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?rgszNeverDelete@CRegParser@ATL@@1QBQBDB	; ATL::CRegParser::rgszNeverDelete
PUBLIC	?g_pfnGetThreadACP@ATL@@3P6GIXZA		; ATL::g_pfnGetThreadACP
PUBLIC	?_AtlGetThreadACPThunk@ATL@@YGIXZ		; ATL::_AtlGetThreadACPThunk
PUBLIC	??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@	; `string'
PUBLIC	??_C@_08PICKODJL@FileType?$AA@			; `string'
PUBLIC	??_C@_09JKPGEJCH@Interface?$AA@			; `string'
PUBLIC	??_C@_08PPIOJEA@Hardware?$AA@			; `string'
PUBLIC	??_C@_04IHBFOLAC@Mime?$AA@			; `string'
PUBLIC	??_C@_03DDIMFGBA@SAM?$AA@			; `string'
PUBLIC	??_C@_08LOPHEHKG@SECURITY?$AA@			; `string'
PUBLIC	??_C@_06FDHFNJBJ@SYSTEM?$AA@			; `string'
PUBLIC	??_C@_08KEKAJNJI@Software?$AA@			; `string'
PUBLIC	??_C@_07KJLOKDKB@TypeLib?$AA@			; `string'
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?m_libid@CAtlModule@ATL@@2U_GUID@@A		; ATL::CAtlModule::m_libid
PUBLIC	_CLSID_StdGlobalInterfaceTable
PUBLIC	??_C@_05GIBEAPNE@CLSID?$AA@			; `string'
PUBLIC	??_C@_05PDIKPLII@AppID?$AA@			; `string'
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	??_C@_03LAIAPFCB@Val?$AA@			; `string'
PUBLIC	??_C@_0M@DBGDLGLL@ForceRemove?$AA@		; `string'
PUBLIC	??_C@_08KAAPDIAN@NoRemove?$AA@			; `string'
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CAtlModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CAtlModule::m_libid
_BSS	ENDS
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT
?g_pfnGetThreadACP@ATL@@3P6GIXZA DD FLAT:?_AtlGetThreadACPThunk@ATL@@YGIXZ ; ATL::g_pfnGetThreadACP
_DATA	ENDS
;	COMDAT _CLSID_StdGlobalInterfaceTable
CONST	SEGMENT
_CLSID_StdGlobalInterfaceTable DD 0323H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
_szStringVal DD	FLAT:??_C@_01CPLAODJH@S?$AA@
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
_multiszStringVal DD FLAT:??_C@_01PLPBNMEI@M?$AA@
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
_szDwordVal DD	FLAT:??_C@_01CKDDGHAB@D?$AA@
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
_szBinaryVal DD	FLAT:??_C@_01HMGJMAIH@B?$AA@
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT
??_C@_03LAIAPFCB@Val?$AA@ DB 'Val', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
_szValToken DD	FLAT:??_C@_03LAIAPFCB@Val?$AA@
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT
??_C@_0M@DBGDLGLL@ForceRemove?$AA@ DB 'ForceRemove', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
_szForceRemove DD FLAT:??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT
??_C@_08KAAPDIAN@NoRemove?$AA@ DB 'NoRemove', 00H	; `string'
CONST	ENDS
CONST	SEGMENT
_szNoRemove DD	FLAT:??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
_szDelete DD	FLAT:??_C@_06JBKGCNBB@Delete?$AA@
CONST	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT
??_C@_05PDIKPLII@AppID?$AA@ DB 'AppID', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT
??_C@_05GIBEAPNE@CLSID?$AA@ DB 'CLSID', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT
??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@ DB 'Component Categories', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT
??_C@_08PICKODJL@FileType?$AA@ DB 'FileType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT
??_C@_09JKPGEJCH@Interface?$AA@ DB 'Interface', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT
??_C@_08PPIOJEA@Hardware?$AA@ DB 'Hardware', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT
??_C@_04IHBFOLAC@Mime?$AA@ DB 'Mime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT
??_C@_03DDIMFGBA@SAM?$AA@ DB 'SAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT
??_C@_08LOPHEHKG@SECURITY?$AA@ DB 'SECURITY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT
??_C@_06FDHFNJBJ@SYSTEM?$AA@ DB 'SYSTEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT
??_C@_08KEKAJNJI@Software?$AA@ DB 'Software', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT
??_C@_07KJLOKDKB@TypeLib?$AA@ DB 'TypeLib', 00H		; `string'
CONST	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT
?rgszNeverDelete@CRegParser@ATL@@1QBQBDB DD FLAT:??_C@_05PDIKPLII@AppID?$AA@ ; ATL::CRegParser::rgszNeverDelete
	DD	FLAT:??_C@_05GIBEAPNE@CLSID?$AA@
	DD	FLAT:??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
	DD	FLAT:??_C@_08PICKODJL@FileType?$AA@
	DD	FLAT:??_C@_09JKPGEJCH@Interface?$AA@
	DD	FLAT:??_C@_08PPIOJEA@Hardware?$AA@
	DD	FLAT:??_C@_04IHBFOLAC@Mime?$AA@
	DD	FLAT:??_C@_03DDIMFGBA@SAM?$AA@
	DD	FLAT:??_C@_08LOPHEHKG@SECURITY?$AA@
	DD	FLAT:??_C@_06FDHFNJBJ@SYSTEM?$AA@
	DD	FLAT:??_C@_08KEKAJNJI@Software?$AA@
	DD	FLAT:??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	ENDS
PUBLIC	?GetDelay@CTAICmdRegen@@UAEKPAVCTMonster@@KKE@Z	; CTAICmdRegen::GetDelay
PUBLIC	?CanRun@CTAICmdRegen@@UAEEPAVCTMonster@@KKE@Z	; CTAICmdRegen::CanRun
PUBLIC	?ExecAI@CTAICmdRegen@@UAEEPAVCTMonster@@KKE@Z	; CTAICmdRegen::ExecAI
PUBLIC	??0CTAICmdRegen@@QAE@XZ				; CTAICmdRegen::CTAICmdRegen
PUBLIC	??_7CTAICmdRegen@@6B@				; CTAICmdRegen::`vftable'
PUBLIC	??_GCTAICmdRegen@@UAEPAXI@Z			; CTAICmdRegen::`scalar deleting destructor'
EXTRN	?CheckCondition@CTAICommand@@UAEEPAUtagTAICONDITION@@PAVCTMonster@@KKE@Z:NEAR ; CTAICommand::CheckCondition
EXTRN	??0CTAICommand@@QAE@XZ:NEAR			; CTAICommand::CTAICommand
EXTRN	??_ECTAICmdRegen@@UAEPAXI@Z:NEAR		; CTAICmdRegen::`vector deleting destructor'
;	COMDAT ??_7CTAICmdRegen@@6B@
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\taicmdregen.cpp
CONST	SEGMENT
??_7CTAICmdRegen@@6B@ DD FLAT:?GetDelay@CTAICmdRegen@@UAEKPAVCTMonster@@KKE@Z ; CTAICmdRegen::`vftable'
	DD	FLAT:?CanRun@CTAICmdRegen@@UAEEPAVCTMonster@@KKE@Z
	DD	FLAT:?ExecAI@CTAICmdRegen@@UAEEPAVCTMonster@@KKE@Z
	DD	FLAT:?CheckCondition@CTAICommand@@UAEEPAUtagTAICONDITION@@PAVCTMonster@@KKE@Z
	DD	FLAT:??_ECTAICmdRegen@@UAEPAXI@Z
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0CTAICmdRegen@@QAE@XZ
_TEXT	SEGMENT
??0CTAICmdRegen@@QAE@XZ PROC NEAR			; CTAICmdRegen::CTAICmdRegen, COMDAT
; _this$ = ecx

; 7    : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??0CTAICommand@@QAE@XZ	; CTAICommand::CTAICommand
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CTAICmdRegen@@6B@

; 8    : }

  0000e	8b c6		 mov	 eax, esi
  00010	5e		 pop	 esi
  00011	c3		 ret	 0
??0CTAICmdRegen@@QAE@XZ ENDP				; CTAICmdRegen::CTAICmdRegen
_TEXT	ENDS
PUBLIC	??1CTAICmdRegen@@UAE@XZ				; CTAICmdRegen::~CTAICmdRegen
EXTRN	??1CTAICommand@@UAE@XZ:NEAR			; CTAICommand::~CTAICommand
; Function compile flags: /Ogty
;	COMDAT ??1CTAICmdRegen@@UAE@XZ
_TEXT	SEGMENT
??1CTAICmdRegen@@UAE@XZ PROC NEAR			; CTAICmdRegen::~CTAICmdRegen, COMDAT
; _this$ = ecx

; 11   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CTAICmdRegen@@6B@

; 12   : }

  00006	e9 00 00 00 00	 jmp	 ??1CTAICommand@@UAE@XZ	; CTAICommand::~CTAICommand
??1CTAICmdRegen@@UAE@XZ ENDP				; CTAICmdRegen::~CTAICmdRegen
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?GetDelay@CTAICmdRegen@@UAEKPAVCTMonster@@KKE@Z
_TEXT	SEGMENT
_pMON$ = 8						; size = 4
_dwEventHost$ = 12					; size = 4
_dwRHId$ = 16						; size = 4
_bRHType$ = 20						; size = 1
?GetDelay@CTAICmdRegen@@UAEKPAVCTMonster@@KKE@Z PROC NEAR ; CTAICmdRegen::GetDelay, COMDAT
; _this$ = ecx

; 16   : 	return pMON->m_pSPAWN->m_pSPAWN->m_dwDelay;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _pMON$[esp-4]
  00004	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [eax+232]
  0000a	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0000d	8b 42 58	 mov	 eax, DWORD PTR [edx+88]

; 17   : }

  00010	c2 10 00	 ret	 16			; 00000010H
?GetDelay@CTAICmdRegen@@UAEKPAVCTMonster@@KKE@Z ENDP	; CTAICmdRegen::GetDelay
_TEXT	ENDS
EXTRN	?CanRun@CTAICommand@@UAEEPAVCTMonster@@KKE@Z:NEAR ; CTAICommand::CanRun
; Function compile flags: /Ogty
;	COMDAT ?CanRun@CTAICmdRegen@@UAEEPAVCTMonster@@KKE@Z
_TEXT	SEGMENT
_pMON$ = 8						; size = 4
_dwEventHost$ = 12					; size = 4
_dwRHId$ = 16						; size = 4
_bRHType$ = 20						; size = 1
?CanRun@CTAICmdRegen@@UAEEPAVCTMonster@@KKE@Z PROC NEAR	; CTAICmdRegen::CanRun, COMDAT
; _this$ = ecx

; 21   : 	if( pMON->m_bStatus != OS_DISAPPEAR ||
; 22   :         !pMON->m_pSPAWN ||
; 23   : 		!pMON->m_pSPAWN->m_pSPAWN ||
; 24   : 		pMON->m_bRemove)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _pMON$[esp-4]
  00004	8a 90 cc 00 00
	00		 mov	 dl, BYTE PTR [eax+204]
  0000a	84 d2		 test	 dl, dl
  0000c	75 26		 jne	 SHORT $L175232
  0000e	8b 90 e8 00 00
	00		 mov	 edx, DWORD PTR [eax+232]
  00014	85 d2		 test	 edx, edx
  00016	74 1c		 je	 SHORT $L175232
  00018	56		 push	 esi
  00019	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001c	85 f6		 test	 esi, esi
  0001e	5e		 pop	 esi
  0001f	74 13		 je	 SHORT $L175232
  00021	8a 90 74 01 00
	00		 mov	 dl, BYTE PTR [eax+372]
  00027	84 d2		 test	 dl, dl
  00029	75 09		 jne	 SHORT $L175232

; 26   : 
; 27   : 	return CTAICommand::CanRun( pMON, dwEventHost, dwRHId, bRHType);

  0002b	89 44 24 04	 mov	 DWORD PTR _pMON$[esp-4], eax
  0002f	e9 00 00 00 00	 jmp	 ?CanRun@CTAICommand@@UAEEPAVCTMonster@@KKE@Z ; CTAICommand::CanRun
$L175232:

; 25   : 		return FALSE;

  00034	32 c0		 xor	 al, al

; 28   : }

  00036	c2 10 00	 ret	 16			; 00000010H
?CanRun@CTAICmdRegen@@UAEEPAVCTMonster@@KKE@Z ENDP	; CTAICmdRegen::CanRun
_TEXT	ENDS
PUBLIC	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z	; InterlockedExchangePointer
EXTRN	__imp__InterlockedExchange@8:NEAR
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_pNew$ = 12						; size = 4
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z PROC NEAR	; InterlockedExchangePointer, COMDAT

; 92   : 	return( reinterpret_cast<void*>(static_cast<LONG_PTR>(::InterlockedExchange(reinterpret_cast<LONG*>(pp), static_cast<LONG>(reinterpret_cast<LONG_PTR>(pNew))))) );

  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__InterlockedExchange@8
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ENDP	; InterlockedExchangePointer
_TEXT	ENDS
PUBLIC	?_AtlGetThreadACPFake@ATL@@YGIXZ		; ATL::_AtlGetThreadACPFake
EXTRN	__imp__GetACP@0:NEAR
EXTRN	__imp__GetLocaleInfoA@16:NEAR
EXTRN	__imp__GetThreadLocale@0:NEAR
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
; Function compile flags: /Ogty
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT
_szACP$ = -12						; size = 7
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPFake@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPFake, COMDAT

; 101  : {

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	56		 push	 esi
  00009	89 44 24 0c	 mov	 DWORD PTR __$ArrayPad$[esp+16], eax

; 102  : 	UINT nACP = 0;

  0000d	33 f6		 xor	 esi, esi

; 103  : 
; 104  : 	LCID lcidThread = ::GetThreadLocale();

  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetThreadLocale@0

; 105  : 
; 106  : 	char szACP[7];
; 107  : 	// GetLocaleInfoA will fail for a Unicode-only LCID, but those are only supported on 
; 108  : 	// Windows 2000.  Since Windows 2000 supports CP_THREAD_ACP, this code path is never
; 109  : 	// executed on Windows 2000.
; 110  : 	if (::GetLocaleInfoA(lcidThread, LOCALE_IDEFAULTANSICODEPAGE, szACP, 7) != 0)

  00015	6a 07		 push	 7
  00017	8d 4c 24 08	 lea	 ecx, DWORD PTR _szACP$[esp+20]
  0001b	51		 push	 ecx
  0001c	68 04 10 00 00	 push	 4100			; 00001004H
  00021	50		 push	 eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocaleInfoA@16
  00028	85 c0		 test	 eax, eax
  0002a	74 21		 je	 SHORT $L177689

; 111  : 	{
; 112  : 		char* pch = szACP;
; 113  : 		while (*pch != '\0')

  0002c	8a 44 24 04	 mov	 al, BYTE PTR _szACP$[esp+16]
  00030	84 c0		 test	 al, al
  00032	8d 4c 24 04	 lea	 ecx, DWORD PTR _szACP$[esp+16]
  00036	74 15		 je	 SHORT $L177689
$L58550:

; 114  : 		{
; 115  : 			nACP *= 10;
; 116  : 			nACP += *pch++ - '0';

  00038	0f be c0	 movsx	 eax, al
  0003b	8d 14 b6	 lea	 edx, DWORD PTR [esi+esi*4]
  0003e	41		 inc	 ecx
  0003f	8d 74 50 d0	 lea	 esi, DWORD PTR [eax+edx*2-48]
  00043	8a 01		 mov	 al, BYTE PTR [ecx]
  00045	84 c0		 test	 al, al
  00047	75 ef		 jne	 SHORT $L58550

; 117  : 		}
; 118  : 	}
; 119  : 	// Use the Default ANSI Code Page if we were unable to get the thread ACP or if one does not exist.
; 120  : 	if (nACP == 0)

  00049	85 f6		 test	 esi, esi
  0004b	75 14		 jne	 SHORT $L177690
$L177689:

; 121  : 		nACP = ::GetACP();

  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetACP@0
  00053	5e		 pop	 esi

; 122  : 
; 123  : 	return nACP;
; 124  : }

  00054	8b 4c 24 08	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+12]
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00060	c3		 ret	 0
$L177690:
  00061	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+16]
  00065	8b c6		 mov	 eax, esi
  00067	5e		 pop	 esi
  00068	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00070	c3		 ret	 0
?_AtlGetThreadACPFake@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPFake
_TEXT	ENDS
PUBLIC	?size@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEIXZ ; std::vector<CTMonster *,std::allocator<CTMonster *> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?size@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<CTMonster *,std::allocator<CTMonster *> >::size, COMDAT
; _this$ = ecx

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L177697
  00007	33 c0		 xor	 eax, eax

; 517  : 		}

  00009	c3		 ret	 0
$L177697:

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  0000a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2

; 517  : 		}

  00012	c3		 ret	 0
?size@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEIXZ ENDP ; std::vector<CTMonster *,std::allocator<CTMonster *> >::size
_TEXT	ENDS
PUBLIC	?_AtlGetThreadACPReal@ATL@@YGIXZ		; ATL::_AtlGetThreadACPReal
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetThreadACPReal@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPReal, COMDAT

; 128  : 	return( CP_THREAD_ACP );

  00000	b8 03 00 00 00	 mov	 eax, 3

; 129  : }

  00005	c3		 ret	 0
?_AtlGetThreadACPReal@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPReal
_TEXT	ENDS
EXTRN	__imp__GetVersionExA@4:NEAR
; Function compile flags: /Ogty
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT
_ver$ = -152						; size = 148
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPThunk@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPThunk, COMDAT

; 134  : {

  00000	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	89 84 24 94 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+152], eax

; 135  : 	OSVERSIONINFO ver;
; 136  : 	ATLGETTHREADACP pfnGetThreadACP;
; 137  : 
; 138  : 	ver.dwOSVersionInfoSize = sizeof( ver );
; 139  : 	::GetVersionEx( &ver );

  00012	8d 04 24	 lea	 eax, DWORD PTR _ver$[esp+152]
  00015	50		 push	 eax
  00016	c7 44 24 04 94
	00 00 00	 mov	 DWORD PTR _ver$[esp+156], 148 ; 00000094H
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4

; 140  : 	if( (ver.dwPlatformId == VER_PLATFORM_WIN32_NT) && (ver.dwMajorVersion >= 5) )

  00024	83 7c 24 10 02	 cmp	 DWORD PTR _ver$[esp+168], 2
  00029	75 0c		 jne	 SHORT $L58560
  0002b	83 7c 24 04 05	 cmp	 DWORD PTR _ver$[esp+156], 5

; 141  : 	{
; 142  : 		// On Win2K, CP_THREAD_ACP is supported
; 143  : 		pfnGetThreadACP = _AtlGetThreadACPReal;

  00030	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?_AtlGetThreadACPReal@ATL@@YGIXZ ; ATL::_AtlGetThreadACPReal
  00035	73 05		 jae	 SHORT $L58561
$L58560:

; 144  : 	}
; 145  : 	else
; 146  : 	{
; 147  : 		pfnGetThreadACP = _AtlGetThreadACPFake;

  00037	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?_AtlGetThreadACPFake@ATL@@YGIXZ ; ATL::_AtlGetThreadACPFake
$L58561:

; 148  : 	}
; 149  : 	InterlockedExchangePointer( reinterpret_cast< void** >(&g_pfnGetThreadACP), pfnGetThreadACP );

  0003c	50		 push	 eax
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedExchange@8

; 150  : 
; 151  : 	return( g_pfnGetThreadACP() );

  00048	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP

; 152  : }

  0004e	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+152]
  00055	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005a	81 c4 98 00 00
	00		 add	 esp, 152		; 00000098H
  00060	c3		 ret	 0
?_AtlGetThreadACPThunk@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPThunk
_TEXT	ENDS
PUBLIC	?empty@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBE_NXZ ; std::vector<CTMonster *,std::allocator<CTMonster *> >::empty
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?empty@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBE_NXZ PROC NEAR ; std::vector<CTMonster *,std::allocator<CTMonster *> >::empty, COMDAT
; _this$ = ecx

; 526  : 		return (size() == 0);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 0c		 jne	 SHORT $L177717
  00007	33 c0		 xor	 eax, eax
  00009	33 c9		 xor	 ecx, ecx
  0000b	85 c0		 test	 eax, eax
  0000d	0f 94 c1	 sete	 cl
  00010	8a c1		 mov	 al, cl

; 527  : 		}

  00012	c3		 ret	 0

; 526  : 		return (size() == 0);

$L177717:
  00013	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00016	2b c2		 sub	 eax, edx
  00018	c1 f8 02	 sar	 eax, 2
  0001b	33 c9		 xor	 ecx, ecx
  0001d	85 c0		 test	 eax, eax
  0001f	0f 94 c1	 sete	 cl
  00022	8a c1		 mov	 al, cl

; 527  : 		}

  00024	c3		 ret	 0
?empty@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBE_NXZ ENDP ; std::vector<CTMonster *,std::allocator<CTMonster *> >::empty
_TEXT	ENDS
PUBLIC	?LogEvent@?$CAtlServiceModuleT@VCTMapSvrModule@@$0GE@@ATL@@QAAXPBDZZ ; ATL::CAtlServiceModuleT<CTMapSvrModule,100>::LogEvent
EXTRN	_puts:NEAR
EXTRN	__imp__DeregisterEventSource@4:NEAR
EXTRN	__imp__RegisterEventSourceA@8:NEAR
EXTRN	__imp__ReportEventA@36:NEAR
EXTRN	_vsprintf:NEAR
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlbase.h
;	COMDAT ?LogEvent@?$CAtlServiceModuleT@VCTMapSvrModule@@$0GE@@ATL@@QAAXPBDZZ
_TEXT	SEGMENT
_lpszStrings$ = -264					; size = 4
_chMsg$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_this$ = 8						; size = 4
_pszFormat$ = 12					; size = 4
?LogEvent@?$CAtlServiceModuleT@VCTMapSvrModule@@$0GE@@ATL@@QAAXPBDZZ PROC NEAR ; ATL::CAtlServiceModuleT<CTMapSvrModule,100>::LogEvent, COMDAT

; 3835 : 	{

  00000	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie

; 3836 : 		TCHAR chMsg[256];
; 3837 : 		HANDLE hEventSource;
; 3838 : 		LPTSTR lpszStrings[1];
; 3839 : 		va_list pArg;
; 3840 : 
; 3841 : 		va_start(pArg, pszFormat);
; 3842 : 		_vstprintf(chMsg, pszFormat, pArg);

  0000b	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR _pszFormat$[esp+260]
  00012	89 84 24 04 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+264], eax
  00019	56		 push	 esi
  0001a	8d 84 24 18 01
	00 00		 lea	 eax, DWORD PTR _pszFormat$[esp+268]
  00021	50		 push	 eax
  00022	51		 push	 ecx
  00023	8d 54 24 10	 lea	 edx, DWORD PTR _chMsg$[esp+276]
  00027	52		 push	 edx
  00028	e8 00 00 00 00	 call	 _vsprintf

; 3843 : 		va_end(pArg);
; 3844 : 
; 3845 : 		lpszStrings[0] = chMsg;
; 3846 : 
; 3847 : 		if (!m_bService)

  0002d	8b b4 24 1c 01
	00 00		 mov	 esi, DWORD PTR _this$[esp+276]
  00034	8d 44 24 14	 lea	 eax, DWORD PTR _chMsg$[esp+280]
  00038	89 44 24 10	 mov	 DWORD PTR _lpszStrings$[esp+280], eax
  0003c	8b 86 4c 01 00
	00		 mov	 eax, DWORD PTR [esi+332]
  00042	83 c4 0c	 add	 esp, 12			; 0000000cH
  00045	85 c0		 test	 eax, eax
  00047	75 0d		 jne	 SHORT $L176161

; 3848 : 		{
; 3849 : 			// Not running as a service, so print out the error message 
; 3850 : 			// to the console if possible
; 3851 : 			_putts(chMsg);

  00049	8d 4c 24 08	 lea	 ecx, DWORD PTR _chMsg$[esp+268]
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 _puts
  00053	83 c4 04	 add	 esp, 4
$L176161:

; 3852 : 		}
; 3853 : 
; 3854 : 		/* Get a handle to use with ReportEvent(). */
; 3855 : 		hEventSource = RegisterEventSource(NULL, m_szServiceName);

  00056	83 c6 2c	 add	 esi, 44			; 0000002cH
  00059	56		 push	 esi
  0005a	6a 00		 push	 0
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterEventSourceA@8
  00062	8b f0		 mov	 esi, eax

; 3856 : 		if (hEventSource != NULL)

  00064	85 f6		 test	 esi, esi
  00066	74 21		 je	 SHORT $L176162

; 3857 : 		{
; 3858 : 			/* Write to event log. */
; 3859 : 			ReportEvent(hEventSource, EVENTLOG_INFORMATION_TYPE, 0, 0, NULL, 1, 0, (LPCTSTR*) &lpszStrings[0], NULL);

  00068	6a 00		 push	 0
  0006a	8d 54 24 08	 lea	 edx, DWORD PTR _lpszStrings$[esp+272]
  0006e	52		 push	 edx
  0006f	6a 00		 push	 0
  00071	6a 01		 push	 1
  00073	6a 00		 push	 0
  00075	6a 00		 push	 0
  00077	6a 00		 push	 0
  00079	6a 04		 push	 4
  0007b	56		 push	 esi
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReportEventA@36

; 3860 : 			DeregisterEventSource(hEventSource);

  00082	56		 push	 esi
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeregisterEventSource@4
$L176162:

; 3861 : 		}
; 3862 : 	}

  00089	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+268]
  00090	5e		 pop	 esi
  00091	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00096	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  0009c	c3		 ret	 0
?LogEvent@?$CAtlServiceModuleT@VCTMapSvrModule@@$0GE@@ATL@@QAAXPBDZZ ENDP ; ATL::CAtlServiceModuleT<CTMapSvrModule,100>::LogEvent
_TEXT	ENDS
PUBLIC	?size@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QBEIXZ ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?size@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::size, COMDAT
; _this$ = ecx

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L177728
  00007	33 c0		 xor	 eax, eax

; 517  : 		}

  00009	c3		 ret	 0
$L177728:

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  0000a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2

; 517  : 		}

  00012	c3		 ret	 0
?size@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::size
_TEXT	ENDS
PUBLIC	?empty@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QBE_NXZ ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::empty
; Function compile flags: /Ogty
;	COMDAT ?empty@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QBE_NXZ PROC NEAR ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::empty, COMDAT
; _this$ = ecx

; 526  : 		return (size() == 0);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 0c		 jne	 SHORT $L177738
  00007	33 c0		 xor	 eax, eax
  00009	33 c9		 xor	 ecx, ecx
  0000b	85 c0		 test	 eax, eax
  0000d	0f 94 c1	 sete	 cl
  00010	8a c1		 mov	 al, cl

; 527  : 		}

  00012	c3		 ret	 0

; 526  : 		return (size() == 0);

$L177738:
  00013	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00016	2b c2		 sub	 eax, edx
  00018	c1 f8 02	 sar	 eax, 2
  0001b	33 c9		 xor	 ecx, ecx
  0001d	85 c0		 test	 eax, eax
  0001f	0f 94 c1	 sete	 cl
  00022	8a c1		 mov	 al, cl

; 527  : 		}

  00024	c3		 ret	 0
?empty@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QBE_NXZ ENDP ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::empty
_TEXT	ENDS
PUBLIC	??0?$pair@$$CBGPAVCTSkill@@@std@@QAE@ABGABQAVCTSkill@@@Z ; std::pair<unsigned short const ,CTSkill *>::pair<unsigned short const ,CTSkill *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\utility
;	COMDAT ??0?$pair@$$CBGPAVCTSkill@@@std@@QAE@ABGABQAVCTSkill@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@$$CBGPAVCTSkill@@@std@@QAE@ABGABQAVCTSkill@@@Z PROC NEAR ; std::pair<unsigned short const ,CTSkill *>::pair<unsigned short const ,CTSkill *>, COMDAT
; _this$ = ecx

; 34   : 		{	// construct from specified values

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Val1$[esp-4]
  00006	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00009	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val2$[esp-4]
  0000d	66 89 10	 mov	 WORD PTR [eax], dx
  00010	8b 11		 mov	 edx, DWORD PTR [ecx]
  00012	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 35   : 		}

  00015	c2 08 00	 ret	 8
??0?$pair@$$CBGPAVCTSkill@@@std@@QAE@ABGABQAVCTSkill@@@Z ENDP ; std::pair<unsigned short const ,CTSkill *>::pair<unsigned short const ,CTSkill *>
_TEXT	ENDS
PUBLIC	??R?$less@G@std@@QBE_NABG0@Z			; std::less<unsigned short>::operator()
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\functional
;	COMDAT ??R?$less@G@std@@QBE_NABG0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@G@std@@QBE_NABG0@Z PROC NEAR			; std::less<unsigned short>::operator(), COMDAT
; _this$ = ecx

; 139  : 		return (_Left < _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	66 8b 08	 mov	 cx, WORD PTR [eax]
  00007	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000b	66 3b 0a	 cmp	 cx, WORD PTR [edx]
  0000e	1b c0		 sbb	 eax, eax
  00010	f7 d8		 neg	 eax

; 140  : 		}

  00012	c2 08 00	 ret	 8
??R?$less@G@std@@QBE_NABG0@Z ENDP			; std::less<unsigned short>::operator()
_TEXT	ENDS
PUBLIC	?_Isnil@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Isnil
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Isnil, COMDAT

; 137  : 		return ((_Charref)(*_Pnode)._Isnil);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 15	 add	 eax, 21			; 00000015H

; 138  : 		}

  00007	c3		 ret	 0
?_Isnil@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Isnil
_TEXT	ENDS
PUBLIC	?_Left@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Left
; Function compile flags: /Ogty
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Left, COMDAT

; 147  : 		return ((_Nodepref)(*_Pnode)._Left);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 148  : 		}

  00004	c3		 ret	 0
?_Left@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Left
_TEXT	ENDS
PUBLIC	?_Right@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Right
; Function compile flags: /Ogty
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Right, COMDAT

; 157  : 		return ((_Nodepref)(*_Pnode)._Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 08	 add	 eax, 8

; 158  : 		}

  00007	c3		 ret	 0
?_Right@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Right
_TEXT	ENDS
PUBLIC	?_Kfn@?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@SAABGABU?$pair@$$CBGPAVCTSkill@@@2@@Z ; std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0>::_Kfn
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\map
;	COMDAT ?_Kfn@?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@SAABGABU?$pair@$$CBGPAVCTSkill@@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@SAABGABU?$pair@$$CBGPAVCTSkill@@@2@@Z PROC NEAR ; std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0>::_Kfn, COMDAT

; 64   : 		return (_Val.first);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val$[esp-4]

; 65   : 		}

  00004	c3		 ret	 0
?_Kfn@?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@SAABGABU?$pair@$$CBGPAVCTSkill@@@2@@Z ENDP ; std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0>::_Kfn
_TEXT	ENDS
PUBLIC	??8const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::operator==
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::operator==, COMDAT
; _this$ = ecx

; 241  : 			return (_Ptr == _Right._Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	f7 d8		 neg	 eax
  0000a	1b c0		 sbb	 eax, eax
  0000c	40		 inc	 eax

; 242  : 			}

  0000d	c2 04 00	 ret	 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::operator==
_TEXT	ENDS
PUBLIC	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::_Mynode
; Function compile flags: /Ogty
;	COMDAT ?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@3@XZ
_TEXT	SEGMENT
?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@3@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::_Mynode, COMDAT
; _this$ = ecx

; 284  : 			return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 285  : 			}

  00002	c3		 ret	 0
?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@3@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::_Mynode
_TEXT	ENDS
PUBLIC	??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@1@AB_N@Z ; std::pair<std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::iterator,bool>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\utility
;	COMDAT ??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@1@AB_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@1@AB_N@Z PROC NEAR ; std::pair<std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::iterator,bool>, COMDAT
; _this$ = ecx

; 34   : 		{	// construct from specified values

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Val1$[esp-4]
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val2$[esp-4]
  0000c	89 10		 mov	 DWORD PTR [eax], edx
  0000e	8a 11		 mov	 dl, BYTE PTR [ecx]
  00010	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 35   : 		}

  00013	c2 08 00	 ret	 8
??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@1@AB_N@Z ENDP ; std::pair<std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::iterator,bool>
_TEXT	ENDS
PUBLIC	??8const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::const_iterator::operator==
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::const_iterator::operator==, COMDAT
; _this$ = ecx

; 241  : 			return (_Ptr == _Right._Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	f7 d8		 neg	 eax
  0000a	1b c0		 sbb	 eax, eax
  0000c	40		 inc	 eax

; 242  : 			}

  0000d	c2 04 00	 ret	 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::const_iterator::operator==
_TEXT	ENDS
PUBLIC	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::const_iterator::_Mynode
; Function compile flags: /Ogty
;	COMDAT ?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@3@XZ
_TEXT	SEGMENT
?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@3@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::const_iterator::_Mynode, COMDAT
; _this$ = ecx

; 284  : 			return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 285  : 			}

  00002	c3		 ret	 0
?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@3@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::const_iterator::_Mynode
_TEXT	ENDS
PUBLIC	??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::const_iterator::const_iterator
; Function compile flags: /Ogty
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 193  : 			{	// construct with null node pointer

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 194  : 			}

  00008	c3		 ret	 0
??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??8const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::const_iterator::operator==
; Function compile flags: /Ogty
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::const_iterator::operator==, COMDAT
; _this$ = ecx

; 241  : 			return (_Ptr == _Right._Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	f7 d8		 neg	 eax
  0000a	1b c0		 sbb	 eax, eax
  0000c	40		 inc	 eax

; 242  : 			}

  0000d	c2 04 00	 ret	 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::const_iterator::operator==
_TEXT	ENDS
PUBLIC	?_Color@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Color
; Function compile flags: /Ogty
;	COMDAT ?_Color@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Color, COMDAT

; 132  : 		return ((_Charref)(*_Pnode)._Color);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 14	 add	 eax, 20			; 00000014H

; 133  : 		}

  00007	c3		 ret	 0
?_Color@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Color
_TEXT	ENDS
PUBLIC	?_Parent@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Parent
; Function compile flags: /Ogty
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Parent, COMDAT

; 152  : 		return ((_Nodepref)(*_Pnode)._Parent);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 153  : 		}

  00007	c3		 ret	 0
?_Parent@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Parent
_TEXT	ENDS
PUBLIC	?_Myval@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBGPAVCTSkill@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Myval
; Function compile flags: /Ogty
;	COMDAT ?_Myval@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBGPAVCTSkill@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBGPAVCTSkill@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Myval, COMDAT

; 162  : 		return ((_Vref)(*_Pnode)._Myval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 0c	 add	 eax, 12			; 0000000cH

; 163  : 		}

  00007	c3		 ret	 0
?_Myval@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBGPAVCTSkill@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Myval
_TEXT	ENDS
PUBLIC	?_Lmost@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Lmost
; Function compile flags: /Ogty
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 1005 : 		return (_Left(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1006 : 		}

  00003	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Lmost
_TEXT	ENDS
PUBLIC	?_Rmost@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Rmost
; Function compile flags: /Ogty
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 1049 : 		return (_Right(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 08	 add	 eax, 8

; 1050 : 		}

  00006	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Rmost
_TEXT	ENDS
PUBLIC	?_Isnil@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Isnil
; Function compile flags: /Ogty
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Isnil, COMDAT

; 137  : 		return ((_Charref)(*_Pnode)._Isnil);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 15	 add	 eax, 21			; 00000015H

; 138  : 		}

  00007	c3		 ret	 0
?_Isnil@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Isnil
_TEXT	ENDS
PUBLIC	?_Left@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Left
; Function compile flags: /Ogty
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Left, COMDAT

; 147  : 		return ((_Nodepref)(*_Pnode)._Left);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 148  : 		}

  00004	c3		 ret	 0
?_Left@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Left
_TEXT	ENDS
PUBLIC	?_Parent@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Parent
; Function compile flags: /Ogty
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Parent, COMDAT

; 152  : 		return ((_Nodepref)(*_Pnode)._Parent);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 153  : 		}

  00007	c3		 ret	 0
?_Parent@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Parent
_TEXT	ENDS
PUBLIC	?_Right@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Right
; Function compile flags: /Ogty
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Right, COMDAT

; 157  : 		return ((_Nodepref)(*_Pnode)._Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 08	 add	 eax, 8

; 158  : 		}

  00007	c3		 ret	 0
?_Right@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Right
_TEXT	ENDS
PUBLIC	?_Myval@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBEPAVCTItem@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Myval
; Function compile flags: /Ogty
;	COMDAT ?_Myval@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBEPAVCTItem@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBEPAVCTItem@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Myval, COMDAT

; 162  : 		return ((_Vref)(*_Pnode)._Myval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 0c	 add	 eax, 12			; 0000000cH

; 163  : 		}

  00007	c3		 ret	 0
?_Myval@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBEPAVCTItem@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Myval
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Node>::deallocate
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@I@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	?_Myval@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBGPAVCTMonSpawn@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Myval
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Myval@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBGPAVCTMonSpawn@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBGPAVCTMonSpawn@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Myval, COMDAT

; 162  : 		return ((_Vref)(*_Pnode)._Myval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 0c	 add	 eax, 12			; 0000000cH

; 163  : 		}

  00007	c3		 ret	 0
?_Myval@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBGPAVCTMonSpawn@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Myval
_TEXT	ENDS
PUBLIC	?_Kfn@?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@SAABGABU?$pair@$$CBGPAVCTMonSpawn@@@2@@Z ; std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0>::_Kfn
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\map
;	COMDAT ?_Kfn@?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@SAABGABU?$pair@$$CBGPAVCTMonSpawn@@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@SAABGABU?$pair@$$CBGPAVCTMonSpawn@@@2@@Z PROC NEAR ; std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0>::_Kfn, COMDAT

; 64   : 		return (_Val.first);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val$[esp-4]

; 65   : 		}

  00004	c3		 ret	 0
?_Kfn@?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@SAABGABU?$pair@$$CBGPAVCTMonSpawn@@@2@@Z ENDP ; std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0>::_Kfn
_TEXT	ENDS
PUBLIC	??0const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::const_iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 200  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 201  : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??0const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::const_iterator::const_iterator
; Function compile flags: /Ogty
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 200  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 201  : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::const_iterator::const_iterator
; Function compile flags: /Ogty
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 200  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 201  : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??Yiterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAV012@H@Z ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::operator+=
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Yiterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Yiterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::operator+=, COMDAT
; _this$ = ecx

; 255  : 			{	// increment by integer

  00000	8b c1		 mov	 eax, ecx

; 256  : 			this->_Myptr += _Off;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  0000d	01 10		 add	 DWORD PTR [eax], edx

; 257  : 			return (*this);
; 258  : 			}

  0000f	c2 04 00	 ret	 4
??Yiterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::operator+=
_TEXT	ENDS
PUBLIC	??Ziterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAV012@H@Z ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::operator-=
; Function compile flags: /Ogty
;	COMDAT ??Ziterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Ziterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::operator-=, COMDAT
; _this$ = ecx

; 267  : 			{	// decrement by integer

  00000	8b c1		 mov	 eax, ecx

; 268  : 			return (*this += -_Off);

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8b 10		 mov	 edx, DWORD PTR [eax]
  00008	f7 d9		 neg	 ecx
  0000a	c1 e1 02	 shl	 ecx, 2
  0000d	03 d1		 add	 edx, ecx
  0000f	89 10		 mov	 DWORD PTR [eax], edx

; 269  : 			}

  00011	c2 04 00	 ret	 4
??Ziterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::operator-=
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEABQAVCTMonster@@XZ ; std::vector<CTMonster *,std::allocator<CTMonster *> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEABQAVCTMonster@@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEABQAVCTMonster@@XZ PROC NEAR ; std::vector<CTMonster *,std::allocator<CTMonster *> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 80   : 
; 81   : 
; 82   : 			return (*_Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 83   : 			}

  00002	c3		 ret	 0
??Dconst_iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEABQAVCTMonster@@XZ ENDP ; std::vector<CTMonster *,std::allocator<CTMonster *> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	??Yiterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QAEAAV012@H@Z ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::iterator::operator+=
; Function compile flags: /Ogty
;	COMDAT ??Yiterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Yiterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::iterator::operator+=, COMDAT
; _this$ = ecx

; 255  : 			{	// increment by integer

  00000	8b c1		 mov	 eax, ecx

; 256  : 			this->_Myptr += _Off;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  0000d	01 10		 add	 DWORD PTR [eax], edx

; 257  : 			return (*this);
; 258  : 			}

  0000f	c2 04 00	 ret	 4
??Yiterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::iterator::operator+=
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QBEABQAUtagTMONSPAWN@@XZ ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QBEABQAUtagTMONSPAWN@@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QBEABQAUtagTMONSPAWN@@XZ PROC NEAR ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 80   : 
; 81   : 
; 82   : 			return (*_Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 83   : 			}

  00002	c3		 ret	 0
??Dconst_iterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QBEABQAUtagTMONSPAWN@@XZ ENDP ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@std@@QBEIXZ ; std::allocator<std::pair<unsigned short const ,CTSkill *> >::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?max_size@?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@std@@QBEIXZ PROC NEAR ; std::allocator<std::pair<unsigned short const ,CTSkill *> >::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 159  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@std@@QBEIXZ ENDP ; std::allocator<std::pair<unsigned short const ,CTSkill *> >::max_size
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Node>::deallocate
; Function compile flags: /Ogty
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@I@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	?_Isnil@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Isnil
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Isnil, COMDAT

; 137  : 		return ((_Charref)(*_Pnode)._Isnil);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 15	 add	 eax, 21			; 00000015H

; 138  : 		}

  00007	c3		 ret	 0
?_Isnil@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Isnil
_TEXT	ENDS
PUBLIC	?_Left@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Left
; Function compile flags: /Ogty
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Left, COMDAT

; 147  : 		return ((_Nodepref)(*_Pnode)._Left);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 148  : 		}

  00004	c3		 ret	 0
?_Left@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Left
_TEXT	ENDS
PUBLIC	?_Right@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Right
; Function compile flags: /Ogty
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Right, COMDAT

; 157  : 		return ((_Nodepref)(*_Pnode)._Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 08	 add	 eax, 8

; 158  : 		}

  00007	c3		 ret	 0
?_Right@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Right
_TEXT	ENDS
PUBLIC	??0const_iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE@PAPAVCTMonster@@@Z ; std::vector<CTMonster *,std::allocator<CTMonster *> >::const_iterator::const_iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0const_iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE@PAPAVCTMonster@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0const_iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE@PAPAVCTMonster@@@Z PROC NEAR ; std::vector<CTMonster *,std::allocator<CTMonster *> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 73   : 		const_iterator(_Tptr _Ptr)

  00000	8b c1		 mov	 eax, ecx

; 74   : 			{	// construct with pointer _Ptr
; 75   : 			_Myptr = _Ptr;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 76   : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE@PAPAVCTMonster@@@Z ENDP ; std::vector<CTMonster *,std::allocator<CTMonster *> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??0const_iterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QAE@PAPAUtagTMONSPAWN@@@Z ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::const_iterator::const_iterator
; Function compile flags: /Ogty
;	COMDAT ??0const_iterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QAE@PAPAUtagTMONSPAWN@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0const_iterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QAE@PAPAUtagTMONSPAWN@@@Z PROC NEAR ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 73   : 		const_iterator(_Tptr _Ptr)

  00000	8b c1		 mov	 eax, ecx

; 74   : 			{	// construct with pointer _Ptr
; 75   : 			_Myptr = _Ptr;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 76   : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QAE@PAPAUtagTMONSPAWN@@@Z ENDP ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??0_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBGPAVCTSkill@@@2@D@Z ; std::_Tree_nod<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Node::_Node
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBGPAVCTSkill@@@2@D@Z
_TEXT	SEGMENT
__Larg$ = 8						; size = 4
__Parg$ = 12						; size = 4
__Rarg$ = 16						; size = 4
__Val$ = 20						; size = 4
__Carg$ = 24						; size = 1
??0_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBGPAVCTSkill@@@2@D@Z PROC NEAR ; std::_Tree_nod<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Node::_Node, COMDAT
; _this$ = ecx

; 40   : 			{	// construct a node with value

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Parg$[esp-4]
  00004	8b c1		 mov	 eax, ecx
  00006	8b 4c 24 04	 mov	 ecx, DWORD PTR __Larg$[esp-4]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Rarg$[esp-4]
  00010	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00013	8b 4c 24 10	 mov	 ecx, DWORD PTR __Val$[esp-4]
  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001c	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  0001f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00022	8a 54 24 14	 mov	 dl, BYTE PTR __Carg$[esp-4]
  00026	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00029	88 50 14	 mov	 BYTE PTR [eax+20], dl
  0002c	c6 40 15 00	 mov	 BYTE PTR [eax+21], 0

; 41   : 			}

  00030	c2 14 00	 ret	 20			; 00000014H
??0_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBGPAVCTSkill@@@2@D@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Node::_Node
_TEXT	ENDS
PUBLIC	?_Max@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Max
; Function compile flags: /Ogty
;	COMDAT ?_Max@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Max, COMDAT

; 1035 : 		while (!_Isnil(_Right(_Pnode)))

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00007	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  0000a	84 d2		 test	 dl, dl
  0000c	75 0e		 jne	 SHORT $L176703
  0000e	8b ff		 npad	 2
$L176702:

; 1036 : 			_Pnode = _Right(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00015	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00018	84 d2		 test	 dl, dl
  0001a	74 f4		 je	 SHORT $L176702
$L176703:

; 1037 : 		return (_Pnode);
; 1038 : 		}

  0001c	c3		 ret	 0
?_Max@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Max
_TEXT	ENDS
PUBLIC	?_Min@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Min
; Function compile flags: /Ogty
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Min, COMDAT

; 1042 : 		while (!_Isnil(_Left(_Pnode)))

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	8b 08		 mov	 ecx, DWORD PTR [eax]
  00006	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00009	84 d2		 test	 dl, dl
  0000b	75 0e		 jne	 SHORT $L176707
  0000d	8d 49 00	 npad	 3
$L176706:

; 1043 : 			_Pnode = _Left(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00017	84 d2		 test	 dl, dl
  00019	74 f5		 je	 SHORT $L176706
$L176707:

; 1044 : 		return (_Pnode);
; 1045 : 		}

  0001b	c3		 ret	 0
?_Min@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Min
_TEXT	ENDS
PUBLIC	?_Parent@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Parent
; Function compile flags: /Ogty
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Parent, COMDAT

; 152  : 		return ((_Nodepref)(*_Pnode)._Parent);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 153  : 		}

  00007	c3		 ret	 0
?_Parent@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Parent
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@0@@Z ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Node>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@0@@Z PROC NEAR ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Node>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@0@@Z ENDP ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Node>
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
; Function compile flags: /Ogty
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@0@IPAU120@@Z PROC NEAR ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Node>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00007	c1 e0 03	 shl	 eax, 3
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	83 c4 04	 add	 esp, 4

; 35   : 	}

  00013	c3		 ret	 0
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Node>
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__P$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC NEAR				; operator new, COMDAT

; 109  :         {return (_P); }

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __P$[esp-4]
  00004	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogty
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC NEAR					; operator delete, COMDAT

; 112  :         {return; }

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC NEAR	; std::char_traits<char>::assign, COMDAT

; 331  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 332  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogty
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC NEAR		; std::char_traits<char>::length, COMDAT

; 352  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$L177929:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $L177929
  0000e	2b c2		 sub	 eax, edx

; 353  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
; Function compile flags: /Ogty
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::copy, COMDAT

; 358  : 		return ((_Elem *)::memcpy(_First1, _First2, _Count));

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR __First2$[esp]
  00009	57		 push	 edi
  0000a	8b 7c 24 0c	 mov	 edi, DWORD PTR __First1$[esp+4]
  0000e	8b c1		 mov	 eax, ecx
  00010	8b d7		 mov	 edx, edi
  00012	c1 e9 02	 shr	 ecx, 2
  00015	f3 a5		 rep movsd
  00017	8b c8		 mov	 ecx, eax
  00019	83 e1 03	 and	 ecx, 3
  0001c	f3 a4		 rep movsb
  0001e	5f		 pop	 edi
  0001f	8b c2		 mov	 eax, edx
  00021	5e		 pop	 esi

; 359  : 		}

  00022	c3		 ret	 0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	_memmove:NEAR
; Function compile flags: /Ogty
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::move, COMDAT

; 370  : 		return ((_Elem *)::memmove(_First1, _First2, _Count));

  00000	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	_cosf
EXTRN	__fltused:NEAR
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\math.h
;	COMDAT _cosf
_TEXT	SEGMENT
__X$ = 8						; size = 4
_cosf	PROC NEAR					; COMDAT

; 444  :         {return ((float)cos((double)_X)); }

  00000	d9 44 24 04	 fld	 DWORD PTR __X$[esp-4]
  00004	d9 ff		 fcos
  00006	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
PUBLIC	_sinf
; Function compile flags: /Ogty
;	COMDAT _sinf
_TEXT	SEGMENT
__X$ = 8						; size = 4
_sinf	PROC NEAR					; COMDAT

; 466  :         {return ((float)sin((double)_X)); }

  00000	d9 44 24 04	 fld	 DWORD PTR __X$[esp-4]
  00004	d9 fe		 fsin
  00006	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1109 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1110 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ ; std::vector<unsigned short,std::allocator<unsigned short> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ PROC NEAR ; std::vector<unsigned short,std::allocator<unsigned short> >::size, COMDAT
; _this$ = ecx

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L177950
  00007	33 c0		 xor	 eax, eax

; 517  : 		}

  00009	c3		 ret	 0
$L177950:

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  0000a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000d	2b c2		 sub	 eax, edx
  0000f	d1 f8		 sar	 eax, 1

; 517  : 		}

  00011	c3		 ret	 0
?size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ ENDP	; std::vector<unsigned short,std::allocator<unsigned short> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L177955
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  00009	c3		 ret	 0
$L177955:

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC NEAR		; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?size@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QBEIXZ ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?size@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::size, COMDAT
; _this$ = ecx

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L177963
  00007	33 c0		 xor	 eax, eax

; 517  : 		}

  00009	c3		 ret	 0
$L177963:

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  0000a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2

; 517  : 		}

  00012	c3		 ret	 0
?size@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L177968
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  00009	c3		 ret	 0
$L177968:

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC NEAR	; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	??Yiterator@?$vector@GV?$allocator@G@std@@@std@@QAEAAV012@H@Z ; std::vector<unsigned short,std::allocator<unsigned short> >::iterator::operator+=
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Yiterator@?$vector@GV?$allocator@G@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Yiterator@?$vector@GV?$allocator@G@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<unsigned short,std::allocator<unsigned short> >::iterator::operator+=, COMDAT
; _this$ = ecx

; 255  : 			{	// increment by integer

  00000	8b c1		 mov	 eax, ecx

; 256  : 			this->_Myptr += _Off;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  00009	01 10		 add	 DWORD PTR [eax], edx

; 257  : 			return (*this);
; 258  : 			}

  0000b	c2 04 00	 ret	 4
??Yiterator@?$vector@GV?$allocator@G@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<unsigned short,std::allocator<unsigned short> >::iterator::operator+=
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$vector@GV?$allocator@G@std@@@std@@QBEABGXZ ; std::vector<unsigned short,std::allocator<unsigned short> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$vector@GV?$allocator@G@std@@@std@@QBEABGXZ
_TEXT	SEGMENT
??Dconst_iterator@?$vector@GV?$allocator@G@std@@@std@@QBEABGXZ PROC NEAR ; std::vector<unsigned short,std::allocator<unsigned short> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 80   : 
; 81   : 
; 82   : 			return (*_Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 83   : 			}

  00002	c3		 ret	 0
??Dconst_iterator@?$vector@GV?$allocator@G@std@@@std@@QBEABGXZ ENDP ; std::vector<unsigned short,std::allocator<unsigned short> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QBEABQAUtagTMAPMON@@XZ ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QBEABQAUtagTMAPMON@@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QBEABQAUtagTMAPMON@@XZ PROC NEAR ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 80   : 
; 81   : 
; 82   : 			return (*_Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 83   : 			}

  00002	c3		 ret	 0
??Dconst_iterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QBEABQAUtagTMAPMON@@XZ ENDP ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1494 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi

; 1495 : 		if (_Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00001	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  00004	83 fe 10	 cmp	 esi, 16			; 00000010H
  00007	57		 push	 edi
  00008	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0000b	72 04		 jb	 SHORT $L177990
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	eb 02		 jmp	 SHORT $L177991
$L177990:
  00011	8b d0		 mov	 edx, eax
$L177991:
  00013	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00017	3b fa		 cmp	 edi, edx
  00019	72 17		 jb	 SHORT $L150517
  0001b	83 fe 10	 cmp	 esi, 16			; 00000010H
  0001e	72 02		 jb	 SHORT $L177998
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
$L177998:
  00022	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00025	03 c8		 add	 ecx, eax
  00027	3b cf		 cmp	 ecx, edi
  00029	76 07		 jbe	 SHORT $L150517
  0002b	5f		 pop	 edi

; 1497 : 		else
; 1498 : 			return (true);

  0002c	b0 01		 mov	 al, 1
  0002e	5e		 pop	 esi

; 1499 : 		}

  0002f	c2 04 00	 ret	 4
$L150517:
  00032	5f		 pop	 edi

; 1496 : 			return (false);	// don't ask

  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 1499 : 		}

  00036	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	??0const_iterator@?$vector@GV?$allocator@G@std@@@std@@QAE@PAG@Z ; std::vector<unsigned short,std::allocator<unsigned short> >::const_iterator::const_iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0const_iterator@?$vector@GV?$allocator@G@std@@@std@@QAE@PAG@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0const_iterator@?$vector@GV?$allocator@G@std@@@std@@QAE@PAG@Z PROC NEAR ; std::vector<unsigned short,std::allocator<unsigned short> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 73   : 		const_iterator(_Tptr _Ptr)

  00000	8b c1		 mov	 eax, ecx

; 74   : 			{	// construct with pointer _Ptr
; 75   : 			_Myptr = _Ptr;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 76   : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$vector@GV?$allocator@G@std@@@std@@QAE@PAG@Z ENDP ; std::vector<unsigned short,std::allocator<unsigned short> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??Yiterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QAEAAV012@H@Z ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::iterator::operator+=
; Function compile flags: /Ogty
;	COMDAT ??Yiterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Yiterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::iterator::operator+=, COMDAT
; _this$ = ecx

; 255  : 			{	// increment by integer

  00000	8b c1		 mov	 eax, ecx

; 256  : 			this->_Myptr += _Off;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  0000d	01 10		 add	 DWORD PTR [eax], edx

; 257  : 			return (*this);
; 258  : 			}

  0000f	c2 04 00	 ret	 4
??Yiterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::iterator::operator+=
_TEXT	ENDS
PUBLIC	??0const_iterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QAE@PAPAUtagTMAPMON@@@Z ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::const_iterator::const_iterator
; Function compile flags: /Ogty
;	COMDAT ??0const_iterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QAE@PAPAUtagTMAPMON@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0const_iterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QAE@PAPAUtagTMAPMON@@@Z PROC NEAR ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 73   : 		const_iterator(_Tptr _Ptr)

  00000	8b c1		 mov	 eax, ecx

; 74   : 			{	// construct with pointer _Ptr
; 75   : 			_Myptr = _Ptr;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 76   : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QAE@PAPAUtagTMAPMON@@@Z ENDP ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC NEAR			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC NEAR		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 159  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogty
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC NEAR		; std::_Allocate<char>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 35   : 	}

  0000d	c3		 ret	 0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_GCTAICmdRegen@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCTAICmdRegen@@UAEPAXI@Z PROC NEAR			; CTAICmdRegen::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1CTAICmdRegen@@UAE@XZ	; CTAICmdRegen::~CTAICmdRegen
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L178022
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L178022:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GCTAICmdRegen@@UAEPAXI@Z ENDP			; CTAICmdRegen::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??9const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::operator!=
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::operator!=, COMDAT
; _this$ = ecx

; 246  : 			return (!(*this == _Right));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Right$[esp-4]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]
  00009	33 c9		 xor	 ecx, ecx
  0000b	3b c6		 cmp	 eax, esi
  0000d	0f 95 c1	 setne	 cl
  00010	8a c1		 mov	 al, cl
  00012	5e		 pop	 esi

; 247  : 			}

  00013	c2 04 00	 ret	 4
??9const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::operator!=
_TEXT	ENDS
PUBLIC	??0iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::iterator::iterator
; Function compile flags: /Ogty
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::iterator::iterator, COMDAT
; _this$ = ecx

; 304  : 		iterator()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 305  : 			{	// construct with null node pointer
; 306  : 			}

  00008	c3		 ret	 0
??0iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??9const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::const_iterator::operator!=
; Function compile flags: /Ogty
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::const_iterator::operator!=, COMDAT
; _this$ = ecx

; 246  : 			return (!(*this == _Right));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Right$[esp-4]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]
  00009	33 c9		 xor	 ecx, ecx
  0000b	3b c6		 cmp	 eax, esi
  0000d	0f 95 c1	 setne	 cl
  00010	8a c1		 mov	 al, cl
  00012	5e		 pop	 esi

; 247  : 			}

  00013	c2 04 00	 ret	 4
??9const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::const_iterator::operator!=
_TEXT	ENDS
PUBLIC	?_Key@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAABGPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Key
; Function compile flags: /Ogty
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAABGPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAABGPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Key, COMDAT

; 142  : 		return (_Mybase::_Kfn(_Myval(_Pnode)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 0c	 add	 eax, 12			; 0000000cH

; 143  : 		}

  00007	c3		 ret	 0
?_Key@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@KAABGPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Key
_TEXT	ENDS
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Root
; Function compile flags: /Ogty
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Root, COMDAT
; _this$ = ecx

; 1059 : 		return (_Parent(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 04	 add	 eax, 4

; 1060 : 		}

  00006	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Root
_TEXT	ENDS
PUBLIC	?_Lmost@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Lmost
; Function compile flags: /Ogty
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 1005 : 		return (_Left(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1006 : 		}

  00003	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Lmost
_TEXT	ENDS
PUBLIC	?_Rmost@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Rmost
; Function compile flags: /Ogty
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 1049 : 		return (_Right(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 08	 add	 eax, 8

; 1050 : 		}

  00006	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Rmost
_TEXT	ENDS
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Root
; Function compile flags: /Ogty
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Root, COMDAT
; _this$ = ecx

; 1059 : 		return (_Parent(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 04	 add	 eax, 4

; 1060 : 		}

  00006	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Root
_TEXT	ENDS
PUBLIC	?_Key@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAABGPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Key
; Function compile flags: /Ogty
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAABGPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAABGPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Key, COMDAT

; 142  : 		return (_Mybase::_Kfn(_Myval(_Pnode)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 0c	 add	 eax, 12			; 0000000cH

; 143  : 		}

  00007	c3		 ret	 0
?_Key@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@KAABGPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Key
_TEXT	ENDS
PUBLIC	??Hiterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QBE?AV012@H@Z ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::iterator::operator+
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Hiterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Hiterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::iterator::operator+, COMDAT
; _this$ = ecx

; 262  : 			iterator _Tmp = *this;
; 263  : 			return (_Tmp += _Off);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 08	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00009	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000d	89 10		 mov	 DWORD PTR [eax], edx

; 264  : 			}

  0000f	c2 08 00	 ret	 8
??Hiterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QBE?AV012@H@Z ENDP ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::iterator::operator+
_TEXT	ENDS
PUBLIC	??0iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::iterator::iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::iterator::iterator, COMDAT
; _this$ = ecx

; 312  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 313  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBGPAVCTMonSpawn@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBGPAVCTMonSpawn@@@2@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBGPAVCTMonSpawn@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 205  : 			return (_Myval(_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 206  : 			}

  00005	c3		 ret	 0
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBGPAVCTMonSpawn@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	??0iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::iterator::iterator
; Function compile flags: /Ogty
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::iterator::iterator, COMDAT
; _this$ = ecx

; 312  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 313  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??0iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::iterator::iterator
; Function compile flags: /Ogty
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::iterator::iterator, COMDAT
; _this$ = ecx

; 312  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 313  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBEPAVCTItem@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBEPAVCTItem@@@2@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBEPAVCTItem@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 205  : 			return (_Myval(_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 206  : 			}

  00005	c3		 ret	 0
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBEPAVCTItem@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	??Diterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEAAPAVCTMonster@@XZ ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::operator*
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Diterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEAAPAVCTMonster@@XZ
_TEXT	SEGMENT
??Diterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEAAPAVCTMonster@@XZ PROC NEAR ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::operator*, COMDAT
; _this$ = ecx

; 220  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 221  : 			}

  00002	c3		 ret	 0
??Diterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBEAAPAVCTMonster@@XZ ENDP ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::operator*
_TEXT	ENDS
PUBLIC	??Hiterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBE?AV012@H@Z ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::operator+
; Function compile flags: /Ogty
;	COMDAT ??Hiterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Hiterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::operator+, COMDAT
; _this$ = ecx

; 262  : 			iterator _Tmp = *this;
; 263  : 			return (_Tmp += _Off);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 08	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00009	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000d	89 10		 mov	 DWORD PTR [eax], edx

; 264  : 			}

  0000f	c2 08 00	 ret	 8
??Hiterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBE?AV012@H@Z ENDP ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::operator+
_TEXT	ENDS
PUBLIC	??Giterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBE?AV012@H@Z ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::operator-
; Function compile flags: /Ogty
;	COMDAT ??Giterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Giterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::operator-, COMDAT
; _this$ = ecx

; 273  : 			iterator _Tmp = *this;
; 274  : 			return (_Tmp -= _Off);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Off$[esp-4]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	8d 14 85 00 00
	00 00		 lea	 edx, DWORD PTR [eax*4]
  0000d	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00011	2b ca		 sub	 ecx, edx
  00013	89 08		 mov	 DWORD PTR [eax], ecx

; 275  : 			}

  00015	c2 08 00	 ret	 8
??Giterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBE?AV012@H@Z ENDP ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::operator-
_TEXT	ENDS
PUBLIC	??Diterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QBEAAPAUtagTMONSPAWN@@XZ ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Diterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QBEAAPAUtagTMONSPAWN@@XZ
_TEXT	SEGMENT
??Diterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QBEAAPAUtagTMONSPAWN@@XZ PROC NEAR ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::iterator::operator*, COMDAT
; _this$ = ecx

; 220  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 221  : 			}

  00002	c3		 ret	 0
??Diterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QBEAAPAUtagTMONSPAWN@@XZ ENDP ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::iterator::operator*
_TEXT	ENDS
PUBLIC	??Hiterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QBE?AV012@H@Z ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::iterator::operator+
; Function compile flags: /Ogty
;	COMDAT ??Hiterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Hiterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::iterator::operator+, COMDAT
; _this$ = ecx

; 262  : 			iterator _Tmp = *this;
; 263  : 			return (_Tmp += _Off);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 08	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00009	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000d	89 10		 mov	 DWORD PTR [eax], edx

; 264  : 			}

  0000f	c2 08 00	 ret	 8
??Hiterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QBE?AV012@H@Z ENDP ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::iterator::operator+
_TEXT	ENDS
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QBEIXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::max_size, COMDAT
; _this$ = ecx

; 453  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 454  : 		}

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::max_size
_TEXT	ENDS
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Lrotate
; Function compile flags: /Ogty
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 1015 : 		_Nodeptr _Pnode = _Right(_Wherenode);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Wherenode$[esp-4]
  00004	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00007	53		 push	 ebx
  00008	56		 push	 esi

; 1016 : 		_Right(_Wherenode) = _Left(_Pnode);

  00009	8b 30		 mov	 esi, DWORD PTR [eax]
  0000b	89 72 08	 mov	 DWORD PTR [edx+8], esi

; 1017 : 
; 1018 : 		if (!_Isnil(_Left(_Pnode)))

  0000e	8b 30		 mov	 esi, DWORD PTR [eax]
  00010	8a 5e 15	 mov	 bl, BYTE PTR [esi+21]
  00013	84 db		 test	 bl, bl
  00015	75 03		 jne	 SHORT $L176530

; 1019 : 			_Parent(_Left(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$L176530:

; 1020 : 		_Parent(_Pnode) = _Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1021 : 
; 1022 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00026	75 0d		 jne	 SHORT $L176531

; 1023 : 			_Root() = _Pnode;

  00028	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0002b	5e		 pop	 esi

; 1028 : 
; 1029 : 		_Left(_Pnode) = _Wherenode;

  0002c	89 10		 mov	 DWORD PTR [eax], edx

; 1030 : 		_Parent(_Wherenode) = _Pnode;

  0002e	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00031	5b		 pop	 ebx

; 1031 : 		}

  00032	c2 04 00	 ret	 4
$L176531:

; 1024 : 		else if (_Wherenode == _Left(_Parent(_Wherenode)))

  00035	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00038	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0003a	75 0c		 jne	 SHORT $L176533

; 1025 : 			_Left(_Parent(_Wherenode)) = _Pnode;

  0003c	89 01		 mov	 DWORD PTR [ecx], eax
  0003e	5e		 pop	 esi

; 1028 : 
; 1029 : 		_Left(_Pnode) = _Wherenode;

  0003f	89 10		 mov	 DWORD PTR [eax], edx

; 1030 : 		_Parent(_Wherenode) = _Pnode;

  00041	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00044	5b		 pop	 ebx

; 1031 : 		}

  00045	c2 04 00	 ret	 4
$L176533:

; 1026 : 		else
; 1027 : 			_Right(_Parent(_Wherenode)) = _Pnode;

  00048	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0004b	5e		 pop	 esi

; 1028 : 
; 1029 : 		_Left(_Pnode) = _Wherenode;

  0004c	89 10		 mov	 DWORD PTR [eax], edx

; 1030 : 		_Parent(_Wherenode) = _Pnode;

  0004e	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00051	5b		 pop	 ebx

; 1031 : 		}

  00052	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Lrotate
_TEXT	ENDS
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Rrotate
; Function compile flags: /Ogty
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 1069 : 		_Nodeptr _Pnode = _Left(_Wherenode);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Wherenode$[esp-4]
  00004	8b 02		 mov	 eax, DWORD PTR [edx]
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 1070 : 		_Left(_Wherenode) = _Right(_Pnode);

  00008	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0000b	89 32		 mov	 DWORD PTR [edx], esi

; 1071 : 
; 1072 : 		if (!_Isnil(_Right(_Pnode)))

  0000d	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00010	8a 5e 15	 mov	 bl, BYTE PTR [esi+21]
  00013	84 db		 test	 bl, bl
  00015	75 03		 jne	 SHORT $L176540

; 1073 : 			_Parent(_Right(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$L176540:

; 1074 : 		_Parent(_Pnode) = _Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1075 : 
; 1076 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00026	75 0e		 jne	 SHORT $L176541

; 1077 : 			_Root() = _Pnode;

  00028	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0002b	5e		 pop	 esi

; 1082 : 
; 1083 : 		_Right(_Pnode) = _Wherenode;

  0002c	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1084 : 		_Parent(_Wherenode) = _Pnode;

  0002f	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00032	5b		 pop	 ebx

; 1085 : 		}

  00033	c2 04 00	 ret	 4
$L176541:

; 1078 : 		else if (_Wherenode == _Right(_Parent(_Wherenode)))

  00036	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00039	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003c	75 0e		 jne	 SHORT $L176543

; 1079 : 			_Right(_Parent(_Wherenode)) = _Pnode;

  0003e	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00041	5e		 pop	 esi

; 1082 : 
; 1083 : 		_Right(_Pnode) = _Wherenode;

  00042	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1084 : 		_Parent(_Wherenode) = _Pnode;

  00045	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00048	5b		 pop	 ebx

; 1085 : 		}

  00049	c2 04 00	 ret	 4
$L176543:

; 1080 : 		else
; 1081 : 			_Left(_Parent(_Wherenode)) = _Pnode;

  0004c	89 01		 mov	 DWORD PTR [ecx], eax
  0004e	5e		 pop	 esi

; 1082 : 
; 1083 : 		_Right(_Pnode) = _Wherenode;

  0004f	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1084 : 		_Parent(_Wherenode) = _Pnode;

  00052	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00055	5b		 pop	 ebx

; 1085 : 		}

  00056	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Rrotate
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Node>::destroy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	??0iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE@PAPAVCTMonster@@@Z ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE@PAPAVCTMonster@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE@PAPAVCTMonster@@@Z PROC NEAR ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::iterator, COMDAT
; _this$ = ecx

; 215  : 			{	// construct with pointer _Ptr

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 216  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE@PAPAVCTMonster@@@Z ENDP ; std::vector<CTMonster *,std::allocator<CTMonster *> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??0iterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QAE@PAPAUtagTMONSPAWN@@@Z ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::iterator::iterator
; Function compile flags: /Ogty
;	COMDAT ??0iterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QAE@PAPAUtagTMONSPAWN@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0iterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QAE@PAPAUtagTMONSPAWN@@@Z PROC NEAR ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::iterator::iterator, COMDAT
; _this$ = ecx

; 215  : 			{	// construct with pointer _Ptr

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 216  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QAE@PAPAUtagTMONSPAWN@@@Z ENDP ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::iterator::iterator
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Node>::allocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@I@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00007	c1 e0 03	 shl	 eax, 3
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	83 c4 04	 add	 esp, 4

; 138  : 		}

  00013	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Root
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Root, COMDAT
; _this$ = ecx

; 1064 : 		return (_Parent(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 04	 add	 eax, 4

; 1065 : 		}

  00006	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Root
_TEXT	ENDS
PUBLIC	?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::const_iterator::_Dec
; Function compile flags: /Ogty
;	COMDAT ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::const_iterator::_Dec, COMDAT
; _this$ = ecx

; 251  : 			if (_Isnil(_Ptr))

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00005	84 d2		 test	 dl, dl
  00007	74 06		 je	 SHORT $L176671

; 252  : 				_Ptr = _Right(_Ptr);	// end() ==> rightmost

  00009	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000c	89 01		 mov	 DWORD PTR [ecx], eax

; 263  : 				}
; 264  : 			}

  0000e	c3		 ret	 0
$L176671:

; 253  : 			else if (!_Isnil(_Left(_Ptr)))

  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	53		 push	 ebx
  00012	8a 5a 15	 mov	 bl, BYTE PTR [edx+21]
  00015	84 db		 test	 bl, bl
  00017	75 1a		 jne	 SHORT $L178397

; 254  : 				_Ptr = _Max(_Left(_Ptr));	// ==> largest of left subtree

  00019	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001c	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  0001f	84 db		 test	 bl, bl
  00021	75 0c		 jne	 SHORT $L178382
$L178381:
  00023	8b d0		 mov	 edx, eax
  00025	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00028	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  0002b	84 db		 test	 bl, bl
  0002d	74 f4		 je	 SHORT $L178381
$L178382:
  0002f	89 11		 mov	 DWORD PTR [ecx], edx
  00031	5b		 pop	 ebx

; 263  : 				}
; 264  : 			}

  00032	c3		 ret	 0
$L178397:

; 255  : 			else
; 256  : 				{	// climb looking for left subtree
; 257  : 				_Nodeptr _Pnode;
; 258  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 259  : 					&& _Ptr == _Left(_Pnode))

  00033	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00036	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00039	84 d2		 test	 dl, dl
  0003b	75 1e		 jne	 SHORT $L178400
  0003d	8d 49 00	 npad	 3
$L176677:
  00040	8b 11		 mov	 edx, DWORD PTR [ecx]
  00042	3b 10		 cmp	 edx, DWORD PTR [eax]
  00044	75 0c		 jne	 SHORT $L176678

; 260  : 					_Ptr = _Pnode;	// ==> parent while left subtree

  00046	89 01		 mov	 DWORD PTR [ecx], eax
  00048	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004b	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0004e	84 d2		 test	 dl, dl
  00050	74 ee		 je	 SHORT $L176677
$L176678:

; 261  : 				if (!_Isnil(_Pnode))

  00052	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00055	84 d2		 test	 dl, dl
  00057	75 02		 jne	 SHORT $L178400

; 262  : 					_Ptr = _Pnode;	// ==> parent if not head

  00059	89 01		 mov	 DWORD PTR [ecx], eax
$L178400:
  0005b	5b		 pop	 ebx

; 263  : 				}
; 264  : 			}

  0005c	c3		 ret	 0
?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::const_iterator::_Dec
_TEXT	ENDS
PUBLIC	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::const_iterator::_Inc
; Function compile flags: /Ogty
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::const_iterator::_Inc, COMDAT
; _this$ = ecx

; 268  : 			if (_Isnil(_Ptr))

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00005	84 d2		 test	 dl, dl
  00007	75 4d		 jne	 SHORT $L176685

; 269  : 				;	// end() shouldn't be incremented, don't move
; 270  : 			else if (!_Isnil(_Right(_Ptr)))

  00009	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0000c	53		 push	 ebx
  0000d	8a 5a 15	 mov	 bl, BYTE PTR [edx+21]
  00010	84 db		 test	 bl, bl
  00012	75 1b		 jne	 SHORT $L178448

; 271  : 				_Ptr = _Min(_Right(_Ptr));	// ==> smallest of right subtree

  00014	8b 02		 mov	 eax, DWORD PTR [edx]
  00016	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  00019	84 db		 test	 bl, bl
  0001b	75 0e		 jne	 SHORT $L178436
  0001d	8d 49 00	 npad	 3
$L178435:
  00020	8b d0		 mov	 edx, eax
  00022	8b 02		 mov	 eax, DWORD PTR [edx]
  00024	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  00027	84 db		 test	 bl, bl
  00029	74 f5		 je	 SHORT $L178435
$L178436:
  0002b	89 11		 mov	 DWORD PTR [ecx], edx
  0002d	5b		 pop	 ebx

; 279  : 				}
; 280  : 			}

  0002e	c3		 ret	 0
$L178448:

; 272  : 			else
; 273  : 				{	// climb looking for right subtree
; 274  : 				_Nodeptr _Pnode;
; 275  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 276  : 					&& _Ptr == _Right(_Pnode))

  0002f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00032	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00035	84 d2		 test	 dl, dl
  00037	75 1a		 jne	 SHORT $L176689
  00039	8d a4 24 00 00
	00 00		 npad	 7
$L176688:
  00040	8b 11		 mov	 edx, DWORD PTR [ecx]
  00042	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00045	75 0c		 jne	 SHORT $L176689

; 277  : 					_Ptr = _Pnode;	// ==> parent while right subtree

  00047	89 01		 mov	 DWORD PTR [ecx], eax
  00049	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0004f	84 d2		 test	 dl, dl
  00051	74 ed		 je	 SHORT $L176688
$L176689:

; 278  : 				_Ptr = _Pnode;	// ==> parent (head if end())

  00053	89 01		 mov	 DWORD PTR [ecx], eax
  00055	5b		 pop	 ebx
$L176685:

; 279  : 				}
; 280  : 			}

  00056	c3		 ret	 0
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::const_iterator::_Inc
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC NEAR ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 34   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 35   : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??Diterator@?$vector@GV?$allocator@G@std@@@std@@QBEAAGXZ ; std::vector<unsigned short,std::allocator<unsigned short> >::iterator::operator*
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Diterator@?$vector@GV?$allocator@G@std@@@std@@QBEAAGXZ
_TEXT	SEGMENT
??Diterator@?$vector@GV?$allocator@G@std@@@std@@QBEAAGXZ PROC NEAR ; std::vector<unsigned short,std::allocator<unsigned short> >::iterator::operator*, COMDAT
; _this$ = ecx

; 220  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 221  : 			}

  00002	c3		 ret	 0
??Diterator@?$vector@GV?$allocator@G@std@@@std@@QBEAAGXZ ENDP ; std::vector<unsigned short,std::allocator<unsigned short> >::iterator::operator*
_TEXT	ENDS
PUBLIC	??Hiterator@?$vector@GV?$allocator@G@std@@@std@@QBE?AV012@H@Z ; std::vector<unsigned short,std::allocator<unsigned short> >::iterator::operator+
; Function compile flags: /Ogty
;	COMDAT ??Hiterator@?$vector@GV?$allocator@G@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Hiterator@?$vector@GV?$allocator@G@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::vector<unsigned short,std::allocator<unsigned short> >::iterator::operator+, COMDAT
; _this$ = ecx

; 262  : 			iterator _Tmp = *this;
; 263  : 			return (_Tmp += _Off);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 08	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  00009	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000d	89 10		 mov	 DWORD PTR [eax], edx

; 264  : 			}

  0000f	c2 08 00	 ret	 8
??Hiterator@?$vector@GV?$allocator@G@std@@@std@@QBE?AV012@H@Z ENDP ; std::vector<unsigned short,std::allocator<unsigned short> >::iterator::operator+
_TEXT	ENDS
PUBLIC	??Diterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QBEAAPAUtagTMAPMON@@XZ ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Diterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QBEAAPAUtagTMAPMON@@XZ
_TEXT	SEGMENT
??Diterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QBEAAPAUtagTMAPMON@@XZ PROC NEAR ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::iterator::operator*, COMDAT
; _this$ = ecx

; 220  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 221  : 			}

  00002	c3		 ret	 0
??Diterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QBEAAPAUtagTMAPMON@@XZ ENDP ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::iterator::operator*
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $L178487
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1476 : 		}

  00014	c2 04 00	 ret	 4

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$L178487:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 1476 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	??0iterator@?$vector@GV?$allocator@G@std@@@std@@QAE@PAG@Z ; std::vector<unsigned short,std::allocator<unsigned short> >::iterator::iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0iterator@?$vector@GV?$allocator@G@std@@@std@@QAE@PAG@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0iterator@?$vector@GV?$allocator@G@std@@@std@@QAE@PAG@Z PROC NEAR ; std::vector<unsigned short,std::allocator<unsigned short> >::iterator::iterator, COMDAT
; _this$ = ecx

; 215  : 			{	// construct with pointer _Ptr

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 216  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$vector@GV?$allocator@G@std@@@std@@QAE@PAG@Z ENDP ; std::vector<unsigned short,std::allocator<unsigned short> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??0iterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QAE@PAPAUtagTMAPMON@@@Z ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::iterator::iterator
; Function compile flags: /Ogty
;	COMDAT ??0iterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QAE@PAPAUtagTMAPMON@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0iterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QAE@PAPAUtagTMAPMON@@@Z PROC NEAR ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::iterator::iterator, COMDAT
; _this$ = ecx

; 215  : 			{	// construct with pointer _Ptr

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 216  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QAE@PAPAUtagTMAPMON@@@Z ENDP ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::iterator::iterator
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1114 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1115 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1116 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC NEAR	; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 138  : 		}

  0000d	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::begin
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::begin, COMDAT
; _this$ = ecx

; 408  : 		return (_TREE_ITERATOR(_Lmost()));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 08		 mov	 ecx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 409  : 		}

  0000b	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::begin
_TEXT	ENDS
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::end
; Function compile flags: /Ogty
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::end, COMDAT
; _this$ = ecx

; 418  : 		return (_TREE_ITERATOR(_Myhead));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 419  : 		}

  00009	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::end
_TEXT	ENDS
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::end
; Function compile flags: /Ogty
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::end, COMDAT
; _this$ = ecx

; 418  : 		return (_TREE_ITERATOR(_Myhead));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 419  : 		}

  00009	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::end
_TEXT	ENDS
PUBLIC	??Diterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBGPAVCTMonSpawn@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Diterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBGPAVCTMonSpawn@@@2@XZ
_TEXT	SEGMENT
??Diterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBGPAVCTMonSpawn@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::iterator::operator*, COMDAT
; _this$ = ecx

; 317  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 318  : 			}

  00005	c3		 ret	 0
??Diterator@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBGPAVCTMonSpawn@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::iterator::operator*
_TEXT	ENDS
PUBLIC	??Diterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBEPAVCTItem@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Diterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBEPAVCTItem@@@2@XZ
_TEXT	SEGMENT
??Diterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBEPAVCTItem@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::iterator::operator*, COMDAT
; _this$ = ecx

; 317  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 318  : 			}

  00005	c3		 ret	 0
??Diterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBEPAVCTItem@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::iterator::operator*
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::begin
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?begin@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::begin, COMDAT
; _this$ = ecx

; 463  : 		return (iterator(_Myfirst));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 464  : 		}

  00009	c2 04 00	 ret	 4
?begin@?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::begin
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<CTMonster *,std::allocator<CTMonster *> >::begin
; Function compile flags: /Ogty
;	COMDAT ?begin@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<CTMonster *,std::allocator<CTMonster *> >::begin, COMDAT
; _this$ = ecx

; 463  : 		return (iterator(_Myfirst));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 464  : 		}

  00009	c2 04 00	 ret	 4
?begin@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<CTMonster *,std::allocator<CTMonster *> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<CTMonster *,std::allocator<CTMonster *> >::end
; Function compile flags: /Ogty
;	COMDAT ?end@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<CTMonster *,std::allocator<CTMonster *> >::end, COMDAT
; _this$ = ecx

; 473  : 		return (iterator(_Mylast));

  00000	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 474  : 		}

  00009	c2 04 00	 ret	 4
?end@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<CTMonster *,std::allocator<CTMonster *> >::end
_TEXT	ENDS
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::begin
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::begin, COMDAT
; _this$ = ecx

; 408  : 		return (_TREE_ITERATOR(_Lmost()));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 08		 mov	 ecx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 409  : 		}

  0000b	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::begin
_TEXT	ENDS
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Erase
; Function compile flags: /Ogty
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 890  : 		{	// free entire subtree, recursively

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 891  : 		for (_Nodeptr _Pnode = _Rootnode; !_Isnil(_Pnode); _Rootnode = _Pnode)

  00003	8b 7c 24 10	 mov	 edi, DWORD PTR __Rootnode$[esp+8]
  00007	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  0000a	84 c0		 test	 al, al
  0000c	8b d9		 mov	 ebx, ecx
  0000e	8b f7		 mov	 esi, edi
  00010	75 1f		 jne	 SHORT $L176438
$L176436:

; 892  : 			{	// free subtrees, then node
; 893  : 			_Erase(_Right(_Pnode));

  00012	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00015	50		 push	 eax
  00016	8b cb		 mov	 ecx, ebx
  00018	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Erase

; 894  : 			_Pnode = _Left(_Pnode);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]

; 895  : 			this->_Alnod.destroy(_Rootnode);	// destroy, free erased node
; 896  : 			this->_Alnod.deallocate(_Rootnode, 1);

  0001f	57		 push	 edi
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	8a 46 15	 mov	 al, BYTE PTR [esi+21]
  00028	83 c4 04	 add	 esp, 4
  0002b	84 c0		 test	 al, al
  0002d	8b fe		 mov	 edi, esi
  0002f	74 e1		 je	 SHORT $L176436
$L176438:
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx

; 897  : 			}
; 898  : 		}

  00034	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Erase
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::begin
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?begin@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::begin, COMDAT
; _this$ = ecx

; 463  : 		return (iterator(_Myfirst));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 464  : 		}

  00009	c2 04 00	 ret	 4
?begin@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::begin
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBGPAVCTSkill@@@2@D@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Buynode
EXTRN	__CxxThrowException@8:NEAR
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBGPAVCTSkill@@@2@D@Z
_TEXT	SEGMENT
__Larg$ = 8						; size = 4
__Parg$ = 12						; size = 4
__Rarg$ = 16						; size = 4
__Val$ = 20						; size = 4
__Carg$ = 24						; size = 1
?_Buynode@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBGPAVCTSkill@@@2@D@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 1131 : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

  00000	6a 18		 push	 24			; 00000018H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 1132 : 		_TRY_BEGIN
; 1133 : 		new (_Wherenode) _Node(_Larg, _Parg, _Rarg, _Val, _Carg);

  0000a	85 c0		 test	 eax, eax
  0000c	74 2e		 je	 SHORT $L178681
  0000e	8b 4c 24 04	 mov	 ecx, DWORD PTR __Larg$[esp-4]
  00012	8b 54 24 08	 mov	 edx, DWORD PTR __Parg$[esp-4]
  00016	89 08		 mov	 DWORD PTR [eax], ecx
  00018	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Rarg$[esp-4]
  0001c	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0001f	8b 4c 24 10	 mov	 ecx, DWORD PTR __Val$[esp-4]
  00023	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00026	8b 11		 mov	 edx, DWORD PTR [ecx]
  00028	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  0002b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0002e	8a 54 24 14	 mov	 dl, BYTE PTR __Carg$[esp-4]
  00032	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00035	88 50 14	 mov	 BYTE PTR [eax+20], dl
  00038	c6 40 15 00	 mov	 BYTE PTR [eax+21], 0
$L178681:

; 1134 : 		_CATCH_ALL
; 1135 : 		this->_Alnod.deallocate(_Wherenode, 1);
; 1136 : 		_RERAISE;
; 1137 : 		_CATCH_END
; 1138 : 		return (_Wherenode);
; 1139 : 		}

  0003c	c2 14 00	 ret	 20			; 00000014H
?_Buynode@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBGPAVCTSkill@@@2@D@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Buynode
_TEXT	ENDS
PUBLIC	?_Lbound@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@ABG@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Lbound
; Function compile flags: /Ogty
;	COMDAT ?_Lbound@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@ABG@Z
_TEXT	SEGMENT
__Keyval$ = 8						; size = 4
?_Lbound@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@ABG@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Lbound, COMDAT
; _this$ = ecx

; 988  : 		_Nodeptr _Pnode = _Root();

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 989  : 		_Nodeptr _Wherenode = _Myhead;	// end() if search fails
; 990  : 
; 991  : 		while (!_Isnil(_Pnode))

  00006	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00009	84 d2		 test	 dl, dl
  0000b	75 1f		 jne	 SHORT $L176610
  0000d	8b 54 24 04	 mov	 edx, DWORD PTR __Keyval$[esp-4]
  00011	66 8b 12	 mov	 dx, WORD PTR [edx]
  00014	53		 push	 ebx
$L176609:

; 992  : 			if (this->comp(_Key(_Pnode), _Keyval))

  00015	66 39 51 0c	 cmp	 WORD PTR [ecx+12], dx
  00019	73 05		 jae	 SHORT $L176611

; 993  : 				_Pnode = _Right(_Pnode);	// descend right subtree

  0001b	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 994  : 			else

  0001e	eb 04		 jmp	 SHORT $L176612
$L176611:

; 995  : 				{	// _Pnode not less than _Keyval, remember it
; 996  : 				_Wherenode = _Pnode;

  00020	8b c1		 mov	 eax, ecx

; 997  : 				_Pnode = _Left(_Pnode);	// descend left subtree

  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
$L176612:
  00024	8a 59 15	 mov	 bl, BYTE PTR [ecx+21]
  00027	84 db		 test	 bl, bl
  00029	74 ea		 je	 SHORT $L176609
  0002b	5b		 pop	 ebx
$L176610:

; 998  : 				}
; 999  : 
; 1000 : 		return (_Wherenode);	// return best remembered candidate
; 1001 : 		}

  0002c	c2 04 00	 ret	 4
?_Lbound@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@2@ABG@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::_Lbound
_TEXT	ENDS
PUBLIC	??Fconst_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::const_iterator::operator--
; Function compile flags: /Ogty
;	COMDAT ??Fconst_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Fconst_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::const_iterator::operator--, COMDAT
; _this$ = ecx

; 227  : 			{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 228  : 			_Dec();

  00003	e8 00 00 00 00	 call	 ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::const_iterator::_Dec

; 229  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 230  : 			}

  0000b	c3		 ret	 0
??Fconst_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::const_iterator::operator--
_TEXT	ENDS
PUBLIC	??Econst_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::const_iterator::operator++
; Function compile flags: /Ogty
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Econst_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::const_iterator::operator++, COMDAT
; _this$ = ecx

; 214  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 215  : 			_Inc();

  00003	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::const_iterator::_Inc

; 216  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 217  : 			}

  0000b	c3		 ret	 0
??Econst_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::const_iterator::operator++
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1510 : 		if (!_Built)

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Built$[esp-4]
  00004	84 c0		 test	 al, al
  00006	53		 push	 ebx
  00007	55		 push	 ebp
  00008	8b 6c 24 10	 mov	 ebp, DWORD PTR __Newsize$[esp+4]
  0000c	8b d9		 mov	 ebx, ecx
  0000e	74 2f		 je	 SHORT $L178760

; 1511 : 			;
; 1512 : 		else if (_BUF_SIZE <= _Myres)

  00010	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  00014	72 29		 jb	 SHORT $L178760

; 1513 : 			{	// copy any leftovers to small buffer and deallocate
; 1514 : 			_Elem *_Ptr = _Bx._Ptr;
; 1515 : 			if (0 < _Newsize)

  00016	85 ed		 test	 ebp, ebp
  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	57		 push	 edi
  0001c	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  0001f	76 14		 jbe	 SHORT $L178757
  00021	56		 push	 esi

; 1516 : 				_Traits::copy(_Bx._Buf, _Ptr, _Newsize);

  00022	8b cd		 mov	 ecx, ebp
  00024	8b d1		 mov	 edx, ecx
  00026	c1 e9 02	 shr	 ecx, 2
  00029	8b f0		 mov	 esi, eax
  0002b	f3 a5		 rep movsd
  0002d	8b ca		 mov	 ecx, edx
  0002f	83 e1 03	 and	 ecx, 3
  00032	f3 a4		 rep movsb
  00034	5e		 pop	 esi
$L178757:

; 1517 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4
  0003e	5f		 pop	 edi
$L178760:

; 1518 : 			}
; 1519 : 		_Myres = _BUF_SIZE - 1;
; 1520 : 		_Eos(_Newsize);

  0003f	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00042	c7 43 18 0f 00
	00 00		 mov	 DWORD PTR [ebx+24], 15	; 0000000fH
  00049	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0004e	5d		 pop	 ebp
  0004f	5b		 pop	 ebx

; 1521 : 		}

  00050	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?begin@?$vector@GV?$allocator@G@std@@@std@@QAE?AViterator@12@XZ ; std::vector<unsigned short,std::allocator<unsigned short> >::begin
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?begin@?$vector@GV?$allocator@G@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@GV?$allocator@G@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<unsigned short,std::allocator<unsigned short> >::begin, COMDAT
; _this$ = ecx

; 463  : 		return (iterator(_Myfirst));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 464  : 		}

  00009	c2 04 00	 ret	 4
?begin@?$vector@GV?$allocator@G@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<unsigned short,std::allocator<unsigned short> >::begin
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
EXTRN	?_Xran@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xran
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 792  : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp

; 793  : 		if (_Mysize < _Off)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	39 6e 14	 cmp	 DWORD PTR [esi+20], ebp
  0000b	57		 push	 edi
  0000c	73 05		 jae	 SHORT $L149765

; 794  : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L149765:

; 795  : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c5		 sub	 eax, ebp
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $L149766

; 796  : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$L149766:

; 797  : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 47		 jbe	 SHORT $L178838

; 798  : 			{	// move elements down
; 799  : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 800  : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0002c	53		 push	 ebx
  0002d	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  00030	72 04		 jb	 SHORT $L178804
  00032	8b 13		 mov	 edx, DWORD PTR [ebx]
  00034	eb 02		 jmp	 SHORT $L178805
$L178804:
  00036	8b d3		 mov	 edx, ebx
$L178805:
  00038	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0003b	72 04		 jb	 SHORT $L178811
  0003d	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0003f	eb 02		 jmp	 SHORT $L178812
$L178811:
  00041	8b cb		 mov	 ecx, ebx
$L178812:
  00043	2b c7		 sub	 eax, edi

; 803  : 			}
; 804  : 		return (*this);

  00045	03 d5		 add	 edx, ebp
  00047	50		 push	 eax
  00048	03 d7		 add	 edx, edi
  0004a	52		 push	 edx
  0004b	03 cd		 add	 ecx, ebp
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 _memmove
  00053	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00056	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00059	2b c7		 sub	 eax, edi
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005e	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00061	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00064	72 02		 jb	 SHORT $L178835

; 801  : 			size_type _Newsize = _Mysize - _Count;
; 802  : 			_Eos(_Newsize);

  00066	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$L178835:
  00068	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0
  0006c	5b		 pop	 ebx
$L178838:
  0006d	5f		 pop	 edi

; 803  : 			}
; 804  : 		return (*this);

  0006e	8b c6		 mov	 eax, esi
  00070	5e		 pop	 esi
  00071	5d		 pop	 ebp

; 805  : 		}

  00072	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T179043 DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
$T179045 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L178845
$T179046 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L178843
$T179044 DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T179045
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:$T179046
$T179037 DD	019930520H
	DD	04H
	DD	FLAT:$T179043
	DD	02H
	DD	FLAT:$T179044
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1444 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1445 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	8b d8		 mov	 ebx, eax
  00022	83 cb 0f	 or	 ebx, 15			; 0000000fH

; 1446 : 		if (max_size() < _Newres)

  00025	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00028	57		 push	 edi
  00029	8b f1		 mov	 esi, ecx
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00031	76 04		 jbe	 SHORT $L150507

; 1447 : 			_Newres = _Newsize;	// undo roundup if too big

  00033	8b d8		 mov	 ebx, eax

; 1448 : 		else if (_Newres / 3 < _Myres / 2

  00035	eb 22		 jmp	 SHORT $L150509
$L150507:

; 1449 : 			&& _Myres <= max_size() - _Myres / 2)

  00037	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  0003a	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0003f	f7 e3		 mul	 ebx
  00041	8b cf		 mov	 ecx, edi
  00043	d1 e9		 shr	 ecx, 1
  00045	d1 ea		 shr	 edx, 1
  00047	3b d1		 cmp	 edx, ecx
  00049	73 0e		 jae	 SHORT $L150509
  0004b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00050	2b c1		 sub	 eax, ecx
  00052	3b f8		 cmp	 edi, eax
  00054	77 03		 ja	 SHORT $L150509

; 1450 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00056	8d 1c 39	 lea	 ebx, DWORD PTR [ecx+edi]
$L150509:

; 1451 : 		_Elem *_Ptr;
; 1452 : 
; 1453 : 		_TRY_BEGIN
; 1454 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00059	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  0005c	51		 push	 ecx
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00064	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00069	8b d0		 mov	 edx, eax
  0006b	83 c4 04	 add	 esp, 4
  0006e	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
  00071	eb 29		 jmp	 SHORT $L150511
$L178843:

; 1455 : 		_CATCH_ALL
; 1456 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  00073	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00076	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 1457 : 			_TRY_BEGIN
; 1458 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00079	40		 inc	 eax
  0007a	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0007d	50		 push	 eax
  0007e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00082	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00087	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0008a	83 c4 04	 add	 esp, 4

; 1462 : 			_CATCH_END
; 1463 : 		_CATCH_END

  0008d	b8 00 00 00 00	 mov	 eax, $L179038
  00092	c3		 ret	 0
$L179038:
  00093	8b 5d e8	 mov	 ebx, DWORD PTR __Newres$[ebp]
  00096	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00099	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$L150511:

; 1464 : 
; 1465 : 		if (0 < _Oldlen)

  0009c	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  0009f	85 c9		 test	 ecx, ecx
  000a1	76 24		 jbe	 SHORT $L178962

; 1466 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  000a3	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000a7	72 05		 jb	 SHORT $L178959
  000a9	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000ac	eb 03		 jmp	 SHORT $L178960
$L178959:
  000ae	83 c6 04	 add	 esi, 4
$L178960:
  000b1	8b c1		 mov	 eax, ecx
  000b3	c1 e9 02	 shr	 ecx, 2
  000b6	8b fa		 mov	 edi, edx
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb
  000c1	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000c4	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
$L178962:

; 1467 : 		_Tidy(true);

  000c7	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000cb	72 12		 jb	 SHORT $L179004
  000cd	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000d0	51		 push	 ecx
  000d1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d6	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000d9	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000dc	83 c4 04	 add	 esp, 4
$L179004:

; 1468 : 		_Bx._Ptr = _Ptr;
; 1469 : 		_Myres = _Newres;
; 1470 : 		_Eos(_Oldlen);

  000df	83 fb 10	 cmp	 ebx, 16			; 00000010H
  000e2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000e5	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e8	89 10		 mov	 DWORD PTR [eax], edx
  000ea	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  000ed	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  000f0	72 02		 jb	 SHORT $L179033
  000f2	8b c2		 mov	 eax, edx
$L179033:

; 1471 : 		}

  000f4	5f		 pop	 edi
  000f5	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  000f9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fc	5e		 pop	 esi
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00104	5b		 pop	 ebx
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c2 08 00	 ret	 8
$L178845:

; 1459 : 			_CATCH_ALL
; 1460 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010b	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0010e	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00112	72 0c		 jb	 SHORT $L178943
  00114	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00117	52		 push	 edx
  00118	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0011d	83 c4 04	 add	 esp, 4
$L178943:

; 1461 : 			_RERAISE;

  00120	6a 00		 push	 0
  00122	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00129	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00130	6a 00		 push	 0
  00132	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00136	e8 00 00 00 00	 call	 __CxxThrowException@8
$L179048:
$L179042:
  0013b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T179037
  00005	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	??A?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QAEAAPAUtagTMAPMON@@I@Z ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::operator[]
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??A?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QAEAAPAUtagTMAPMON@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QAEAAPAUtagTMAPMON@@I@Z PROC NEAR ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::operator[], COMDAT
; _this$ = ecx

; 555  : 		return (*(begin() + _Pos));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pos$[esp-4]
  00007	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 556  : 		}

  0000a	c2 04 00	 ret	 4
??A?$vector@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@QAEAAPAUtagTMAPMON@@I@Z ENDP ; std::vector<tagTMAPMON *,std::allocator<tagTMAPMON *> >::operator[]
_TEXT	ENDS
PUBLIC	??A?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAPAVCTMonster@@I@Z ; std::vector<CTMonster *,std::allocator<CTMonster *> >::operator[]
; Function compile flags: /Ogty
;	COMDAT ??A?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAPAVCTMonster@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAPAVCTMonster@@I@Z PROC NEAR ; std::vector<CTMonster *,std::allocator<CTMonster *> >::operator[], COMDAT
; _this$ = ecx

; 555  : 		return (*(begin() + _Pos));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pos$[esp-4]
  00007	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 556  : 		}

  0000a	c2 04 00	 ret	 4
??A?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAPAVCTMonster@@I@Z ENDP ; std::vector<CTMonster *,std::allocator<CTMonster *> >::operator[]
_TEXT	ENDS
PUBLIC	?back@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAPAVCTMonster@@XZ ; std::vector<CTMonster *,std::allocator<CTMonster *> >::back
; Function compile flags: /Ogty
;	COMDAT ?back@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAPAVCTMonster@@XZ
_TEXT	SEGMENT
?back@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAPAVCTMonster@@XZ PROC NEAR ; std::vector<CTMonster *,std::allocator<CTMonster *> >::back, COMDAT
; _this$ = ecx

; 570  : 		return (*(end() - 1));

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	83 e8 04	 sub	 eax, 4

; 571  : 		}

  00006	c3		 ret	 0
?back@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QAEAAPAVCTMonster@@XZ ENDP ; std::vector<CTMonster *,std::allocator<CTMonster *> >::back
_TEXT	ENDS
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::clear
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::clear, COMDAT
; _this$ = ecx

; 780  : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 781  : 		_Erase(_Root());

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00009	51		 push	 ecx
  0000a	8b ce		 mov	 ecx, esi
  0000c	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Erase

; 782  : 		_Root() = _Myhead, _Mysize = 0;

  00011	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00014	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 783  : 		_Lmost() = _Myhead, _Rmost() = _Myhead;

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	89 00		 mov	 DWORD PTR [eax], eax
  00023	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00026	89 76 08	 mov	 DWORD PTR [esi+8], esi
  00029	5e		 pop	 esi

; 784  : 		}

  0002a	c3		 ret	 0
?clear@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::clear
_TEXT	ENDS
PUBLIC	?lower_bound@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABG@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::lower_bound
; Function compile flags: /Ogty
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABG@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABG@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 810  : 		return (_TREE_ITERATOR(_Lbound(_Keyval)));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00009	84 d2		 test	 dl, dl
  0000b	75 1f		 jne	 SHORT $L179279
  0000d	8b 54 24 08	 mov	 edx, DWORD PTR __Keyval$[esp-4]
  00011	66 8b 12	 mov	 dx, WORD PTR [edx]
  00014	53		 push	 ebx
$L179266:
  00015	66 39 50 0c	 cmp	 WORD PTR [eax+12], dx
  00019	73 05		 jae	 SHORT $L179268
  0001b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0001e	eb 04		 jmp	 SHORT $L179269
$L179268:
  00020	8b c8		 mov	 ecx, eax
  00022	8b 00		 mov	 eax, DWORD PTR [eax]
$L179269:
  00024	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  00027	84 db		 test	 bl, bl
  00029	74 ea		 je	 SHORT $L179266
  0002b	5b		 pop	 ebx
$L179279:
  0002c	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00030	89 08		 mov	 DWORD PTR [eax], ecx

; 811  : 		}

  00032	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABG@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::lower_bound
_TEXT	ENDS
PUBLIC	??Fiterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::iterator::operator--
; Function compile flags: /Ogty
;	COMDAT ??Fiterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Fiterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::iterator::operator--, COMDAT
; _this$ = ecx

; 339  : 			{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 340  : 			--(*(const_iterator *)this);

  00003	e8 00 00 00 00	 call	 ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::const_iterator::_Dec

; 341  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 342  : 			}

  0000b	c3		 ret	 0
??Fiterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::iterator::operator--
_TEXT	ENDS
PUBLIC	??Eiterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::iterator::operator++
; Function compile flags: /Ogty
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Eiterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::iterator::operator++, COMDAT
; _this$ = ecx

; 326  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 327  : 			++(*(const_iterator *)this);

  00003	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::const_iterator::_Inc

; 328  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 329  : 			}

  0000b	c3		 ret	 0
??Eiterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::iterator::operator++
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 456  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 457  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $L179329
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$L179329:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 458  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??A?$vector@GV?$allocator@G@std@@@std@@QAEAAGI@Z ; std::vector<unsigned short,std::allocator<unsigned short> >::operator[]
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??A?$vector@GV?$allocator@G@std@@@std@@QAEAAGI@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@GV?$allocator@G@std@@@std@@QAEAAGI@Z PROC NEAR ; std::vector<unsigned short,std::allocator<unsigned short> >::operator[], COMDAT
; _this$ = ecx

; 555  : 		return (*(begin() + _Pos));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pos$[esp-4]
  00007	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]

; 556  : 		}

  0000a	c2 04 00	 ret	 4
??A?$vector@GV?$allocator@G@std@@@std@@QAEAAGI@Z ENDP	; std::vector<unsigned short,std::allocator<unsigned short> >::operator[]
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xlen
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1480 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	56		 push	 esi

; 1481 : 		if (max_size() < _Newsize)

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR __Newsize$[esp+4]
  00006	83 fe fe	 cmp	 esi, -2			; fffffffeH
  00009	8b e9		 mov	 ebp, ecx
  0000b	76 05		 jbe	 SHORT $L149774

; 1482 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L149774:

; 1483 : 		if (_Myres < _Newsize)

  00012	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00015	3b c6		 cmp	 eax, esi
  00017	73 19		 jae	 SHORT $L149775

; 1484 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0001c	50		 push	 eax
  0001d	56		 push	 esi
  0001e	8b cd		 mov	 ecx, ebp
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c0		 xor	 eax, eax
  00027	3b c6		 cmp	 eax, esi
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5d		 pop	 ebp

; 1491 : 		}

  0002f	c2 08 00	 ret	 8
$L149775:

; 1485 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	8a 4c 24 10	 mov	 cl, BYTE PTR __Trim$[esp+4]
  00036	84 c9		 test	 cl, cl
  00038	74 5c		 je	 SHORT $L149777
  0003a	83 fe 10	 cmp	 esi, 16			; 00000010H
  0003d	73 57		 jae	 SHORT $L149777
  0003f	53		 push	 ebx

; 1486 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1487 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  00040	8b 5d 14	 mov	 ebx, DWORD PTR [ebp+20]
  00043	3b f3		 cmp	 esi, ebx
  00045	73 02		 jae	 SHORT $L179387
  00047	8b de		 mov	 ebx, esi
$L179387:
  00049	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004c	72 2b		 jb	 SHORT $L179442
  0004e	85 db		 test	 ebx, ebx
  00050	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00053	57		 push	 edi
  00054	8d 7d 04	 lea	 edi, DWORD PTR [ebp+4]
  00057	76 16		 jbe	 SHORT $L179440
  00059	8b cb		 mov	 ecx, ebx
  0005b	8b d1		 mov	 edx, ecx
  0005d	c1 e9 02	 shr	 ecx, 2
  00060	8b f0		 mov	 esi, eax
  00062	f3 a5		 rep movsd
  00064	8b ca		 mov	 ecx, edx
  00066	83 e1 03	 and	 ecx, 3
  00069	f3 a4		 rep movsb
  0006b	8b 74 24 14	 mov	 esi, DWORD PTR __Newsize$[esp+12]
$L179440:
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00075	83 c4 04	 add	 esp, 4
  00078	5f		 pop	 edi
$L179442:
  00079	89 5d 14	 mov	 DWORD PTR [ebp+20], ebx

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  0007c	33 c0		 xor	 eax, eax
  0007e	c7 45 18 0f 00
	00 00		 mov	 DWORD PTR [ebp+24], 15	; 0000000fH
  00085	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0008a	3b c6		 cmp	 eax, esi
  0008c	5b		 pop	 ebx
  0008d	1b c0		 sbb	 eax, eax
  0008f	5e		 pop	 esi
  00090	f7 d8		 neg	 eax
  00092	5d		 pop	 ebp

; 1491 : 		}

  00093	c2 08 00	 ret	 8
$L149777:

; 1488 : 		else if (_Newsize == 0)

  00096	85 f6		 test	 esi, esi
  00098	75 23		 jne	 SHORT $L179479

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

  0009a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0009d	89 75 14	 mov	 DWORD PTR [ebp+20], esi
  000a0	72 14		 jb	 SHORT $L179474
  000a2	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000a5	33 c0		 xor	 eax, eax
  000a7	3b c6		 cmp	 eax, esi
  000a9	1b c0		 sbb	 eax, eax
  000ab	5e		 pop	 esi
  000ac	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
  000b0	f7 d8		 neg	 eax
  000b2	5d		 pop	 ebp

; 1491 : 		}

  000b3	c2 08 00	 ret	 8

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

$L179474:
  000b6	83 c5 04	 add	 ebp, 4
  000b9	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
$L179479:

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000bd	33 c0		 xor	 eax, eax
  000bf	3b c6		 cmp	 eax, esi
  000c1	1b c0		 sbb	 eax, eax
  000c3	5e		 pop	 esi
  000c4	f7 d8		 neg	 eax
  000c6	5d		 pop	 ebp

; 1491 : 		}

  000c7	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABG@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::find
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABG@Z
_TEXT	SEGMENT
$T179487 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABG@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::find, COMDAT
; _this$ = ecx

; 787  : 		{	// find an element in mutable sequence that matches _Keyval

  00000	51		 push	 ecx

; 788  : 		iterator _Where = lower_bound(_Keyval);

  00001	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00004	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00007	53		 push	 ebx
  00008	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  0000b	84 db		 test	 bl, bl
  0000d	57		 push	 edi
  0000e	8b 7c 24 14	 mov	 edi, DWORD PTR __Keyval$[esp+8]
  00012	75 1b		 jne	 SHORT $L179583
  00014	56		 push	 esi
  00015	66 8b 37	 mov	 si, WORD PTR [edi]
$L179582:
  00018	66 39 70 0c	 cmp	 WORD PTR [eax+12], si
  0001c	73 05		 jae	 SHORT $L179584
  0001e	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00021	eb 04		 jmp	 SHORT $L179585
$L179584:
  00023	8b d0		 mov	 edx, eax
  00025	8b 00		 mov	 eax, DWORD PTR [eax]
$L179585:
  00027	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  0002a	84 db		 test	 bl, bl
  0002c	74 ea		 je	 SHORT $L179582
  0002e	5e		 pop	 esi
$L179583:

; 789  : 		return (_Where == end() || this->comp(_Keyval, _Key(_Where._Mynode()))
; 790  : 			? end() : _Where);

  0002f	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00032	3b d0		 cmp	 edx, eax
  00034	89 54 24 14	 mov	 DWORD PTR __Where$[esp+8], edx
  00038	74 1b		 je	 SHORT $L179486
  0003a	66 8b 0f	 mov	 cx, WORD PTR [edi]
  0003d	66 3b 4a 0c	 cmp	 cx, WORD PTR [edx+12]
  00041	72 12		 jb	 SHORT $L179486
  00043	8d 44 24 14	 lea	 eax, DWORD PTR __Where$[esp+8]
  00047	8b 10		 mov	 edx, DWORD PTR [eax]
  00049	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  0004d	5f		 pop	 edi
  0004e	89 10		 mov	 DWORD PTR [eax], edx
  00050	5b		 pop	 ebx

; 791  : 		}

  00051	59		 pop	 ecx
  00052	c2 08 00	 ret	 8
$L179486:

; 789  : 		return (_Where == end() || this->comp(_Keyval, _Key(_Where._Mynode()))
; 790  : 			? end() : _Where);

  00055	89 44 24 08	 mov	 DWORD PTR $T179487[esp+12], eax
  00059	8d 44 24 08	 lea	 eax, DWORD PTR $T179487[esp+12]
  0005d	8b 10		 mov	 edx, DWORD PTR [eax]
  0005f	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  00063	5f		 pop	 edi
  00064	89 10		 mov	 DWORD PTR [eax], edx
  00066	5b		 pop	 ebx

; 791  : 		}

  00067	59		 pop	 ecx
  00068	c2 08 00	 ret	 8
?find@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABG@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::find
_TEXT	ENDS
PUBLIC	??Eiterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::iterator::operator++
; Function compile flags: /Ogty
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??Eiterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::iterator::operator++, COMDAT
; _this$ = ecx

; 332  : 			{	// postincrement

  00000	56		 push	 esi

; 333  : 			iterator _Tmp = *this;

  00001	8b 31		 mov	 esi, DWORD PTR [ecx]

; 334  : 			++*this;

  00003	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::const_iterator::_Inc

; 335  : 			return (_Tmp);

  00008	8b 44 24 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  0000c	89 30		 mov	 DWORD PTR [eax], esi
  0000e	5e		 pop	 esi

; 336  : 			}

  0000f	c2 08 00	 ret	 8
??Eiterator@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::iterator::operator++
_TEXT	ENDS
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:NEAR		; std::logic_error::`vector deleting destructor'
EXTRN	??1exception@@UAE@XZ:NEAR			; exception::~exception
;	COMDAT ??_7logic_error@std@@6B@
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
CONST	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC NEAR			; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 23   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L179717
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L179717:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC NEAR		; std::logic_error::what, COMDAT
; _this$ = ecx

; 27   : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L179751
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  00009	c3		 ret	 0

; 27   : 		return (_Str.c_str());

$L179751:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  0000d	c3		 ret	 0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC NEAR		; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1logic_error@std@@UAE@XZ ; std::logic_error::~logic_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L179757
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L179757:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 590  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 591  : 		if (_Right.size() < _Roff)

  00003	8b 74 24 14	 mov	 esi, DWORD PTR __Roff$[esp+8]
  00007	57		 push	 edi
  00008	8b 7c 24 14	 mov	 edi, DWORD PTR __Right$[esp+12]
  0000c	39 77 14	 cmp	 DWORD PTR [edi+20], esi
  0000f	8b d9		 mov	 ebx, ecx
  00011	73 05		 jae	 SHORT $L148837

; 592  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L148837:

; 593  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 6f 14	 mov	 ebp, DWORD PTR [edi+20]

; 594  : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b ee		 sub	 ebp, esi
  00021	3b c5		 cmp	 eax, ebp
  00023	73 02		 jae	 SHORT $L148839

; 595  : 			_Num = _Count;	// trim _Num to size

  00025	8b e8		 mov	 ebp, eax
$L148839:

; 596  : 
; 597  : 		if (this == &_Right)

  00027	3b df		 cmp	 ebx, edi
  00029	75 1f		 jne	 SHORT $L148840

; 598  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 ee		 add	 ebp, esi
  0002f	55		 push	 ebp
  00030	8b cb		 mov	 ecx, ebx
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	56		 push	 esi
  00038	6a 00		 push	 0
  0003a	8b cb		 mov	 ecx, ebx
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00044	8b c3		 mov	 eax, ebx
  00046	5b		 pop	 ebx

; 605  : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$L148840:

; 599  : 		else if (_Grow(_Num))

  0004a	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  0004d	76 07		 jbe	 SHORT $L179866
  0004f	8b cb		 mov	 ecx, ebx
  00051	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L179866:
  00056	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00059	3b c5		 cmp	 eax, ebp
  0005b	73 21		 jae	 SHORT $L179867
  0005d	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00060	50		 push	 eax
  00061	55		 push	 ebp
  00062	8b cb		 mov	 ecx, ebx
  00064	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00069	85 ed		 test	 ebp, ebp
$L179954:
  0006b	76 6d		 jbe	 SHORT $L179953

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  0006d	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00070	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00075	3b c8		 cmp	 ecx, eax
  00077	72 2f		 jb	 SHORT $L179919
  00079	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0007c	eb 2d		 jmp	 SHORT $L179920

; 599  : 		else if (_Grow(_Num))

$L179867:
  0007e	85 ed		 test	 ebp, ebp
  00080	75 e9		 jne	 SHORT $L179954
  00082	83 f8 10	 cmp	 eax, 16			; 00000010H
  00085	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00088	72 0f		 jb	 SHORT $L179910
  0008a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	c6 00 00	 mov	 BYTE PTR [eax], 0
  00092	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00093	8b c3		 mov	 eax, ebx
  00095	5b		 pop	 ebx

; 605  : 		}

  00096	c2 0c 00	 ret	 12			; 0000000cH

; 599  : 		else if (_Grow(_Num))

$L179910:
  00099	5f		 pop	 edi
  0009a	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  0009d	5e		 pop	 esi
  0009e	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a1	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000a2	8b c3		 mov	 eax, ebx
  000a4	5b		 pop	 ebx

; 605  : 		}

  000a5	c2 0c 00	 ret	 12			; 0000000cH

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

$L179919:
  000a8	8d 57 04	 lea	 edx, DWORD PTR [edi+4]
$L179920:
  000ab	39 43 18	 cmp	 DWORD PTR [ebx+24], eax
  000ae	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000b1	72 04		 jb	 SHORT $L179926
  000b3	8b 38		 mov	 edi, DWORD PTR [eax]
  000b5	eb 02		 jmp	 SHORT $L179927
$L179926:
  000b7	8b f8		 mov	 edi, eax
$L179927:
  000b9	03 f2		 add	 esi, edx
  000bb	8b cd		 mov	 ecx, ebp
  000bd	8b d1		 mov	 edx, ecx
  000bf	c1 e9 02	 shr	 ecx, 2
  000c2	f3 a5		 rep movsd
  000c4	8b ca		 mov	 ecx, edx
  000c6	83 e1 03	 and	 ecx, 3
  000c9	f3 a4		 rep movsb

; 602  : 			_Eos(_Num);

  000cb	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000cf	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000d2	72 02		 jb	 SHORT $L179950
  000d4	8b 00		 mov	 eax, DWORD PTR [eax]
$L179950:
  000d6	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L179953:
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000dd	8b c3		 mov	 eax, ebx
  000df	5b		 pop	 ebx

; 605  : 		}

  000e0	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Num$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 608  : 		{	// assign [_Ptr, _Ptr + _Num)

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 609  : 		if (_Inside(_Ptr))

  00003	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  00006	83 fa 10	 cmp	 edx, 16			; 00000010H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	72 05		 jb	 SHORT $L179976
  0000d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00010	eb 03		 jmp	 SHORT $L179977
$L179976:
  00012	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$L179977:
  00015	8b 74 24 10	 mov	 esi, DWORD PTR __Ptr$[esp+8]
  00019	3b f0		 cmp	 esi, eax
  0001b	72 34		 jb	 SHORT $L149761
  0001d	83 fa 10	 cmp	 edx, 16			; 00000010H
  00020	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00023	72 04		 jb	 SHORT $L179980
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	eb 02		 jmp	 SHORT $L179981
$L179980:
  00029	8b c8		 mov	 ecx, eax
$L179981:
  0002b	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  0002e	03 f9		 add	 edi, ecx
  00030	3b fe		 cmp	 edi, esi
  00032	76 1d		 jbe	 SHORT $L149761

; 610  : 			return (assign(*this, _Ptr - _Myptr(), _Num));	// substring

  00034	83 fa 10	 cmp	 edx, 16			; 00000010H
  00037	72 02		 jb	 SHORT $L179993
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$L179993:
  0003b	8b 4c 24 14	 mov	 ecx, DWORD PTR __Num$[esp+8]
  0003f	51		 push	 ecx
  00040	2b f0		 sub	 esi, eax
  00042	56		 push	 esi
  00043	53		 push	 ebx
  00044	8b cb		 mov	 ecx, ebx
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx

; 618  : 		}

  0004e	c2 08 00	 ret	 8
$L149761:
  00051	55		 push	 ebp

; 611  : 
; 612  : 		if (_Grow(_Num))

  00052	8b 6c 24 18	 mov	 ebp, DWORD PTR __Num$[esp+12]
  00056	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  00059	76 07		 jbe	 SHORT $L180091
  0005b	8b cb		 mov	 ecx, ebx
  0005d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L180091:
  00062	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00065	3b c5		 cmp	 eax, ebp
  00067	73 1b		 jae	 SHORT $L180092
  00069	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  0006c	52		 push	 edx
  0006d	55		 push	 ebp
  0006e	8b cb		 mov	 ecx, ebx
  00070	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00075	85 ed		 test	 ebp, ebp
$L180172:
  00077	76 68		 jbe	 SHORT $L180169

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

  00079	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0007d	72 2f		 jb	 SHORT $L180144
  0007f	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00082	eb 2d		 jmp	 SHORT $L180145

; 611  : 
; 612  : 		if (_Grow(_Num))

$L180092:
  00084	85 ed		 test	 ebp, ebp
  00086	75 ef		 jne	 SHORT $L180172
  00088	83 f8 10	 cmp	 eax, 16			; 00000010H
  0008b	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  0008e	72 0f		 jb	 SHORT $L180135
  00090	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00093	5d		 pop	 ebp
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0
  00098	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  00099	8b c3		 mov	 eax, ebx
  0009b	5b		 pop	 ebx

; 618  : 		}

  0009c	c2 08 00	 ret	 8

; 611  : 
; 612  : 		if (_Grow(_Num))

$L180135:
  0009f	5d		 pop	 ebp
  000a0	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000a3	5f		 pop	 edi
  000a4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a7	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000a8	8b c3		 mov	 eax, ebx
  000aa	5b		 pop	 ebx

; 618  : 		}

  000ab	c2 08 00	 ret	 8

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

$L180144:
  000ae	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
$L180145:
  000b1	8b cd		 mov	 ecx, ebp
  000b3	8b c1		 mov	 eax, ecx
  000b5	c1 e9 02	 shr	 ecx, 2
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb

; 615  : 			_Eos(_Num);

  000c1	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000c5	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000c8	72 10		 jb	 SHORT $L180167
  000ca	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000cd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  000d1	5d		 pop	 ebp
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000d4	8b c3		 mov	 eax, ebx
  000d6	5b		 pop	 ebx

; 618  : 		}

  000d7	c2 08 00	 ret	 8

; 615  : 			_Eos(_Num);

$L180167:
  000da	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000dd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L180169:
  000e1	5d		 pop	 ebp
  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000e4	8b c3		 mov	 eax, ebx
  000e6	5b		 pop	 ebx

; 618  : 		}

  000e7	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 323  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 324  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 325  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 326  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 621  : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 622  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$L180245:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $L180245
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 623  : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 361  : 		_Tidy();
; 362  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$L180320:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $L180320
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 363  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
EXTRN	??0exception@@QAE@XZ:NEAR			; exception::exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T180423 DD	0ffffffffH
	DD	FLAT:$L180324
$T180421 DD	019930520H
	DD	01H
	DD	FLAT:$T180423
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 19   : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	89 74 24 04	 mov	 DWORD PTR _this$[esp+20], esi
  0001d	e8 00 00 00 00	 call	 ??0exception@@QAE@XZ	; exception::exception
  00022	33 c0		 xor	 eax, eax
  00024	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  0002d	6a ff		 push	 -1
  0002f	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00032	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00039	50		 push	 eax
  0003a	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  0003e	88 41 04	 mov	 BYTE PTR [ecx+4], al
  00041	8b 44 24 20	 mov	 eax, DWORD PTR __Message$[esp+24]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 20   : 		}

  0004b	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  0004f	8b c6		 mov	 eax, esi
  00051	5e		 pop	 esi
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L180324:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T180421
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_Glength_error@std@@UAEPAXI@Z			; std::length_error::`scalar deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:NEAR		; std::length_error::`vector deleting destructor'
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 95   : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@

; 96   : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
; Function compile flags: /Ogty
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC NEAR		; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1length_error@std@@UAE@XZ ; std::length_error::~length_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L180433
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L180433:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC NEAR			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 99   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L180521
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L180521:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
_TEXT	ENDS
PUBLIC	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
PUBLIC	??_7out_of_range@std@@6B@			; std::out_of_range::`vftable'
PUBLIC	??_Gout_of_range@std@@UAEPAXI@Z			; std::out_of_range::`scalar deleting destructor'
EXTRN	??_Eout_of_range@std@@UAEPAXI@Z:NEAR		; std::out_of_range::`vector deleting destructor'
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT
??_7out_of_range@std@@6B@ DD FLAT:??_Eout_of_range@std@@UAEPAXI@Z ; std::out_of_range::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx

; 118  : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7out_of_range@std@@6B@

; 119  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::out_of_range::out_of_range
_TEXT	ENDS
PUBLIC	??1out_of_range@std@@UAE@XZ			; std::out_of_range::~out_of_range
; Function compile flags: /Ogty
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gout_of_range@std@@UAEPAXI@Z PROC NEAR		; std::out_of_range::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1out_of_range@std@@UAE@XZ ; std::out_of_range::~out_of_range
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L180547
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L180547:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Gout_of_range@std@@UAEPAXI@Z ENDP			; std::out_of_range::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT
??1out_of_range@std@@UAE@XZ PROC NEAR			; std::out_of_range::~out_of_range, COMDAT
; _this$ = ecx

; 122  : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L180635
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L180635:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1out_of_range@std@@UAE@XZ ENDP			; std::out_of_range::~out_of_range
_TEXT	ENDS
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVexception@@@8				; exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
PUBLIC	?_Insert@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBGPAVCTSkill@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Insert
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	??0exception@@QAE@ABV0@@Z:NEAR			; exception::exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
xdata$x	SEGMENT
$T181028 DD	0ffffffffH
	DD	FLAT:$L180659
$T181023 DD	019930520H
	DD	01H
	DD	FLAT:$T181028
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
CONST	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT
??_R0?AVexception@@@8 DD FLAT:??_7type_info@@6B@	; exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@@', 00H
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?_Insert@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBGPAVCTSkill@@@2@@Z
_TEXT	SEGMENT
$T180658 = -80						; size = 28
$T180657 = -52						; size = 40
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Newnode$ = 20						; size = 4
__Val$ = 20						; size = 4
?_Insert@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBGPAVCTSkill@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Insert, COMDAT
; _this$ = ecx

; 911  : 		{	// add node with value next to _Wherenode, to left if _Addnode

  00000	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00006	6a ff		 push	 -1
  00008	68 00 00 00 00	 push	 __ehhandler$?_Insert@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBGPAVCTSkill@@@2@@Z
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 44	 sub	 esp, 68			; 00000044H
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8b f9		 mov	 edi, ecx

; 912  : 		if (max_size() - 1 <= _Mysize)

  0001c	81 7f 08 fe ff
	ff 1f		 cmp	 DWORD PTR [edi+8], 536870910 ; 1ffffffeH
  00023	72 4c		 jb	 SHORT $L176405

; 913  : 			_THROW(length_error, "map/set<T> too long");

  00025	6a 13		 push	 19			; 00000013H
  00027	33 f6		 xor	 esi, esi
  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
  0002e	8d 4c 24 10	 lea	 ecx, DWORD PTR $T180658[esp+96]
  00032	c7 44 24 28 0f
	00 00 00	 mov	 DWORD PTR $T180658[esp+120], 15 ; 0000000fH
  0003a	89 74 24 24	 mov	 DWORD PTR $T180658[esp+116], esi
  0003e	c6 44 24 14 00	 mov	 BYTE PTR $T180658[esp+100], 0
  00043	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00048	8d 44 24 08	 lea	 eax, DWORD PTR $T180658[esp+88]
  0004c	50		 push	 eax
  0004d	8d 4c 24 28	 lea	 ecx, DWORD PTR $T180657[esp+92]
  00051	89 74 24 58	 mov	 DWORD PTR __$EHRec$[esp+100], esi
  00055	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0005a	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVlength_error@std@@
  0005f	8d 4c 24 28	 lea	 ecx, DWORD PTR $T180657[esp+92]
  00063	51		 push	 ecx
  00064	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR $T180657[esp+96], OFFSET FLAT:??_7length_error@std@@6B@
  0006c	e8 00 00 00 00	 call	 __CxxThrowException@8
$L181029:
$L176405:

; 914  : 		_Nodeptr _Newnode = _Buynode(_Myhead, _Wherenode, _Myhead,
; 915  : 			_Val, _Red);

  00071	8b 54 24 68	 mov	 edx, DWORD PTR __Val$[esp+84]
  00075	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00078	8b 74 24 64	 mov	 esi, DWORD PTR __Wherenode$[esp+84]
  0007c	53		 push	 ebx
  0007d	6a 00		 push	 0
  0007f	52		 push	 edx
  00080	50		 push	 eax
  00081	56		 push	 esi
  00082	50		 push	 eax
  00083	8b cf		 mov	 ecx, edi
  00085	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBGPAVCTSkill@@@2@D@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Buynode

; 916  : 
; 917  : 		++_Mysize;

  0008a	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0008d	8b c8		 mov	 ecx, eax

; 918  : 		if (_Wherenode == _Myhead)

  0008f	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00092	43		 inc	 ebx
  00093	3b f0		 cmp	 esi, eax
  00095	89 4c 24 6c	 mov	 DWORD PTR __Newnode$[esp+88], ecx
  00099	89 5f 08	 mov	 DWORD PTR [edi+8], ebx
  0009c	75 10		 jne	 SHORT $L176411

; 919  : 			{	// first node in tree, just set head values
; 920  : 			_Root() = _Newnode;

  0009e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 921  : 			_Lmost() = _Newnode, _Rmost() = _Newnode;

  000a1	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a4	89 08		 mov	 DWORD PTR [eax], ecx
  000a6	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  000a9	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 922  : 			}
; 923  : 		else if (_Addleft)

  000ac	eb 23		 jmp	 SHORT $L176416
$L176411:
  000ae	8a 44 24 64	 mov	 al, BYTE PTR __Addleft$[esp+88]
  000b2	84 c0		 test	 al, al
  000b4	74 0d		 je	 SHORT $L176413

; 924  : 			{	// add to left of _Wherenode
; 925  : 			_Left(_Wherenode) = _Newnode;

  000b6	89 0e		 mov	 DWORD PTR [esi], ecx

; 926  : 			if (_Wherenode == _Lmost())

  000b8	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000bb	3b 30		 cmp	 esi, DWORD PTR [eax]
  000bd	75 12		 jne	 SHORT $L176416

; 927  : 				_Lmost() = _Newnode;

  000bf	89 08		 mov	 DWORD PTR [eax], ecx

; 928  : 			}
; 929  : 		else

  000c1	eb 0e		 jmp	 SHORT $L176416
$L176413:

; 930  : 			{	// add to right of _Wherenode
; 931  : 			_Right(_Wherenode) = _Newnode;

  000c3	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 932  : 			if (_Wherenode == _Rmost())

  000c6	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000c9	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  000cc	75 03		 jne	 SHORT $L176416

; 933  : 				_Rmost() = _Newnode;

  000ce	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$L176416:

; 934  : 			}
; 935  : 
; 936  : 		for (_Nodeptr _Pnode = _Newnode; _Color(_Parent(_Pnode)) == _Red; )

  000d1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d4	80 7a 14 00	 cmp	 BYTE PTR [edx+20], 0
  000d8	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  000db	8b f1		 mov	 esi, ecx
  000dd	b3 01		 mov	 bl, 1
  000df	0f 85 a5 00 00
	00		 jne	 $L176420
  000e5	55		 push	 ebp
$L176419:

; 937  : 			if (_Parent(_Pnode) == _Left(_Parent(_Parent(_Pnode))))

  000e6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e8	8b 69 04	 mov	 ebp, DWORD PTR [ecx+4]
  000eb	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  000ee	3b ca		 cmp	 ecx, edx
  000f0	75 50		 jne	 SHORT $L176421

; 938  : 				{	// fixup red-red in left subtree
; 939  : 				_Wherenode = _Right(_Parent(_Parent(_Pnode)));

  000f2	8b 55 08	 mov	 edx, DWORD PTR [ebp+8]

; 940  : 				if (_Color(_Wherenode) == _Red)

  000f5	80 7a 14 00	 cmp	 BYTE PTR [edx+20], 0
  000f9	75 18		 jne	 SHORT $L176422
$L181027:

; 941  : 					{	// parent has two red children, blacken both
; 942  : 					_Color(_Parent(_Pnode)) = _Black;

  000fb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fd	88 59 14	 mov	 BYTE PTR [ecx+20], bl

; 943  : 					_Color(_Wherenode) = _Black;

  00100	88 5a 14	 mov	 BYTE PTR [edx+20], bl

; 944  : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

  00103	8b 10		 mov	 edx, DWORD PTR [eax]
  00105	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00108	c6 41 14 00	 mov	 BYTE PTR [ecx+20], 0

; 945  : 					_Pnode = _Parent(_Parent(_Pnode));

  0010c	8b 10		 mov	 edx, DWORD PTR [eax]
  0010e	8b 72 04	 mov	 esi, DWORD PTR [edx+4]

; 946  : 					}
; 947  : 				else

  00111	eb 61		 jmp	 SHORT $L176427
$L176422:

; 948  : 					{	// parent has red and black children
; 949  : 					if (_Pnode == _Right(_Parent(_Pnode)))

  00113	3b 71 08	 cmp	 esi, DWORD PTR [ecx+8]
  00116	75 0a		 jne	 SHORT $L176424

; 950  : 						{	// rotate right child to left
; 951  : 						_Pnode = _Parent(_Pnode);

  00118	8b f1		 mov	 esi, ecx

; 952  : 						_Lrotate(_Pnode);

  0011a	56		 push	 esi
  0011b	8b cf		 mov	 ecx, edi
  0011d	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Lrotate
$L176424:

; 953  : 						}
; 954  : 					_Color(_Parent(_Pnode)) = _Black;	// propagate red up

  00122	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00125	88 58 14	 mov	 BYTE PTR [eax+20], bl

; 955  : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

  00128	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0012b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0012e	c6 42 14 00	 mov	 BYTE PTR [edx+20], 0

; 956  : 					_Rrotate(_Parent(_Parent(_Pnode)));

  00132	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00135	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00138	51		 push	 ecx
  00139	8b cf		 mov	 ecx, edi
  0013b	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Rrotate

; 957  : 					}
; 958  : 				}
; 959  : 			else

  00140	eb 32		 jmp	 SHORT $L176427
$L176421:

; 960  : 				{	// fixup red-red in right subtree
; 961  : 				_Wherenode = _Left(_Parent(_Parent(_Pnode)));
; 962  : 				if (_Color(_Wherenode) == _Red)

  00142	80 7a 14 00	 cmp	 BYTE PTR [edx+20], 0

; 963  : 					{	// parent has two red children, blacken both
; 964  : 					_Color(_Parent(_Pnode)) = _Black;
; 965  : 					_Color(_Wherenode) = _Black;
; 966  : 					_Color(_Parent(_Parent(_Pnode))) = _Red;
; 967  : 					_Pnode = _Parent(_Parent(_Pnode));
; 968  : 					}
; 969  : 				else

  00146	74 b3		 je	 SHORT $L181027

; 970  : 					{	// parent has red and black children
; 971  : 					if (_Pnode == _Left(_Parent(_Pnode)))

  00148	3b 31		 cmp	 esi, DWORD PTR [ecx]
  0014a	75 0a		 jne	 SHORT $L176428

; 972  : 						{	// rotate left child to right
; 973  : 						_Pnode = _Parent(_Pnode);

  0014c	8b f1		 mov	 esi, ecx

; 974  : 						_Rrotate(_Pnode);

  0014e	56		 push	 esi
  0014f	8b cf		 mov	 ecx, edi
  00151	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Rrotate
$L176428:

; 975  : 						}
; 976  : 					_Color(_Parent(_Pnode)) = _Black;	// propagate red up

  00156	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00159	88 58 14	 mov	 BYTE PTR [eax+20], bl

; 977  : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

  0015c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0015f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00162	c6 42 14 00	 mov	 BYTE PTR [edx+20], 0

; 978  : 					_Lrotate(_Parent(_Parent(_Pnode)));

  00166	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00169	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0016c	51		 push	 ecx
  0016d	8b cf		 mov	 ecx, edi
  0016f	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Lrotate
$L176427:
  00174	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00177	8a 4a 14	 mov	 cl, BYTE PTR [edx+20]
  0017a	84 c9		 test	 cl, cl
  0017c	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0017f	0f 84 61 ff ff
	ff		 je	 $L176419
  00185	8b 4c 24 70	 mov	 ecx, DWORD PTR __Newnode$[esp+92]
  00189	5d		 pop	 ebp
$L176420:

; 979  : 					}
; 980  : 				}
; 981  : 
; 982  : 		_Color(_Root()) = _Black;	// root is always black

  0018a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0018d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 983  : 		return (_TREE_ITERATOR(_Newnode));

  00190	8b 44 24 60	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+88]
  00194	88 5a 14	 mov	 BYTE PTR [edx+20], bl
  00197	5b		 pop	 ebx
  00198	89 08		 mov	 DWORD PTR [eax], ecx

; 984  : 		}

  0019a	8b 4c 24 4c	 mov	 ecx, DWORD PTR __$EHRec$[esp+88]
  0019e	5f		 pop	 edi
  0019f	5e		 pop	 esi
  001a0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001a7	83 c4 50	 add	 esp, 80			; 00000050H
  001aa	c2 10 00	 ret	 16			; 00000010H
$L181026:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L180659:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T180658[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Insert@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBGPAVCTSkill@@@2@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T181023
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Insert@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBGPAVCTSkill@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Insert
;	COMDAT xdata$x
xdata$x	SEGMENT
$T181134 DD	0ffffffffH
	DD	FLAT:$L181035
$T181132 DD	019930520H
	DD	01H
	DD	FLAT:$T181134
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC NEAR		; std::logic_error::logic_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 1c	 mov	 edi, DWORD PTR ___that$[esp+20]
  0001c	8b f1		 mov	 esi, ecx
  0001e	57		 push	 edi
  0001f	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00023	e8 00 00 00 00	 call	 ??0exception@@QAE@ABV0@@Z ; exception::exception
  00028	33 c0		 xor	 eax, eax
  0002a	6a ff		 push	 -1
  0002c	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00035	50		 push	 eax
  00036	83 c7 0c	 add	 edi, 12			; 0000000cH
  00039	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00040	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00043	57		 push	 edi
  00044	89 44 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], eax
  00048	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00050	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00054	5f		 pop	 edi
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L181035:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T181132
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Ogty
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC NEAR		; std::length_error::length_error, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
PUBLIC	??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@ ; `string'
PUBLIC	?_Xran@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@IBEXXZ ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::_Xran
PUBLIC	??0out_of_range@std@@QAE@ABV01@@Z		; std::out_of_range::out_of_range
PUBLIC	__TI3?AVout_of_range@std@@
PUBLIC	__CTA3?AVout_of_range@std@@
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	SEGMENT
$T181260 DD	0ffffffffH
	DD	FLAT:$L181146
$T181257 DD	019930520H
	DD	01H
	DD	FLAT:$T181260
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
CONST	SEGMENT
??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@ DB 'invalid v'
	DB	'ector<T> subscript', 00H			; `string'
CONST	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT
__TI3?AVout_of_range@std@@ DD 00H
	DD	FLAT:??1out_of_range@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVout_of_range@std@@
xdata$x	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT
__CTA3?AVout_of_range@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
_DATA	ENDS
;	COMDAT ?_Xran@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
$T181145 = -80						; size = 28
$T181144 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xran@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@IBEXXZ PROC NEAR ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::_Xran, COMDAT
; _this$ = ecx

; 888  : 		{	// report an out_of_range error

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Xran@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@IBEXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 44	 sub	 esp, 68			; 00000044H

; 889  : 		_THROW(out_of_range, "invalid vector<T> subscript");

  00018	6a 1b		 push	 27			; 0000001bH
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
  0001f	8d 4c 24 08	 lea	 ecx, DWORD PTR $T181145[esp+88]
  00023	c7 44 24 20 0f
	00 00 00	 mov	 DWORD PTR $T181145[esp+112], 15 ; 0000000fH
  0002b	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T181145[esp+108], 0
  00033	c6 44 24 0c 00	 mov	 BYTE PTR $T181145[esp+92], 0
  00038	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0003d	8d 04 24	 lea	 eax, DWORD PTR $T181145[esp+80]
  00040	50		 push	 eax
  00041	8d 4c 24 20	 lea	 ecx, DWORD PTR $T181144[esp+84]
  00045	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+92], 0
  0004d	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00052	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVout_of_range@std@@
  00057	8d 4c 24 20	 lea	 ecx, DWORD PTR $T181144[esp+84]
  0005b	51		 push	 ecx
  0005c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T181144[esp+88], OFFSET FLAT:??_7out_of_range@std@@6B@
  00064	e8 00 00 00 00	 call	 __CxxThrowException@8
$L181261:
$L181259:
  00069	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L181146:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T181145[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xran@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@IBEXXZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T181257
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Xran@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@IBEXXZ ENDP ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::_Xran
; Function compile flags: /Ogty
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV01@@Z PROC NEAR		; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7out_of_range@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0out_of_range@std@@QAE@ABV01@@Z ENDP			; std::out_of_range::out_of_range
_TEXT	ENDS
PUBLIC	?insert@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBGPAVCTSkill@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::insert
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?insert@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBGPAVCTSkill@@@2@@Z
_TEXT	SEGMENT
__Addleft$ = -4						; size = 1
___$ReturnUdt$ = 8					; size = 4
$T181279 = 12						; size = 4
$T181277 = 12						; size = 4
__Where$176058 = 12					; size = 4
__Val$ = 12						; size = 4
?insert@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBGPAVCTSkill@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::insert, COMDAT
; _this$ = ecx

; 477  : 		{	// try to insert node with value _Val

  00000	51		 push	 ecx
  00001	55		 push	 ebp

; 479  : 		_Nodeptr _Wherenode = _Myhead;
; 480  : 		bool _Addleft = true;	// add to left of head if tree empty
; 481  : 		while (!_Isnil(_Trynode))

  00002	8b 6c 24 10	 mov	 ebp, DWORD PTR __Val$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0000d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00010	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00013	84 d2		 test	 dl, dl
  00015	b1 01		 mov	 cl, 1
  00017	88 4c 24 0c	 mov	 BYTE PTR __Addleft$[esp+16], cl
  0001b	75 22		 jne	 SHORT $L176048

; 478  : 		_Nodeptr _Trynode = _Root();

  0001d	66 8b 55 00	 mov	 dx, WORD PTR [ebp]
$L176047:

; 482  : 			{	// look for leaf to insert before (_Addleft) or after
; 483  : 			_Wherenode = _Trynode;
; 484  : 			_Addleft = this->comp(this->_Kfn(_Val), _Key(_Trynode));

  00021	66 3b 50 0c	 cmp	 dx, WORD PTR [eax+12]
  00025	8b f0		 mov	 esi, eax
  00027	0f 92 c1	 setb	 cl

; 485  : 			_Trynode = _Addleft ? _Left(_Trynode) : _Right(_Trynode);

  0002a	84 c9		 test	 cl, cl
  0002c	88 4c 24 0c	 mov	 BYTE PTR __Addleft$[esp+16], cl
  00030	74 04		 je	 SHORT $L181271
  00032	8b 00		 mov	 eax, DWORD PTR [eax]
  00034	eb 03		 jmp	 SHORT $L181272
$L181271:
  00036	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
$L181272:

; 479  : 		_Nodeptr _Wherenode = _Myhead;
; 480  : 		bool _Addleft = true;	// add to left of head if tree empty
; 481  : 		while (!_Isnil(_Trynode))

  00039	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0003d	74 e2		 je	 SHORT $L176047
$L176048:

; 486  : 			}
; 487  : 
; 488  : 		if (this->_Multi)
; 489  : 			return (_Pairib(_Insert(_Addleft, _Wherenode, _Val), true));
; 490  : 		else
; 491  : 			{	// insert only if unique
; 492  : 			iterator _Where = _TREE_ITERATOR(_Wherenode);
; 493  : 			if (!_Addleft)

  0003f	84 c9		 test	 cl, cl
  00041	8b d6		 mov	 edx, esi
  00043	89 54 24 18	 mov	 DWORD PTR __Where$176058[esp+12], edx
  00047	74 33		 je	 SHORT $L181371

; 494  : 				;	// need to test if insert after is okay
; 495  : 			else if (_Where == begin())

  00049	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004c	3b 30		 cmp	 esi, DWORD PTR [eax]

; 496  : 				return (_Pairib(_Insert(true, _Wherenode, _Val), true));

  0004e	8d 4c 24 18	 lea	 ecx, DWORD PTR $T181277[esp+12]
  00052	75 1f		 jne	 SHORT $L176063
  00054	55		 push	 ebp
  00055	56		 push	 esi
  00056	6a 01		 push	 1
  00058	51		 push	 ecx
  00059	8b cf		 mov	 ecx, edi
  0005b	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBGPAVCTSkill@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Insert
  00060	8b 10		 mov	 edx, DWORD PTR [eax]
  00062	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 502  : 			else
; 503  : 				return (_Pairib(_Where, false));

  0006c	89 10		 mov	 DWORD PTR [eax], edx
  0006e	5d		 pop	 ebp

; 504  : 			}
; 505  : 		}

  0006f	59		 pop	 ecx
  00070	c2 08 00	 ret	 8
$L176063:

; 497  : 			else
; 498  : 				--_Where;	// need to test if insert before is okay

  00073	e8 00 00 00 00	 call	 ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::const_iterator::_Dec
  00078	8b 54 24 18	 mov	 edx, DWORD PTR __Where$176058[esp+12]
$L181371:

; 499  : 
; 500  : 			if (this->comp(_Key(_Where._Mynode()), this->_Kfn(_Val)))

  0007c	66 8b 42 0c	 mov	 ax, WORD PTR [edx+12]
  00080	66 3b 45 00	 cmp	 ax, WORD PTR [ebp]
  00084	73 26		 jae	 SHORT $L176068

; 501  : 				return (_Pairib(_Insert(_Addleft, _Wherenode, _Val), true));

  00086	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Addleft$[esp+16]
  0008a	55		 push	 ebp
  0008b	56		 push	 esi
  0008c	51		 push	 ecx
  0008d	8d 54 24 24	 lea	 edx, DWORD PTR $T181279[esp+24]
  00091	52		 push	 edx
  00092	8b cf		 mov	 ecx, edi
  00094	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBGPAVCTSkill@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::_Insert
  00099	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009b	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  0009f	5f		 pop	 edi
  000a0	5e		 pop	 esi
  000a1	89 08		 mov	 DWORD PTR [eax], ecx
  000a3	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  000a7	5d		 pop	 ebp

; 504  : 			}
; 505  : 		}

  000a8	59		 pop	 ecx
  000a9	c2 08 00	 ret	 8
$L176068:

; 502  : 			else
; 503  : 				return (_Pairib(_Where, false));

  000ac	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  000b0	5f		 pop	 edi
  000b1	5e		 pop	 esi
  000b2	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
  000b6	89 10		 mov	 DWORD PTR [eax], edx
  000b8	5d		 pop	 ebp

; 504  : 			}
; 505  : 		}

  000b9	59		 pop	 ecx
  000ba	c2 08 00	 ret	 8
?insert@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBGPAVCTSkill@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::insert
_TEXT	ENDS
PUBLIC	?at@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QAEAAPAUtagTMONSPAWN@@I@Z ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::at
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?at@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QAEAAPAUtagTMONSPAWN@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
?at@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QAEAAPAUtagTMONSPAWN@@I@Z PROC NEAR ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::at, COMDAT
; _this$ = ecx

; 543  : 		if (size() <= _Pos)

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	56		 push	 esi
  00006	74 10		 je	 SHORT $L181450
  00008	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000b	8b 74 24 08	 mov	 esi, DWORD PTR __Pos$[esp]
  0000f	2b c2		 sub	 eax, edx
  00011	c1 f8 02	 sar	 eax, 2
  00014	3b c6		 cmp	 eax, esi
  00016	77 05		 ja	 SHORT $L176188
$L181450:

; 544  : 			_Xran();

  00018	e8 00 00 00 00	 call	 ?_Xran@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@IBEXXZ ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::_Xran
$L181452:
$L176188:

; 545  : 		return (*(begin() + _Pos));

  0001d	8d 04 b2	 lea	 eax, DWORD PTR [edx+esi*4]
  00020	5e		 pop	 esi

; 546  : 		}

  00021	c2 04 00	 ret	 4
$L181451:
?at@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@QAEAAPAUtagTMONSPAWN@@I@Z ENDP ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::at
_TEXT	ENDS
PUBLIC	??_C@_0CJ@JEEKFGOG@?$CFd?5Monster?5have?5no?5data?5in?5TMONS@ ; `string'
PUBLIC	??_C@_0CO@GPAJNNPI@?$CFd?5Monster?5have?5no?5ATTR?5data?5in?5@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@3c8efa35
PUBLIC	__real@3f000000
EXTRN	?_AtlModule@@3VCTMapSvrModule@@A:BYTE		; _AtlModule
EXTRN	?EnterMAP@CTMap@@QAEXPAVCTMonster@@@Z:NEAR	; CTMap::EnterMAP
EXTRN	?ExecAI@CTAICommand@@UAEEPAVCTMonster@@KKE@Z:NEAR ; CTAICommand::ExecAI
EXTRN	?FindMonster@CTMap@@QAEPAVCTMonster@@K@Z:NEAR	; CTMap::FindMonster
EXTRN	?FindMonSpawn@CTMap@@QAEPAVCTMonSpawn@@G@Z:NEAR	; CTMap::FindMonSpawn
EXTRN	?FindTMonster@CTMapSvrModule@@QAEPAUtagTMONSTER@@G@Z:NEAR ; CTMapSvrModule::FindTMonster
EXTRN	?FindTLevel@CTMapSvrModule@@QAEPAUtagTLEVEL@@E@Z:NEAR ; CTMapSvrModule::FindTLevel
EXTRN	?FindTClass@CTMapSvrModule@@QAEPAUtagTSTAT@@E@Z:NEAR ; CTMapSvrModule::FindTClass
EXTRN	?FindTRace@CTMapSvrModule@@QAEPAUtagTSTAT@@E@Z:NEAR ; CTMapSvrModule::FindTRace
EXTRN	?FindTSkill@CTMapSvrModule@@QAEPAVCTSkillTemp@@G@Z:NEAR ; CTMapSvrModule::FindTSkill
EXTRN	?FindOccupationZone@CTMapSvrModule@@QAEPAUtagLOCAL@@G@Z:NEAR ; CTMapSvrModule::FindOccupationZone
EXTRN	?FindMonAttr@CTMapSvrModule@@QAEPAUtagTMONATTR@@K@Z:NEAR ; CTMapSvrModule::FindMonAttr
EXTRN	_rand:NEAR
EXTRN	??0CTSkill@@QAE@XZ:NEAR				; CTSkill::CTSkill
EXTRN	?SetKeeper@CTMonster@@QAEXEK@Z:NEAR		; CTMonster::SetKeeper
EXTRN	?ResetHost@CTMonster@@QAEXXZ:NEAR		; CTMonster::ResetHost
EXTRN	?FindTInven@CTObjBase@@QAEPAVCTInven@@E@Z:NEAR	; CTObjBase::FindTInven
;	COMDAT xdata$x
xdata$x	SEGMENT
$T183071 DD	0ffffffffH
	DD	FLAT:$L181481
$T183030 DD	019930520H
	DD	01H
	DD	FLAT:$T183071
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0CJ@JEEKFGOG@?$CFd?5Monster?5have?5no?5data?5in?5TMONS@
CONST	SEGMENT
??_C@_0CJ@JEEKFGOG@?$CFd?5Monster?5have?5no?5data?5in?5TMONS@ DB '%d Mons'
	DB	'ter have no data in TMONSTERCHART', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@GPAJNNPI@?$CFd?5Monster?5have?5no?5ATTR?5data?5in?5@
CONST	SEGMENT
??_C@_0CO@GPAJNNPI@?$CFd?5Monster?5have?5no?5ATTR?5data?5in?5@ DB '%d Mon'
	DB	'ster have no ATTR data in TMONATTRCHART', 00H ; `string'
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\taicmdregen.cpp
CONST	ENDS
;	COMDAT ?ExecAI@CTAICmdRegen@@UAEEPAVCTMonster@@KKE@Z
_TEXT	SEGMENT
$T181463 = -28						; size = 8
$T181464 = -20						; size = 8
__$EHRec$ = -12						; size = 12
tv2122 = 8						; size = 4
tv2115 = 8						; size = 4
tv2095 = 8						; size = 4
_fLength$175869 = 8					; size = 4
_fRad$175866 = 8					; size = 4
_fRangeZ$175863 = 8					; size = 4
$T181460 = 8						; size = 4
_itSp$175560 = 8					; size = 4
_pMON$ = 8						; size = 4
_dwEventHost$ = 12					; size = 4
_dwRHId$ = 16						; size = 4
tv2088 = 20						; size = 4
_bRHType$ = 20						; size = 1
_fLength$175865 = 20					; size = 4
?ExecAI@CTAICmdRegen@@UAEEPAVCTMonster@@KKE@Z PROC NEAR	; CTAICmdRegen::ExecAI, COMDAT
; _this$ = ecx

; 31   : {

  00000	6a ff		 push	 -1
  00002	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00008	68 00 00 00 00	 push	 __ehhandler$?ExecAI@CTAICmdRegen@@UAEEPAVCTMonster@@KKE@Z
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 10	 sub	 esp, 16			; 00000010H
  00018	53		 push	 ebx
  00019	55		 push	 ebp
  0001a	56		 push	 esi

; 32   : 	if(!pMON->m_pSPAWN->m_pSPAWN->m_bEvent &&
; 33   : 		pMON->m_pSPAWN->m_pSPAWN->m_lpvGroup &&
; 34   : 		!pMON->m_pSPAWN->m_pSPAWN->m_lpvGroup->empty() )

  0001b	8b 74 24 2c	 mov	 esi, DWORD PTR _pMON$[esp+36]
  0001f	8b 86 e8 00 00
	00		 mov	 eax, DWORD PTR [esi+232]
  00025	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00028	8b e9		 mov	 ebp, ecx
  0002a	8a 48 5c	 mov	 cl, BYTE PTR [eax+92]
  0002d	84 c9		 test	 cl, cl
  0002f	57		 push	 edi
  00030	0f 85 9f 00 00
	00		 jne	 $L183063
  00036	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00039	85 c9		 test	 ecx, ecx
  0003b	0f 84 94 00 00
	00		 je	 $L183063
  00041	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00044	85 d2		 test	 edx, edx
  00046	0f 84 89 00 00
	00		 je	 $L183063
  0004c	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0004f	2b c2		 sub	 eax, edx
  00051	c1 f8 02	 sar	 eax, 2
  00054	85 c0		 test	 eax, eax
  00056	74 7d		 je	 SHORT $L183063

; 35   : 	{
; 36   : 		BYTE bGroupOrder = BYTE(rand() % pMON->m_pSPAWN->m_pSPAWN->m_lpvGroup->size());

  00058	8b c2		 mov	 eax, edx
  0005a	85 c0		 test	 eax, eax
  0005c	75 04		 jne	 SHORT $L181502
  0005e	33 ff		 xor	 edi, edi
  00060	eb 08		 jmp	 SHORT $L181503
$L181502:
  00062	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  00065	2b f8		 sub	 edi, eax
  00067	c1 ff 02	 sar	 edi, 2
$L181503:
  0006a	e8 00 00 00 00	 call	 _rand
  0006f	33 d2		 xor	 edx, edx
  00071	f7 f7		 div	 edi

; 37   : 		MAPTMONSPAWN::iterator itSp = pMON->m_pMAP->m_mapTMONSPAWN.find(pMON->m_pSPAWN->m_pSPAWN->m_lpvGroup->at(bGroupOrder)->m_wID);

  00073	8b 8e e8 00 00
	00		 mov	 ecx, DWORD PTR [esi+232]
  00079	0f b6 da	 movzx	 ebx, dl
  0007c	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0007f	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00082	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00085	85 c0		 test	 eax, eax
  00087	74 0c		 je	 SHORT $L183053
  00089	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0008c	2b d0		 sub	 edx, eax
  0008e	c1 fa 02	 sar	 edx, 2
  00091	3b d3		 cmp	 edx, ebx
  00093	77 05		 ja	 SHORT $L181549
$L183053:
  00095	e8 00 00 00 00	 call	 ?_Xran@?$vector@PAUtagTMONSPAWN@@V?$allocator@PAUtagTMONSPAWN@@@std@@@std@@IBEXXZ ; std::vector<tagTMONSPAWN *,std::allocator<tagTMONSPAWN *> >::_Xran
$L183072:
$L181549:
  0009a	8b 04 98	 mov	 eax, DWORD PTR [eax+ebx*4]
  0009d	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  000a0	8d 79 04	 lea	 edi, DWORD PTR [ecx+4]
  000a3	83 c0 34	 add	 eax, 52			; 00000034H
  000a6	50		 push	 eax
  000a7	8d 4c 24 34	 lea	 ecx, DWORD PTR _itSp$175560[esp+44]
  000ab	51		 push	 ecx
  000ac	8b cf		 mov	 ecx, edi
  000ae	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@GPAVCTMonSpawn@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTMonSpawn@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABG@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTMonSpawn *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTMonSpawn *> >,0> >::find

; 38   : 		if(itSp != pMON->m_pMAP->m_mapTMONSPAWN.end())

  000b3	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  000b6	8b 44 24 30	 mov	 eax, DWORD PTR _itSp$175560[esp+40]
  000ba	3b c7		 cmp	 eax, edi
  000bc	74 17		 je	 SHORT $L183063

; 39   : 		{
; 40   : 			if(!(*itSp).second->m_vTMON.empty())

  000be	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  000c1	8d 78 08	 lea	 edi, DWORD PTR [eax+8]
  000c4	8b cf		 mov	 ecx, edi
  000c6	e8 00 00 00 00	 call	 ?empty@?$vector@PAVCTMonster@@V?$allocator@PAVCTMonster@@@std@@@std@@QBE_NXZ ; std::vector<CTMonster *,std::allocator<CTMonster *> >::empty
  000cb	84 c0		 test	 al, al
  000cd	75 06		 jne	 SHORT $L183063

; 41   : 				pMON = (*itSp).second->m_vTMON.back();

  000cf	8b 7f 08	 mov	 edi, DWORD PTR [edi+8]
  000d2	8b 77 fc	 mov	 esi, DWORD PTR [edi-4]
$L183063:

; 42   : 		}
; 43   : 	}
; 44   : 
; 45   : 	BYTE bRegen = BYTE(rand() % 100) < pMON->m_pSPAWN->m_pSPAWN->m_bProb ? TRUE : FALSE;

  000d5	e8 00 00 00 00	 call	 _rand
  000da	99		 cdq
  000db	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  000e0	f7 f9		 idiv	 ecx
  000e2	8b 86 e8 00 00
	00		 mov	 eax, DWORD PTR [esi+232]
  000e8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000eb	3a 51 53	 cmp	 dl, BYTE PTR [ecx+83]
  000ee	0f 92 c0	 setb	 al

; 46   : 
; 47   : 	if(bRegen)

  000f1	84 c0		 test	 al, al
  000f3	0f 84 a5 06 00
	00		 je	 $L183052

; 48   : 	{
; 49   : 		if(!pMON->m_pMON)

  000f9	8b 86 ec 00 00
	00		 mov	 eax, DWORD PTR [esi+236]
  000ff	85 c0		 test	 eax, eax
  00101	0f 85 4a 02 00
	00		 jne	 $L175742

; 50   : 		{
; 51   : 			DWORD dwRand = rand();

  00107	e8 00 00 00 00	 call	 _rand

; 52   : 			DWORD dwTotal = 0;
; 53   : 
; 54   : 			for( int i=0; i<INT(pMON->m_pSPAWN->m_pSPAWN->m_vMAPMON.size()); i++)

  0010c	8b 96 e8 00 00
	00		 mov	 edx, DWORD PTR [esi+232]
  00112	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00115	33 ed		 xor	 ebp, ebp
  00117	33 db		 xor	 ebx, ebx
  00119	8d a4 24 00 00
	00 00		 npad	 7
$L175589:
  00120	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00123	85 ff		 test	 edi, edi
  00125	75 04		 jne	 SHORT $L181700
  00127	33 d2		 xor	 edx, edx
  00129	eb 08		 jmp	 SHORT $L181701
$L181700:
  0012b	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0012e	2b d7		 sub	 edx, edi
  00130	c1 fa 02	 sar	 edx, 2
$L181701:
  00133	3b da		 cmp	 ebx, edx
  00135	7d 1a		 jge	 SHORT $L175591
  00137	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 55   : 				if(!pMON->m_pSPAWN->m_pSPAWN->m_vMAPMON[i]->m_bEssential)

  0013a	8b 3c 9a	 mov	 edi, DWORD PTR [edx+ebx*4]
  0013d	80 7f 05 00	 cmp	 BYTE PTR [edi+5], 0
  00141	8d 14 9a	 lea	 edx, DWORD PTR [edx+ebx*4]
  00144	75 08		 jne	 SHORT $L175590

; 56   : 					dwTotal += pMON->m_pSPAWN->m_pSPAWN->m_vMAPMON[i]->m_bProb;

  00146	8b d7		 mov	 edx, edi
  00148	0f b6 52 06	 movzx	 edx, BYTE PTR [edx+6]
  0014c	03 ea		 add	 ebp, edx
$L175590:

; 52   : 			DWORD dwTotal = 0;
; 53   : 
; 54   : 			for( int i=0; i<INT(pMON->m_pSPAWN->m_pSPAWN->m_vMAPMON.size()); i++)

  0014e	43		 inc	 ebx
  0014f	eb cf		 jmp	 SHORT $L175589
$L175591:

; 57   : 
; 58   : 			dwRand = dwTotal ? dwRand % dwTotal : 0;

  00151	33 d2		 xor	 edx, edx
  00153	85 ed		 test	 ebp, ebp
  00155	74 02		 je	 SHORT $L181458
  00157	f7 f5		 div	 ebp
$L181458:

; 59   : 			dwTotal = 0;

  00159	33 ed		 xor	 ebp, ebp

; 60   : 
; 61   : 			for( i=0; i<INT(pMON->m_pSPAWN->m_pSPAWN->m_vMAPMON.size()); i++)

  0015b	33 db		 xor	 ebx, ebx
  0015d	8d 49 00	 npad	 3
$L175593:
  00160	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00163	85 ff		 test	 edi, edi
  00165	75 04		 jne	 SHORT $L181820
  00167	33 c0		 xor	 eax, eax
  00169	eb 08		 jmp	 SHORT $L181821
$L181820:
  0016b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0016e	2b c7		 sub	 eax, edi
  00170	c1 f8 02	 sar	 eax, 2
$L181821:
  00173	3b d8		 cmp	 ebx, eax
  00175	0f 8d c8 01 00
	00		 jge	 $L183064

; 62   : 				if(!pMON->m_pSPAWN->m_pSPAWN->m_vMAPMON[i]->m_bEssential)

  0017b	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0017e	8b 04 98	 mov	 eax, DWORD PTR [eax+ebx*4]
  00181	80 78 05 00	 cmp	 BYTE PTR [eax+5], 0
  00185	75 10		 jne	 SHORT $L175594

; 63   : 				{
; 64   : 					dwTotal += pMON->m_pSPAWN->m_pSPAWN->m_vMAPMON[i]->m_bProb;

  00187	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0018a	8b 04 98	 mov	 eax, DWORD PTR [eax+ebx*4]
  0018d	0f b6 40 06	 movzx	 eax, BYTE PTR [eax+6]
  00191	03 e8		 add	 ebp, eax

; 65   : 
; 66   : 					if( dwRand < dwTotal )

  00193	3b d5		 cmp	 edx, ebp
  00195	72 03		 jb	 SHORT $L183043
$L175594:

; 60   : 
; 61   : 			for( i=0; i<INT(pMON->m_pSPAWN->m_pSPAWN->m_vMAPMON.size()); i++)

  00197	43		 inc	 ebx
  00198	eb c6		 jmp	 SHORT $L175593
$L183043:

; 67   : 					{
; 68   : 						pMON->m_pMON = _AtlModule.FindTMonster(pMON->m_pSPAWN->m_pSPAWN->m_vMAPMON[i]->m_wMonID);

  0019a	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0019d	8b 0c 99	 mov	 ecx, DWORD PTR [ecx+ebx*4]
  001a0	8d 3c 9d 00 00
	00 00		 lea	 edi, DWORD PTR [ebx*4]
  001a7	33 d2		 xor	 edx, edx
  001a9	66 8b 51 02	 mov	 dx, WORD PTR [ecx+2]
  001ad	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?_AtlModule@@3VCTMapSvrModule@@A
  001b2	52		 push	 edx
  001b3	e8 00 00 00 00	 call	 ?FindTMonster@CTMapSvrModule@@QAEPAUtagTMONSTER@@G@Z ; CTMapSvrModule::FindTMonster

; 69   : 
; 70   : 						if(!pMON->m_pMON)

  001b8	85 c0		 test	 eax, eax
  001ba	89 86 ec 00 00
	00		 mov	 DWORD PTR [esi+236], eax
  001c0	75 26		 jne	 SHORT $L175598

; 71   : 							_AtlModule.LogEvent("%d Monster have no data in TMONSTERCHART", pMON->m_pSPAWN->m_pSPAWN->m_vMAPMON[i]->m_wMonID);

  001c2	8b 86 e8 00 00
	00		 mov	 eax, DWORD PTR [esi+232]
  001c8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001cb	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001ce	8b 0c 38	 mov	 ecx, DWORD PTR [eax+edi]
  001d1	0f b7 51 02	 movzx	 edx, WORD PTR [ecx+2]
  001d5	52		 push	 edx
  001d6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CJ@JEEKFGOG@?$CFd?5Monster?5have?5no?5data?5in?5TMONS@
  001db	68 00 00 00 00	 push	 OFFSET FLAT:?_AtlModule@@3VCTMapSvrModule@@A
  001e0	e8 00 00 00 00	 call	 ?LogEvent@?$CAtlServiceModuleT@VCTMapSvrModule@@$0GE@@ATL@@QAAXPBDZZ ; ATL::CAtlServiceModuleT<CTMapSvrModule,100>::LogEvent
  001e5	83 c4 0c	 add	 esp, 12			; 0000000cH
$L175598:

; 72   : 
; 73   : 						pMON->m_pTLEVEL = _AtlModule.FindTLevel(pMON->m_pMON->m_bLevel);

  001e8	8b 86 ec 00 00
	00		 mov	 eax, DWORD PTR [esi+236]
  001ee	33 c9		 xor	 ecx, ecx
  001f0	8a 48 2a	 mov	 cl, BYTE PTR [eax+42]
  001f3	51		 push	 ecx
  001f4	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?_AtlModule@@3VCTMapSvrModule@@A
  001f9	e8 00 00 00 00	 call	 ?FindTLevel@CTMapSvrModule@@QAEPAUtagTLEVEL@@E@Z ; CTMapSvrModule::FindTLevel

; 74   : 						pMON->m_pTCLASS = _AtlModule.FindTClass(pMON->m_pMON->m_bClass);

  001fe	8b 96 ec 00 00
	00		 mov	 edx, DWORD PTR [esi+236]
  00204	89 46 50	 mov	 DWORD PTR [esi+80], eax
  00207	33 c0		 xor	 eax, eax
  00209	8a 42 26	 mov	 al, BYTE PTR [edx+38]
  0020c	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?_AtlModule@@3VCTMapSvrModule@@A
  00211	50		 push	 eax
  00212	e8 00 00 00 00	 call	 ?FindTClass@CTMapSvrModule@@QAEPAUtagTSTAT@@E@Z ; CTMapSvrModule::FindTClass

; 75   : 						pMON->m_pTRACE = _AtlModule.FindTRace(pMON->m_pMON->m_bRace);

  00217	8b 8e ec 00 00
	00		 mov	 ecx, DWORD PTR [esi+236]
  0021d	33 d2		 xor	 edx, edx
  0021f	89 46 48	 mov	 DWORD PTR [esi+72], eax
  00222	8a 51 2b	 mov	 dl, BYTE PTR [ecx+43]
  00225	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?_AtlModule@@3VCTMapSvrModule@@A
  0022a	52		 push	 edx
  0022b	e8 00 00 00 00	 call	 ?FindTRace@CTMapSvrModule@@QAEPAUtagTSTAT@@E@Z ; CTMapSvrModule::FindTRace
  00230	89 46 4c	 mov	 DWORD PTR [esi+76], eax

; 76   : 						pMON->m_pATTR = _AtlModule.FindMonAttr(MAKELONG(pMON->m_pMON->m_wMonAttr, pMON->m_pMON->m_bLevel));

  00233	8b 86 ec 00 00
	00		 mov	 eax, DWORD PTR [esi+236]
  00239	0f b6 48 2a	 movzx	 ecx, BYTE PTR [eax+42]
  0023d	0f b7 50 4e	 movzx	 edx, WORD PTR [eax+78]
  00241	c1 e1 10	 shl	 ecx, 16			; 00000010H
  00244	0b ca		 or	 ecx, edx
  00246	51		 push	 ecx
  00247	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?_AtlModule@@3VCTMapSvrModule@@A
  0024c	e8 00 00 00 00	 call	 ?FindMonAttr@CTMapSvrModule@@QAEPAUtagTMONATTR@@K@Z ; CTMapSvrModule::FindMonAttr

; 77   : 
; 78   : 						if(!pMON->m_pATTR)

  00251	85 c0		 test	 eax, eax
  00253	89 86 f0 00 00
	00		 mov	 DWORD PTR [esi+240], eax
  00259	75 3f		 jne	 SHORT $L175606

; 79   : 						{
; 80   : 							_AtlModule.LogEvent("%d Monster have no ATTR data in TMONATTRCHART", pMON->m_pSPAWN->m_pSPAWN->m_vMAPMON[i]->m_wMonID);

  0025b	8b 86 e8 00 00
	00		 mov	 eax, DWORD PTR [esi+232]
  00261	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00264	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00267	8b 14 38	 mov	 edx, DWORD PTR [eax+edi]
  0026a	03 c7		 add	 eax, edi
  0026c	0f b7 42 02	 movzx	 eax, WORD PTR [edx+2]
  00270	50		 push	 eax
  00271	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CO@GPAJNNPI@?$CFd?5Monster?5have?5no?5ATTR?5data?5in?5@
  00276	68 00 00 00 00	 push	 OFFSET FLAT:?_AtlModule@@3VCTMapSvrModule@@A
  0027b	e8 00 00 00 00	 call	 ?LogEvent@?$CAtlServiceModuleT@VCTMapSvrModule@@$0GE@@ATL@@QAAXPBDZZ ; ATL::CAtlServiceModuleT<CTMapSvrModule,100>::LogEvent
  00280	83 c4 0c	 add	 esp, 12			; 0000000cH
$L183070:
  00283	5f		 pop	 edi
  00284	5e		 pop	 esi
  00285	5d		 pop	 ebp

; 81   : 							ATLTRACE(_T("REGEN ATTR NULL ID:%d ATTR ID:%d\n"), pMON->m_pMON->m_wID, MAKELONG(pMON->m_pMON->m_wMonAttr, pMON->m_pMON->m_bLevel));
; 82   : 							return FALSE;

  00286	32 c0		 xor	 al, al
  00288	5b		 pop	 ebx

; 199  : }

  00289	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  0028d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00294	83 c4 1c	 add	 esp, 28			; 0000001cH
  00297	c2 10 00	 ret	 16			; 00000010H
$L175606:

; 83   : 						}
; 84   : 
; 85   : 						pMON->m_bLevel = pMON->m_pMON->m_bLevel;

  0029a	8b 8e ec 00 00
	00		 mov	 ecx, DWORD PTR [esi+236]
  002a0	8a 51 2a	 mov	 dl, BYTE PTR [ecx+42]

; 86   : 
; 87   : 						for(DWORD ms=0; ms<pMON->m_pMON->m_vSKILL.size(); ms++)

  002a3	33 db		 xor	 ebx, ebx
  002a5	88 56 7b	 mov	 BYTE PTR [esi+123], dl
  002a8	83 cd ff	 or	 ebp, -1
  002ab	eb 03 8d 49 00	 npad	 5
$L175615:
  002b0	8b 8e ec 00 00
	00		 mov	 ecx, DWORD PTR [esi+236]
  002b6	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  002b9	85 d2		 test	 edx, edx
  002bb	0f 84 82 00 00
	00		 je	 $L183064
  002c1	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  002c4	2b c2		 sub	 eax, edx
  002c6	d1 f8		 sar	 eax, 1
  002c8	3b d8		 cmp	 ebx, eax
  002ca	73 77		 jae	 SHORT $L183064

; 88   : 						{
; 89   : 							CTSkillTemp * pTemp = _AtlModule.FindTSkill(pMON->m_pMON->m_vSKILL[ms]);

  002cc	8b ca		 mov	 ecx, edx
  002ce	33 c0		 xor	 eax, eax
  002d0	66 8b 04 59	 mov	 ax, WORD PTR [ecx+ebx*2]
  002d4	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?_AtlModule@@3VCTMapSvrModule@@A
  002d9	50		 push	 eax
  002da	e8 00 00 00 00	 call	 ?FindTSkill@CTMapSvrModule@@QAEPAVCTSkillTemp@@G@Z ; CTMapSvrModule::FindTSkill
  002df	8b f8		 mov	 edi, eax

; 90   : 							if(pTemp)

  002e1	85 ff		 test	 edi, edi
  002e3	74 58		 je	 SHORT $L175616

; 91   : 							{
; 92   : 								CTSkill * pSkill = new CTSkill();

  002e5	6a 58		 push	 88			; 00000058H
  002e7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  002ec	83 c4 04	 add	 esp, 4
  002ef	89 44 24 30	 mov	 DWORD PTR $T181460[esp+40], eax
  002f3	85 c0		 test	 eax, eax
  002f5	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+52], 0
  002fd	74 09		 je	 SHORT $L181461
  002ff	8b c8		 mov	 ecx, eax
  00301	e8 00 00 00 00	 call	 ??0CTSkill@@QAE@XZ	; CTSkill::CTSkill
  00306	eb 02		 jmp	 SHORT $L181462
$L181461:
  00308	33 c0		 xor	 eax, eax
$L181462:

; 93   : 								pSkill->m_pTSKILL = pTemp;

  0030a	89 78 54	 mov	 DWORD PTR [eax+84], edi

; 94   : 								pSkill->m_bLevel = 1;

  0030d	c6 40 50 01	 mov	 BYTE PTR [eax+80], 1

; 95   : 								pMON->m_mapTSKILL.insert(MAPTSKILL::value_type(pMON->m_pMON->m_vSKILL[ms], pSkill));

  00311	8b 8e ec 00 00
	00		 mov	 ecx, DWORD PTR [esi+236]
  00317	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  0031a	66 8b 0c 5a	 mov	 cx, WORD PTR [edx+ebx*2]
  0031e	8d 54 24 10	 lea	 edx, DWORD PTR $T181463[esp+44]
  00322	89 44 24 14	 mov	 DWORD PTR $T181463[esp+48], eax
  00326	52		 push	 edx
  00327	8d 44 24 1c	 lea	 eax, DWORD PTR $T181464[esp+48]
  0032b	66 89 4c 24 14	 mov	 WORD PTR $T181463[esp+48], cx
  00330	50		 push	 eax
  00331	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00334	89 6c 24 30	 mov	 DWORD PTR __$EHRec$[esp+60], ebp
  00338	e8 00 00 00 00	 call	 ?insert@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@GPAVCTSkill@@U?$less@G@std@@V?$allocator@U?$pair@$$CBGPAVCTSkill@@@std@@@3@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBGPAVCTSkill@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned short,CTSkill *,std::less<unsigned short>,std::allocator<std::pair<unsigned short const ,CTSkill *> >,0> >::insert
$L175616:

; 86   : 
; 87   : 						for(DWORD ms=0; ms<pMON->m_pMON->m_vSKILL.size(); ms++)

  0033d	43		 inc	 ebx
  0033e	e9 6d ff ff ff	 jmp	 $L175615
$L183064:

; 96   : 							}
; 97   : 						}
; 98   : 
; 99   : 						break;
; 100  : 					}
; 101  : 				}
; 102  : 		}
; 103  : 
; 104  : 		if(!pMON->m_pMON)

  00343	8b 86 ec 00 00
	00		 mov	 eax, DWORD PTR [esi+236]
  00349	85 c0		 test	 eax, eax

; 105  : 			return FALSE;

  0034b	0f 84 32 ff ff
	ff		 je	 $L183070
$L175742:

; 106  : 
; 107  : 		CTInven * pInven = pMON->FindTInven(INVEN_DEFAULT);

  00351	68 ff 00 00 00	 push	 255			; 000000ffH
  00356	8b ce		 mov	 ecx, esi
  00358	e8 00 00 00 00	 call	 ?FindTInven@CTObjBase@@QAEPAVCTInven@@E@Z ; CTObjBase::FindTInven
  0035d	8b e8		 mov	 ebp, eax

; 108  : 		if(pInven)

  0035f	85 ed		 test	 ebp, ebp
  00361	0f 84 b1 00 00
	00		 je	 $L182588

; 109  : 		{
; 110  : 			MAPTITEM::iterator it;
; 111  : 			for(it=pInven->m_mapTITEM.begin(); it!=pInven->m_mapTITEM.end(); it++)

  00367	8b 45 0c	 mov	 eax, DWORD PTR [ebp+12]
  0036a	8b 38		 mov	 edi, DWORD PTR [eax]
  0036c	3b f8		 cmp	 edi, eax
  0036e	74 5f		 je	 SHORT $L175829
$L182453:

; 112  : 				delete (*it).second;

  00370	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00373	85 c9		 test	 ecx, ecx
  00375	74 06		 je	 SHORT $L175828
  00377	8b 11		 mov	 edx, DWORD PTR [ecx]
  00379	6a 01		 push	 1
  0037b	ff 12		 call	 DWORD PTR [edx]
$L175828:
  0037d	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  00380	84 c0		 test	 al, al
  00382	75 46		 jne	 SHORT $L182442
  00384	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00387	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  0038a	84 c9		 test	 cl, cl
  0038c	75 1f		 jne	 SHORT $L183036
  0038e	8b f8		 mov	 edi, eax
  00390	8b 07		 mov	 eax, DWORD PTR [edi]
  00392	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  00395	84 c9		 test	 cl, cl
  00397	75 31		 jne	 SHORT $L182442
  00399	8d a4 24 00 00
	00 00		 npad	 7

; 109  : 		{
; 110  : 			MAPTITEM::iterator it;
; 111  : 			for(it=pInven->m_mapTITEM.begin(); it!=pInven->m_mapTITEM.end(); it++)

$L182430:
  003a0	8b f8		 mov	 edi, eax
  003a2	8b 07		 mov	 eax, DWORD PTR [edi]
  003a4	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  003a7	84 c9		 test	 cl, cl
  003a9	74 f5		 je	 SHORT $L182430
  003ab	eb 1d		 jmp	 SHORT $L182442
$L183036:
  003ad	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  003b0	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  003b3	84 c9		 test	 cl, cl
  003b5	75 11		 jne	 SHORT $L182445
$L182444:
  003b7	3b 78 08	 cmp	 edi, DWORD PTR [eax+8]
  003ba	75 0c		 jne	 SHORT $L182445
  003bc	8b f8		 mov	 edi, eax
  003be	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  003c1	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  003c4	84 c9		 test	 cl, cl
  003c6	74 ef		 je	 SHORT $L182444
$L182445:
  003c8	8b f8		 mov	 edi, eax
$L182442:
  003ca	3b 7d 0c	 cmp	 edi, DWORD PTR [ebp+12]
  003cd	75 a1		 jne	 SHORT $L182453
$L175829:

; 113  : 			pInven->m_mapTITEM.clear();

  003cf	8b 45 0c	 mov	 eax, DWORD PTR [ebp+12]
  003d2	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  003d5	8a 43 15	 mov	 al, BYTE PTR [ebx+21]
  003d8	83 c5 08	 add	 ebp, 8
  003db	84 c0		 test	 al, al
  003dd	8b fb		 mov	 edi, ebx
  003df	75 1f		 jne	 SHORT $L182575
$L182573:
  003e1	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  003e4	51		 push	 ecx
  003e5	8b cd		 mov	 ecx, ebp
  003e7	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Erase
  003ec	8b 3f		 mov	 edi, DWORD PTR [edi]
  003ee	53		 push	 ebx
  003ef	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  003f4	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  003f7	83 c4 04	 add	 esp, 4
  003fa	84 c0		 test	 al, al
  003fc	8b df		 mov	 ebx, edi
  003fe	74 e1		 je	 SHORT $L182573
$L182575:
  00400	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00403	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00406	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00409	c7 45 08 00 00
	00 00		 mov	 DWORD PTR [ebp+8], 0
  00410	89 00		 mov	 DWORD PTR [eax], eax
  00412	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]
  00415	89 6d 08	 mov	 DWORD PTR [ebp+8], ebp
$L182588:

; 114  : 		}
; 115  : 
; 116  : 		MAPTITEM::iterator itList;
; 117  : 		for(itList=pMON->m_mapTItemList.begin(); itList!=pMON->m_mapTItemList.end(); itList++)

  00418	8b 86 6c 01 00
	00		 mov	 eax, DWORD PTR [esi+364]
  0041e	8b 38		 mov	 edi, DWORD PTR [eax]
  00420	3b f8		 cmp	 edi, eax
  00422	74 5e		 je	 SHORT $L175856
$L182778:

; 118  : 			delete (*itList).second;

  00424	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00427	85 c9		 test	 ecx, ecx
  00429	74 06		 je	 SHORT $L175855
  0042b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0042d	6a 01		 push	 1
  0042f	ff 12		 call	 DWORD PTR [edx]
$L175855:
  00431	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  00434	84 c0		 test	 al, al
  00436	75 42		 jne	 SHORT $L182813
  00438	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0043b	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  0043e	84 c9		 test	 cl, cl
  00440	75 1b		 jne	 SHORT $L183040
  00442	8b f8		 mov	 edi, eax
  00444	8b 07		 mov	 eax, DWORD PTR [edi]
  00446	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  00449	84 c9		 test	 cl, cl
  0044b	75 2d		 jne	 SHORT $L182813
  0044d	8d 49 00	 npad	 3

; 114  : 		}
; 115  : 
; 116  : 		MAPTITEM::iterator itList;
; 117  : 		for(itList=pMON->m_mapTItemList.begin(); itList!=pMON->m_mapTItemList.end(); itList++)

$L182801:
  00450	8b f8		 mov	 edi, eax
  00452	8b 07		 mov	 eax, DWORD PTR [edi]
  00454	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  00457	84 c9		 test	 cl, cl
  00459	74 f5		 je	 SHORT $L182801
  0045b	eb 1d		 jmp	 SHORT $L182813
$L183040:
  0045d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00460	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  00463	84 c9		 test	 cl, cl
  00465	75 11		 jne	 SHORT $L182816
$L182815:
  00467	3b 78 08	 cmp	 edi, DWORD PTR [eax+8]
  0046a	75 0c		 jne	 SHORT $L182816
  0046c	8b f8		 mov	 edi, eax
  0046e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00471	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  00474	84 c9		 test	 cl, cl
  00476	74 ef		 je	 SHORT $L182815
$L182816:
  00478	8b f8		 mov	 edi, eax
$L182813:
  0047a	3b be 6c 01 00
	00		 cmp	 edi, DWORD PTR [esi+364]
  00480	75 a2		 jne	 SHORT $L182778
$L175856:

; 119  : 		pMON->m_mapTItemList.clear();

  00482	8b 86 6c 01 00
	00		 mov	 eax, DWORD PTR [esi+364]
  00488	8b 58 04	 mov	 ebx, DWORD PTR [eax+4]
  0048b	8a 43 15	 mov	 al, BYTE PTR [ebx+21]
  0048e	84 c0		 test	 al, al
  00490	8d be 68 01 00
	00		 lea	 edi, DWORD PTR [esi+360]
  00496	8b eb		 mov	 ebp, ebx
  00498	75 26		 jne	 SHORT $L182928
  0049a	8d 9b 00 00 00
	00		 npad	 6
$L182926:
  004a0	8b 4d 08	 mov	 ecx, DWORD PTR [ebp+8]
  004a3	51		 push	 ecx
  004a4	8b cf		 mov	 ecx, edi
  004a6	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAVCTItem@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAVCTItem@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,CTItem *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,CTItem *> >,0> >::_Erase
  004ab	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
  004ae	53		 push	 ebx
  004af	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004b4	8a 45 15	 mov	 al, BYTE PTR [ebp+21]
  004b7	83 c4 04	 add	 esp, 4
  004ba	84 c0		 test	 al, al
  004bc	8b dd		 mov	 ebx, ebp
  004be	74 e0		 je	 SHORT $L182926
$L182928:
  004c0	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  004c3	89 40 04	 mov	 DWORD PTR [eax+4], eax
  004c6	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  004c9	33 ed		 xor	 ebp, ebp
  004cb	89 6f 08	 mov	 DWORD PTR [edi+8], ebp
  004ce	89 00		 mov	 DWORD PTR [eax], eax
  004d0	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  004d3	89 7f 08	 mov	 DWORD PTR [edi+8], edi

; 120  : 
; 121  : 		pMON->m_bCurPathID=0;
; 122  : 		pMON->m_bCurPathDir=1;
; 123  : 
; 124  : 		CTMonster* pLeader = NULL;
; 125  : 		if(pMON->m_pSPAWN->m_dwLeader)			

  004d6	8b 96 e8 00 00
	00		 mov	 edx, DWORD PTR [esi+232]
  004dc	c6 86 18 01 00
	00 00		 mov	 BYTE PTR [esi+280], 0
  004e3	c6 86 19 01 00
	00 01		 mov	 BYTE PTR [esi+281], 1
  004ea	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  004ed	3b c5		 cmp	 eax, ebp
  004ef	0f 84 ea 00 00
	00		 je	 $L175861

; 126  : 			pLeader = pMON->m_pMAP->FindMonster(pMON->m_pSPAWN->m_dwLeader);

  004f5	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  004f8	50		 push	 eax
  004f9	e8 00 00 00 00	 call	 ?FindMonster@CTMap@@QAEPAVCTMonster@@K@Z ; CTMap::FindMonster
  004fe	8b f8		 mov	 edi, eax

; 127  : 
; 128  : 		if(pLeader && pLeader->m_dwID != pMON->m_dwID && pLeader->m_bStatus == OS_WAKEUP)

  00500	3b fd		 cmp	 edi, ebp
  00502	0f 84 d7 00 00
	00		 je	 $L175861
  00508	8b 47 44	 mov	 eax, DWORD PTR [edi+68]
  0050b	3b 46 44	 cmp	 eax, DWORD PTR [esi+68]
  0050e	0f 84 cb 00 00
	00		 je	 $L175861
  00514	80 bf cc 00 00
	00 01		 cmp	 BYTE PTR [edi+204], 1
  0051b	0f 85 be 00 00
	00		 jne	 $L175861

; 129  : 		{
; 130  : 			FLOAT fRangeX = 0.0f;
; 131  : 			FLOAT fRangeZ = 0.0f;
; 132  : 		
; 133  : 			if(pMON->m_pSPAWN->m_pSPAWN->m_bRange)

  00521	8b 8e e8 00 00
	00		 mov	 ecx, DWORD PTR [esi+232]
  00527	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@00000000
  0052d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00530	8a 42 50	 mov	 al, BYTE PTR [edx+80]
  00533	84 c0		 test	 al, al
  00535	89 6c 24 30	 mov	 DWORD PTR _fRangeZ$175863[esp+40], ebp
  00539	74 56		 je	 SHORT $L175864
  0053b	dd d8		 fstp	 ST(0)

; 134  : 			{
; 135  : 				FLOAT fLength = FLOAT(rand() % pMON->m_pSPAWN->m_pSPAWN->m_bRange);

  0053d	e8 00 00 00 00	 call	 _rand
  00542	8b 8e e8 00 00
	00		 mov	 ecx, DWORD PTR [esi+232]
  00548	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0054b	0f b6 4a 50	 movzx	 ecx, BYTE PTR [edx+80]
  0054f	99		 cdq
  00550	f7 f9		 idiv	 ecx
  00552	89 54 24 30	 mov	 DWORD PTR tv2122[esp+40], edx
  00556	db 44 24 30	 fild	 DWORD PTR tv2122[esp+40]
  0055a	d9 5c 24 3c	 fstp	 DWORD PTR _fLength$175865[esp+40]

; 136  : 				FLOAT fRad = FLOAT(rand() % 360) * FLOAT(M_PI) / 180.0f;

  0055e	e8 00 00 00 00	 call	 _rand
  00563	99		 cdq
  00564	b9 68 01 00 00	 mov	 ecx, 360		; 00000168H
  00569	f7 f9		 idiv	 ecx
  0056b	89 54 24 30	 mov	 DWORD PTR tv2115[esp+40], edx
  0056f	db 44 24 30	 fild	 DWORD PTR tv2115[esp+40]
  00573	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3c8efa35
  00579	d9 54 24 30	 fst	 DWORD PTR _fRad$175866[esp+40]

; 137  : 				fRangeX = fLength * cosf(fRad);

  0057d	d9 ff		 fcos
  0057f	d8 4c 24 3c	 fmul	 DWORD PTR _fLength$175865[esp+40]

; 138  : 				fRangeZ = fLength * sinf(fRad);

  00583	d9 44 24 30	 fld	 DWORD PTR _fRad$175866[esp+40]
  00587	d9 fe		 fsin
  00589	d8 4c 24 3c	 fmul	 DWORD PTR _fLength$175865[esp+40]
  0058d	d9 5c 24 30	 fstp	 DWORD PTR _fRangeZ$175863[esp+40]
$L175864:

; 139  : 			}
; 140  : 
; 141  : 			pMON->m_fStartX = pMON->m_fNextX = pMON->m_fPosX = pLeader->m_fNextX + fRangeX;

  00591	d8 87 28 01 00
	00		 fadd	 DWORD PTR [edi+296]
  00597	d9 56 7c	 fst	 DWORD PTR [esi+124]
  0059a	d9 96 28 01 00
	00		 fst	 DWORD PTR [esi+296]
  005a0	d9 9e 1c 01 00
	00		 fstp	 DWORD PTR [esi+284]

; 142  : 			pMON->m_fStartZ = pMON->m_fNextZ = pMON->m_fPosZ = pLeader->m_fNextZ + fRangeZ;

  005a6	d9 44 24 30	 fld	 DWORD PTR _fRangeZ$175863[esp+40]
  005aa	d8 87 30 01 00
	00		 fadd	 DWORD PTR [edi+304]
  005b0	d9 96 84 00 00
	00		 fst	 DWORD PTR [esi+132]
  005b6	d9 96 30 01 00
	00		 fst	 DWORD PTR [esi+304]
  005bc	d9 9e 24 01 00
	00		 fstp	 DWORD PTR [esi+292]

; 143  : 			pMON->m_bCurPathID = pLeader->m_bCurPathID;

  005c2	8a 97 18 01 00
	00		 mov	 dl, BYTE PTR [edi+280]
  005c8	88 96 18 01 00
	00		 mov	 BYTE PTR [esi+280], dl

; 144  : 			pMON->m_bCurPathDir = pLeader->m_bCurPathDir;

  005ce	8a 87 19 01 00
	00		 mov	 al, BYTE PTR [edi+281]
  005d4	88 86 19 01 00
	00		 mov	 BYTE PTR [esi+281], al

; 145  : 		}
; 146  : 		else if(pMON->m_pSPAWN->m_pSPAWN->m_bRange)

  005da	e9 aa 00 00 00	 jmp	 $L175871
$L175861:
  005df	8b 86 e8 00 00
	00		 mov	 eax, DWORD PTR [esi+232]
  005e5	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  005e8	8a 51 50	 mov	 dl, BYTE PTR [ecx+80]
  005eb	84 d2		 test	 dl, dl
  005ed	74 6d		 je	 SHORT $L175868

; 147  : 		{
; 148  : 			FLOAT fLength = FLOAT(rand() % pMON->m_pSPAWN->m_pSPAWN->m_bRange);

  005ef	e8 00 00 00 00	 call	 _rand
  005f4	8b 96 e8 00 00
	00		 mov	 edx, DWORD PTR [esi+232]
  005fa	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  005fd	0f b6 49 50	 movzx	 ecx, BYTE PTR [ecx+80]
  00601	99		 cdq
  00602	f7 f9		 idiv	 ecx
  00604	89 54 24 30	 mov	 DWORD PTR tv2095[esp+40], edx
  00608	db 44 24 30	 fild	 DWORD PTR tv2095[esp+40]
  0060c	d9 5c 24 30	 fstp	 DWORD PTR _fLength$175869[esp+40]

; 149  : 			FLOAT fRad = FLOAT(rand() % 360) * FLOAT(M_PI) / 180.0f;

  00610	e8 00 00 00 00	 call	 _rand
  00615	99		 cdq
  00616	b9 68 01 00 00	 mov	 ecx, 360		; 00000168H
  0061b	f7 f9		 idiv	 ecx

; 150  : 
; 151  : 			pMON->m_fStartX = pMON->m_fNextX = pMON->m_fPosX = pMON->m_pSPAWN->m_pSPAWN->m_fPosX + fLength * cosf(fRad);

  0061d	8b 86 e8 00 00
	00		 mov	 eax, DWORD PTR [esi+232]
  00623	89 54 24 3c	 mov	 DWORD PTR tv2088[esp+40], edx
  00627	db 44 24 3c	 fild	 DWORD PTR tv2088[esp+40]
  0062b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0062e	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3c8efa35
  00634	d9 c0		 fld	 ST(0)
  00636	d9 ff		 fcos
  00638	d8 4c 24 30	 fmul	 DWORD PTR _fLength$175869[esp+40]
  0063c	d8 42 40	 fadd	 DWORD PTR [edx+64]
  0063f	d9 56 7c	 fst	 DWORD PTR [esi+124]
  00642	d9 96 28 01 00
	00		 fst	 DWORD PTR [esi+296]
  00648	d9 9e 1c 01 00
	00		 fstp	 DWORD PTR [esi+284]

; 152  : 			pMON->m_fStartZ = pMON->m_fNextZ = pMON->m_fPosZ = pMON->m_pSPAWN->m_pSPAWN->m_fPosZ + fLength * sinf(fRad);

  0064e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00651	d9 fe		 fsin
  00653	d8 4c 24 30	 fmul	 DWORD PTR _fLength$175869[esp+40]
  00657	d8 40 48	 fadd	 DWORD PTR [eax+72]

; 153  : 		}
; 154  : 		else

  0065a	eb 1b		 jmp	 SHORT $L183069
$L175868:

; 155  : 		{
; 156  : 			pMON->m_fStartX = pMON->m_fNextX = pMON->m_fPosX = pMON->m_pSPAWN->m_pSPAWN->m_fPosX;

  0065c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0065f	d9 41 40	 fld	 DWORD PTR [ecx+64]
  00662	d9 56 7c	 fst	 DWORD PTR [esi+124]
  00665	d9 96 28 01 00
	00		 fst	 DWORD PTR [esi+296]
  0066b	d9 9e 1c 01 00
	00		 fstp	 DWORD PTR [esi+284]

; 157  : 			pMON->m_fStartZ = pMON->m_fNextZ = pMON->m_fPosZ = pMON->m_pSPAWN->m_pSPAWN->m_fPosZ;

  00671	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00674	d9 42 48	 fld	 DWORD PTR [edx+72]
$L183069:
  00677	d9 96 30 01 00
	00		 fst	 DWORD PTR [esi+304]
  0067d	d9 96 84 00 00
	00		 fst	 DWORD PTR [esi+132]
  00683	d9 9e 24 01 00
	00		 fstp	 DWORD PTR [esi+292]
$L175871:

; 158  : 		}
; 159  : 
; 160  : 		pMON->SetKeeper(0,0);

  00689	55		 push	 ebp
  0068a	55		 push	 ebp
  0068b	8b ce		 mov	 ecx, esi
  0068d	e8 00 00 00 00	 call	 ?SetKeeper@CTMonster@@QAEXEK@Z ; CTMonster::SetKeeper

; 161  : 		pMON->m_fStartY = pMON->m_fNextY = pMON->m_fPosY = pMON->m_pSPAWN->m_pSPAWN->m_fPosY;

  00692	8b 86 e8 00 00
	00		 mov	 eax, DWORD PTR [esi+232]
  00698	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0069b	d9 41 44	 fld	 DWORD PTR [ecx+68]
  0069e	d9 96 80 00 00
	00		 fst	 DWORD PTR [esi+128]
  006a4	d9 96 2c 01 00
	00		 fst	 DWORD PTR [esi+300]
  006aa	d9 9e 20 01 00
	00		 fstp	 DWORD PTR [esi+288]

; 162  : 		pMON->m_wDIR = pMON->m_pSPAWN->m_pSPAWN->m_wDir;

  006b0	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  006b3	66 8b 42 4c	 mov	 ax, WORD PTR [edx+76]
  006b7	66 89 86 94 00
	00 00		 mov	 WORD PTR [esi+148], ax

; 163  : 		pMON->m_fSize = pMON->m_pMON->m_fSize/2;

  006be	8b 86 ec 00 00
	00		 mov	 eax, DWORD PTR [esi+236]
  006c4	d9 40 48	 fld	 DWORD PTR [eax+72]

; 164  : 		pMON->m_dwAtkWaitTick = 0;

  006c7	89 ae 0c 01 00
	00		 mov	 DWORD PTR [esi+268], ebp
  006cd	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000

; 165  : 		pMON->m_bMode = MT_NORMAL;

  006d3	c6 46 76 00	 mov	 BYTE PTR [esi+118], 0
  006d7	d9 9e 88 00 00
	00		 fstp	 DWORD PTR [esi+136]

; 166  : 		pMON->m_bCanAttack = pMON->m_pMON->m_bCanAttack;

  006dd	8a 48 42	 mov	 cl, BYTE PTR [eax+66]
  006e0	88 4e 79	 mov	 BYTE PTR [esi+121], cl

; 167  : 		pMON->m_bIsSpecial = pMON->m_pMON->m_bIsSpecial;

  006e3	8a 50 4c	 mov	 dl, BYTE PTR [eax+76]

; 168  : 		pMON->m_bLeaveCount = 0;
; 169  : 		pMON->m_dwMoney = 0;
; 170  : 		pMON->m_bRemove = FALSE;
; 171  : 
; 172  : 		if(pMON->m_wRegenDelSpawn)
; 173  : 		{
; 174  : 			CTMonSpawn * pMS = pMON->m_pMAP->FindMonSpawn(pMON->m_wRegenDelSpawn);

  006e6	33 c0		 xor	 eax, eax
  006e8	66 8b 86 42 01
	00 00		 mov	 ax, WORD PTR [esi+322]
  006ef	66 3b c5	 cmp	 ax, bp
  006f2	88 96 ce 00 00
	00		 mov	 BYTE PTR [esi+206], dl
  006f8	c6 86 08 01 00
	00 00		 mov	 BYTE PTR [esi+264], 0
  006ff	89 ae 10 01 00
	00		 mov	 DWORD PTR [esi+272], ebp
  00705	c6 86 74 01 00
	00 00		 mov	 BYTE PTR [esi+372], 0
  0070c	74 38		 je	 SHORT $L183055
  0070e	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00711	50		 push	 eax
  00712	e8 00 00 00 00	 call	 ?FindMonSpawn@CTMap@@QAEPAVCTMonSpawn@@G@Z ; CTMap::FindMonSpawn
  00717	8b f8		 mov	 edi, eax

; 175  : 			if(pMS)

  00719	3b fd		 cmp	 edi, ebp
  0071b	74 29		 je	 SHORT $L183055

; 176  : 			{
; 177  : 				for(DWORD i=0; i<pMS->m_vTMON.size(); i++)

  0071d	33 db		 xor	 ebx, ebx
  0071f	90		 npad	 1
$L175876:
  00720	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00723	3b cd		 cmp	 ecx, ebp
  00725	74 1f		 je	 SHORT $L183055
  00727	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0072a	2b c1		 sub	 eax, ecx
  0072c	c1 f8 02	 sar	 eax, 2
  0072f	3b d8		 cmp	 ebx, eax
  00731	73 13		 jae	 SHORT $L183055
  00733	8b c1		 mov	 eax, ecx

; 178  : 					pMS->m_vTMON[i]->OnDie(0,OT_NONE,0);

  00735	8b 0c 98	 mov	 ecx, DWORD PTR [eax+ebx*4]
  00738	8b 11		 mov	 edx, DWORD PTR [ecx]
  0073a	55		 push	 ebp
  0073b	8d 04 98	 lea	 eax, DWORD PTR [eax+ebx*4]
  0073e	55		 push	 ebp
  0073f	55		 push	 ebp
  00740	ff 52 18	 call	 DWORD PTR [edx+24]
  00743	43		 inc	 ebx
  00744	eb da		 jmp	 SHORT $L175876
$L183055:

; 179  : 			}
; 180  : 		}
; 181  : 
; 182  : 		if(pMON->m_pSPAWN->m_pSPAWN->m_wLocalID)

  00746	8b 86 e8 00 00
	00		 mov	 eax, DWORD PTR [esi+232]
  0074c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 183  : 		{
; 184  : 			LPTLOCAL pLocal = _AtlModule.FindOccupationZone(pMON->m_pSPAWN->m_pSPAWN->m_wLocalID);

  0074f	33 c0		 xor	 eax, eax
  00751	66 8b 41 3e	 mov	 ax, WORD PTR [ecx+62]
  00755	66 3b c5	 cmp	 ax, bp
  00758	74 18		 je	 SHORT $L175881
  0075a	50		 push	 eax
  0075b	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?_AtlModule@@3VCTMapSvrModule@@A
  00760	e8 00 00 00 00	 call	 ?FindOccupationZone@CTMapSvrModule@@QAEPAUtagLOCAL@@G@Z ; CTMapSvrModule::FindOccupationZone

; 185  : 			if(pLocal)

  00765	3b c5		 cmp	 eax, ebp
  00767	74 09		 je	 SHORT $L175881

; 186  : 				pMON->m_bCountry = pLocal->m_bCountry;

  00769	8a 50 14	 mov	 dl, BYTE PTR [eax+20]
  0076c	88 96 9d 00 00
	00		 mov	 BYTE PTR [esi+157], dl
$L175881:

; 187  : 		}
; 188  : 
; 189  : 		pMON->m_pNextSkill = NULL;
; 190  : 		pMON->ResetHost();

  00772	8b ce		 mov	 ecx, esi
  00774	89 ae 14 01 00
	00		 mov	 DWORD PTR [esi+276], ebp
  0077a	e8 00 00 00 00	 call	 ?ResetHost@CTMonster@@QAEXXZ ; CTMonster::ResetHost

; 191  : 
; 192  : 		pMON->m_dwHP = pMON->GetMaxHP();

  0077f	8b 06		 mov	 eax, DWORD PTR [esi]
  00781	8b ce		 mov	 ecx, esi
  00783	ff 50 70	 call	 DWORD PTR [eax+112]

; 193  : 		pMON->m_dwMP = pMON->GetMaxMP();

  00786	8b 16		 mov	 edx, DWORD PTR [esi]
  00788	8b ce		 mov	 ecx, esi
  0078a	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0078d	ff 52 74	 call	 DWORD PTR [edx+116]

; 194  : 
; 195  : 		pMON->m_pMAP->EnterMAP(pMON);

  00790	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00793	56		 push	 esi
  00794	89 46 60	 mov	 DWORD PTR [esi+96], eax
  00797	e8 00 00 00 00	 call	 ?EnterMAP@CTMap@@QAEXPAVCTMonster@@@Z ; CTMap::EnterMAP

; 196  : 	}
; 197  : 
; 198  : 	return !bRegen && CTAICommand::ExecAI( pMON, dwEventHost, dwRHId, bRHType) ? TRUE : FALSE;

  0079c	eb 37		 jmp	 SHORT $L181479
$L183052:
  0079e	8b 44 24 3c	 mov	 eax, DWORD PTR _bRHType$[esp+40]
  007a2	8b 4c 24 38	 mov	 ecx, DWORD PTR _dwRHId$[esp+40]
  007a6	8b 54 24 34	 mov	 edx, DWORD PTR _dwEventHost$[esp+40]
  007aa	50		 push	 eax
  007ab	51		 push	 ecx
  007ac	52		 push	 edx
  007ad	56		 push	 esi
  007ae	8b cd		 mov	 ecx, ebp
  007b0	e8 00 00 00 00	 call	 ?ExecAI@CTAICommand@@UAEEPAVCTMonster@@KKE@Z ; CTAICommand::ExecAI
  007b5	84 c0		 test	 al, al
  007b7	74 1a		 je	 SHORT $L183062
  007b9	5f		 pop	 edi
  007ba	5e		 pop	 esi
  007bb	5d		 pop	 ebp
  007bc	b8 01 00 00 00	 mov	 eax, 1
  007c1	5b		 pop	 ebx

; 199  : }

  007c2	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  007c6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  007cd	83 c4 1c	 add	 esp, 28			; 0000001cH
  007d0	c2 10 00	 ret	 16			; 00000010H
$L183062:

; 196  : 	}
; 197  : 
; 198  : 	return !bRegen && CTAICommand::ExecAI( pMON, dwEventHost, dwRHId, bRHType) ? TRUE : FALSE;

  007d3	33 ed		 xor	 ebp, ebp
$L181479:

; 199  : }

  007d5	8b 4c 24 20	 mov	 ecx, DWORD PTR __$EHRec$[esp+44]
  007d9	5f		 pop	 edi
  007da	5e		 pop	 esi
  007db	5d		 pop	 ebp
  007dc	33 c0		 xor	 eax, eax
  007de	5b		 pop	 ebx
  007df	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  007e6	83 c4 1c	 add	 esp, 28			; 0000001cH
  007e9	c2 10 00	 ret	 16			; 00000010H
$L183067:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L181481:
  00000	8b 45 04	 mov	 eax, DWORD PTR $T181460[ebp-4]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?ExecAI@CTAICmdRegen@@UAEEPAVCTMonster@@KKE@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T183030
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?ExecAI@CTAICmdRegen@@UAEEPAVCTMonster@@KKE@Z ENDP	; CTAICmdRegen::ExecAI
END
