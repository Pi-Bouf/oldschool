; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\TItem.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_1EO@BGAEGJFB@?$AA?$HL?$AA5?$AA1?$AAA?$AAB?$AA7?$AAA?$AA3?$AA0?$AA?9?$AA9?$AA9?$AA5?$AAA?$AA?9?$AA4?$AA4?$AAA?$AAB?$AA?9@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CH@JJOAEHDK@?$HL51AB7A30?9995A?944AB?9B869?97D79E92@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@OGFEPDED@LocalService?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02CCDHMLDD@?9?1?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@MIGBKCMN@UnregServer?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09LJBJJPCG@RegServer?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07LMLHFMEG@Service?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07PNHNHBAB@Install?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09LAEJNBCE@UnInstall?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04FABLJDN@Name?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@DBFDLFJJ@?$CFs?5?9Name?5?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BP@GECJKCAK@Could?5not?5open?5Service?5Manager?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06HCEGMCNE@RPCSS?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@HDJFCBEP@Could?5not?5start?5service?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@JMOCNDDL@Could?5not?5open?5service?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@GKJBBOLK@Could?5not?5stop?5service?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NMBIIKKI@Could?5not?5delete?5service?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?GetAppId@CTMapSvrModule@@SAPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAppIdT@CTMapSvrModule@@SAPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateRegistryAppId@CTMapSvrModule@@SGJH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterAppId@CTMapSvrModule@@QAEJ_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Install@CTMapSvrModule@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTItem@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTItem@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$map@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CTItem@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8CTItem@@QAEEAAV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9CTItem@@QAEEAAV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@CTItem@@QAEXPAV1@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetGLevel@CTItem@@QAEEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetDuration@CTItem@@QAEXE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DurationDec@CTItem@@QAEKE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetRepairCost@CTItem@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetWeaponPowerLevel@CTItem@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetShieldPowerLevel@CTItem@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPowerLevel@CTItem@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetMaxAP@CTItem@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetMaxLAP@CTItem@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetMinAP@CTItem@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetMinLAP@CTItem@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetMaxMagicAP@CTItem@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetMinMagicAP@CTItem@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDefendPower@CTItem@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetMagicDefPower@CTItem@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetMagicValue@CTItem@@QAEGE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetMagicValue@CTItem@@QAEGPAUtagTMAGIC@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetRevision@CTItem@@QAEXPAUtagTMAGIC@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WrapPacket@CTItem@@QAEXPAVCPacket@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WrapPacketClient@CTItem@@QAEXPAVCPacket@@KEGE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CanUse@CTItem@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HavePower@CTItem@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPrice@CTItem@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPvPoint@CTItem@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetEndTime@CTItem@@QAEXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAutoSkill@CTItem@@QAEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetEquipLevel@CTItem@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetGradeEffect@CTItem@@QAEXE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RandMoney@CTItem@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Catalyzer@CTItem@@QAEXPAVCTPlayer@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CanDeal@CTItem@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Tokenize@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@PBDAAH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Format@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAAXPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$map@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBEPAUtagTMAGIC@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnregisterAppId@?$CAtlServiceModuleT@VCTMapSvrModule@@$0GE@@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsInstalled@?$CAtlServiceModuleT@VCTMapSvrModule@@$0GE@@ATL@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Uninstall@?$CAtlServiceModuleT@VCTMapSvrModule@@$0GE@@ATL@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CAtlExeModuleT@VCTMapSvrModule@@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CAtlExeModuleT@VCTMapSvrModule@@@ATL@@UAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterServer@?$CAtlModuleT@VCTMapSvrModule@@@ATL@@QAEJHPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnregisterServer@?$CAtlModuleT@VCTMapSvrModule@@@ATL@@QAEJHPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddCommonRGSReplacements@?$CAtlModuleT@VCTMapSvrModule@@@ATL@@UAEJPAUIRegistrarBase@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAEAAPAUtagITEMMAGIC@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAEXABQAUtagITEMMAGIC@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBEPAUtagTMAGIC@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$pair@$$CBEPAUtagTMAGIC@@@std@@QAE@ABEABQAUtagTMAGIC@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBEPAUtagITEMMAGIC@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CAtlExeModuleT@VCTMapSvrModule@@@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CAtlModuleT@VCTMapSvrModule@@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FormatV@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEXPBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetManager@?$CSimpleStringT@D$0A@@ATL@@QBEPAUIAtlStringMgr@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringSpanIncluding@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringSpanExcluding@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKK@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@U?$pair@$$CBKK@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$less@E@std@@QBE_NABE0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAABEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@E@1@ABV?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Insert@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBEPAUtagTMAGIC@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Kfn@?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@SAABEABU?$pair@$$CBEPAUtagTMAGIC@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UninitializeCom@?$CAtlExeModuleT@VCTMapSvrModule@@@ATL@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE?AViterator@12@V312@ABQAUtagITEMMAGIC@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buy@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEXPAPAUtagITEMMAGIC@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEPAPAUtagITEMMAGIC@@PAPAU3@IABQAU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Vector_val@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAE@V?$allocator@PAUtagITEMMAGIC@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAUtagITEMMAGIC@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Fiterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBEPAUtagTMAGIC@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@3@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@1@AB_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBEPAUtagITEMMAGIC@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE@PAPAUtagITEMMAGIC@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEAAPAUtagITEMMAGIC@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Init@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree_val@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKK@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@U?$pair@$$CBKK@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Color@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myval@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBEPAUtagTMAGIC@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Init@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lbound@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@ABE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBEPAUtagTMAGIC@@@2@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree_val@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myval@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBEPAUtagITEMMAGIC@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Insert_n@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEXViterator@12@IABQAUtagITEMMAGIC@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xlen@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAUtagITEMMAGIC@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAUtagITEMMAGIC@@@std@@QAEXPAPAUtagITEMMAGIC@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@PAUtagITEMMAGIC@@@std@@QAEPAPAUtagITEMMAGIC@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Fconst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Giterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEHABVconst_iterator@12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE@PAPAUtagITEMMAGIC@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEABQAUtagITEMMAGIC@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree_ptr@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKK@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree_ptr@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAUtagITEMMAGIC@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Gconst_iterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEHABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBEPAUtagTMAGIC@@@2@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Color@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Max@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKK@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Max@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@3@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@QAE@U?$less@K@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@QAE@U?$less@E@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@GIG@std@@YAXPAGIABGAAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagTAICONDITION@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTAICONDITION@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagTAICONDITION@@V?$allocator@PAUtagTAICONDITION@@@std@@@std@@YAXPAPAUtagTAICONDITION@@0AAV?$allocator@PAUtagTAICONDITION@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagTMONITEM@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTMONITEM@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagTMONITEM@@V?$allocator@PAUtagTMONITEM@@@std@@@std@@YAXPAPAUtagTMONITEM@@0AAV?$allocator@PAUtagTMONITEM@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagTMAPMON@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTMAPMON@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@YAXPAPAUtagTMAPMON@@0AAV?$allocator@PAUtagTMAPMON@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagPATHPOINT@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagPATHPOINT@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagPATHPOINT@@V?$allocator@PAUtagPATHPOINT@@@std@@@std@@YAXPAPAUtagPATHPOINT@@0AAV?$allocator@PAUtagPATHPOINT@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagQUESTCONDITION@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagQUESTCONDITION@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagQUESTCONDITION@@V?$allocator@PAUtagQUESTCONDITION@@@std@@@std@@YAXPAPAUtagQUESTCONDITION@@0AAV?$allocator@PAUtagQUESTCONDITION@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagQUESTREWARD@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagQUESTREWARD@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagQUESTREWARD@@V?$allocator@PAUtagQUESTREWARD@@@std@@@std@@YAXPAPAUtagQUESTREWARD@@0AAV?$allocator@PAUtagQUESTREWARD@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagQUESTTERM@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagQUESTTERM@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@YAXPAPAUtagQUESTTERM@@0AAV?$allocator@PAUtagQUESTTERM@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagTCASHITMSALE@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagTCASHITMSALE@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagTCASHITMSALE@@IU1@V?$allocator@UtagTCASHITMSALE@@@std@@@std@@YAXPAUtagTCASHITMSALE@@IABU1@AAV?$allocator@UtagTCASHITMSALE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagMONREGEN@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagMONREGEN@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagMONREGEN@@IU1@V?$allocator@UtagMONREGEN@@@std@@@std@@YAXPAUtagMONREGEN@@IABU1@AAV?$allocator@UtagMONREGEN@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagLOTTERY@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagLOTTERY@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagLOTTERY@@IU1@V?$allocator@UtagLOTTERY@@@std@@@std@@YAXPAUtagLOTTERY@@IABU1@AAV?$allocator@UtagLOTTERY@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@GV?$allocator@G@std@@@std@@YAXPAG0AAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAGPAGV?$allocator@G@std@@@std@@YAPAGPAG00AAV?$allocator@G@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAGPAG@std@@YAPAGPAG00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@VCTPlayer@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCTPlayer@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAVCTPlayer@@V?$allocator@PAVCTPlayer@@@std@@@std@@YAXPAPAVCTPlayer@@0AAV?$allocator@PAVCTPlayer@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagTCASHITMSALE@@V?$allocator@UtagTCASHITMSALE@@@std@@@std@@YAXPAUtagTCASHITMSALE@@0AAV?$allocator@UtagTCASHITMSALE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAUtagTCASHITMSALE@@PAU1@V?$allocator@UtagTCASHITMSALE@@@std@@@std@@YAPAUtagTCASHITMSALE@@PAU1@00AAV?$allocator@UtagTCASHITMSALE@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUtagTCASHITMSALE@@PAU1@@std@@YAPAUtagTCASHITMSALE@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@YAXPAUtagMONREGEN@@0AAV?$allocator@UtagMONREGEN@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAUtagMONREGEN@@PAU1@V?$allocator@UtagMONREGEN@@@std@@@std@@YAPAUtagMONREGEN@@PAU1@00AAV?$allocator@UtagMONREGEN@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUtagMONREGEN@@PAU1@@std@@YAPAUtagMONREGEN@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@YAXPAUtagLOTTERY@@0AAV?$allocator@UtagLOTTERY@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAUtagLOTTERY@@PAU1@V?$allocator@UtagLOTTERY@@@std@@@std@@YAPAUtagLOTTERY@@PAU1@00AAV?$allocator@UtagLOTTERY@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUtagLOTTERY@@PAU1@@std@@YAPAUtagLOTTERY@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$copy@PAPAUtagITEMMAGIC@@PAPAU1@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@YAXPAPAUtagITEMMAGIC@@0AAV?$allocator@PAUtagITEMMAGIC@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_fill_n@PAPAUtagITEMMAGIC@@IPAU1@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@YAXPAPAUtagITEMMAGIC@@IABQAU1@AAV?$allocator@PAUtagITEMMAGIC@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ucopy@PAPAUtagITEMMAGIC@@@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEPAPAUtagITEMMAGIC@@PAPAU2@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill@PAPAUtagITEMMAGIC@@PAU1@@std@@YAXPAPAUtagITEMMAGIC@@0ABQAU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$copy_backward@PAPAUtagITEMMAGIC@@PAPAU1@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAUtagITEMMAGIC@@@std@@YAPAPAUtagITEMMAGIC@@IPAPAU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0U?$pair@$$CBKK@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBKK@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0U?$pair@$$CBEPAUtagTMAGIC@@@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0U?$pair@$$CBKK@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBKK@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0U?$pair@$$CBEPAUtagTMAGIC@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@UtagTCASHITMSALE@@@std@@QAEXPAUtagTCASHITMSALE@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagTCASHITMSALE@@@std@@QAEXPAUtagTCASHITMSALE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@UtagMONREGEN@@@std@@QAEXPAUtagMONREGEN@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagMONREGEN@@@std@@QAEXPAUtagMONREGEN@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@UtagLOTTERY@@@std@@QAEXPAUtagLOTTERY@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagLOTTERY@@@std@@QAEXPAUtagLOTTERY@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill_n@PAGIG@std@@YAXPAGIABG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@GG@std@@YAPAGPAG00AAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagTCASHITMSALE@@PAU1@V?$allocator@UtagTCASHITMSALE@@@std@@@std@@YAPAUtagTCASHITMSALE@@PAU1@00AAV?$allocator@UtagTCASHITMSALE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagMONREGEN@@PAU1@V?$allocator@UtagMONREGEN@@@std@@@std@@YAPAUtagMONREGEN@@PAU1@00AAV?$allocator@UtagMONREGEN@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagLOTTERY@@PAU1@V?$allocator@UtagLOTTERY@@@std@@@std@@YAPAUtagLOTTERY@@PAU1@00AAV?$allocator@UtagLOTTERY@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagITEMMAGIC@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagITEMMAGIC@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAPAUtagITEMMAGIC@@PAPAU1@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@YAXPAPAUtagITEMMAGIC@@0AAV?$allocator@PAUtagITEMMAGIC@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagITEMMAGIC@@IPAU1@@std@@YAXPAPAUtagITEMMAGIC@@IABQAU1@AAV?$allocator@PAUtagITEMMAGIC@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAPAUtagITEMMAGIC@@PAPAU1@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00AAV?$allocator@PAUtagITEMMAGIC@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAPAUtagITEMMAGIC@@PAPAU1@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@UtagTCASHITMSALE@@U1@@std@@YAXPAUtagTCASHITMSALE@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagTCASHITMSALE@@@std@@YAXPAUtagTCASHITMSALE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@UtagMONREGEN@@U1@@std@@YAXPAUtagMONREGEN@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagMONREGEN@@@std@@YAXPAUtagMONREGEN@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@UtagLOTTERY@@U1@@std@@YAXPAUtagLOTTERY@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagLOTTERY@@@std@@YAXPAUtagLOTTERY@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill_n@PAPAUtagITEMMAGIC@@IPAU1@@std@@YAXPAPAUtagITEMMAGIC@@IABQAU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagITEMMAGIC@@PAU1@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00AAV?$allocator@PAUtagITEMMAGIC@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetGITPtr@CAtlModule@ATL@@UAEJPAPAUIGlobalInterfaceTable@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_StdGlobalInterfaceTable
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetLockCount@CAtlModule@ATL@@UAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@CAtlModule@ATL@@UAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Increment@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@G@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyChars@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReleaseBufferSetLength@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Format@?$ChTraitsCRT@D@ATL@@SAHPADPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBuffer@?$CSimpleStringT@D$0A@@ATL@@QAEPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrepareWrite@?$CSimpleStringT@D$0A@@ATL@@AAEPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Fork@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reallocate@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFormattedLength@?$ChTraitsCRT@D@ATL@@SAHPBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CAtlModule@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Decrement@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Term@CAtlModule@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlCallTermFunc@ATL@@YGXPAU_ATL_MODULE70@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlRaiseException@ATL@@YAXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Term@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@CAtlModule@ATL@@UAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLength@?$CSimpleStringT@D$0A@@ATL@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CAtlException@ATL@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __TI1?AVCAtlException@ATL@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA1?AVCAtlException@ATL@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVCAtlException@ATL@@@84
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVCAtlException@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?opprob@?1??Catalyzer@CTItem@@QAEXPAVCTPlayer@@@Z@4PAHA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?GetTime@CTime@ATL@@QBE_JXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetHour@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetMinute@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSecond@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTime@ATL@@QAE@_J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?vPowerRate@?1??GetShieldPowerLevel@CTItem@@QAEEXZ@4PAMA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?vPartsPower@?1??GetShieldPowerLevel@CTItem@@QAEEXZ@4PAMA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT _logf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?vPowerRate@?1??GetWeaponPowerLevel@CTItem@@QAEEXZ@4PAMA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7CTItem@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AtlLoadString@ATL@@YAHIPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUIAtlStringMgr@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyCharsOverlapped@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckImplicitLoad@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@AAE_NPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadStringA@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindStringResourceInstance@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlFindStringResourceInstance@ATL@@YAPAUHINSTANCE__@@IG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@IG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadStringA@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEHPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@D@ATL@@SAHPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertToBaseType@?$ChTraitsCRT@D@ATL@@SAXPADHPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringLength@?$CSimpleStringT@D$0A@@ATL@@SAHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WordCmpI@CAtlModule@ATL@@SAHPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindOneOf@CAtlModule@ATL@@SAPBDPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStringValue@CRegKey@ATL@@QAEJPBD0K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteValue@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCRegKey@ATL@@QBEPAUHKEY__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@CRegKey@ATL@@QAEJPAUHKEY__@@PBDPADKKPAU_SECURITY_ATTRIBUTES@@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Close@CRegKey@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlHresultFromWin32@ATL@@YAJK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Open@CRegKey@ATL@@QAEJPAUHKEY__@@PBDK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?UpdateRegistryFromResourceS@CAtlModule@ATL@@QAGJIHPAU_ATL_REGMAP_ENTRY@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRegObject@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IRegistrarBase@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CRegObject@ATL@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?QueryInterface@CRegObject@ATL@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CRegObject@ATL@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CRegObject@ATL@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClearReplacements@CRegObject@ATL@@UAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@CComFakeCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClearReplacements@CExpansionVector@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetKeyAt@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QBEAAPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetValueAt@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QBEAAPAGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveAll@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@CComFakeCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRegObject@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CExpansionVector@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CExpansionVector@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRegObject@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@CCRTAllocator@ATL@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlHresultFromLastError@ATL@@YAJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPAGPAGPBDHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlVerifyStackAvailable@_ATL_SAFE_ALLOCA_IMPL@ATL@@YA_NK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@CAtlSafeAllocBufferNode@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EscapeSingleQuote@CAtlModule@ATL@@SAXPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocscpy@@YAPAGPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocslen@@YAHPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_1O@MNLDABAF@?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AddReplacement@CRegObject@ATL@@UAGJPBG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPBGHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@CExpansionVector@ATL@@QAEHPBDPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAEHABQADABQAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalSetAtIndex@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAEXHABQADABQAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?2PAD@?$Wrapper@PAD@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@SAPAXIPAPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?3PAD@?$Wrapper@PAD@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@SAXPAXPAPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$Wrapper@PAD@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAE@ABQAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?2PAG@?$Wrapper@PAG@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@SAPAXIPAPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?3PAG@?$Wrapper@PAG@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@SAXPAXPAPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$Wrapper@PAG@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAE@ABQAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_1BG@JBACFMF@?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA_?$AAR?$AAa?$AAw?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1BC@KAILKFFG@?$AAR?$AAE?$AAG?$AAI?$AAS?$AAT?$AAR?$AAY?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?ResourceRegister@CRegObject@ATL@@QAGJPBGI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterFromResource@CRegObject@ATL@@IAEJPBGPBD1H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRegParser@ATL@@QAE@PAVCRegObject@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeHeap@?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateBytes@?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateHeap@?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterBuffer@CRegParser@ATL@@QAEJPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PreProcessBuffer@CRegParser@ATL@@QAEJPADPAPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CParseBuffer@CRegParser@ATL@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CParseBuffer@CRegParser@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StrChrA@CRegParser@ATL@@KAPADPADD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StrFromMap@CRegObject@ATL@@QAEPBGPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lookup@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QBEPAGABQAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindKey@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QBEHABQAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEqualKey@CExpansionVectorEqualHelper@ATL@@SA_NQAD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddString@CParseBuffer@CRegParser@ATL@@QAEHPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@CParseBuffer@CRegParser@ATL@@QAEHPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddChar@CParseBuffer@CRegParser@ATL@@QAEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Detach@CParseBuffer@CRegParser@ATL@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HKeyFromString@CRegParser@ATL@@KAPAUHKEY__@@PAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04OHBKMIBJ@HKCR?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04KIFLFONO@HKCU?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04CBBMIBLK@HKLM?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03DLBIJLAB@HKU?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04OFOCGAOH@HKPD?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04POMNGLEL@HKDD?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04LEMDOLAJ@HKCC?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@JBJOLKMF@HKEY_CLASSES_ROOT?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@GMMMKLBI@HKEY_CURRENT_USER?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@GIIFIKDM@HKEY_LOCAL_MACHINE?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@OEMMANAM@HKEY_USERS?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@IDBEHNDO@HKEY_PERFORMANCE_DATA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@MJDLIIGK@HKEY_DYN_DATA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@NLNNHLLF@HKEY_CURRENT_CONFIG?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?map@?2??HKeyFromString@CRegParser@ATL@@KAPAUHKEY__@@PAD@Z@4QBUkeymap@23@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?NextToken@CRegParser@ATL@@IAEJPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndOfVar@CRegParser@ATL@@IAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsSpace@CRegParser@ATL@@IAEHD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GenerateError@CRegParser@ATL@@IAEJI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterSubkeys@CRegParser@ATL@@IAEJPADPAUHKEY__@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AddValue@CRegParser@ATL@@IAEJAAVCRegKey@2@PBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VTFromRegType@CRegParser@ATL@@KAHPBDAAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?map@?2??VTFromRegType@CRegParser@ATL@@KAHPBDAAG@Z@4QBUtypemap@23@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?$S4@?2??VTFromRegType@CRegParser@ATL@@KAHPBDAAG@Z@4IA
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT ??0?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeHeap@?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateBytes@?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateHeap@?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetMultiStringValue@CRegKey@ATL@@QAEJPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetDWORDValue@CRegKey@ATL@@QAEJPBDK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeHeap@?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@QAEPAEI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateBytes@?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@QAEPAEI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateHeap@?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ChToByte@CRegParser@ATL@@KAED@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@QBEPAEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SkipAssignment@CRegParser@ATL@@IAEJPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HasSubKeys@CRegParser@ATL@@IAEHPAUHKEY__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CanForceRemoveKey@CRegParser@ATL@@IAEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?RecurseDeleteKey@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@CRegKey@ATL@@QAEXPAUHKEY__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteSubKey@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Detach@CRegKey@ATL@@QAEPAUHKEY__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SkipWhiteSpace@CRegParser@ATL@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ResourceUnregister@CRegObject@ATL@@QAGJPBGI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_1M@PPPPCDEP@?$AAA?$AAP?$AAP?$AAI?$AAD?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?rgszNeverDelete@CRegParser@ATL@@1QBQBDB	; ATL::CRegParser::rgszNeverDelete
PUBLIC	?g_pfnGetThreadACP@ATL@@3P6GIXZA		; ATL::g_pfnGetThreadACP
PUBLIC	?_AtlGetThreadACPThunk@ATL@@YGIXZ		; ATL::_AtlGetThreadACPThunk
PUBLIC	??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@	; `string'
PUBLIC	??_C@_08PICKODJL@FileType?$AA@			; `string'
PUBLIC	??_C@_09JKPGEJCH@Interface?$AA@			; `string'
PUBLIC	??_C@_08PPIOJEA@Hardware?$AA@			; `string'
PUBLIC	??_C@_04IHBFOLAC@Mime?$AA@			; `string'
PUBLIC	??_C@_03DDIMFGBA@SAM?$AA@			; `string'
PUBLIC	??_C@_08LOPHEHKG@SECURITY?$AA@			; `string'
PUBLIC	??_C@_06FDHFNJBJ@SYSTEM?$AA@			; `string'
PUBLIC	??_C@_08KEKAJNJI@Software?$AA@			; `string'
PUBLIC	??_C@_07KJLOKDKB@TypeLib?$AA@			; `string'
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?m_libid@CAtlModule@ATL@@2U_GUID@@A		; ATL::CAtlModule::m_libid
PUBLIC	_CLSID_StdGlobalInterfaceTable
PUBLIC	??_C@_05GIBEAPNE@CLSID?$AA@			; `string'
PUBLIC	??_C@_05PDIKPLII@AppID?$AA@			; `string'
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	??_C@_03LAIAPFCB@Val?$AA@			; `string'
PUBLIC	??_C@_0M@DBGDLGLL@ForceRemove?$AA@		; `string'
PUBLIC	??_C@_08KAAPDIAN@NoRemove?$AA@			; `string'
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CAtlModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CAtlModule::m_libid
_BSS	ENDS
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT
?g_pfnGetThreadACP@ATL@@3P6GIXZA DD FLAT:?_AtlGetThreadACPThunk@ATL@@YGIXZ ; ATL::g_pfnGetThreadACP
_DATA	ENDS
;	COMDAT _CLSID_StdGlobalInterfaceTable
CONST	SEGMENT
_CLSID_StdGlobalInterfaceTable DD 0323H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
_szStringVal DD	FLAT:??_C@_01CPLAODJH@S?$AA@
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
_multiszStringVal DD FLAT:??_C@_01PLPBNMEI@M?$AA@
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
_szDwordVal DD	FLAT:??_C@_01CKDDGHAB@D?$AA@
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
_szBinaryVal DD	FLAT:??_C@_01HMGJMAIH@B?$AA@
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT
??_C@_03LAIAPFCB@Val?$AA@ DB 'Val', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
_szValToken DD	FLAT:??_C@_03LAIAPFCB@Val?$AA@
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT
??_C@_0M@DBGDLGLL@ForceRemove?$AA@ DB 'ForceRemove', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
_szForceRemove DD FLAT:??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT
??_C@_08KAAPDIAN@NoRemove?$AA@ DB 'NoRemove', 00H	; `string'
CONST	ENDS
CONST	SEGMENT
_szNoRemove DD	FLAT:??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
_szDelete DD	FLAT:??_C@_06JBKGCNBB@Delete?$AA@
CONST	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT
??_C@_05PDIKPLII@AppID?$AA@ DB 'AppID', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT
??_C@_05GIBEAPNE@CLSID?$AA@ DB 'CLSID', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT
??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@ DB 'Component Categories', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT
??_C@_08PICKODJL@FileType?$AA@ DB 'FileType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT
??_C@_09JKPGEJCH@Interface?$AA@ DB 'Interface', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT
??_C@_08PPIOJEA@Hardware?$AA@ DB 'Hardware', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT
??_C@_04IHBFOLAC@Mime?$AA@ DB 'Mime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT
??_C@_03DDIMFGBA@SAM?$AA@ DB 'SAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT
??_C@_08LOPHEHKG@SECURITY?$AA@ DB 'SECURITY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT
??_C@_06FDHFNJBJ@SYSTEM?$AA@ DB 'SYSTEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT
??_C@_08KEKAJNJI@Software?$AA@ DB 'Software', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT
??_C@_07KJLOKDKB@TypeLib?$AA@ DB 'TypeLib', 00H		; `string'
CONST	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT
?rgszNeverDelete@CRegParser@ATL@@1QBQBDB DD FLAT:??_C@_05PDIKPLII@AppID?$AA@ ; ATL::CRegParser::rgszNeverDelete
	DD	FLAT:??_C@_05GIBEAPNE@CLSID?$AA@
	DD	FLAT:??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
	DD	FLAT:??_C@_08PICKODJL@FileType?$AA@
	DD	FLAT:??_C@_09JKPGEJCH@Interface?$AA@
	DD	FLAT:??_C@_08PPIOJEA@Hardware?$AA@
	DD	FLAT:??_C@_04IHBFOLAC@Mime?$AA@
	DD	FLAT:??_C@_03DDIMFGBA@SAM?$AA@
	DD	FLAT:??_C@_08LOPHEHKG@SECURITY?$AA@
	DD	FLAT:??_C@_06FDHFNJBJ@SYSTEM?$AA@
	DD	FLAT:??_C@_08KEKAJNJI@Software?$AA@
	DD	FLAT:??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	ENDS
PUBLIC	?SetGLevel@CTItem@@QAEEE@Z			; CTItem::SetGLevel
EXTRN	_rand:NEAR
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\titem.cpp
;	COMDAT ?SetGLevel@CTItem@@QAEEE@Z
_TEXT	SEGMENT
_bLevel$ = 8						; size = 1
?SetGLevel@CTItem@@QAEEE@Z PROC NEAR			; CTItem::SetGLevel, COMDAT
; _this$ = ecx

; 126  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 127  : 	if(m_pTITEM->m_bType == IT_GAMBLE ||
; 128  : 		( m_pTITEM->m_bCanGamble &&	rand() % 100 < m_pTITEM->m_wItemProb_G))

  00003	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00006	80 78 02 0d	 cmp	 BYTE PTR [eax+2], 13	; 0000000dH
  0000a	74 25		 je	 SHORT $L175410
  0000c	8a 48 4c	 mov	 cl, BYTE PTR [eax+76]
  0000f	84 c9		 test	 cl, cl
  00011	74 18		 je	 SHORT $L175409
  00013	e8 00 00 00 00	 call	 _rand
  00018	99		 cdq
  00019	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0001e	f7 f9		 idiv	 ecx
  00020	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00023	0f b7 48 4e	 movzx	 ecx, WORD PTR [eax+78]
  00027	3b d1		 cmp	 edx, ecx
  00029	7c 06		 jl	 SHORT $L175410
$L175409:

; 132  : 	}
; 133  : 	else
; 134  : 		return FALSE;

  0002b	32 c0		 xor	 al, al
  0002d	5e		 pop	 esi

; 135  : }

  0002e	c2 04 00	 ret	 4
$L175410:

; 129  : 	{
; 130  : 		m_bGLevel = bLevel;

  00031	8a 54 24 08	 mov	 dl, BYTE PTR _bLevel$[esp]
  00035	88 56 33	 mov	 BYTE PTR [esi+51], dl

; 131  : 		return TRUE;

  00038	b0 01		 mov	 al, 1
  0003a	5e		 pop	 esi

; 135  : }

  0003b	c2 04 00	 ret	 4
?SetGLevel@CTItem@@QAEEE@Z ENDP				; CTItem::SetGLevel
_TEXT	ENDS
PUBLIC	?DurationDec@CTItem@@QAEKE@Z			; CTItem::DurationDec
; Function compile flags: /Ogty
;	COMDAT ?DurationDec@CTItem@@QAEKE@Z
_TEXT	SEGMENT
_bDel$ = 8						; size = 1
?DurationDec@CTItem@@QAEKE@Z PROC NEAR			; CTItem::DurationDec, COMDAT
; _this$ = ecx

; 149  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 150  : 	DWORD dwDec = rand() % 3;

  00003	e8 00 00 00 00	 call	 _rand
  00008	99		 cdq
  00009	b9 03 00 00 00	 mov	 ecx, 3
  0000e	f7 f9		 idiv	 ecx

; 151  : 	if(bDel || m_dwDuraCur <= dwDec)

  00010	8a 44 24 08	 mov	 al, BYTE PTR _bDel$[esp]
  00014	84 c0		 test	 al, al
  00016	75 10		 jne	 SHORT $L175424
  00018	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0001b	3b c2		 cmp	 eax, edx
  0001d	76 09		 jbe	 SHORT $L175424

; 153  : 	else
; 154  : 		m_dwDuraCur -= dwDec;

  0001f	2b c2		 sub	 eax, edx
  00021	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00024	5e		 pop	 esi

; 157  : }

  00025	c2 04 00	 ret	 4
$L175424:

; 152  : 		m_dwDuraCur = 0;

  00028	c7 46 38 00 00
	00 00		 mov	 DWORD PTR [esi+56], 0

; 155  : 
; 156  : 	return m_dwDuraCur;

  0002f	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00032	5e		 pop	 esi

; 157  : }

  00033	c2 04 00	 ret	 4
?DurationDec@CTItem@@QAEKE@Z ENDP			; CTItem::DurationDec
_TEXT	ENDS
PUBLIC	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z	; InterlockedExchangePointer
EXTRN	__imp__InterlockedExchange@8:NEAR
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_pNew$ = 12						; size = 4
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z PROC NEAR	; InterlockedExchangePointer, COMDAT

; 92   : 	return( reinterpret_cast<void*>(static_cast<LONG_PTR>(::InterlockedExchange(reinterpret_cast<LONG*>(pp), static_cast<LONG>(reinterpret_cast<LONG_PTR>(pNew))))) );

  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__InterlockedExchange@8
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ENDP	; InterlockedExchangePointer
_TEXT	ENDS
PUBLIC	?_AtlGetThreadACPFake@ATL@@YGIXZ		; ATL::_AtlGetThreadACPFake
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	__imp__GetACP@0:NEAR
EXTRN	__imp__GetLocaleInfoA@16:NEAR
EXTRN	__imp__GetThreadLocale@0:NEAR
; Function compile flags: /Ogty
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT
_szACP$ = -12						; size = 7
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPFake@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPFake, COMDAT

; 101  : {

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	56		 push	 esi
  00009	89 44 24 0c	 mov	 DWORD PTR __$ArrayPad$[esp+16], eax

; 102  : 	UINT nACP = 0;

  0000d	33 f6		 xor	 esi, esi

; 103  : 
; 104  : 	LCID lcidThread = ::GetThreadLocale();

  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetThreadLocale@0

; 105  : 
; 106  : 	char szACP[7];
; 107  : 	// GetLocaleInfoA will fail for a Unicode-only LCID, but those are only supported on 
; 108  : 	// Windows 2000.  Since Windows 2000 supports CP_THREAD_ACP, this code path is never
; 109  : 	// executed on Windows 2000.
; 110  : 	if (::GetLocaleInfoA(lcidThread, LOCALE_IDEFAULTANSICODEPAGE, szACP, 7) != 0)

  00015	6a 07		 push	 7
  00017	8d 4c 24 08	 lea	 ecx, DWORD PTR _szACP$[esp+20]
  0001b	51		 push	 ecx
  0001c	68 04 10 00 00	 push	 4100			; 00001004H
  00021	50		 push	 eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocaleInfoA@16
  00028	85 c0		 test	 eax, eax
  0002a	74 21		 je	 SHORT $L178375

; 111  : 	{
; 112  : 		char* pch = szACP;
; 113  : 		while (*pch != '\0')

  0002c	8a 44 24 04	 mov	 al, BYTE PTR _szACP$[esp+16]
  00030	84 c0		 test	 al, al
  00032	8d 4c 24 04	 lea	 ecx, DWORD PTR _szACP$[esp+16]
  00036	74 15		 je	 SHORT $L178375
$L58550:

; 114  : 		{
; 115  : 			nACP *= 10;
; 116  : 			nACP += *pch++ - '0';

  00038	0f be c0	 movsx	 eax, al
  0003b	8d 14 b6	 lea	 edx, DWORD PTR [esi+esi*4]
  0003e	41		 inc	 ecx
  0003f	8d 74 50 d0	 lea	 esi, DWORD PTR [eax+edx*2-48]
  00043	8a 01		 mov	 al, BYTE PTR [ecx]
  00045	84 c0		 test	 al, al
  00047	75 ef		 jne	 SHORT $L58550

; 117  : 		}
; 118  : 	}
; 119  : 	// Use the Default ANSI Code Page if we were unable to get the thread ACP or if one does not exist.
; 120  : 	if (nACP == 0)

  00049	85 f6		 test	 esi, esi
  0004b	75 14		 jne	 SHORT $L178376
$L178375:

; 121  : 		nACP = ::GetACP();

  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetACP@0
  00053	5e		 pop	 esi

; 122  : 
; 123  : 	return nACP;
; 124  : }

  00054	8b 4c 24 08	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+12]
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00060	c3		 ret	 0
$L178376:
  00061	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+16]
  00065	8b c6		 mov	 eax, esi
  00067	5e		 pop	 esi
  00068	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00070	c3		 ret	 0
?_AtlGetThreadACPFake@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPFake
_TEXT	ENDS
PUBLIC	?_AtlGetThreadACPReal@ATL@@YGIXZ		; ATL::_AtlGetThreadACPReal
; Function compile flags: /Ogty
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetThreadACPReal@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPReal, COMDAT

; 128  : 	return( CP_THREAD_ACP );

  00000	b8 03 00 00 00	 mov	 eax, 3

; 129  : }

  00005	c3		 ret	 0
?_AtlGetThreadACPReal@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPReal
_TEXT	ENDS
EXTRN	__imp__GetVersionExA@4:NEAR
; Function compile flags: /Ogty
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT
_ver$ = -152						; size = 148
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPThunk@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPThunk, COMDAT

; 134  : {

  00000	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	89 84 24 94 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+152], eax

; 135  : 	OSVERSIONINFO ver;
; 136  : 	ATLGETTHREADACP pfnGetThreadACP;
; 137  : 
; 138  : 	ver.dwOSVersionInfoSize = sizeof( ver );
; 139  : 	::GetVersionEx( &ver );

  00012	8d 04 24	 lea	 eax, DWORD PTR _ver$[esp+152]
  00015	50		 push	 eax
  00016	c7 44 24 04 94
	00 00 00	 mov	 DWORD PTR _ver$[esp+156], 148 ; 00000094H
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4

; 140  : 	if( (ver.dwPlatformId == VER_PLATFORM_WIN32_NT) && (ver.dwMajorVersion >= 5) )

  00024	83 7c 24 10 02	 cmp	 DWORD PTR _ver$[esp+168], 2
  00029	75 0c		 jne	 SHORT $L58560
  0002b	83 7c 24 04 05	 cmp	 DWORD PTR _ver$[esp+156], 5

; 141  : 	{
; 142  : 		// On Win2K, CP_THREAD_ACP is supported
; 143  : 		pfnGetThreadACP = _AtlGetThreadACPReal;

  00030	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?_AtlGetThreadACPReal@ATL@@YGIXZ ; ATL::_AtlGetThreadACPReal
  00035	73 05		 jae	 SHORT $L58561
$L58560:

; 144  : 	}
; 145  : 	else
; 146  : 	{
; 147  : 		pfnGetThreadACP = _AtlGetThreadACPFake;

  00037	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?_AtlGetThreadACPFake@ATL@@YGIXZ ; ATL::_AtlGetThreadACPFake
$L58561:

; 148  : 	}
; 149  : 	InterlockedExchangePointer( reinterpret_cast< void** >(&g_pfnGetThreadACP), pfnGetThreadACP );

  0003c	50		 push	 eax
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedExchange@8

; 150  : 
; 151  : 	return( g_pfnGetThreadACP() );

  00048	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP

; 152  : }

  0004e	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+152]
  00055	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005a	81 c4 98 00 00
	00		 add	 esp, 152		; 00000098H
  00060	c3		 ret	 0
?_AtlGetThreadACPThunk@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPThunk
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	?GetMagicValue@CTItem@@QAEGPAUtagTMAGIC@@@Z	; CTItem::GetMagicValue
EXTRN	__ftol2:NEAR
EXTRN	__fltused:NEAR
;	COMDAT __real@3ff0000000000000
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\titem.cpp
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ?GetMagicValue@CTItem@@QAEGPAUtagTMAGIC@@@Z
_TEXT	SEGMENT
tv186 = 8						; size = 4
tv183 = 8						; size = 4
_pTMAGIC$ = 8						; size = 4
?GetMagicValue@CTItem@@QAEGPAUtagTMAGIC@@@Z PROC NEAR	; CTItem::GetMagicValue, COMDAT
; _this$ = ecx

; 446  : {

  00000	56		 push	 esi

; 447  : 	LPTITEMMAGIC pMagic = pTMAGIC->m_pMagic;

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _pTMAGIC$[esp]
  00005	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 448  : 
; 449  : 	FLOAT fRevision = FLOAT(pMagic->m_bRvType ? m_pTITEM->m_fRevision[pMagic->m_bRvType-1] : 1.0);

  00008	8a 50 08	 mov	 dl, BYTE PTR [eax+8]
  0000b	84 d2		 test	 dl, dl
  0000d	74 0c		 je	 SHORT $L178394
  0000f	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00012	0f b6 d2	 movzx	 edx, dl
  00015	d9 44 91 14	 fld	 DWORD PTR [ecx+edx*4+20]
  00019	eb 06		 jmp	 SHORT $L178395
$L178394:
  0001b	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3ff0000000000000
$L178395:

; 450  : 	WORD wValue = WORD(fRevision * pTMAGIC->m_wValue * pMagic->m_wMaxValue) / 100;

  00021	0f b7 50 0a	 movzx	 edx, WORD PTR [eax+10]
  00025	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00028	89 54 24 08	 mov	 DWORD PTR tv186[esp], edx
  0002c	db 44 24 08	 fild	 DWORD PTR tv186[esp]
  00030	89 44 24 08	 mov	 DWORD PTR tv183[esp], eax
  00034	d9 c9		 fxch	 ST(1)

; 451  : 	return max(wValue, 1);

  00036	de c9		 fmulp	 ST(1), ST(0)
  00038	da 4c 24 08	 fimul	 DWORD PTR tv183[esp]
  0003c	e8 00 00 00 00	 call	 __ftol2
  00041	0f b7 c8	 movzx	 ecx, ax
  00044	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00049	f7 e9		 imul	 ecx
  0004b	c1 fa 05	 sar	 edx, 5
  0004e	8b c2		 mov	 eax, edx
  00050	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00053	03 c2		 add	 eax, edx
  00055	66 3d 01 00	 cmp	 ax, 1
  00059	5e		 pop	 esi
  0005a	0f b7 c0	 movzx	 eax, ax
  0005d	77 05		 ja	 SHORT $L178397
  0005f	b8 01 00 00 00	 mov	 eax, 1
$L178397:

; 452  : }

  00064	c2 04 00	 ret	 4
?GetMagicValue@CTItem@@QAEGPAUtagTMAGIC@@@Z ENDP	; CTItem::GetMagicValue
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	__real@42c80000
PUBLIC	__real@3f7fbe77
PUBLIC	?SetRevision@CTItem@@QAEXPAUtagTMAGIC@@@Z	; CTItem::SetRevision
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@3f7fbe77
CONST	SEGMENT
__real@3f7fbe77 DD 03f7fbe77r			; 0.999
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ?SetRevision@CTItem@@QAEXPAUtagTMAGIC@@@Z
_TEXT	SEGMENT
tv192 = 8						; size = 4
_pTMAGIC$ = 8						; size = 4
?SetRevision@CTItem@@QAEXPAUtagTMAGIC@@@Z PROC NEAR	; CTItem::SetRevision, COMDAT
; _this$ = ecx

; 455  : {

  00000	56		 push	 esi

; 456  : 	LPTITEMMAGIC pMagic = pTMAGIC->m_pMagic;

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _pTMAGIC$[esp]
  00005	8b 56 04	 mov	 edx, DWORD PTR [esi+4]

; 457  : 	FLOAT fRevision = FLOAT(pMagic->m_bRvType ? m_pTITEM->m_fRevision[pMagic->m_bRvType-1] : 1.0);

  00008	8a 42 08	 mov	 al, BYTE PTR [edx+8]
  0000b	84 c0		 test	 al, al
  0000d	74 0c		 je	 SHORT $L178405
  0000f	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00012	0f b6 c0	 movzx	 eax, al
  00015	d9 44 81 14	 fld	 DWORD PTR [ecx+eax*4+20]
  00019	eb 06		 jmp	 SHORT $L178406
$L178405:
  0001b	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3ff0000000000000
$L178406:

; 458  : 	FLOAT fDiv = pMagic->m_wMaxValue * fRevision > 0 ? pMagic->m_wMaxValue * fRevision : 100;

  00021	0f b7 52 0a	 movzx	 edx, WORD PTR [edx+10]
  00025	89 54 24 08	 mov	 DWORD PTR tv192[esp], edx
  00029	da 4c 24 08	 fimul	 DWORD PTR tv192[esp]
  0002d	d8 15 00 00 00
	00		 fcom	 DWORD PTR __real@00000000
  00033	df e0		 fnstsw	 ax
  00035	f6 c4 41	 test	 ah, 65			; 00000041H
  00038	74 08		 je	 SHORT $L178408
  0003a	dd d8		 fstp	 ST(0)
  0003c	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42c80000
$L178408:

; 459  : 	pTMAGIC->m_wValue = WORD(100/fDiv + 0.999f);

  00042	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@42c80000
  00048	d8 f1		 fdiv	 ST(0), ST(1)
  0004a	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@3f7fbe77
  00050	e8 00 00 00 00	 call	 __ftol2
  00055	dd d8		 fstp	 ST(0)
  00057	66 89 06	 mov	 WORD PTR [esi], ax
  0005a	5e		 pop	 esi

; 460  : }

  0005b	c2 04 00	 ret	 4
?SetRevision@CTItem@@QAEXPAUtagTMAGIC@@@Z ENDP		; CTItem::SetRevision
_TEXT	ENDS
PUBLIC	?CanUse@CTItem@@QAEEXZ				; CTItem::CanUse
; Function compile flags: /Ogty
;	COMDAT ?CanUse@CTItem@@QAEEXZ
_TEXT	SEGMENT
?CanUse@CTItem@@QAEEXZ PROC NEAR			; CTItem::CanUse, COMDAT
; _this$ = ecx

; 536  : 	return !m_dwExtValue[IEV_WRAP];

  00000	8b 41 70	 mov	 eax, DWORD PTR [ecx+112]
  00003	85 c0		 test	 eax, eax
  00005	0f 94 c0	 sete	 al

; 537  : }

  00008	c3		 ret	 0
?CanUse@CTItem@@QAEEXZ ENDP				; CTItem::CanUse
_TEXT	ENDS
PUBLIC	?HavePower@CTItem@@QAEEXZ			; CTItem::HavePower
; Function compile flags: /Ogty
;	COMDAT ?HavePower@CTItem@@QAEEXZ
_TEXT	SEGMENT
?HavePower@CTItem@@QAEEXZ PROC NEAR			; CTItem::HavePower, COMDAT
; _this$ = ecx

; 541  : 	return (m_dwDuraMax && m_dwDuraCur) || !m_dwDuraMax;

  00000	8b 41 34	 mov	 eax, DWORD PTR [ecx+52]
  00003	85 c0		 test	 eax, eax
  00005	74 0e		 je	 SHORT $L178422
  00007	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  0000a	85 d2		 test	 edx, edx
  0000c	75 07		 jne	 SHORT $L178422
  0000e	85 c0		 test	 eax, eax
  00010	74 03		 je	 SHORT $L178422
  00012	32 c0		 xor	 al, al

; 542  : }

  00014	c3		 ret	 0
$L178422:

; 541  : 	return (m_dwDuraMax && m_dwDuraCur) || !m_dwDuraMax;

  00015	b0 01		 mov	 al, 1

; 542  : }

  00017	c3		 ret	 0
?HavePower@CTItem@@QAEEXZ ENDP				; CTItem::HavePower
_TEXT	ENDS
PUBLIC	?GetEquipLevel@CTItem@@QAEEXZ			; CTItem::GetEquipLevel
; Function compile flags: /Ogty
;	COMDAT ?GetEquipLevel@CTItem@@QAEEXZ
_TEXT	SEGMENT
?GetEquipLevel@CTItem@@QAEEXZ PROC NEAR			; CTItem::GetEquipLevel, COMDAT
; _this$ = ecx

; 615  : 	BYTE bLevel = m_pTITEM->m_bDefaultLevel;

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	8a 40 2e	 mov	 al, BYTE PTR [eax+46]
  00006	56		 push	 esi

; 616  : 
; 617  : 	if(bLevel > m_dwExtValue[IEV_ELD])

  00007	8b 71 6c	 mov	 esi, DWORD PTR [ecx+108]
  0000a	0f b6 d0	 movzx	 edx, al
  0000d	3b d6		 cmp	 edx, esi
  0000f	5e		 pop	 esi
  00010	76 03		 jbe	 SHORT $L175641

; 618  : 		bLevel -= BYTE(m_dwExtValue[IEV_ELD]);

  00012	2a 41 6c	 sub	 al, BYTE PTR [ecx+108]
$L175641:

; 619  : /*
; 620  : 	MAPTMAGIC::iterator it = m_mapTMAGIC.find(MTYPE_EQLEVEL);
; 621  : 	if(it!=m_mapTMAGIC.end())
; 622  : 		bLevel -= min(GetMagicValue((*it).second), bLevel);
; 623  : */
; 624  : 	return bLevel;
; 625  : }

  00015	c3		 ret	 0
?GetEquipLevel@CTItem@@QAEEXZ ENDP			; CTItem::GetEquipLevel
_TEXT	ENDS
PUBLIC	?SetGradeEffect@CTItem@@QAEXE@Z			; CTItem::SetGradeEffect
; Function compile flags: /Ogty
;	COMDAT ?SetGradeEffect@CTItem@@QAEXE@Z
_TEXT	SEGMENT
_bEffect$ = 8						; size = 1
?SetGradeEffect@CTItem@@QAEXE@Z PROC NEAR		; CTItem::SetGradeEffect, COMDAT
; _this$ = ecx

; 629  : 	m_bGradeEffect = bEffect;

  00000	8a 44 24 04	 mov	 al, BYTE PTR _bEffect$[esp-4]
  00004	88 41 68	 mov	 BYTE PTR [ecx+104], al

; 630  : }

  00007	c2 04 00	 ret	 4
?SetGradeEffect@CTItem@@QAEXE@Z ENDP			; CTItem::SetGradeEffect
_TEXT	ENDS
PUBLIC	__real@3c23d70a
PUBLIC	__real@447a0000
PUBLIC	__real@3f733333
PUBLIC	?RandMoney@CTItem@@QAEKXZ			; CTItem::RandMoney
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@3f733333
CONST	SEGMENT
__real@3f733333 DD 03f733333r			; 0.95
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ?RandMoney@CTItem@@QAEKXZ
_TEXT	SEGMENT
tv175 = -4						; size = 4
?RandMoney@CTItem@@QAEKXZ PROC NEAR			; CTItem::RandMoney, COMDAT
; _this$ = ecx

; 633  : {

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	56		 push	 esi
  00003	57		 push	 edi

; 634  : 	DWORD dwMoney = 0;

  00004	33 f6		 xor	 esi, esi
  00006	8b f9		 mov	 edi, ecx

; 635  : 
; 636  : 	for( BYTE i=0; i<5; i++)

  00008	32 db		 xor	 bl, bl
  0000a	8d 9b 00 00 00
	00		 npad	 6
$L175651:

; 637  : 	{
; 638  : 		float fAdd = FLOAT(rand() % 100) / 100.0f;

  00010	e8 00 00 00 00	 call	 _rand
  00015	99		 cdq
  00016	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0001b	f7 f9		 idiv	 ecx
  0001d	89 54 24 0c	 mov	 DWORD PTR tv175[esp+16], edx
  00021	db 44 24 0c	 fild	 DWORD PTR tv175[esp+16]

; 639  : 		dwMoney += DWORD(m_pTITEM->m_fPrice * 1000 * fAdd * fAdd);

  00025	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00028	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3c23d70a
  0002e	d9 c0		 fld	 ST(0)
  00030	d8 4a 10	 fmul	 DWORD PTR [edx+16]
  00033	d8 c9		 fmul	 ST(0), ST(1)
  00035	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@447a0000
  0003b	e8 00 00 00 00	 call	 __ftol2

; 640  : 
; 641  : 		if( fAdd < 0.95f )

  00040	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f733333
  00046	03 f0		 add	 esi, eax
  00048	df e0		 fnstsw	 ax
  0004a	f6 c4 05	 test	 ah, 5
  0004d	7b 07		 jnp	 SHORT $L178438
  0004f	fe c3		 inc	 bl
  00051	80 fb 05	 cmp	 bl, 5
  00054	72 ba		 jb	 SHORT $L175651
$L178438:

; 642  : 			break;
; 643  : 	}
; 644  : 
; 645  : 	return max( DWORD(m_pTITEM->m_wUseValue) * 1000, dwMoney);

  00056	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00059	0f b7 40 06	 movzx	 eax, WORD PTR [eax+6]
  0005d	69 c0 e8 03 00
	00		 imul	 eax, 1000		; 000003e8H
  00063	3b c6		 cmp	 eax, esi
  00065	77 02		 ja	 SHORT $L178436
  00067	8b c6		 mov	 eax, esi
$L178436:
  00069	5f		 pop	 edi
  0006a	5e		 pop	 esi
  0006b	5b		 pop	 ebx

; 646  : }

  0006c	59		 pop	 ecx
  0006d	c3		 ret	 0
?RandMoney@CTItem@@QAEKXZ ENDP				; CTItem::RandMoney
_TEXT	ENDS
PUBLIC	?CanDeal@CTItem@@QAEEXZ				; CTItem::CanDeal
; Function compile flags: /Ogty
;	COMDAT ?CanDeal@CTItem@@QAEEXZ
_TEXT	SEGMENT
?CanDeal@CTItem@@QAEEXZ PROC NEAR			; CTItem::CanDeal, COMDAT
; _this$ = ecx

; 685  : 	return m_dwExtValue[IEV_WRAP] || (m_pTITEM->m_bIsSell & ITEMTRADE_DEAL);

  00000	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  00003	85 d2		 test	 edx, edx
  00005	b0 01		 mov	 al, 1
  00007	75 0a		 jne	 SHORT $L178450
  00009	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  0000c	84 41 28	 test	 BYTE PTR [ecx+40], al
  0000f	75 02		 jne	 SHORT $L178450
  00011	32 c0		 xor	 al, al
$L178450:

; 686  : }

  00013	c3		 ret	 0
?CanDeal@CTItem@@QAEEXZ ENDP				; CTItem::CanDeal
_TEXT	ENDS
PUBLIC	?size@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBEIXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::size, COMDAT
; _this$ = ecx

; 448  : 		return (_Mysize);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 449  : 		}

  00003	c3		 ret	 0
?size@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::size
_TEXT	ENDS
PUBLIC	?size@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEIXZ ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?size@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::size, COMDAT
; _this$ = ecx

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L178457
  00007	33 c0		 xor	 eax, eax

; 517  : 		}

  00009	c3		 ret	 0
$L178457:

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  0000a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2

; 517  : 		}

  00012	c3		 ret	 0
?size@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::size
_TEXT	ENDS
PUBLIC	??8const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::operator==
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::operator==, COMDAT
; _this$ = ecx

; 241  : 			return (_Ptr == _Right._Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	f7 d8		 neg	 eax
  0000a	1b c0		 sbb	 eax, eax
  0000c	40		 inc	 eax

; 242  : 			}

  0000d	c2 04 00	 ret	 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::operator==
_TEXT	ENDS
PUBLIC	??9const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::operator!=
; Function compile flags: /Ogty
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::operator!=, COMDAT
; _this$ = ecx

; 246  : 			return (!(*this == _Right));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Right$[esp-4]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]
  00009	33 c9		 xor	 ecx, ecx
  0000b	3b c6		 cmp	 eax, esi
  0000d	0f 95 c1	 setne	 cl
  00010	8a c1		 mov	 al, cl
  00012	5e		 pop	 esi

; 247  : 			}

  00013	c2 04 00	 ret	 4
??9const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::operator!=
_TEXT	ENDS
PUBLIC	??0?$pair@$$CBEPAUtagTMAGIC@@@std@@QAE@ABEABQAUtagTMAGIC@@@Z ; std::pair<unsigned char const ,tagTMAGIC *>::pair<unsigned char const ,tagTMAGIC *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\utility
;	COMDAT ??0?$pair@$$CBEPAUtagTMAGIC@@@std@@QAE@ABEABQAUtagTMAGIC@@@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@$$CBEPAUtagTMAGIC@@@std@@QAE@ABEABQAUtagTMAGIC@@@Z PROC NEAR ; std::pair<unsigned char const ,tagTMAGIC *>::pair<unsigned char const ,tagTMAGIC *>, COMDAT
; _this$ = ecx

; 34   : 		{	// construct from specified values

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Val1$[esp-4]
  00006	8a 11		 mov	 dl, BYTE PTR [ecx]
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val2$[esp-4]
  0000c	88 10		 mov	 BYTE PTR [eax], dl
  0000e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00010	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 35   : 		}

  00013	c2 08 00	 ret	 8
??0?$pair@$$CBEPAUtagTMAGIC@@@std@@QAE@ABEABQAUtagTMAGIC@@@Z ENDP ; std::pair<unsigned char const ,tagTMAGIC *>::pair<unsigned char const ,tagTMAGIC *>
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBKK@std@@@std@@QAE@XZ	; std::allocator<std::pair<unsigned long const ,unsigned long> >::allocator<std::pair<unsigned long const ,unsigned long> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@$$CBKK@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$pair@$$CBKK@std@@@std@@QAE@XZ PROC NEAR ; std::allocator<std::pair<unsigned long const ,unsigned long> >::allocator<std::pair<unsigned long const ,unsigned long> >, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@U?$pair@$$CBKK@std@@@std@@QAE@XZ ENDP	; std::allocator<std::pair<unsigned long const ,unsigned long> >::allocator<std::pair<unsigned long const ,unsigned long> >
_TEXT	ENDS
PUBLIC	??R?$less@E@std@@QBE_NABE0@Z			; std::less<unsigned char>::operator()
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\functional
;	COMDAT ??R?$less@E@std@@QBE_NABE0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@E@std@@QBE_NABE0@Z PROC NEAR			; std::less<unsigned char>::operator(), COMDAT
; _this$ = ecx

; 139  : 		return (_Left < _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000a	33 c0		 xor	 eax, eax
  0000c	3a 0a		 cmp	 cl, BYTE PTR [edx]
  0000e	1b c0		 sbb	 eax, eax
  00010	f7 d8		 neg	 eax

; 140  : 		}

  00012	c2 08 00	 ret	 8
??R?$less@E@std@@QBE_NABE0@Z ENDP			; std::less<unsigned char>::operator()
_TEXT	ENDS
PUBLIC	?_Isnil@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Isnil
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Isnil, COMDAT

; 137  : 		return ((_Charref)(*_Pnode)._Isnil);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 15	 add	 eax, 21			; 00000015H

; 138  : 		}

  00007	c3		 ret	 0
?_Isnil@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Isnil
_TEXT	ENDS
PUBLIC	?_Left@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Left
; Function compile flags: /Ogty
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Left, COMDAT

; 147  : 		return ((_Nodepref)(*_Pnode)._Left);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 148  : 		}

  00004	c3		 ret	 0
?_Left@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Left
_TEXT	ENDS
PUBLIC	?_Right@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Right
; Function compile flags: /Ogty
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Right, COMDAT

; 157  : 		return ((_Nodepref)(*_Pnode)._Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 08	 add	 eax, 8

; 158  : 		}

  00007	c3		 ret	 0
?_Right@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Right
_TEXT	ENDS
PUBLIC	?_Lmost@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Lmost
; Function compile flags: /Ogty
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 1005 : 		return (_Left(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1006 : 		}

  00003	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Lmost
_TEXT	ENDS
PUBLIC	?_Rmost@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Rmost
; Function compile flags: /Ogty
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 1049 : 		return (_Right(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 08	 add	 eax, 8

; 1050 : 		}

  00006	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Rmost
_TEXT	ENDS
PUBLIC	?_Kfn@?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@SAABEABU?$pair@$$CBEPAUtagTMAGIC@@@2@@Z ; std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0>::_Kfn
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\map
;	COMDAT ?_Kfn@?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@SAABEABU?$pair@$$CBEPAUtagTMAGIC@@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@SAABEABU?$pair@$$CBEPAUtagTMAGIC@@@2@@Z PROC NEAR ; std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0>::_Kfn, COMDAT

; 64   : 		return (_Val.first);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val$[esp-4]

; 65   : 		}

  00004	c3		 ret	 0
?_Kfn@?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@SAABEABU?$pair@$$CBEPAUtagTMAGIC@@@2@@Z ENDP ; std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0>::_Kfn
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@std@@QAE@XZ ; std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >::allocator<std::pair<unsigned char const ,tagTMAGIC *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@std@@QAE@XZ PROC NEAR ; std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >::allocator<std::pair<unsigned char const ,tagTMAGIC *> >, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >::allocator<std::pair<unsigned char const ,tagTMAGIC *> >
_TEXT	ENDS
PUBLIC	?capacity@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEIXZ ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::capacity
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?capacity@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::capacity, COMDAT
; _this$ = ecx

; 458  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L178508
  00007	33 c0		 xor	 eax, eax

; 459  : 		}

  00009	c3		 ret	 0
$L178508:

; 458  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  0000a	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2

; 459  : 		}

  00012	c3		 ret	 0
?capacity@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::capacity
_TEXT	ENDS
PUBLIC	??0?$allocator@PAUtagITEMMAGIC@@@std@@QAE@XZ	; std::allocator<tagITEMMAGIC *>::allocator<tagITEMMAGIC *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@PAUtagITEMMAGIC@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAUtagITEMMAGIC@@@std@@QAE@XZ PROC NEAR	; std::allocator<tagITEMMAGIC *>::allocator<tagITEMMAGIC *>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@PAUtagITEMMAGIC@@@std@@QAE@XZ ENDP	; std::allocator<tagITEMMAGIC *>::allocator<tagITEMMAGIC *>
_TEXT	ENDS
PUBLIC	??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::const_iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 193  : 			{	// construct with null node pointer

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 194  : 			}

  00008	c3		 ret	 0
??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::_Mynode
; Function compile flags: /Ogty
;	COMDAT ?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@3@XZ
_TEXT	SEGMENT
?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@3@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::_Mynode, COMDAT
; _this$ = ecx

; 284  : 			return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 285  : 			}

  00002	c3		 ret	 0
?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@3@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::_Mynode
_TEXT	ENDS
PUBLIC	??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@1@AB_N@Z ; std::pair<std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::iterator,bool>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\utility
;	COMDAT ??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@1@AB_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@1@AB_N@Z PROC NEAR ; std::pair<std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::iterator,bool>, COMDAT
; _this$ = ecx

; 34   : 		{	// construct from specified values

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Val1$[esp-4]
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val2$[esp-4]
  0000c	89 10		 mov	 DWORD PTR [eax], edx
  0000e	8a 11		 mov	 dl, BYTE PTR [ecx]
  00010	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 35   : 		}

  00013	c2 08 00	 ret	 8
??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@1@AB_N@Z ENDP ; std::pair<std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::iterator,bool>
_TEXT	ENDS
PUBLIC	??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::const_iterator::const_iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 193  : 			{	// construct with null node pointer

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 194  : 			}

  00008	c3		 ret	 0
??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??8const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::const_iterator::operator==
; Function compile flags: /Ogty
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::const_iterator::operator==, COMDAT
; _this$ = ecx

; 241  : 			return (_Ptr == _Right._Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	f7 d8		 neg	 eax
  0000a	1b c0		 sbb	 eax, eax
  0000c	40		 inc	 eax

; 242  : 			}

  0000d	c2 04 00	 ret	 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::const_iterator::operator==
_TEXT	ENDS
PUBLIC	??Yiterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAEAAV012@H@Z ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::iterator::operator+=
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Yiterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Yiterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::iterator::operator+=, COMDAT
; _this$ = ecx

; 255  : 			{	// increment by integer

  00000	8b c1		 mov	 eax, ecx

; 256  : 			this->_Myptr += _Off;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  0000d	01 10		 add	 DWORD PTR [eax], edx

; 257  : 			return (*this);
; 258  : 			}

  0000f	c2 04 00	 ret	 4
??Yiterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::iterator::operator+=
_TEXT	ENDS
PUBLIC	?_Isnil@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Isnil
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Isnil, COMDAT

; 137  : 		return ((_Charref)(*_Pnode)._Isnil);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 15	 add	 eax, 21			; 00000015H

; 138  : 		}

  00007	c3		 ret	 0
?_Isnil@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Isnil
_TEXT	ENDS
PUBLIC	?_Left@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Left
; Function compile flags: /Ogty
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Left, COMDAT

; 147  : 		return ((_Nodepref)(*_Pnode)._Left);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 148  : 		}

  00004	c3		 ret	 0
?_Left@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Left
_TEXT	ENDS
PUBLIC	?_Parent@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Parent
; Function compile flags: /Ogty
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Parent, COMDAT

; 152  : 		return ((_Nodepref)(*_Pnode)._Parent);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 153  : 		}

  00007	c3		 ret	 0
?_Parent@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Parent
_TEXT	ENDS
PUBLIC	?_Right@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Right
; Function compile flags: /Ogty
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Right, COMDAT

; 157  : 		return ((_Nodepref)(*_Pnode)._Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 08	 add	 eax, 8

; 158  : 		}

  00007	c3		 ret	 0
?_Right@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Right
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBKK@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<unsigned long const ,unsigned long> >::allocator<std::pair<unsigned long const ,unsigned long> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@$$CBKK@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U?$pair@$$CBKK@std@@@std@@QAE@ABV01@@Z PROC NEAR ; std::allocator<std::pair<unsigned long const ,unsigned long> >::allocator<std::pair<unsigned long const ,unsigned long> >, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@U?$pair@$$CBKK@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::pair<unsigned long const ,unsigned long> >::allocator<std::pair<unsigned long const ,unsigned long> >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node>::deallocate
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Ogty
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@I@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	?_Color@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Color
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Color@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Color, COMDAT

; 132  : 		return ((_Charref)(*_Pnode)._Color);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 14	 add	 eax, 20			; 00000014H

; 133  : 		}

  00007	c3		 ret	 0
?_Color@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Color
_TEXT	ENDS
PUBLIC	?_Parent@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Parent
; Function compile flags: /Ogty
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Parent, COMDAT

; 152  : 		return ((_Nodepref)(*_Pnode)._Parent);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 153  : 		}

  00007	c3		 ret	 0
?_Parent@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Parent
_TEXT	ENDS
PUBLIC	?_Myval@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBEPAUtagTMAGIC@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Myval
; Function compile flags: /Ogty
;	COMDAT ?_Myval@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBEPAUtagTMAGIC@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBEPAUtagTMAGIC@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Myval, COMDAT

; 162  : 		return ((_Vref)(*_Pnode)._Myval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 0c	 add	 eax, 12			; 0000000cH

; 163  : 		}

  00007	c3		 ret	 0
?_Myval@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBEPAUtagTMAGIC@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Myval
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >::allocator<std::pair<unsigned char const ,tagTMAGIC *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@std@@QAE@ABV01@@Z PROC NEAR ; std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >::allocator<std::pair<unsigned char const ,tagTMAGIC *> >, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >::allocator<std::pair<unsigned char const ,tagTMAGIC *> >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node>::deallocate
; Function compile flags: /Ogty
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@I@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	?_Left@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::_Left
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::_Left, COMDAT

; 147  : 		return ((_Nodepref)(*_Pnode)._Left);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 148  : 		}

  00004	c3		 ret	 0
?_Left@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::_Left
_TEXT	ENDS
PUBLIC	?_Myval@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBEPAUtagITEMMAGIC@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::_Myval
; Function compile flags: /Ogty
;	COMDAT ?_Myval@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBEPAUtagITEMMAGIC@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBEPAUtagITEMMAGIC@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::_Myval, COMDAT

; 162  : 		return ((_Vref)(*_Pnode)._Myval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 0c	 add	 eax, 12			; 0000000cH

; 163  : 		}

  00007	c3		 ret	 0
?_Myval@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBEPAUtagITEMMAGIC@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::_Myval
_TEXT	ENDS
PUBLIC	??0?$allocator@PAUtagITEMMAGIC@@@std@@QAE@ABV01@@Z ; std::allocator<tagITEMMAGIC *>::allocator<tagITEMMAGIC *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@PAUtagITEMMAGIC@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PAUtagITEMMAGIC@@@std@@QAE@ABV01@@Z PROC NEAR ; std::allocator<tagITEMMAGIC *>::allocator<tagITEMMAGIC *>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@PAUtagITEMMAGIC@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<tagITEMMAGIC *>::allocator<tagITEMMAGIC *>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAUtagITEMMAGIC@@@std@@QAEXPAPAUtagITEMMAGIC@@I@Z ; std::allocator<tagITEMMAGIC *>::deallocate
; Function compile flags: /Ogty
;	COMDAT ?deallocate@?$allocator@PAUtagITEMMAGIC@@@std@@QAEXPAPAUtagITEMMAGIC@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAUtagITEMMAGIC@@@std@@QAEXPAPAUtagITEMMAGIC@@I@Z PROC NEAR ; std::allocator<tagITEMMAGIC *>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@PAUtagITEMMAGIC@@@std@@QAEXPAPAUtagITEMMAGIC@@I@Z ENDP ; std::allocator<tagITEMMAGIC *>::deallocate
_TEXT	ENDS
PUBLIC	??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::const_iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 200  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 201  : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::const_iterator::const_iterator
; Function compile flags: /Ogty
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 200  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 201  : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??0const_iterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE@PAPAUtagITEMMAGIC@@@Z ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::const_iterator::const_iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0const_iterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE@PAPAUtagITEMMAGIC@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0const_iterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE@PAPAUtagITEMMAGIC@@@Z PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 73   : 		const_iterator(_Tptr _Ptr)

  00000	8b c1		 mov	 eax, ecx

; 74   : 			{	// construct with pointer _Ptr
; 75   : 			_Myptr = _Ptr;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 76   : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE@PAPAUtagITEMMAGIC@@@Z ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEABQAUtagITEMMAGIC@@XZ ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEABQAUtagITEMMAGIC@@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEABQAUtagITEMMAGIC@@XZ PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 80   : 
; 81   : 
; 82   : 			return (*_Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 83   : 			}

  00002	c3		 ret	 0
??Dconst_iterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEABQAUtagITEMMAGIC@@XZ ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Root
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Root, COMDAT
; _this$ = ecx

; 1064 : 		return (_Parent(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 04	 add	 eax, 4

; 1065 : 		}

  00006	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Root
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@std@@QBEIXZ ; std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?max_size@?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@std@@QBEIXZ PROC NEAR ; std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 159  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@std@@QBEIXZ ENDP ; std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAUtagITEMMAGIC@@@std@@QBEIXZ ; std::allocator<tagITEMMAGIC *>::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$allocator@PAUtagITEMMAGIC@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAUtagITEMMAGIC@@@std@@QBEIXZ PROC NEAR ; std::allocator<tagITEMMAGIC *>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 159  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PAUtagITEMMAGIC@@@std@@QBEIXZ ENDP ; std::allocator<tagITEMMAGIC *>::max_size
_TEXT	ENDS
PUBLIC	??Gconst_iterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEHABV012@@Z ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::const_iterator::operator-
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Gconst_iterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEHABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Gconst_iterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEHABV012@@Z PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::const_iterator::operator-, COMDAT
; _this$ = ecx

; 141  : 
; 142  : 
; 143  : 			return (_Myptr - _Right._Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	c1 f8 02	 sar	 eax, 2

; 144  : 			}

  0000b	c2 04 00	 ret	 4
??Gconst_iterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEHABV012@@Z ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::const_iterator::operator-
_TEXT	ENDS
PUBLIC	??8const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::const_iterator::operator==
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::const_iterator::operator==, COMDAT
; _this$ = ecx

; 241  : 			return (_Ptr == _Right._Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	f7 d8		 neg	 eax
  0000a	1b c0		 sbb	 eax, eax
  0000c	40		 inc	 eax

; 242  : 			}

  0000d	c2 04 00	 ret	 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::const_iterator::operator==
_TEXT	ENDS
PUBLIC	??9const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::const_iterator::operator!=
; Function compile flags: /Ogty
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::const_iterator::operator!=, COMDAT
; _this$ = ecx

; 246  : 			return (!(*this == _Right));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Right$[esp-4]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]
  00009	33 c9		 xor	 ecx, ecx
  0000b	3b c6		 cmp	 eax, esi
  0000d	0f 95 c1	 setne	 cl
  00010	8a c1		 mov	 al, cl
  00012	5e		 pop	 esi

; 247  : 			}

  00013	c2 04 00	 ret	 4
??9const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::const_iterator::operator!=
_TEXT	ENDS
PUBLIC	??0_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBEPAUtagTMAGIC@@@2@D@Z ; std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node::_Node
; Function compile flags: /Ogty
;	COMDAT ??0_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBEPAUtagTMAGIC@@@2@D@Z
_TEXT	SEGMENT
__Larg$ = 8						; size = 4
__Parg$ = 12						; size = 4
__Rarg$ = 16						; size = 4
__Val$ = 20						; size = 4
__Carg$ = 24						; size = 1
??0_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBEPAUtagTMAGIC@@@2@D@Z PROC NEAR ; std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node::_Node, COMDAT
; _this$ = ecx

; 40   : 			{	// construct a node with value

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Parg$[esp-4]
  00004	8b c1		 mov	 eax, ecx
  00006	8b 4c 24 04	 mov	 ecx, DWORD PTR __Larg$[esp-4]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Rarg$[esp-4]
  00010	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00013	8b 4c 24 10	 mov	 ecx, DWORD PTR __Val$[esp-4]
  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001c	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  0001f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00022	8a 54 24 14	 mov	 dl, BYTE PTR __Carg$[esp-4]
  00026	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00029	88 50 14	 mov	 BYTE PTR [eax+20], dl
  0002c	c6 40 15 00	 mov	 BYTE PTR [eax+21], 0

; 41   : 			}

  00030	c2 14 00	 ret	 20			; 00000014H
??0_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBEPAUtagTMAGIC@@@2@D@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node::_Node
_TEXT	ENDS
PUBLIC	?_Color@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Color
; Function compile flags: /Ogty
;	COMDAT ?_Color@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Color, COMDAT

; 132  : 		return ((_Charref)(*_Pnode)._Color);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 14	 add	 eax, 20			; 00000014H

; 133  : 		}

  00007	c3		 ret	 0
?_Color@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Color
_TEXT	ENDS
PUBLIC	?_Max@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Max
; Function compile flags: /Ogty
;	COMDAT ?_Max@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Max, COMDAT

; 1035 : 		while (!_Isnil(_Right(_Pnode)))

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00007	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  0000a	84 d2		 test	 dl, dl
  0000c	75 0e		 jne	 SHORT $L176930
  0000e	8b ff		 npad	 2
$L176929:

; 1036 : 			_Pnode = _Right(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00015	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00018	84 d2		 test	 dl, dl
  0001a	74 f4		 je	 SHORT $L176929
$L176930:

; 1037 : 		return (_Pnode);
; 1038 : 		}

  0001c	c3		 ret	 0
?_Max@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Max
_TEXT	ENDS
PUBLIC	?_Min@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Min
; Function compile flags: /Ogty
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Min, COMDAT

; 1042 : 		while (!_Isnil(_Left(_Pnode)))

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	8b 08		 mov	 ecx, DWORD PTR [eax]
  00006	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00009	84 d2		 test	 dl, dl
  0000b	75 0e		 jne	 SHORT $L176934
  0000d	8d 49 00	 npad	 3
$L176933:

; 1043 : 			_Pnode = _Left(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00017	84 d2		 test	 dl, dl
  00019	74 f5		 je	 SHORT $L176933
$L176934:

; 1044 : 		return (_Pnode);
; 1045 : 		}

  0001b	c3		 ret	 0
?_Min@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Min
_TEXT	ENDS
PUBLIC	?_Max@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Max
; Function compile flags: /Ogty
;	COMDAT ?_Max@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Max, COMDAT

; 1035 : 		while (!_Isnil(_Right(_Pnode)))

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00007	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  0000a	84 d2		 test	 dl, dl
  0000c	75 0e		 jne	 SHORT $L176967
  0000e	8b ff		 npad	 2
$L176966:

; 1036 : 			_Pnode = _Right(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00015	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00018	84 d2		 test	 dl, dl
  0001a	74 f4		 je	 SHORT $L176966
$L176967:

; 1037 : 		return (_Pnode);
; 1038 : 		}

  0001c	c3		 ret	 0
?_Max@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Max
_TEXT	ENDS
PUBLIC	?_Min@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Min
; Function compile flags: /Ogty
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Min, COMDAT

; 1042 : 		while (!_Isnil(_Left(_Pnode)))

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	8b 08		 mov	 ecx, DWORD PTR [eax]
  00006	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00009	84 d2		 test	 dl, dl
  0000b	75 0e		 jne	 SHORT $L176971
  0000d	8d 49 00	 npad	 3
$L176970:

; 1043 : 			_Pnode = _Left(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00017	84 d2		 test	 dl, dl
  00019	74 f5		 je	 SHORT $L176970
$L176971:

; 1044 : 		return (_Pnode);
; 1045 : 		}

  0001b	c3		 ret	 0
?_Min@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Min
_TEXT	ENDS
PUBLIC	?_Isnil@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::_Isnil
; Function compile flags: /Ogty
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::_Isnil, COMDAT

; 137  : 		return ((_Charref)(*_Pnode)._Isnil);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 15	 add	 eax, 21			; 00000015H

; 138  : 		}

  00007	c3		 ret	 0
?_Isnil@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::_Isnil
_TEXT	ENDS
PUBLIC	?_Parent@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::_Parent
; Function compile flags: /Ogty
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::_Parent, COMDAT

; 152  : 		return ((_Nodepref)(*_Pnode)._Parent);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 153  : 		}

  00007	c3		 ret	 0
?_Parent@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::_Parent
_TEXT	ENDS
PUBLIC	?_Right@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::_Right
; Function compile flags: /Ogty
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::_Right, COMDAT

; 157  : 		return ((_Nodepref)(*_Pnode)._Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 08	 add	 eax, 8

; 158  : 		}

  00007	c3		 ret	 0
?_Right@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::_Right
_TEXT	ENDS
PUBLIC	?_Min@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::_Min
; Function compile flags: /Ogty
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::_Min, COMDAT

; 1042 : 		while (!_Isnil(_Left(_Pnode)))

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	8b 08		 mov	 ecx, DWORD PTR [eax]
  00006	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00009	84 d2		 test	 dl, dl
  0000b	75 0e		 jne	 SHORT $L176994
  0000d	8d 49 00	 npad	 3
$L176993:

; 1043 : 			_Pnode = _Left(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00017	84 d2		 test	 dl, dl
  00019	74 f5		 je	 SHORT $L176993
$L176994:

; 1044 : 		return (_Pnode);
; 1045 : 		}

  0001b	c3		 ret	 0
?_Min@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::_Min
_TEXT	ENDS
PUBLIC	??0const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::const_iterator::const_iterator
; Function compile flags: /Ogty
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 200  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 201  : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::const_iterator::_Mynode
; Function compile flags: /Ogty
;	COMDAT ?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@3@XZ
_TEXT	SEGMENT
?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@3@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::const_iterator::_Mynode, COMDAT
; _this$ = ecx

; 284  : 			return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 285  : 			}

  00002	c3		 ret	 0
?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@3@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::const_iterator::_Mynode
_TEXT	ENDS
PUBLIC	??0?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@QAE@U?$less@K@1@@Z ; std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0>::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\map
;	COMDAT ??0?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@QAE@U?$less@K@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 1
??0?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@QAE@U?$less@K@1@@Z PROC NEAR ; std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0>::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0>, COMDAT
; _this$ = ecx

; 38   : 		{	// construct with specified comparator

  00000	8b c1		 mov	 eax, ecx

; 39   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@QAE@U?$less@K@1@@Z ENDP ; std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0>::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0>
_TEXT	ENDS
PUBLIC	??0?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@QAE@U?$less@E@1@@Z ; std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0>::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0>
; Function compile flags: /Ogty
;	COMDAT ??0?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@QAE@U?$less@E@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 1
??0?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@QAE@U?$less@E@1@@Z PROC NEAR ; std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0>::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0>, COMDAT
; _this$ = ecx

; 38   : 		{	// construct with specified comparator

  00000	8b c1		 mov	 eax, ecx

; 39   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@QAE@U?$less@E@1@@Z ENDP ; std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0>::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0>
_TEXT	ENDS
PUBLIC	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::const_iterator::_Inc
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::const_iterator::_Inc, COMDAT
; _this$ = ecx

; 268  : 			if (_Isnil(_Ptr))

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00005	84 d2		 test	 dl, dl
  00007	75 4d		 jne	 SHORT $L177013

; 269  : 				;	// end() shouldn't be incremented, don't move
; 270  : 			else if (!_Isnil(_Right(_Ptr)))

  00009	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0000c	53		 push	 ebx
  0000d	8a 5a 15	 mov	 bl, BYTE PTR [edx+21]
  00010	84 db		 test	 bl, bl
  00012	75 1b		 jne	 SHORT $L178764

; 271  : 				_Ptr = _Min(_Right(_Ptr));	// ==> smallest of right subtree

  00014	8b 02		 mov	 eax, DWORD PTR [edx]
  00016	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  00019	84 db		 test	 bl, bl
  0001b	75 0e		 jne	 SHORT $L178752
  0001d	8d 49 00	 npad	 3
$L178751:
  00020	8b d0		 mov	 edx, eax
  00022	8b 02		 mov	 eax, DWORD PTR [edx]
  00024	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  00027	84 db		 test	 bl, bl
  00029	74 f5		 je	 SHORT $L178751
$L178752:
  0002b	89 11		 mov	 DWORD PTR [ecx], edx
  0002d	5b		 pop	 ebx

; 279  : 				}
; 280  : 			}

  0002e	c3		 ret	 0
$L178764:

; 272  : 			else
; 273  : 				{	// climb looking for right subtree
; 274  : 				_Nodeptr _Pnode;
; 275  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 276  : 					&& _Ptr == _Right(_Pnode))

  0002f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00032	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00035	84 d2		 test	 dl, dl
  00037	75 1a		 jne	 SHORT $L177017
  00039	8d a4 24 00 00
	00 00		 npad	 7
$L177016:
  00040	8b 11		 mov	 edx, DWORD PTR [ecx]
  00042	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00045	75 0c		 jne	 SHORT $L177017

; 277  : 					_Ptr = _Pnode;	// ==> parent while right subtree

  00047	89 01		 mov	 DWORD PTR [ecx], eax
  00049	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0004f	84 d2		 test	 dl, dl
  00051	74 ed		 je	 SHORT $L177016
$L177017:

; 278  : 				_Ptr = _Pnode;	// ==> parent (head if end())

  00053	89 01		 mov	 DWORD PTR [ecx], eax
  00055	5b		 pop	 ebx
$L177013:

; 279  : 				}
; 280  : 			}

  00056	c3		 ret	 0
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::const_iterator::_Inc
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@0@@Z ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@0@@Z PROC NEAR ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@0@@Z ENDP ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@0@@Z ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node *>
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@0@@Z PROC NEAR ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node *>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@0@@Z ENDP ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node *>
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@0@@Z ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node>
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@0@@Z PROC NEAR ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@0@@Z ENDP ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@0@@Z ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node *>
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@0@@Z PROC NEAR ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node *>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@0@@Z ENDP ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node *>
_TEXT	ENDS
PUBLIC	??$fill@PAPAUtagITEMMAGIC@@PAU1@@std@@YAXPAPAUtagITEMMAGIC@@0ABQAU1@@Z ; std::fill<tagITEMMAGIC * *,tagITEMMAGIC *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$fill@PAPAUtagITEMMAGIC@@PAU1@@std@@YAXPAPAUtagITEMMAGIC@@0ABQAU1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAPAUtagITEMMAGIC@@PAU1@@std@@YAXPAPAUtagITEMMAGIC@@0ABQAU1@@Z PROC NEAR ; std::fill<tagITEMMAGIC * *,tagITEMMAGIC *>, COMDAT

; 1135 : 	for (; _First != _Last; ++_First)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR __Last$[esp-4]
  00008	3b c1		 cmp	 eax, ecx
  0000a	74 11		 je	 SHORT $L177453
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$L177451:

; 1136 : 		*_First = _Val;

  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	3b c1		 cmp	 eax, ecx
  0001a	75 f5		 jne	 SHORT $L177451
  0001c	5e		 pop	 esi
$L177453:

; 1137 : 	}

  0001d	c3		 ret	 0
??$fill@PAPAUtagITEMMAGIC@@PAU1@@std@@YAXPAPAUtagITEMMAGIC@@0ABQAU1@@Z ENDP ; std::fill<tagITEMMAGIC * *,tagITEMMAGIC *>
_TEXT	ENDS
PUBLIC	??$_Allocate@PAUtagITEMMAGIC@@@std@@YAPAPAUtagITEMMAGIC@@IPAPAU1@@Z ; std::_Allocate<tagITEMMAGIC *>
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Allocate@PAUtagITEMMAGIC@@@std@@YAPAPAUtagITEMMAGIC@@IPAPAU1@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAUtagITEMMAGIC@@@std@@YAPAPAUtagITEMMAGIC@@IPAPAU1@@Z PROC NEAR ; std::_Allocate<tagITEMMAGIC *>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 35   : 	}

  00014	c3		 ret	 0
??$_Allocate@PAUtagITEMMAGIC@@@std@@YAPAPAUtagITEMMAGIC@@IPAPAU1@@Z ENDP ; std::_Allocate<tagITEMMAGIC *>
_TEXT	ENDS
PUBLIC	??$?0U?$pair@$$CBKK@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBKK@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node *><std::pair<unsigned long const ,unsigned long> >
; Function compile flags: /Ogty
;	COMDAT ??$?0U?$pair@$$CBKK@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBKK@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBKK@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBKK@std@@@1@@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node *><std::pair<unsigned long const ,unsigned long> >, COMDAT
; _this$ = ecx

; 120  : 		allocator(const allocator<_Other>&)

  00000	8b c1		 mov	 eax, ecx

; 121  : 		{	// construct from a related allocator (do nothing)
; 122  : 		}

  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBKK@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBKK@std@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node *><std::pair<unsigned long const ,unsigned long> >
_TEXT	ENDS
PUBLIC	??$?0U?$pair@$$CBEPAUtagTMAGIC@@@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node *><std::pair<unsigned char const ,tagTMAGIC *> >
; Function compile flags: /Ogty
;	COMDAT ??$?0U?$pair@$$CBEPAUtagTMAGIC@@@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBEPAUtagTMAGIC@@@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node *><std::pair<unsigned char const ,tagTMAGIC *> >, COMDAT
; _this$ = ecx

; 120  : 		allocator(const allocator<_Other>&)

  00000	8b c1		 mov	 eax, ecx

; 121  : 		{	// construct from a related allocator (do nothing)
; 122  : 		}

  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBEPAUtagTMAGIC@@@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node *><std::pair<unsigned char const ,tagTMAGIC *> >
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node>
; Function compile flags: /Ogty
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@0@IPAU120@@Z PROC NEAR ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00007	c1 e0 03	 shl	 eax, 3
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	83 c4 04	 add	 esp, 4

; 35   : 	}

  00013	c3		 ret	 0
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node>
_TEXT	ENDS
PUBLIC	??$?0U?$pair@$$CBKK@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBKK@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node><std::pair<unsigned long const ,unsigned long> >
; Function compile flags: /Ogty
;	COMDAT ??$?0U?$pair@$$CBKK@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBKK@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBKK@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBKK@std@@@1@@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node><std::pair<unsigned long const ,unsigned long> >, COMDAT
; _this$ = ecx

; 120  : 		allocator(const allocator<_Other>&)

  00000	8b c1		 mov	 eax, ecx

; 121  : 		{	// construct from a related allocator (do nothing)
; 122  : 		}

  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBKK@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBKK@std@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node><std::pair<unsigned long const ,unsigned long> >
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node>
; Function compile flags: /Ogty
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@0@IPAU120@@Z PROC NEAR ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00007	c1 e0 03	 shl	 eax, 3
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	83 c4 04	 add	 esp, 4

; 35   : 	}

  00013	c3		 ret	 0
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node>
_TEXT	ENDS
PUBLIC	??$?0U?$pair@$$CBEPAUtagTMAGIC@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node><std::pair<unsigned char const ,tagTMAGIC *> >
; Function compile flags: /Ogty
;	COMDAT ??$?0U?$pair@$$CBEPAUtagTMAGIC@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBEPAUtagTMAGIC@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node><std::pair<unsigned char const ,tagTMAGIC *> >, COMDAT
; _this$ = ecx

; 120  : 		allocator(const allocator<_Other>&)

  00000	8b c1		 mov	 eax, ecx

; 121  : 		{	// construct from a related allocator (do nothing)
; 122  : 		}

  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBEPAUtagTMAGIC@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node><std::pair<unsigned char const ,tagTMAGIC *> >
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UtagITEMMAGIC@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagITEMMAGIC@@0@Z ; std::_Ptr_cat<tagITEMMAGIC>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$_Ptr_cat@UtagITEMMAGIC@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagITEMMAGIC@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UtagITEMMAGIC@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagITEMMAGIC@@0@Z PROC NEAR ; std::_Ptr_cat<tagITEMMAGIC>, COMDAT

; 218  : 	{	// return pointer category from pointer to pointer arguments

  00000	51		 push	 ecx

; 219  : 	_Scalar_ptr_iterator_tag _Cat;
; 220  : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 221  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@UtagITEMMAGIC@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagITEMMAGIC@@0@Z ENDP ; std::_Ptr_cat<tagITEMMAGIC>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAPAUtagITEMMAGIC@@PAPAU1@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Copy_opt<tagITEMMAGIC * *,tagITEMMAGIC * *>
EXTRN	_memmove:NEAR
; Function compile flags: /Ogty
;	COMDAT ??$_Copy_opt@PAPAUtagITEMMAGIC@@PAPAU1@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_opt@PAPAUtagITEMMAGIC@@PAPAU1@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Copy_opt<tagITEMMAGIC * *,tagITEMMAGIC * *>, COMDAT

; 1031 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2

; 1032 : 	return ((_OutIt)::memmove(&*_Dest, &*_First,
; 1033 : 		_Off * sizeof (*_First)) + _Off);

  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 1034 : 	}

  00027	c3		 ret	 0
??$_Copy_opt@PAPAUtagITEMMAGIC@@PAPAU1@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_opt<tagITEMMAGIC * *,tagITEMMAGIC * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@YAXPAPAUtagITEMMAGIC@@0AAV?$allocator@PAUtagITEMMAGIC@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy_range@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@YAXPAPAUtagITEMMAGIC@@0AAV?$allocator@PAUtagITEMMAGIC@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@YAXPAPAUtagITEMMAGIC@@0AAV?$allocator@PAUtagITEMMAGIC@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Destroy_range<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >, COMDAT

; 234  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@YAXPAPAUtagITEMMAGIC@@0AAV?$allocator@PAUtagITEMMAGIC@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAPAUtagITEMMAGIC@@PAPAU1@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Copy_backward_opt<tagITEMMAGIC * *,tagITEMMAGIC * *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAPAUtagITEMMAGIC@@PAPAU1@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_backward_opt@PAPAUtagITEMMAGIC@@PAPAU1@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Copy_backward_opt<tagITEMMAGIC * *,tagITEMMAGIC * *>, COMDAT

; 1059 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	c1 f8 02	 sar	 eax, 2

; 1060 : 	return ((_OutIt)memmove(&*_Dest - _Off, &*_First,
; 1061 : 		_Off * sizeof (*_First)));

  0000d	c1 e0 02	 shl	 eax, 2
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	8b 4c 24 14	 mov	 ecx, DWORD PTR __Dest$[esp+4]
  00016	2b c8		 sub	 ecx, eax
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 _memmove
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1062 : 	}

  00021	c3		 ret	 0
??$_Copy_backward_opt@PAPAUtagITEMMAGIC@@PAPAU1@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<tagITEMMAGIC * *,tagITEMMAGIC * *>
_TEXT	ENDS
PUBLIC	??$fill_n@PAPAUtagITEMMAGIC@@IPAU1@@std@@YAXPAPAUtagITEMMAGIC@@IABQAU1@@Z ; std::fill_n<tagITEMMAGIC * *,unsigned int,tagITEMMAGIC *>
; Function compile flags: /Ogty
;	COMDAT ??$fill_n@PAPAUtagITEMMAGIC@@IPAU1@@std@@YAXPAPAUtagITEMMAGIC@@IABQAU1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill_n@PAPAUtagITEMMAGIC@@IPAU1@@std@@YAXPAPAUtagITEMMAGIC@@IABQAU1@@Z PROC NEAR ; std::fill_n<tagITEMMAGIC * *,unsigned int,tagITEMMAGIC *>, COMDAT

; 1160 : 	for (; 0 < _Count; --_Count, ++_First)

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	76 14		 jbe	 SHORT $L177650
  00008	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  0000c	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00010	56		 push	 esi
$L177648:

; 1161 : 		*_First = _Val;

  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	49		 dec	 ecx
  00019	75 f6		 jne	 SHORT $L177648
  0001b	5e		 pop	 esi
$L177650:

; 1162 : 	}

  0001c	c3		 ret	 0
??$fill_n@PAPAUtagITEMMAGIC@@IPAU1@@std@@YAXPAPAUtagITEMMAGIC@@IABQAU1@@Z ENDP ; std::fill_n<tagITEMMAGIC * *,unsigned int,tagITEMMAGIC *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUtagITEMMAGIC@@PAU1@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00AAV?$allocator@PAUtagITEMMAGIC@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<tagITEMMAGIC *,tagITEMMAGIC *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninit_copy@PAUtagITEMMAGIC@@PAU1@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00AAV?$allocator@PAUtagITEMMAGIC@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PAUtagITEMMAGIC@@PAU1@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00AAV?$allocator@PAUtagITEMMAGIC@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_copy<tagITEMMAGIC *,tagITEMMAGIC *>, COMDAT

; 106  : 	size_t _Count = (size_t)(_Last - _First);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2

; 107  : 	return ((_Ty2 *)memmove(&*_Dest, &*_First,
; 108  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 109  : 	}

  00027	c3		 ret	 0
??$_Uninit_copy@PAUtagITEMMAGIC@@PAU1@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00AAV?$allocator@PAUtagITEMMAGIC@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<tagITEMMAGIC *,tagITEMMAGIC *>
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__P$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC NEAR				; operator new, COMDAT

; 109  :         {return (_P); }

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __P$[esp-4]
  00004	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogty
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC NEAR					; operator delete, COMDAT

; 112  :         {return; }

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	??0CTime@ATL@@QAE@_J@Z				; ATL::CTime::CTime
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atltime.inl
;	COMDAT ??0CTime@ATL@@QAE@_J@Z
_TEXT	SEGMENT
_time$ = 8						; size = 8
??0CTime@ATL@@QAE@_J@Z PROC NEAR			; ATL::CTime::CTime, COMDAT
; _this$ = ecx

; 149  : {

  00000	8b 54 24 08	 mov	 edx, DWORD PTR _time$[esp]
  00004	8b c1		 mov	 eax, ecx
  00006	8b 4c 24 04	 mov	 ecx, DWORD PTR _time$[esp-4]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 150  : }

  0000f	c2 08 00	 ret	 8
??0CTime@ATL@@QAE@_J@Z ENDP				; ATL::CTime::CTime
_TEXT	ENDS
PUBLIC	?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z	; ATL::CTime::GetLocalTm
EXTRN	__localtime64:NEAR
; Function compile flags: /Ogty
;	COMDAT ?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z
_TEXT	SEGMENT
_ptm$ = 8						; size = 4
?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z PROC NEAR	; ATL::CTime::GetLocalTm, COMDAT
; _this$ = ecx

; 320  : {

  00000	53		 push	 ebx

; 321  : 	if (ptm != NULL)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR _ptm$[esp]

; 322  : 	{
; 323  : 		struct tm* ptmTemp = _localtime64(&m_time);

  00005	51		 push	 ecx
  00006	e8 00 00 00 00	 call	 __localtime64
  0000b	83 c4 04	 add	 esp, 4
  0000e	85 db		 test	 ebx, ebx
  00010	74 19		 je	 SHORT $L77285

; 324  : 		if (ptmTemp == NULL)

  00012	85 c0		 test	 eax, eax
  00014	75 04		 jne	 SHORT $L77284
  00016	5b		 pop	 ebx

; 329  : 	}
; 330  : 	else
; 331  : 		return _localtime64(&m_time);
; 332  : }

  00017	c2 04 00	 ret	 4
$L77284:
  0001a	56		 push	 esi
  0001b	57		 push	 edi

; 325  : 			return NULL;    // indicates the m_time was not initialized!
; 326  : 
; 327  : 		*ptm = *ptmTemp;

  0001c	8b f0		 mov	 esi, eax
  0001e	b9 09 00 00 00	 mov	 ecx, 9
  00023	8b fb		 mov	 edi, ebx
  00025	f3 a5		 rep movsd
  00027	5f		 pop	 edi

; 328  : 		return ptm;

  00028	8b c3		 mov	 eax, ebx
  0002a	5e		 pop	 esi
$L77285:
  0002b	5b		 pop	 ebx

; 329  : 	}
; 330  : 	else
; 331  : 		return _localtime64(&m_time);
; 332  : }

  0002c	c2 04 00	 ret	 4
?GetLocalTm@CTime@ATL@@QBEPAUtm@@PAU3@@Z ENDP		; ATL::CTime::GetLocalTm
_TEXT	ENDS
PUBLIC	?GetTime@CTime@ATL@@QBE_JXZ			; ATL::CTime::GetTime
; Function compile flags: /Ogty
;	COMDAT ?GetTime@CTime@ATL@@QBE_JXZ
_TEXT	SEGMENT
?GetTime@CTime@ATL@@QBE_JXZ PROC NEAR			; ATL::CTime::GetTime, COMDAT
; _this$ = ecx

; 354  : 	return( m_time );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 355  : }

  00005	c3		 ret	 0
?GetTime@CTime@ATL@@QBE_JXZ ENDP			; ATL::CTime::GetTime
_TEXT	ENDS
PUBLIC	?GetHour@CTime@ATL@@QBEHXZ			; ATL::CTime::GetHour
; Function compile flags: /Ogty
;	COMDAT ?GetHour@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
?GetHour@CTime@ATL@@QBEHXZ PROC NEAR			; ATL::CTime::GetHour, COMDAT
; _this$ = ecx

; 380  : 	struct tm * ptm;
; 381  : 	ptm = GetLocalTm();

  00000	51		 push	 ecx
  00001	e8 00 00 00 00	 call	 __localtime64
  00006	83 c4 04	 add	 esp, 4

; 382  : 	return ptm ? ptm->tm_hour : -1 ; 

  00009	85 c0		 test	 eax, eax
  0000b	74 04		 je	 SHORT $L178844
  0000d	8b 40 08	 mov	 eax, DWORD PTR [eax+8]

; 383  : }

  00010	c3		 ret	 0
$L178844:

; 382  : 	return ptm ? ptm->tm_hour : -1 ; 

  00011	83 c8 ff	 or	 eax, -1

; 383  : }

  00014	c3		 ret	 0
?GetHour@CTime@ATL@@QBEHXZ ENDP				; ATL::CTime::GetHour
_TEXT	ENDS
PUBLIC	?GetMinute@CTime@ATL@@QBEHXZ			; ATL::CTime::GetMinute
; Function compile flags: /Ogty
;	COMDAT ?GetMinute@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
?GetMinute@CTime@ATL@@QBEHXZ PROC NEAR			; ATL::CTime::GetMinute, COMDAT
; _this$ = ecx

; 387  : 	struct tm * ptm;
; 388  : 	ptm = GetLocalTm();

  00000	51		 push	 ecx
  00001	e8 00 00 00 00	 call	 __localtime64
  00006	83 c4 04	 add	 esp, 4

; 389  : 	return ptm ? ptm->tm_min : -1 ; 

  00009	85 c0		 test	 eax, eax
  0000b	74 04		 je	 SHORT $L178857
  0000d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 390  : }

  00010	c3		 ret	 0
$L178857:

; 389  : 	return ptm ? ptm->tm_min : -1 ; 

  00011	83 c8 ff	 or	 eax, -1

; 390  : }

  00014	c3		 ret	 0
?GetMinute@CTime@ATL@@QBEHXZ ENDP			; ATL::CTime::GetMinute
_TEXT	ENDS
PUBLIC	?GetSecond@CTime@ATL@@QBEHXZ			; ATL::CTime::GetSecond
; Function compile flags: /Ogty
;	COMDAT ?GetSecond@CTime@ATL@@QBEHXZ
_TEXT	SEGMENT
?GetSecond@CTime@ATL@@QBEHXZ PROC NEAR			; ATL::CTime::GetSecond, COMDAT
; _this$ = ecx

; 394  : 	struct tm * ptm;
; 395  : 	ptm = GetLocalTm();

  00000	51		 push	 ecx
  00001	e8 00 00 00 00	 call	 __localtime64
  00006	83 c4 04	 add	 esp, 4

; 396  : 	return ptm ? ptm->tm_sec : -1 ;

  00009	85 c0		 test	 eax, eax
  0000b	74 03		 je	 SHORT $L178870
  0000d	8b 00		 mov	 eax, DWORD PTR [eax]

; 397  : }

  0000f	c3		 ret	 0
$L178870:

; 396  : 	return ptm ? ptm->tm_sec : -1 ;

  00010	83 c8 ff	 or	 eax, -1

; 397  : }

  00013	c3		 ret	 0
?GetSecond@CTime@ATL@@QBEHXZ ENDP			; ATL::CTime::GetSecond
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC NEAR	; std::char_traits<char>::assign, COMDAT

; 331  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 332  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogty
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC NEAR		; std::char_traits<char>::length, COMDAT

; 352  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$L178886:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $L178886
  0000e	2b c2		 sub	 eax, edx

; 353  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
; Function compile flags: /Ogty
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::copy, COMDAT

; 358  : 		return ((_Elem *)::memcpy(_First1, _First2, _Count));

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR __First2$[esp]
  00009	57		 push	 edi
  0000a	8b 7c 24 0c	 mov	 edi, DWORD PTR __First1$[esp+4]
  0000e	8b c1		 mov	 eax, ecx
  00010	8b d7		 mov	 edx, edi
  00012	c1 e9 02	 shr	 ecx, 2
  00015	f3 a5		 rep movsd
  00017	8b c8		 mov	 ecx, eax
  00019	83 e1 03	 and	 ecx, 3
  0001c	f3 a4		 rep movsb
  0001e	5f		 pop	 edi
  0001f	8b c2		 mov	 eax, edx
  00021	5e		 pop	 esi

; 359  : 		}

  00022	c3		 ret	 0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
; Function compile flags: /Ogty
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::move, COMDAT

; 370  : 		return ((_Elem *)::memmove(_First1, _First2, _Count));

  00000	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	_logf
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\math.h
;	COMDAT _logf
_TEXT	SEGMENT
__X$ = 8						; size = 4
_logf	PROC NEAR					; COMDAT

; 456  :         {return ((float)log((double)_X)); }

  00000	d9 44 24 04	 fld	 DWORD PTR __X$[esp-4]
  00004	d9 ed		 fldln2
  00006	d9 c9		 fxch	 ST(1)
  00008	d9 f1		 fyl2x
  0000a	c3		 ret	 0
_logf	ENDP
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1109 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1110 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L178903
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  00009	c3		 ret	 0
$L178903:

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC NEAR		; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L178911
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  00009	c3		 ret	 0
$L178911:

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC NEAR	; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1494 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi

; 1495 : 		if (_Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00001	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  00004	83 fe 10	 cmp	 esi, 16			; 00000010H
  00007	57		 push	 edi
  00008	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0000b	72 04		 jb	 SHORT $L178924
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	eb 02		 jmp	 SHORT $L178925
$L178924:
  00011	8b d0		 mov	 edx, eax
$L178925:
  00013	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00017	3b fa		 cmp	 edi, edx
  00019	72 17		 jb	 SHORT $L150517
  0001b	83 fe 10	 cmp	 esi, 16			; 00000010H
  0001e	72 02		 jb	 SHORT $L178932
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
$L178932:
  00022	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00025	03 c8		 add	 ecx, eax
  00027	3b cf		 cmp	 ecx, edi
  00029	76 07		 jbe	 SHORT $L150517
  0002b	5f		 pop	 edi

; 1497 : 		else
; 1498 : 			return (true);

  0002c	b0 01		 mov	 al, 1
  0002e	5e		 pop	 esi

; 1499 : 		}

  0002f	c2 04 00	 ret	 4
$L150517:
  00032	5f		 pop	 edi

; 1496 : 			return (false);	// don't ask

  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 1499 : 		}

  00036	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC NEAR			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC NEAR		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 159  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	??$swap@D@std@@YAXAAD0@Z			; std::swap<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\utility
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@D@std@@YAXAAD0@Z PROC NEAR			; std::swap<char>, COMDAT

; 15   : 	_Ty _Tmp = _Left;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	56		 push	 esi

; 16   : 	_Left = _Right, _Right = _Tmp;

  00007	8b 74 24 0c	 mov	 esi, DWORD PTR __Right$[esp]
  0000b	8a 16		 mov	 dl, BYTE PTR [esi]
  0000d	88 10		 mov	 BYTE PTR [eax], dl
  0000f	88 0e		 mov	 BYTE PTR [esi], cl
  00011	5e		 pop	 esi

; 17   : 	}

  00012	c3		 ret	 0
??$swap@D@std@@YAXAAD0@Z ENDP				; std::swap<char>
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC NEAR		; std::_Allocate<char>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 35   : 	}

  0000d	c3		 ret	 0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
PUBLIC	?SetEndTime@CTItem@@QAEXK@Z			; CTItem::SetEndTime
EXTRN	?_AtlModule@@3VCTMapSvrModule@@A:BYTE		; _AtlModule
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\titem.cpp
;	COMDAT ?SetEndTime@CTItem@@QAEXK@Z
_TEXT	SEGMENT
_time$175623 = -8					; size = 8
_dwUseTime$ = 8						; size = 4
?SetEndTime@CTItem@@QAEXK@Z PROC NEAR			; CTItem::SetEndTime, COMDAT
; _this$ = ecx

; 573  : {

  00000	83 ec 08	 sub	 esp, 8
  00003	56		 push	 esi

; 574  : 	DWORD dwAdd = 0;
; 575  : 
; 576  : 	if(dwUseTime)

  00004	8b 74 24 10	 mov	 esi, DWORD PTR _dwUseTime$[esp+8]
  00008	85 f6		 test	 esi, esi
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 577  : 		dwAdd = dwUseTime;
; 578  : 	else if(m_pTITEM->m_bUseType & DURINGTYPE_TAKE)

  0000d	75 3a		 jne	 SHORT $L179023
  0000f	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00012	8a 48 38	 mov	 cl, BYTE PTR [eax+56]
  00015	84 c9		 test	 cl, cl
  00017	0f 89 bb 00 00
	00		 jns	 $L175622

; 579  : 	{
; 580  : 		if(m_pTITEM->m_bUseType & DURINGTYPE_TIME)

  0001d	f6 c1 01	 test	 cl, 1
  00020	74 0c		 je	 SHORT $L175619

; 581  : 			dwAdd = DWORD(m_pTITEM->m_wUseTime) * HOUR_ONE;

  00022	0f b7 70 36	 movzx	 esi, WORD PTR [eax+54]
  00026	69 f6 10 0e 00
	00		 imul	 esi, 3600		; 00000e10H

; 582  : 		else if(m_pTITEM->m_bUseType & DURINGTYPE_DAY)

  0002c	eb 13		 jmp	 SHORT $L175621
$L175619:
  0002e	f6 c1 02	 test	 cl, 2
  00031	0f 84 a1 00 00
	00		 je	 $L175622

; 583  : 			dwAdd = DWORD(m_pTITEM->m_wUseTime) * DAY_ONE;

  00037	0f b7 70 36	 movzx	 esi, WORD PTR [eax+54]
  0003b	69 f6 80 51 01
	00		 imul	 esi, 86400		; 00015180H
$L175621:

; 584  : 	}
; 585  : 
; 586  : 	if(dwAdd)

  00041	85 f6		 test	 esi, esi
  00043	0f 84 8f 00 00
	00		 je	 $L175622
$L179023:

; 587  : 	{
; 588  : 		CTime time(_AtlModule.m_timeCurrent);

  00049	a1 50 a9 02 00	 mov	 eax, DWORD PTR ?_AtlModule@@3VCTMapSvrModule@@A+174416
  0004e	8b 0d 54 a9 02
	00		 mov	 ecx, DWORD PTR ?_AtlModule@@3VCTMapSvrModule@@A+174420

; 589  : 		dwAdd -= time.GetSecond();

  00054	8d 54 24 08	 lea	 edx, DWORD PTR _time$175623[esp+16]
  00058	52		 push	 edx
  00059	89 44 24 0c	 mov	 DWORD PTR _time$175623[esp+20], eax
  0005d	89 4c 24 10	 mov	 DWORD PTR _time$175623[esp+24], ecx
  00061	e8 00 00 00 00	 call	 __localtime64
  00066	83 c4 04	 add	 esp, 4
  00069	85 c0		 test	 eax, eax
  0006b	74 04		 je	 SHORT $L178967
  0006d	8b 00		 mov	 eax, DWORD PTR [eax]
  0006f	eb 03		 jmp	 SHORT $L178968
$L178967:
  00071	83 c8 ff	 or	 eax, -1
$L178968:
  00074	2b f0		 sub	 esi, eax

; 590  : 		dwAdd -= time.GetMinute() * 60;

  00076	8d 44 24 08	 lea	 eax, DWORD PTR _time$175623[esp+16]
  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 __localtime64
  00080	83 c4 04	 add	 esp, 4
  00083	85 c0		 test	 eax, eax
  00085	74 05		 je	 SHORT $L178989
  00087	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0008a	eb 03		 jmp	 SHORT $L178990
$L178989:
  0008c	83 c8 ff	 or	 eax, -1
$L178990:
  0008f	6b c0 c4	 imul	 eax, -60		; ffffffc4H

; 591  : 		dwAdd += (24 - time.GetHour()) * HOUR_ONE;

  00092	8d 4c 24 08	 lea	 ecx, DWORD PTR _time$175623[esp+16]
  00096	51		 push	 ecx
  00097	03 f0		 add	 esi, eax
  00099	e8 00 00 00 00	 call	 __localtime64
  0009e	83 c4 04	 add	 esp, 4
  000a1	85 c0		 test	 eax, eax
  000a3	74 05		 je	 SHORT $L179011
  000a5	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000a8	eb 03		 jmp	 SHORT $L179012
$L179011:
  000aa	83 c8 ff	 or	 eax, -1
$L179012:

; 592  : 		m_dEndTime = time.GetTime() + dwAdd;

  000ad	8b 4c 24 0c	 mov	 ecx, DWORD PTR _time$175623[esp+20]
  000b1	ba 18 00 00 00	 mov	 edx, 24			; 00000018H
  000b6	2b d0		 sub	 edx, eax
  000b8	69 d2 10 0e 00
	00		 imul	 edx, 3600		; 00000e10H
  000be	03 d6		 add	 edx, esi
  000c0	8b 74 24 08	 mov	 esi, DWORD PTR _time$175623[esp+16]
  000c4	33 c0		 xor	 eax, eax
  000c6	03 d6		 add	 edx, esi
  000c8	13 c1		 adc	 eax, ecx
  000ca	89 57 40	 mov	 DWORD PTR [edi+64], edx
  000cd	89 47 44	 mov	 DWORD PTR [edi+68], eax
  000d0	5f		 pop	 edi
  000d1	5e		 pop	 esi

; 596  : }

  000d2	83 c4 08	 add	 esp, 8
  000d5	c2 04 00	 ret	 4
$L175622:

; 593  : 	}
; 594  : 	else
; 595  : 		m_dEndTime = 0;

  000d8	c7 47 40 00 00
	00 00		 mov	 DWORD PTR [edi+64], 0
  000df	c7 47 44 00 00
	00 00		 mov	 DWORD PTR [edi+68], 0
  000e6	5f		 pop	 edi
  000e7	5e		 pop	 esi

; 596  : }

  000e8	83 c4 08	 add	 esp, 8
  000eb	c2 04 00	 ret	 4
?SetEndTime@CTItem@@QAEXK@Z ENDP			; CTItem::SetEndTime
_TEXT	ENDS
PUBLIC	??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::iterator::iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::iterator::iterator, COMDAT
; _this$ = ecx

; 304  : 		iterator()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 305  : 			{	// construct with null node pointer
; 306  : 			}

  00008	c3		 ret	 0
??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::iterator::iterator
; Function compile flags: /Ogty
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::iterator::iterator, COMDAT
; _this$ = ecx

; 304  : 		iterator()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 305  : 			{	// construct with null node pointer
; 306  : 			}

  00008	c3		 ret	 0
??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??9const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::const_iterator::operator!=
; Function compile flags: /Ogty
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::const_iterator::operator!=, COMDAT
; _this$ = ecx

; 246  : 			return (!(*this == _Right));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Right$[esp-4]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]
  00009	33 c9		 xor	 ecx, ecx
  0000b	3b c6		 cmp	 eax, esi
  0000d	0f 95 c1	 setne	 cl
  00010	8a c1		 mov	 al, cl
  00012	5e		 pop	 esi

; 247  : 			}

  00013	c2 04 00	 ret	 4
??9const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::const_iterator::operator!=
_TEXT	ENDS
PUBLIC	??Hiterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBE?AV012@H@Z ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::iterator::operator+
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Hiterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Hiterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::iterator::operator+, COMDAT
; _this$ = ecx

; 262  : 			iterator _Tmp = *this;
; 263  : 			return (_Tmp += _Off);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 08	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00009	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000d	89 10		 mov	 DWORD PTR [eax], edx

; 264  : 			}

  0000f	c2 08 00	 ret	 8
??Hiterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBE?AV012@H@Z ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::iterator::operator+
_TEXT	ENDS
PUBLIC	?_Lmost@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Lmost
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 1005 : 		return (_Left(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1006 : 		}

  00003	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Lmost
_TEXT	ENDS
PUBLIC	?_Rmost@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Rmost
; Function compile flags: /Ogty
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 1049 : 		return (_Right(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 08	 add	 eax, 8

; 1050 : 		}

  00006	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Rmost
_TEXT	ENDS
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Root
; Function compile flags: /Ogty
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Root, COMDAT
; _this$ = ecx

; 1059 : 		return (_Parent(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 04	 add	 eax, 4

; 1060 : 		}

  00006	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Root
_TEXT	ENDS
PUBLIC	?_Key@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAABEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Key
; Function compile flags: /Ogty
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAABEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAABEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Key, COMDAT

; 142  : 		return (_Mybase::_Kfn(_Myval(_Pnode)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 0c	 add	 eax, 12			; 0000000cH

; 143  : 		}

  00007	c3		 ret	 0
?_Key@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAABEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Key
_TEXT	ENDS
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Root
; Function compile flags: /Ogty
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Root, COMDAT
; _this$ = ecx

; 1059 : 		return (_Parent(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 04	 add	 eax, 4

; 1060 : 		}

  00006	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Root
_TEXT	ENDS
PUBLIC	?_Lmost@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::_Lmost
; Function compile flags: /Ogty
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 1005 : 		return (_Left(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1006 : 		}

  00003	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::_Lmost
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAE@V?$allocator@PAUtagITEMMAGIC@@@1@@Z ; std::_Vector_val<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Vector_val<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0?$_Vector_val@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAE@V?$allocator@PAUtagITEMMAGIC@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAE@V?$allocator@PAUtagITEMMAGIC@@@1@@Z PROC NEAR ; std::_Vector_val<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Vector_val<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >, COMDAT
; _this$ = ecx

; 21   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 22   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Vector_val@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAE@V?$allocator@PAUtagITEMMAGIC@@@1@@Z ENDP ; std::_Vector_val<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Vector_val<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >
_TEXT	ENDS
PUBLIC	??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::iterator::iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::iterator::iterator, COMDAT
; _this$ = ecx

; 312  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 313  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBEPAUtagTMAGIC@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBEPAUtagTMAGIC@@@2@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBEPAUtagTMAGIC@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 205  : 			return (_Myval(_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 206  : 			}

  00005	c3		 ret	 0
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBEPAUtagTMAGIC@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::iterator::iterator
; Function compile flags: /Ogty
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::iterator::iterator, COMDAT
; _this$ = ecx

; 312  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 313  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBEPAUtagITEMMAGIC@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBEPAUtagITEMMAGIC@@@2@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBEPAUtagITEMMAGIC@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 205  : 			return (_Myval(_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 206  : 			}

  00005	c3		 ret	 0
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBEPAUtagITEMMAGIC@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	??0iterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE@PAPAUtagITEMMAGIC@@@Z ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::iterator::iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0iterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE@PAPAUtagITEMMAGIC@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0iterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE@PAPAUtagITEMMAGIC@@@Z PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::iterator::iterator, COMDAT
; _this$ = ecx

; 215  : 			{	// construct with pointer _Ptr

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 216  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE@PAPAUtagITEMMAGIC@@@Z ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??Diterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEAAPAUtagITEMMAGIC@@XZ ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Diterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEAAPAUtagITEMMAGIC@@XZ
_TEXT	SEGMENT
??Diterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEAAPAUtagITEMMAGIC@@XZ PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::iterator::operator*, COMDAT
; _this$ = ecx

; 220  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 221  : 			}

  00002	c3		 ret	 0
??Diterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEAAPAUtagITEMMAGIC@@XZ ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::iterator::operator*
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node>::destroy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node *>::destroy
; Function compile flags: /Ogty
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node *>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node *>::destroy
_TEXT	ENDS
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBEIXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::max_size, COMDAT
; _this$ = ecx

; 453  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 454  : 		}

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::max_size
_TEXT	ENDS
PUBLIC	?_Lbound@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Lbound
; Function compile flags: /Ogty
;	COMDAT ?_Lbound@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@ABE@Z
_TEXT	SEGMENT
__Keyval$ = 8						; size = 4
?_Lbound@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@ABE@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Lbound, COMDAT
; _this$ = ecx

; 988  : 		_Nodeptr _Pnode = _Root();

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 989  : 		_Nodeptr _Wherenode = _Myhead;	// end() if search fails
; 990  : 
; 991  : 		while (!_Isnil(_Pnode))

  00006	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00009	84 d2		 test	 dl, dl
  0000b	75 1d		 jne	 SHORT $L176566
  0000d	8b 54 24 04	 mov	 edx, DWORD PTR __Keyval$[esp-4]
  00011	8a 12		 mov	 dl, BYTE PTR [edx]
  00013	53		 push	 ebx
$L176565:

; 992  : 			if (this->comp(_Key(_Pnode), _Keyval))

  00014	38 51 0c	 cmp	 BYTE PTR [ecx+12], dl
  00017	73 05		 jae	 SHORT $L176567

; 993  : 				_Pnode = _Right(_Pnode);	// descend right subtree

  00019	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 994  : 			else

  0001c	eb 04		 jmp	 SHORT $L176568
$L176567:

; 995  : 				{	// _Pnode not less than _Keyval, remember it
; 996  : 				_Wherenode = _Pnode;

  0001e	8b c1		 mov	 eax, ecx

; 997  : 				_Pnode = _Left(_Pnode);	// descend left subtree

  00020	8b 09		 mov	 ecx, DWORD PTR [ecx]
$L176568:
  00022	8a 59 15	 mov	 bl, BYTE PTR [ecx+21]
  00025	84 db		 test	 bl, bl
  00027	74 eb		 je	 SHORT $L176565
  00029	5b		 pop	 ebx
$L176566:

; 998  : 				}
; 999  : 
; 1000 : 		return (_Wherenode);	// return best remembered candidate
; 1001 : 		}

  0002a	c2 04 00	 ret	 4
?_Lbound@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@ABE@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Lbound
_TEXT	ENDS
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Lrotate
; Function compile flags: /Ogty
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 1015 : 		_Nodeptr _Pnode = _Right(_Wherenode);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Wherenode$[esp-4]
  00004	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00007	53		 push	 ebx
  00008	56		 push	 esi

; 1016 : 		_Right(_Wherenode) = _Left(_Pnode);

  00009	8b 30		 mov	 esi, DWORD PTR [eax]
  0000b	89 72 08	 mov	 DWORD PTR [edx+8], esi

; 1017 : 
; 1018 : 		if (!_Isnil(_Left(_Pnode)))

  0000e	8b 30		 mov	 esi, DWORD PTR [eax]
  00010	8a 5e 15	 mov	 bl, BYTE PTR [esi+21]
  00013	84 db		 test	 bl, bl
  00015	75 03		 jne	 SHORT $L176572

; 1019 : 			_Parent(_Left(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$L176572:

; 1020 : 		_Parent(_Pnode) = _Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1021 : 
; 1022 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00026	75 0d		 jne	 SHORT $L176573

; 1023 : 			_Root() = _Pnode;

  00028	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0002b	5e		 pop	 esi

; 1028 : 
; 1029 : 		_Left(_Pnode) = _Wherenode;

  0002c	89 10		 mov	 DWORD PTR [eax], edx

; 1030 : 		_Parent(_Wherenode) = _Pnode;

  0002e	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00031	5b		 pop	 ebx

; 1031 : 		}

  00032	c2 04 00	 ret	 4
$L176573:

; 1024 : 		else if (_Wherenode == _Left(_Parent(_Wherenode)))

  00035	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00038	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0003a	75 0c		 jne	 SHORT $L176575

; 1025 : 			_Left(_Parent(_Wherenode)) = _Pnode;

  0003c	89 01		 mov	 DWORD PTR [ecx], eax
  0003e	5e		 pop	 esi

; 1028 : 
; 1029 : 		_Left(_Pnode) = _Wherenode;

  0003f	89 10		 mov	 DWORD PTR [eax], edx

; 1030 : 		_Parent(_Wherenode) = _Pnode;

  00041	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00044	5b		 pop	 ebx

; 1031 : 		}

  00045	c2 04 00	 ret	 4
$L176575:

; 1026 : 		else
; 1027 : 			_Right(_Parent(_Wherenode)) = _Pnode;

  00048	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0004b	5e		 pop	 esi

; 1028 : 
; 1029 : 		_Left(_Pnode) = _Wherenode;

  0004c	89 10		 mov	 DWORD PTR [eax], edx

; 1030 : 		_Parent(_Wherenode) = _Pnode;

  0004e	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00051	5b		 pop	 ebx

; 1031 : 		}

  00052	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Lrotate
_TEXT	ENDS
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Rrotate
; Function compile flags: /Ogty
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 1069 : 		_Nodeptr _Pnode = _Left(_Wherenode);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Wherenode$[esp-4]
  00004	8b 02		 mov	 eax, DWORD PTR [edx]
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 1070 : 		_Left(_Wherenode) = _Right(_Pnode);

  00008	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0000b	89 32		 mov	 DWORD PTR [edx], esi

; 1071 : 
; 1072 : 		if (!_Isnil(_Right(_Pnode)))

  0000d	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00010	8a 5e 15	 mov	 bl, BYTE PTR [esi+21]
  00013	84 db		 test	 bl, bl
  00015	75 03		 jne	 SHORT $L176580

; 1073 : 			_Parent(_Right(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$L176580:

; 1074 : 		_Parent(_Pnode) = _Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1075 : 
; 1076 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00026	75 0e		 jne	 SHORT $L176581

; 1077 : 			_Root() = _Pnode;

  00028	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0002b	5e		 pop	 esi

; 1082 : 
; 1083 : 		_Right(_Pnode) = _Wherenode;

  0002c	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1084 : 		_Parent(_Wherenode) = _Pnode;

  0002f	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00032	5b		 pop	 ebx

; 1085 : 		}

  00033	c2 04 00	 ret	 4
$L176581:

; 1078 : 		else if (_Wherenode == _Right(_Parent(_Wherenode)))

  00036	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00039	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003c	75 0e		 jne	 SHORT $L176583

; 1079 : 			_Right(_Parent(_Wherenode)) = _Pnode;

  0003e	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00041	5e		 pop	 esi

; 1082 : 
; 1083 : 		_Right(_Pnode) = _Wherenode;

  00042	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1084 : 		_Parent(_Wherenode) = _Pnode;

  00045	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00048	5b		 pop	 ebx

; 1085 : 		}

  00049	c2 04 00	 ret	 4
$L176583:

; 1080 : 		else
; 1081 : 			_Left(_Parent(_Wherenode)) = _Pnode;

  0004c	89 01		 mov	 DWORD PTR [ecx], eax
  0004e	5e		 pop	 esi

; 1082 : 
; 1083 : 		_Right(_Pnode) = _Wherenode;

  0004f	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1084 : 		_Parent(_Wherenode) = _Pnode;

  00052	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00055	5b		 pop	 ebx

; 1085 : 		}

  00056	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Rrotate
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node>::destroy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node *>::destroy
; Function compile flags: /Ogty
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node *>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node *>::destroy
_TEXT	ENDS
PUBLIC	?max_size@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEIXZ ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?max_size@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::max_size, COMDAT
; _this$ = ecx

; 521  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 522  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAUtagITEMMAGIC@@@std@@QAEPAPAUtagITEMMAGIC@@I@Z ; std::allocator<tagITEMMAGIC *>::allocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@PAUtagITEMMAGIC@@@std@@QAEPAPAUtagITEMMAGIC@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAUtagITEMMAGIC@@@std@@QAEPAPAUtagITEMMAGIC@@I@Z PROC NEAR ; std::allocator<tagITEMMAGIC *>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 138  : 		}

  00014	c2 04 00	 ret	 4
?allocate@?$allocator@PAUtagITEMMAGIC@@@std@@QAEPAPAUtagITEMMAGIC@@I@Z ENDP ; std::allocator<tagITEMMAGIC *>::allocate
_TEXT	ENDS
PUBLIC	??Giterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEHABVconst_iterator@12@@Z ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::iterator::operator-
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Giterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEHABVconst_iterator@12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Giterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEHABVconst_iterator@12@@Z PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::iterator::operator-, COMDAT
; _this$ = ecx

; 279  : 			return ((const_iterator)*this - _Right);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	c1 f8 02	 sar	 eax, 2

; 280  : 			}

  0000b	c2 04 00	 ret	 4
??Giterator@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QBEHABVconst_iterator@12@@Z ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::iterator::operator-
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node>::allocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@I@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00007	c1 e0 03	 shl	 eax, 3
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	83 c4 04	 add	 esp, 4

; 138  : 		}

  00013	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::_Dec
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::_Dec, COMDAT
; _this$ = ecx

; 251  : 			if (_Isnil(_Ptr))

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00005	84 d2		 test	 dl, dl
  00007	74 06		 je	 SHORT $L176870

; 252  : 				_Ptr = _Right(_Ptr);	// end() ==> rightmost

  00009	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000c	89 01		 mov	 DWORD PTR [ecx], eax

; 263  : 				}
; 264  : 			}

  0000e	c3		 ret	 0
$L176870:

; 253  : 			else if (!_Isnil(_Left(_Ptr)))

  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	53		 push	 ebx
  00012	8a 5a 15	 mov	 bl, BYTE PTR [edx+21]
  00015	84 db		 test	 bl, bl
  00017	75 1a		 jne	 SHORT $L179434

; 254  : 				_Ptr = _Max(_Left(_Ptr));	// ==> largest of left subtree

  00019	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001c	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  0001f	84 db		 test	 bl, bl
  00021	75 0c		 jne	 SHORT $L179419
$L179418:
  00023	8b d0		 mov	 edx, eax
  00025	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00028	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  0002b	84 db		 test	 bl, bl
  0002d	74 f4		 je	 SHORT $L179418
$L179419:
  0002f	89 11		 mov	 DWORD PTR [ecx], edx
  00031	5b		 pop	 ebx

; 263  : 				}
; 264  : 			}

  00032	c3		 ret	 0
$L179434:

; 255  : 			else
; 256  : 				{	// climb looking for left subtree
; 257  : 				_Nodeptr _Pnode;
; 258  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 259  : 					&& _Ptr == _Left(_Pnode))

  00033	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00036	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00039	84 d2		 test	 dl, dl
  0003b	75 1e		 jne	 SHORT $L179437
  0003d	8d 49 00	 npad	 3
$L176876:
  00040	8b 11		 mov	 edx, DWORD PTR [ecx]
  00042	3b 10		 cmp	 edx, DWORD PTR [eax]
  00044	75 0c		 jne	 SHORT $L176877

; 260  : 					_Ptr = _Pnode;	// ==> parent while left subtree

  00046	89 01		 mov	 DWORD PTR [ecx], eax
  00048	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004b	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0004e	84 d2		 test	 dl, dl
  00050	74 ee		 je	 SHORT $L176876
$L176877:

; 261  : 				if (!_Isnil(_Pnode))

  00052	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00055	84 d2		 test	 dl, dl
  00057	75 02		 jne	 SHORT $L179437

; 262  : 					_Ptr = _Pnode;	// ==> parent if not head

  00059	89 01		 mov	 DWORD PTR [ecx], eax
$L179437:
  0005b	5b		 pop	 ebx

; 263  : 				}
; 264  : 			}

  0005c	c3		 ret	 0
?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::_Dec
_TEXT	ENDS
PUBLIC	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::_Inc
; Function compile flags: /Ogty
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::_Inc, COMDAT
; _this$ = ecx

; 268  : 			if (_Isnil(_Ptr))

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00005	84 d2		 test	 dl, dl
  00007	75 4d		 jne	 SHORT $L176884

; 269  : 				;	// end() shouldn't be incremented, don't move
; 270  : 			else if (!_Isnil(_Right(_Ptr)))

  00009	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0000c	53		 push	 ebx
  0000d	8a 5a 15	 mov	 bl, BYTE PTR [edx+21]
  00010	84 db		 test	 bl, bl
  00012	75 1b		 jne	 SHORT $L179485

; 271  : 				_Ptr = _Min(_Right(_Ptr));	// ==> smallest of right subtree

  00014	8b 02		 mov	 eax, DWORD PTR [edx]
  00016	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  00019	84 db		 test	 bl, bl
  0001b	75 0e		 jne	 SHORT $L179473
  0001d	8d 49 00	 npad	 3
$L179472:
  00020	8b d0		 mov	 edx, eax
  00022	8b 02		 mov	 eax, DWORD PTR [edx]
  00024	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  00027	84 db		 test	 bl, bl
  00029	74 f5		 je	 SHORT $L179472
$L179473:
  0002b	89 11		 mov	 DWORD PTR [ecx], edx
  0002d	5b		 pop	 ebx

; 279  : 				}
; 280  : 			}

  0002e	c3		 ret	 0
$L179485:

; 272  : 			else
; 273  : 				{	// climb looking for right subtree
; 274  : 				_Nodeptr _Pnode;
; 275  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 276  : 					&& _Ptr == _Right(_Pnode))

  0002f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00032	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00035	84 d2		 test	 dl, dl
  00037	75 1a		 jne	 SHORT $L176888
  00039	8d a4 24 00 00
	00 00		 npad	 7
$L176887:
  00040	8b 11		 mov	 edx, DWORD PTR [ecx]
  00042	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00045	75 0c		 jne	 SHORT $L176888

; 277  : 					_Ptr = _Pnode;	// ==> parent while right subtree

  00047	89 01		 mov	 DWORD PTR [ecx], eax
  00049	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0004f	84 d2		 test	 dl, dl
  00051	74 ed		 je	 SHORT $L176887
$L176888:

; 278  : 				_Ptr = _Pnode;	// ==> parent (head if end())

  00053	89 01		 mov	 DWORD PTR [ecx], eax
  00055	5b		 pop	 ebx
$L176884:

; 279  : 				}
; 280  : 			}

  00056	c3		 ret	 0
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::_Inc
_TEXT	ENDS
PUBLIC	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::const_iterator::_Inc
; Function compile flags: /Ogty
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::const_iterator::_Inc, COMDAT
; _this$ = ecx

; 268  : 			if (_Isnil(_Ptr))

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00005	84 d2		 test	 dl, dl
  00007	75 4d		 jne	 SHORT $L176894

; 269  : 				;	// end() shouldn't be incremented, don't move
; 270  : 			else if (!_Isnil(_Right(_Ptr)))

  00009	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0000c	53		 push	 ebx
  0000d	8a 5a 15	 mov	 bl, BYTE PTR [edx+21]
  00010	84 db		 test	 bl, bl
  00012	75 1b		 jne	 SHORT $L179535

; 271  : 				_Ptr = _Min(_Right(_Ptr));	// ==> smallest of right subtree

  00014	8b 02		 mov	 eax, DWORD PTR [edx]
  00016	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  00019	84 db		 test	 bl, bl
  0001b	75 0e		 jne	 SHORT $L179523
  0001d	8d 49 00	 npad	 3
$L179522:
  00020	8b d0		 mov	 edx, eax
  00022	8b 02		 mov	 eax, DWORD PTR [edx]
  00024	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  00027	84 db		 test	 bl, bl
  00029	74 f5		 je	 SHORT $L179522
$L179523:
  0002b	89 11		 mov	 DWORD PTR [ecx], edx
  0002d	5b		 pop	 ebx

; 279  : 				}
; 280  : 			}

  0002e	c3		 ret	 0
$L179535:

; 272  : 			else
; 273  : 				{	// climb looking for right subtree
; 274  : 				_Nodeptr _Pnode;
; 275  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 276  : 					&& _Ptr == _Right(_Pnode))

  0002f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00032	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00035	84 d2		 test	 dl, dl
  00037	75 1a		 jne	 SHORT $L176898
  00039	8d a4 24 00 00
	00 00		 npad	 7
$L176897:
  00040	8b 11		 mov	 edx, DWORD PTR [ecx]
  00042	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00045	75 0c		 jne	 SHORT $L176898

; 277  : 					_Ptr = _Pnode;	// ==> parent while right subtree

  00047	89 01		 mov	 DWORD PTR [ecx], eax
  00049	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0004f	84 d2		 test	 dl, dl
  00051	74 ed		 je	 SHORT $L176897
$L176898:

; 278  : 				_Ptr = _Pnode;	// ==> parent (head if end())

  00053	89 01		 mov	 DWORD PTR [ecx], eax
  00055	5b		 pop	 ebx
$L176894:

; 279  : 				}
; 280  : 			}

  00056	c3		 ret	 0
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::const_iterator::_Inc
_TEXT	ENDS
PUBLIC	??0iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::iterator::iterator
; Function compile flags: /Ogty
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::iterator::iterator, COMDAT
; _this$ = ecx

; 312  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 313  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::iterator::iterator
_TEXT	ENDS
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Lrotate
; Function compile flags: /Ogty
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 1015 : 		_Nodeptr _Pnode = _Right(_Wherenode);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Wherenode$[esp-4]
  00004	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00007	53		 push	 ebx
  00008	56		 push	 esi

; 1016 : 		_Right(_Wherenode) = _Left(_Pnode);

  00009	8b 30		 mov	 esi, DWORD PTR [eax]
  0000b	89 72 08	 mov	 DWORD PTR [edx+8], esi

; 1017 : 
; 1018 : 		if (!_Isnil(_Left(_Pnode)))

  0000e	8b 30		 mov	 esi, DWORD PTR [eax]
  00010	8a 5e 15	 mov	 bl, BYTE PTR [esi+21]
  00013	84 db		 test	 bl, bl
  00015	75 03		 jne	 SHORT $L176922

; 1019 : 			_Parent(_Left(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$L176922:

; 1020 : 		_Parent(_Pnode) = _Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1021 : 
; 1022 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00026	75 0d		 jne	 SHORT $L176923

; 1023 : 			_Root() = _Pnode;

  00028	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0002b	5e		 pop	 esi

; 1028 : 
; 1029 : 		_Left(_Pnode) = _Wherenode;

  0002c	89 10		 mov	 DWORD PTR [eax], edx

; 1030 : 		_Parent(_Wherenode) = _Pnode;

  0002e	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00031	5b		 pop	 ebx

; 1031 : 		}

  00032	c2 04 00	 ret	 4
$L176923:

; 1024 : 		else if (_Wherenode == _Left(_Parent(_Wherenode)))

  00035	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00038	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0003a	75 0c		 jne	 SHORT $L176925

; 1025 : 			_Left(_Parent(_Wherenode)) = _Pnode;

  0003c	89 01		 mov	 DWORD PTR [ecx], eax
  0003e	5e		 pop	 esi

; 1028 : 
; 1029 : 		_Left(_Pnode) = _Wherenode;

  0003f	89 10		 mov	 DWORD PTR [eax], edx

; 1030 : 		_Parent(_Wherenode) = _Pnode;

  00041	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00044	5b		 pop	 ebx

; 1031 : 		}

  00045	c2 04 00	 ret	 4
$L176925:

; 1026 : 		else
; 1027 : 			_Right(_Parent(_Wherenode)) = _Pnode;

  00048	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0004b	5e		 pop	 esi

; 1028 : 
; 1029 : 		_Left(_Pnode) = _Wherenode;

  0004c	89 10		 mov	 DWORD PTR [eax], edx

; 1030 : 		_Parent(_Wherenode) = _Pnode;

  0004e	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00051	5b		 pop	 ebx

; 1031 : 		}

  00052	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Lrotate
_TEXT	ENDS
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Rrotate
; Function compile flags: /Ogty
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 1069 : 		_Nodeptr _Pnode = _Left(_Wherenode);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Wherenode$[esp-4]
  00004	8b 02		 mov	 eax, DWORD PTR [edx]
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 1070 : 		_Left(_Wherenode) = _Right(_Pnode);

  00008	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0000b	89 32		 mov	 DWORD PTR [edx], esi

; 1071 : 
; 1072 : 		if (!_Isnil(_Right(_Pnode)))

  0000d	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00010	8a 5e 15	 mov	 bl, BYTE PTR [esi+21]
  00013	84 db		 test	 bl, bl
  00015	75 03		 jne	 SHORT $L176938

; 1073 : 			_Parent(_Right(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$L176938:

; 1074 : 		_Parent(_Pnode) = _Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1075 : 
; 1076 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00026	75 0e		 jne	 SHORT $L176939

; 1077 : 			_Root() = _Pnode;

  00028	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0002b	5e		 pop	 esi

; 1082 : 
; 1083 : 		_Right(_Pnode) = _Wherenode;

  0002c	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1084 : 		_Parent(_Wherenode) = _Pnode;

  0002f	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00032	5b		 pop	 ebx

; 1085 : 		}

  00033	c2 04 00	 ret	 4
$L176939:

; 1078 : 		else if (_Wherenode == _Right(_Parent(_Wherenode)))

  00036	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00039	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003c	75 0e		 jne	 SHORT $L176941

; 1079 : 			_Right(_Parent(_Wherenode)) = _Pnode;

  0003e	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00041	5e		 pop	 esi

; 1082 : 
; 1083 : 		_Right(_Pnode) = _Wherenode;

  00042	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1084 : 		_Parent(_Wherenode) = _Pnode;

  00045	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00048	5b		 pop	 ebx

; 1085 : 		}

  00049	c2 04 00	 ret	 4
$L176941:

; 1080 : 		else
; 1081 : 			_Left(_Parent(_Wherenode)) = _Pnode;

  0004c	89 01		 mov	 DWORD PTR [ecx], eax
  0004e	5e		 pop	 esi

; 1082 : 
; 1083 : 		_Right(_Pnode) = _Wherenode;

  0004f	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1084 : 		_Parent(_Wherenode) = _Pnode;

  00052	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00055	5b		 pop	 ebx

; 1085 : 		}

  00056	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Rrotate
_TEXT	ENDS
PUBLIC	??0?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKK@std@@@1@@Z ; std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >
; Function compile flags: /Ogty
;	COMDAT ??0?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKK@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKK@std@@@1@@Z PROC NEAR ; std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >, COMDAT
; _this$ = ecx

; 54   : 		{	// construct traits from _Parg and allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 55   : 		}

  00002	c2 08 00	 ret	 8
??0?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKK@std@@@1@@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node>::allocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@I@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00007	c1 e0 03	 shl	 eax, 3
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	83 c4 04	 add	 esp, 4

; 138  : 		}

  00013	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z ; std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z PROC NEAR ; std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >, COMDAT
; _this$ = ecx

; 54   : 		{	// construct traits from _Parg and allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 55   : 		}

  00002	c2 08 00	 ret	 8
??0?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >
_TEXT	ENDS
PUBLIC	??Econst_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::const_iterator::operator++
; Function compile flags: /Ogty
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Econst_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::const_iterator::operator++, COMDAT
; _this$ = ecx

; 214  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 215  : 			_Inc();

  00003	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::const_iterator::_Inc

; 216  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 217  : 			}

  0000b	c3		 ret	 0
??Econst_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::const_iterator::operator++
_TEXT	ENDS
PUBLIC	??$copy@PAPAUtagITEMMAGIC@@PAPAU1@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00@Z ; std::copy<tagITEMMAGIC * *,tagITEMMAGIC * *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$copy@PAPAUtagITEMMAGIC@@PAPAU1@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$copy@PAPAUtagITEMMAGIC@@PAPAU1@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00@Z PROC NEAR ; std::copy<tagITEMMAGIC * *,tagITEMMAGIC * *>, COMDAT

; 1040 : 	return (_Copy_opt(_First, _Last, _Dest, _Ptr_cat(_First, _Dest)));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 1041 : 	}

  00027	c3		 ret	 0
??$copy@PAPAUtagITEMMAGIC@@PAPAU1@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00@Z ENDP ; std::copy<tagITEMMAGIC * *,tagITEMMAGIC * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@YAXPAPAUtagITEMMAGIC@@0AAV?$allocator@PAUtagITEMMAGIC@@@0@@Z ; std::_Destroy_range<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy_range@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@YAXPAPAUtagITEMMAGIC@@0AAV?$allocator@PAUtagITEMMAGIC@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@YAXPAPAUtagITEMMAGIC@@0AAV?$allocator@PAUtagITEMMAGIC@@@0@@Z PROC NEAR ; std::_Destroy_range<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >, COMDAT

; 217  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 218  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@YAXPAPAUtagITEMMAGIC@@0AAV?$allocator@PAUtagITEMMAGIC@@@0@@Z ENDP ; std::_Destroy_range<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >
_TEXT	ENDS
PUBLIC	??$copy_backward@PAPAUtagITEMMAGIC@@PAPAU1@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00@Z ; std::copy_backward<tagITEMMAGIC * *,tagITEMMAGIC * *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$copy_backward@PAPAUtagITEMMAGIC@@PAPAU1@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$copy_backward@PAPAUtagITEMMAGIC@@PAPAU1@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00@Z PROC NEAR ; std::copy_backward<tagITEMMAGIC * *,tagITEMMAGIC * *>, COMDAT

; 1068 : 	return (_Copy_backward_opt(_First, _Last, _Dest,
; 1069 : 		_Ptr_cat(_First, _Dest)));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	c1 f8 02	 sar	 eax, 2
  0000d	c1 e0 02	 shl	 eax, 2
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	8b 4c 24 14	 mov	 ecx, DWORD PTR __Dest$[esp+4]
  00016	2b c8		 sub	 ecx, eax
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 _memmove
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1070 : 	}

  00021	c3		 ret	 0
??$copy_backward@PAPAUtagITEMMAGIC@@PAPAU1@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00@Z ENDP ; std::copy_backward<tagITEMMAGIC * *,tagITEMMAGIC * *>
_TEXT	ENDS
PUBLIC	??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@0@ABQAU120@@Z ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@0@ABQAU120@@Z PROC NEAR ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node *>, COMDAT

; 42   : 	new ((void _FARQ *)_Ptr) _T1(_Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $L179756
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$L179756:

; 43   : 	}

  00010	c3		 ret	 0
??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@0@ABQAU120@@Z ENDP ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node *>
_TEXT	ENDS
PUBLIC	??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@0@ABQAU120@@Z ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node *>
; Function compile flags: /Ogty
;	COMDAT ??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@0@ABQAU120@@Z PROC NEAR ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node *>, COMDAT

; 42   : 	new ((void _FARQ *)_Ptr) _T1(_Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $L179765
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$L179765:

; 43   : 	}

  00010	c3		 ret	 0
??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@0@ABQAU120@@Z ENDP ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node *>
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUtagITEMMAGIC@@IPAU1@@std@@YAXPAPAUtagITEMMAGIC@@IABQAU1@AAV?$allocator@PAUtagITEMMAGIC@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<tagITEMMAGIC *,unsigned int,tagITEMMAGIC *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninit_fill_n@PAUtagITEMMAGIC@@IPAU1@@std@@YAXPAPAUtagITEMMAGIC@@IABQAU1@AAV?$allocator@PAUtagITEMMAGIC@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_fill_n@PAUtagITEMMAGIC@@IPAU1@@std@@YAXPAPAUtagITEMMAGIC@@IABQAU1@AAV?$allocator@PAUtagITEMMAGIC@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_fill_n<tagITEMMAGIC *,unsigned int,tagITEMMAGIC *>, COMDAT

; 237  : 	fill_n(_First, _Count, _Val);

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  0000a	76 10		 jbe	 SHORT $L179777
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$L179775:
  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	49		 dec	 ecx
  00019	75 f6		 jne	 SHORT $L179775
  0001b	5e		 pop	 esi
$L179777:

; 238  : 	}

  0001c	c3		 ret	 0
??$_Uninit_fill_n@PAUtagITEMMAGIC@@IPAU1@@std@@YAXPAPAUtagITEMMAGIC@@IABQAU1@AAV?$allocator@PAUtagITEMMAGIC@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<tagITEMMAGIC *,unsigned int,tagITEMMAGIC *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@PAPAUtagITEMMAGIC@@PAPAU1@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00AAV?$allocator@PAUtagITEMMAGIC@@@0@@Z ; std::_Uninitialized_copy<tagITEMMAGIC * *,tagITEMMAGIC * *,std::allocator<tagITEMMAGIC *> >
; Function compile flags: /Ogty
;	COMDAT ??$_Uninitialized_copy@PAPAUtagITEMMAGIC@@PAPAU1@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00AAV?$allocator@PAUtagITEMMAGIC@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAPAUtagITEMMAGIC@@PAPAU1@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00AAV?$allocator@PAUtagITEMMAGIC@@@0@@Z PROC NEAR ; std::_Uninitialized_copy<tagITEMMAGIC * *,tagITEMMAGIC * *,std::allocator<tagITEMMAGIC *> >, COMDAT

; 127  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 128  : 		_Ptr_cat(_First, _Dest)));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 129  : 	}

  00027	c3		 ret	 0
??$_Uninitialized_copy@PAPAUtagITEMMAGIC@@PAPAU1@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00AAV?$allocator@PAUtagITEMMAGIC@@@0@@Z ENDP ; std::_Uninitialized_copy<tagITEMMAGIC * *,tagITEMMAGIC * *,std::allocator<tagITEMMAGIC *> >
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC NEAR ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 34   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 35   : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogty
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $L179810
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1476 : 		}

  00014	c2 04 00	 ret	 4

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$L179810:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 1476 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1114 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1115 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1116 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC NEAR	; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 138  : 		}

  0000d	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	?SetDuration@CTItem@@QAEXE@Z			; CTItem::SetDuration
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\titem.cpp
;	COMDAT ?SetDuration@CTItem@@QAEXE@Z
_TEXT	SEGMENT
_bMon$ = 8						; size = 1
?SetDuration@CTItem@@QAEXE@Z PROC NEAR			; CTItem::SetDuration, COMDAT
; _this$ = ecx

; 139  : 	if(bMon)

  00000	8a 44 24 04	 mov	 al, BYTE PTR _bMon$[esp-4]
  00004	84 c0		 test	 al, al
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx
  00009	74 23		 je	 SHORT $L175416

; 140  : 		m_dwDuraMax = m_pTITEM->m_dwDuraMax * ((rand() % 90) + 11) / 100;

  0000b	e8 00 00 00 00	 call	 _rand
  00010	99		 cdq
  00011	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  00016	f7 f9		 idiv	 ecx
  00018	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0001b	83 c2 0b	 add	 edx, 11			; 0000000bH
  0001e	0f af 50 54	 imul	 edx, DWORD PTR [eax+84]
  00022	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00027	f7 e2		 mul	 edx
  00029	c1 ea 05	 shr	 edx, 5

; 141  : 	else

  0002c	eb 06		 jmp	 SHORT $L179837
$L175416:

; 142  : 		m_dwDuraMax = m_pTITEM->m_dwDuraMax;

  0002e	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00031	8b 51 54	 mov	 edx, DWORD PTR [ecx+84]
$L179837:

; 143  : 
; 144  : 	m_dwDuraCur = m_dwDuraMax;

  00034	8b c2		 mov	 eax, edx

; 145  : 	SetEndTime();

  00036	6a 00		 push	 0
  00038	8b ce		 mov	 ecx, esi
  0003a	89 56 34	 mov	 DWORD PTR [esi+52], edx
  0003d	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00040	e8 00 00 00 00	 call	 ?SetEndTime@CTItem@@QAEXK@Z ; CTItem::SetEndTime
  00045	5e		 pop	 esi

; 146  : }

  00046	c2 04 00	 ret	 4
?SetDuration@CTItem@@QAEXE@Z ENDP			; CTItem::SetDuration
_TEXT	ENDS
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::begin
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::begin, COMDAT
; _this$ = ecx

; 408  : 		return (_TREE_ITERATOR(_Lmost()));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 08		 mov	 ecx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 409  : 		}

  0000b	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::begin
_TEXT	ENDS
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::end
; Function compile flags: /Ogty
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::end, COMDAT
; _this$ = ecx

; 418  : 		return (_TREE_ITERATOR(_Myhead));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 419  : 		}

  00009	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::end
_TEXT	ENDS
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::begin
; Function compile flags: /Ogty
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::begin, COMDAT
; _this$ = ecx

; 408  : 		return (_TREE_ITERATOR(_Lmost()));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 08		 mov	 ecx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 409  : 		}

  0000b	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::begin
_TEXT	ENDS
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::end
; Function compile flags: /Ogty
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::end, COMDAT
; _this$ = ecx

; 418  : 		return (_TREE_ITERATOR(_Myhead));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 419  : 		}

  00009	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::end
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::begin
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?begin@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::begin, COMDAT
; _this$ = ecx

; 463  : 		return (iterator(_Myfirst));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 464  : 		}

  00009	c2 04 00	 ret	 4
?begin@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::begin
_TEXT	ENDS
PUBLIC	??A?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAEAAPAUtagITEMMAGIC@@I@Z ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::operator[]
; Function compile flags: /Ogty
;	COMDAT ??A?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAEAAPAUtagITEMMAGIC@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAEAAPAUtagITEMMAGIC@@I@Z PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::operator[], COMDAT
; _this$ = ecx

; 555  : 		return (*(begin() + _Pos));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pos$[esp-4]
  00007	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 556  : 		}

  0000a	c2 04 00	 ret	 4
??A?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAEAAPAUtagITEMMAGIC@@I@Z ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::operator[]
_TEXT	ENDS
PUBLIC	??Diterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBEPAUtagTMAGIC@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::iterator::operator*
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??Diterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBEPAUtagTMAGIC@@@2@XZ
_TEXT	SEGMENT
??Diterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBEPAUtagTMAGIC@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::iterator::operator*, COMDAT
; _this$ = ecx

; 317  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 318  : 			}

  00005	c3		 ret	 0
??Diterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBEPAUtagTMAGIC@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::iterator::operator*
_TEXT	ENDS
PUBLIC	??Diterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBEPAUtagITEMMAGIC@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Diterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBEPAUtagITEMMAGIC@@@2@XZ
_TEXT	SEGMENT
??Diterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBEPAUtagITEMMAGIC@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::iterator::operator*, COMDAT
; _this$ = ecx

; 317  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 318  : 			}

  00005	c3		 ret	 0
??Diterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBEPAUtagITEMMAGIC@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::iterator::operator*
_TEXT	ENDS
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Erase
; Function compile flags: /Ogty
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 890  : 		{	// free entire subtree, recursively

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 891  : 		for (_Nodeptr _Pnode = _Rootnode; !_Isnil(_Pnode); _Rootnode = _Pnode)

  00003	8b 7c 24 10	 mov	 edi, DWORD PTR __Rootnode$[esp+8]
  00007	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  0000a	84 c0		 test	 al, al
  0000c	8b d9		 mov	 ebx, ecx
  0000e	8b f7		 mov	 esi, edi
  00010	75 1f		 jne	 SHORT $L176193
$L176191:

; 892  : 			{	// free subtrees, then node
; 893  : 			_Erase(_Right(_Pnode));

  00012	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00015	50		 push	 eax
  00016	8b cb		 mov	 ecx, ebx
  00018	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Erase

; 894  : 			_Pnode = _Left(_Pnode);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]

; 895  : 			this->_Alnod.destroy(_Rootnode);	// destroy, free erased node
; 896  : 			this->_Alnod.deallocate(_Rootnode, 1);

  0001f	57		 push	 edi
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	8a 46 15	 mov	 al, BYTE PTR [esi+21]
  00028	83 c4 04	 add	 esp, 4
  0002b	84 c0		 test	 al, al
  0002d	8b fe		 mov	 edi, esi
  0002f	74 e1		 je	 SHORT $L176191
$L176193:
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx

; 897  : 			}
; 898  : 		}

  00034	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Erase
_TEXT	ENDS
PUBLIC	?lower_bound@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::lower_bound
; Function compile flags: /Ogty
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 810  : 		return (_TREE_ITERATOR(_Lbound(_Keyval)));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00009	84 d2		 test	 dl, dl
  0000b	75 1d		 jne	 SHORT $L180065
  0000d	8b 54 24 08	 mov	 edx, DWORD PTR __Keyval$[esp-4]
  00011	8a 12		 mov	 dl, BYTE PTR [edx]
  00013	53		 push	 ebx
$L180033:
  00014	38 50 0c	 cmp	 BYTE PTR [eax+12], dl
  00017	73 05		 jae	 SHORT $L180035
  00019	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0001c	eb 04		 jmp	 SHORT $L180036
$L180035:
  0001e	8b c8		 mov	 ecx, eax
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
$L180036:
  00022	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  00025	84 db		 test	 bl, bl
  00027	74 eb		 je	 SHORT $L180033
  00029	5b		 pop	 ebx
$L180065:
  0002a	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0002e	89 08		 mov	 DWORD PTR [eax], ecx

; 811  : 		}

  00030	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::lower_bound
_TEXT	ENDS
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Erase
; Function compile flags: /Ogty
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 890  : 		{	// free entire subtree, recursively

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 891  : 		for (_Nodeptr _Pnode = _Rootnode; !_Isnil(_Pnode); _Rootnode = _Pnode)

  00003	8b 7c 24 10	 mov	 edi, DWORD PTR __Rootnode$[esp+8]
  00007	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  0000a	84 c0		 test	 al, al
  0000c	8b d9		 mov	 ebx, ecx
  0000e	8b f7		 mov	 esi, edi
  00010	75 1f		 jne	 SHORT $L176323
$L176321:

; 892  : 			{	// free subtrees, then node
; 893  : 			_Erase(_Right(_Pnode));

  00012	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00015	50		 push	 eax
  00016	8b cb		 mov	 ecx, ebx
  00018	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Erase

; 894  : 			_Pnode = _Left(_Pnode);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]

; 895  : 			this->_Alnod.destroy(_Rootnode);	// destroy, free erased node
; 896  : 			this->_Alnod.deallocate(_Rootnode, 1);

  0001f	57		 push	 edi
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	8a 46 15	 mov	 al, BYTE PTR [esi+21]
  00028	83 c4 04	 add	 esp, 4
  0002b	84 c0		 test	 al, al
  0002d	8b fe		 mov	 edi, esi
  0002f	74 e1		 je	 SHORT $L176321
$L176323:
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx

; 897  : 			}
; 898  : 		}

  00034	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Erase
_TEXT	ENDS
PUBLIC	?end@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::end
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?end@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::end, COMDAT
; _this$ = ecx

; 473  : 		return (iterator(_Mylast));

  00000	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 474  : 		}

  00009	c2 04 00	 ret	 4
?end@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::end
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEXPAPAUtagITEMMAGIC@@0@Z ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Destroy
; Function compile flags: /Ogty
;	COMDAT ?_Destroy@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEXPAPAUtagITEMMAGIC@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEXPAPAUtagITEMMAGIC@@0@Z PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Destroy, COMDAT
; _this$ = ecx

; 787  : 		_Destroy_range(_First, _Last, this->_Alval);
; 788  : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEXPAPAUtagITEMMAGIC@@0@Z ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEXXZ ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Tidy
; Function compile flags: /Ogty
;	COMDAT ?_Tidy@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEXXZ PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Tidy, COMDAT
; _this$ = ecx

; 791  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 792  : 		if (_Myfirst != 0)

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L180102

; 793  : 			{	// something to free, destroy and deallocate it
; 794  : 			_Destroy(_Myfirst, _Mylast);
; 795  : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L180102:

; 796  : 			}
; 797  : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 798  : 		}

  00029	c3		 ret	 0
?_Tidy@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEXXZ ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Tidy
_TEXT	ENDS
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::begin
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::begin, COMDAT
; _this$ = ecx

; 408  : 		return (_TREE_ITERATOR(_Lmost()));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 08		 mov	 ecx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 409  : 		}

  0000b	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::begin
_TEXT	ENDS
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::end
; Function compile flags: /Ogty
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::end, COMDAT
; _this$ = ecx

; 418  : 		return (_TREE_ITERATOR(_Myhead));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 419  : 		}

  00009	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::end
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBEPAUtagTMAGIC@@@2@D@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Buynode
EXTRN	__CxxThrowException@8:NEAR
; Function compile flags: /Ogty
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBEPAUtagTMAGIC@@@2@D@Z
_TEXT	SEGMENT
__Larg$ = 8						; size = 4
__Parg$ = 12						; size = 4
__Rarg$ = 16						; size = 4
__Val$ = 20						; size = 4
__Carg$ = 24						; size = 1
?_Buynode@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBEPAUtagTMAGIC@@@2@D@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 1131 : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

  00000	6a 18		 push	 24			; 00000018H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 1132 : 		_TRY_BEGIN
; 1133 : 		new (_Wherenode) _Node(_Larg, _Parg, _Rarg, _Val, _Carg);

  0000a	85 c0		 test	 eax, eax
  0000c	74 2e		 je	 SHORT $L180144
  0000e	8b 4c 24 04	 mov	 ecx, DWORD PTR __Larg$[esp-4]
  00012	8b 54 24 08	 mov	 edx, DWORD PTR __Parg$[esp-4]
  00016	89 08		 mov	 DWORD PTR [eax], ecx
  00018	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Rarg$[esp-4]
  0001c	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0001f	8b 4c 24 10	 mov	 ecx, DWORD PTR __Val$[esp-4]
  00023	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00026	8b 11		 mov	 edx, DWORD PTR [ecx]
  00028	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  0002b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0002e	8a 54 24 14	 mov	 dl, BYTE PTR __Carg$[esp-4]
  00032	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00035	88 50 14	 mov	 BYTE PTR [eax+20], dl
  00038	c6 40 15 00	 mov	 BYTE PTR [eax+21], 0
$L180144:

; 1134 : 		_CATCH_ALL
; 1135 : 		this->_Alnod.deallocate(_Wherenode, 1);
; 1136 : 		_RERAISE;
; 1137 : 		_CATCH_END
; 1138 : 		return (_Wherenode);
; 1139 : 		}

  0003c	c2 14 00	 ret	 20			; 00000014H
?_Buynode@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBEPAUtagTMAGIC@@@2@D@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Buynode
_TEXT	ENDS
PUBLIC	??Econst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::operator++
; Function compile flags: /Ogty
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Econst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::operator++, COMDAT
; _this$ = ecx

; 214  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 215  : 			_Inc();

  00003	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::_Inc

; 216  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 217  : 			}

  0000b	c3		 ret	 0
??Econst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::operator++
_TEXT	ENDS
PUBLIC	??Fconst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::operator--
; Function compile flags: /Ogty
;	COMDAT ??Fconst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Fconst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::operator--, COMDAT
; _this$ = ecx

; 227  : 			{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 228  : 			_Dec();

  00003	e8 00 00 00 00	 call	 ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::_Dec

; 229  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 230  : 			}

  0000b	c3		 ret	 0
??Fconst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::operator--
_TEXT	ENDS
PUBLIC	??Econst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::const_iterator::operator++
; Function compile flags: /Ogty
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Econst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::const_iterator::operator++, COMDAT
; _this$ = ecx

; 214  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 215  : 			_Inc();

  00003	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::const_iterator::_Inc

; 216  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 217  : 			}

  0000b	c3		 ret	 0
??Econst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::const_iterator::operator++
_TEXT	ENDS
PUBLIC	??0?$_Tree_ptr@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKK@std@@@1@@Z ; std::_Tree_ptr<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Tree_ptr<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >
; Function compile flags: /Ogty
;	COMDAT ??0?$_Tree_ptr@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKK@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_ptr@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKK@std@@@1@@Z PROC NEAR ; std::_Tree_ptr<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Tree_ptr<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >, COMDAT
; _this$ = ecx

; 76   : 		{	// construct base, and allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 77   : 		}

  00002	c2 08 00	 ret	 8
??0?$_Tree_ptr@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKK@std@@@1@@Z ENDP ; std::_Tree_ptr<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Tree_ptr<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >
_TEXT	ENDS
PUBLIC	??0?$_Tree_ptr@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z ; std::_Tree_ptr<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Tree_ptr<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >
; Function compile flags: /Ogty
;	COMDAT ??0?$_Tree_ptr@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_ptr@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z PROC NEAR ; std::_Tree_ptr<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Tree_ptr<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >, COMDAT
; _this$ = ecx

; 76   : 		{	// construct base, and allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 77   : 		}

  00002	c2 08 00	 ret	 8
??0?$_Tree_ptr@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z ENDP ; std::_Tree_ptr<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Tree_ptr<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@ABQAU342@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node *>::construct
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@ABQAU342@@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node *>::construct, COMDAT
; _this$ = ecx

; 147  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $L180241
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$L180241:

; 148  : 		}

  00010	c2 08 00	 ret	 8
?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@ABQAU342@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Node *>::construct
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@ABQAU342@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node *>::construct
; Function compile flags: /Ogty
;	COMDAT ?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@ABQAU342@@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node *>::construct, COMDAT
; _this$ = ecx

; 147  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $L180258
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$L180258:

; 148  : 		}

  00010	c2 08 00	 ret	 8
?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@ABQAU342@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Node *>::construct
_TEXT	ENDS
PUBLIC	??Eiterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::iterator::operator++
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Eiterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::iterator::operator++, COMDAT
; _this$ = ecx

; 326  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 327  : 			++(*(const_iterator *)this);

  00003	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::const_iterator::_Inc

; 328  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 329  : 			}

  0000b	c3		 ret	 0
??Eiterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::iterator::operator++
_TEXT	ENDS
PUBLIC	??$_Uninitialized_fill_n@PAPAUtagITEMMAGIC@@IPAU1@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@YAXPAPAUtagITEMMAGIC@@IABQAU1@AAV?$allocator@PAUtagITEMMAGIC@@@0@@Z ; std::_Uninitialized_fill_n<tagITEMMAGIC * *,unsigned int,tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninitialized_fill_n@PAPAUtagITEMMAGIC@@IPAU1@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@YAXPAPAUtagITEMMAGIC@@IABQAU1@AAV?$allocator@PAUtagITEMMAGIC@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_fill_n@PAPAUtagITEMMAGIC@@IPAU1@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@YAXPAPAUtagITEMMAGIC@@IABQAU1@AAV?$allocator@PAUtagITEMMAGIC@@@0@@Z PROC NEAR ; std::_Uninitialized_fill_n<tagITEMMAGIC * *,unsigned int,tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >, COMDAT

; 256  : 	_Uninit_fill_n(_First, _Count, _Val, _Al,
; 257  : 		_Ptr_cat(_First, _First));

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  0000a	76 10		 jbe	 SHORT $L180291
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$L180289:
  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	49		 dec	 ecx
  00019	75 f6		 jne	 SHORT $L180289
  0001b	5e		 pop	 esi
$L180291:

; 258  : 	}

  0001c	c3		 ret	 0
??$_Uninitialized_fill_n@PAPAUtagITEMMAGIC@@IPAU1@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@YAXPAPAUtagITEMMAGIC@@IABQAU1@AAV?$allocator@PAUtagITEMMAGIC@@@0@@Z ENDP ; std::_Uninitialized_fill_n<tagITEMMAGIC * *,unsigned int,tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAPAUtagITEMMAGIC@@@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEPAPAUtagITEMMAGIC@@PAPAU2@00@Z ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Ucopy<tagITEMMAGIC * *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??$_Ucopy@PAPAUtagITEMMAGIC@@@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEPAPAUtagITEMMAGIC@@PAPAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAPAUtagITEMMAGIC@@@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEPAPAUtagITEMMAGIC@@PAPAU2@00@Z PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Ucopy<tagITEMMAGIC * *>, COMDAT
; _this$ = ecx

; 802  : 		{	// copy initializing [_First, _Last), using allocator
; 803  : 		return (_Uninitialized_copy(_First, _Last,
; 804  : 			_Ptr, this->_Alval));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Ptr$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 805  : 		}

  00027	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAPAUtagITEMMAGIC@@@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEPAPAUtagITEMMAGIC@@PAPAU2@00@Z ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Ucopy<tagITEMMAGIC * *>
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1510 : 		if (!_Built)

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Built$[esp-4]
  00004	84 c0		 test	 al, al
  00006	53		 push	 ebx
  00007	55		 push	 ebp
  00008	8b 6c 24 10	 mov	 ebp, DWORD PTR __Newsize$[esp+4]
  0000c	8b d9		 mov	 ebx, ecx
  0000e	74 2f		 je	 SHORT $L180325

; 1511 : 			;
; 1512 : 		else if (_BUF_SIZE <= _Myres)

  00010	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  00014	72 29		 jb	 SHORT $L180325

; 1513 : 			{	// copy any leftovers to small buffer and deallocate
; 1514 : 			_Elem *_Ptr = _Bx._Ptr;
; 1515 : 			if (0 < _Newsize)

  00016	85 ed		 test	 ebp, ebp
  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	57		 push	 edi
  0001c	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  0001f	76 14		 jbe	 SHORT $L180322
  00021	56		 push	 esi

; 1516 : 				_Traits::copy(_Bx._Buf, _Ptr, _Newsize);

  00022	8b cd		 mov	 ecx, ebp
  00024	8b d1		 mov	 edx, ecx
  00026	c1 e9 02	 shr	 ecx, 2
  00029	8b f0		 mov	 esi, eax
  0002b	f3 a5		 rep movsd
  0002d	8b ca		 mov	 ecx, edx
  0002f	83 e1 03	 and	 ecx, 3
  00032	f3 a4		 rep movsb
  00034	5e		 pop	 esi
$L180322:

; 1517 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4
  0003e	5f		 pop	 edi
$L180325:

; 1518 : 			}
; 1519 : 		_Myres = _BUF_SIZE - 1;
; 1520 : 		_Eos(_Newsize);

  0003f	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00042	c7 43 18 0f 00
	00 00		 mov	 DWORD PTR [ebx+24], 15	; 0000000fH
  00049	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0004e	5d		 pop	 ebp
  0004f	5b		 pop	 ebx

; 1521 : 		}

  00050	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
EXTRN	?_Xran@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xran
; Function compile flags: /Ogty
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 792  : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp

; 793  : 		if (_Mysize < _Off)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	39 6e 14	 cmp	 DWORD PTR [esi+20], ebp
  0000b	57		 push	 edi
  0000c	73 05		 jae	 SHORT $L149765

; 794  : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L149765:

; 795  : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c5		 sub	 eax, ebp
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $L149766

; 796  : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$L149766:

; 797  : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 47		 jbe	 SHORT $L180390

; 798  : 			{	// move elements down
; 799  : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 800  : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0002c	53		 push	 ebx
  0002d	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  00030	72 04		 jb	 SHORT $L180355
  00032	8b 13		 mov	 edx, DWORD PTR [ebx]
  00034	eb 02		 jmp	 SHORT $L180356
$L180355:
  00036	8b d3		 mov	 edx, ebx
$L180356:
  00038	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0003b	72 04		 jb	 SHORT $L180362
  0003d	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0003f	eb 02		 jmp	 SHORT $L180363
$L180362:
  00041	8b cb		 mov	 ecx, ebx
$L180363:
  00043	2b c7		 sub	 eax, edi

; 803  : 			}
; 804  : 		return (*this);

  00045	03 d5		 add	 edx, ebp
  00047	50		 push	 eax
  00048	03 d7		 add	 edx, edi
  0004a	52		 push	 edx
  0004b	03 cd		 add	 ecx, ebp
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 _memmove
  00053	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00056	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00059	2b c7		 sub	 eax, edi
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005e	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00061	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00064	72 02		 jb	 SHORT $L180385

; 801  : 			size_type _Newsize = _Mysize - _Count;
; 802  : 			_Eos(_Newsize);

  00066	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$L180385:
  00068	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0
  0006c	5b		 pop	 ebx
$L180390:
  0006d	5f		 pop	 edi

; 803  : 			}
; 804  : 		return (*this);

  0006e	8b c6		 mov	 eax, esi
  00070	5e		 pop	 esi
  00071	5d		 pop	 ebp

; 805  : 		}

  00072	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T180595 DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
$T180597 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L180397
$T180598 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L180395
$T180596 DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T180597
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:$T180598
$T180589 DD	019930520H
	DD	04H
	DD	FLAT:$T180595
	DD	02H
	DD	FLAT:$T180596
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1444 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1445 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	8b d8		 mov	 ebx, eax
  00022	83 cb 0f	 or	 ebx, 15			; 0000000fH

; 1446 : 		if (max_size() < _Newres)

  00025	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00028	57		 push	 edi
  00029	8b f1		 mov	 esi, ecx
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00031	76 04		 jbe	 SHORT $L150507

; 1447 : 			_Newres = _Newsize;	// undo roundup if too big

  00033	8b d8		 mov	 ebx, eax

; 1448 : 		else if (_Newres / 3 < _Myres / 2

  00035	eb 22		 jmp	 SHORT $L150509
$L150507:

; 1449 : 			&& _Myres <= max_size() - _Myres / 2)

  00037	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  0003a	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0003f	f7 e3		 mul	 ebx
  00041	8b cf		 mov	 ecx, edi
  00043	d1 e9		 shr	 ecx, 1
  00045	d1 ea		 shr	 edx, 1
  00047	3b d1		 cmp	 edx, ecx
  00049	73 0e		 jae	 SHORT $L150509
  0004b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00050	2b c1		 sub	 eax, ecx
  00052	3b f8		 cmp	 edi, eax
  00054	77 03		 ja	 SHORT $L150509

; 1450 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00056	8d 1c 39	 lea	 ebx, DWORD PTR [ecx+edi]
$L150509:

; 1451 : 		_Elem *_Ptr;
; 1452 : 
; 1453 : 		_TRY_BEGIN
; 1454 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00059	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  0005c	51		 push	 ecx
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00064	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00069	8b d0		 mov	 edx, eax
  0006b	83 c4 04	 add	 esp, 4
  0006e	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
  00071	eb 29		 jmp	 SHORT $L150511
$L180395:

; 1455 : 		_CATCH_ALL
; 1456 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  00073	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00076	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 1457 : 			_TRY_BEGIN
; 1458 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00079	40		 inc	 eax
  0007a	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0007d	50		 push	 eax
  0007e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00082	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00087	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0008a	83 c4 04	 add	 esp, 4

; 1462 : 			_CATCH_END
; 1463 : 		_CATCH_END

  0008d	b8 00 00 00 00	 mov	 eax, $L180590
  00092	c3		 ret	 0
$L180590:
  00093	8b 5d e8	 mov	 ebx, DWORD PTR __Newres$[ebp]
  00096	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00099	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$L150511:

; 1464 : 
; 1465 : 		if (0 < _Oldlen)

  0009c	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  0009f	85 c9		 test	 ecx, ecx
  000a1	76 24		 jbe	 SHORT $L180515

; 1466 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  000a3	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000a7	72 05		 jb	 SHORT $L180511
  000a9	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000ac	eb 03		 jmp	 SHORT $L180512
$L180511:
  000ae	83 c6 04	 add	 esi, 4
$L180512:
  000b1	8b c1		 mov	 eax, ecx
  000b3	c1 e9 02	 shr	 ecx, 2
  000b6	8b fa		 mov	 edi, edx
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb
  000c1	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000c4	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
$L180515:

; 1467 : 		_Tidy(true);

  000c7	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000cb	72 12		 jb	 SHORT $L180550
  000cd	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000d0	51		 push	 ecx
  000d1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d6	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000d9	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000dc	83 c4 04	 add	 esp, 4
$L180550:

; 1468 : 		_Bx._Ptr = _Ptr;
; 1469 : 		_Myres = _Newres;
; 1470 : 		_Eos(_Oldlen);

  000df	83 fb 10	 cmp	 ebx, 16			; 00000010H
  000e2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000e5	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e8	89 10		 mov	 DWORD PTR [eax], edx
  000ea	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  000ed	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  000f0	72 02		 jb	 SHORT $L180585
  000f2	8b c2		 mov	 eax, edx
$L180585:

; 1471 : 		}

  000f4	5f		 pop	 edi
  000f5	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  000f9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fc	5e		 pop	 esi
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00104	5b		 pop	 ebx
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c2 08 00	 ret	 8
$L180397:

; 1459 : 			_CATCH_ALL
; 1460 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010b	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0010e	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00112	72 0c		 jb	 SHORT $L180490
  00114	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00117	52		 push	 edx
  00118	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0011d	83 c4 04	 add	 esp, 4
$L180490:

; 1461 : 			_RERAISE;

  00120	6a 00		 push	 0
  00122	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00129	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00130	6a 00		 push	 0
  00132	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00136	e8 00 00 00 00	 call	 __CxxThrowException@8
$L180600:
$L180594:
  0013b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T180589
  00005	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::clear
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::clear, COMDAT
; _this$ = ecx

; 780  : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 781  : 		_Erase(_Root());

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00009	51		 push	 ecx
  0000a	8b ce		 mov	 ecx, esi
  0000c	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Erase

; 782  : 		_Root() = _Myhead, _Mysize = 0;

  00011	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00014	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 783  : 		_Lmost() = _Myhead, _Rmost() = _Myhead;

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	89 00		 mov	 DWORD PTR [eax], eax
  00023	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00026	89 76 08	 mov	 DWORD PTR [esi+8], esi
  00029	5e		 pop	 esi

; 784  : 		}

  0002a	c3		 ret	 0
?clear@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::clear
_TEXT	ENDS
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::clear
; Function compile flags: /Ogty
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::clear, COMDAT
; _this$ = ecx

; 780  : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 781  : 		_Erase(_Root());

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00009	51		 push	 ecx
  0000a	8b ce		 mov	 ecx, esi
  0000c	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Erase

; 782  : 		_Root() = _Myhead, _Mysize = 0;

  00011	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00014	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 783  : 		_Lmost() = _Myhead, _Rmost() = _Myhead;

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	89 00		 mov	 DWORD PTR [eax], eax
  00023	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00026	89 76 08	 mov	 DWORD PTR [esi+8], esi
  00029	5e		 pop	 esi

; 784  : 		}

  0002a	c3		 ret	 0
?clear@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::clear
_TEXT	ENDS
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::find
; Function compile flags: /Ogty
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z
_TEXT	SEGMENT
$T180680 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::find, COMDAT
; _this$ = ecx

; 787  : 		{	// find an element in mutable sequence that matches _Keyval

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	56		 push	 esi
  00003	8b f1		 mov	 esi, ecx

; 788  : 		iterator _Where = lower_bound(_Keyval);

  00005	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00008	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000b	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  0000e	84 c9		 test	 cl, cl
  00010	57		 push	 edi
  00011	8b 7c 24 18	 mov	 edi, DWORD PTR __Keyval$[esp+12]
  00015	75 1e		 jne	 SHORT $L180757
  00017	8a 0f		 mov	 cl, BYTE PTR [edi]
  00019	8d a4 24 00 00
	00 00		 npad	 7
$L180756:
  00020	38 48 0c	 cmp	 BYTE PTR [eax+12], cl
  00023	73 05		 jae	 SHORT $L180758
  00025	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00028	eb 04		 jmp	 SHORT $L180759
$L180758:
  0002a	8b d0		 mov	 edx, eax
  0002c	8b 00		 mov	 eax, DWORD PTR [eax]
$L180759:
  0002e	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  00031	84 db		 test	 bl, bl
  00033	74 eb		 je	 SHORT $L180756
$L180757:

; 789  : 		return (_Where == end() || this->comp(_Keyval, _Key(_Where._Mynode()))
; 790  : 			? end() : _Where);

  00035	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00038	3b d0		 cmp	 edx, eax
  0003a	89 54 24 18	 mov	 DWORD PTR __Where$[esp+12], edx
  0003e	74 1a		 je	 SHORT $L180679
  00040	8a 0f		 mov	 cl, BYTE PTR [edi]
  00042	3a 4a 0c	 cmp	 cl, BYTE PTR [edx+12]
  00045	72 13		 jb	 SHORT $L180679
  00047	8d 44 24 18	 lea	 eax, DWORD PTR __Where$[esp+12]
  0004b	8b 10		 mov	 edx, DWORD PTR [eax]
  0004d	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	89 10		 mov	 DWORD PTR [eax], edx
  00055	5b		 pop	 ebx

; 791  : 		}

  00056	59		 pop	 ecx
  00057	c2 08 00	 ret	 8
$L180679:

; 789  : 		return (_Where == end() || this->comp(_Keyval, _Key(_Where._Mynode()))
; 790  : 			? end() : _Where);

  0005a	89 44 24 0c	 mov	 DWORD PTR $T180680[esp+16], eax
  0005e	8d 44 24 0c	 lea	 eax, DWORD PTR $T180680[esp+16]
  00062	8b 10		 mov	 edx, DWORD PTR [eax]
  00064	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	89 10		 mov	 DWORD PTR [eax], edx
  0006c	5b		 pop	 ebx

; 791  : 		}

  0006d	59		 pop	 ecx
  0006e	c2 08 00	 ret	 8
?find@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::find
_TEXT	ENDS
PUBLIC	??1?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE@XZ ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::~vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??1?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE@XZ PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::~vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >, COMDAT
; _this$ = ecx

; 387  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 388  : 		_Tidy();

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L180850
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L180850:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 389  : 		}

  00029	c3		 ret	 0
??1?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE@XZ ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::~vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE?AViterator@12@V312@@Z ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::erase
; Function compile flags: /Ogty
;	COMDAT ?erase@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE?AViterator@12@V312@@Z PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::erase, COMDAT
; _this$ = ecx

; 723  : 		{	// erase element at where

  00000	56		 push	 esi
  00001	57		 push	 edi

; 724  : 		copy(_ITER_BASE(_Where) + 1, _Mylast, _ITER_BASE(_Where));

  00002	8b 7c 24 10	 mov	 edi, DWORD PTR __Where$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000b	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  0000e	2b c8		 sub	 ecx, eax
  00010	c1 f9 02	 sar	 ecx, 2
  00013	c1 e1 02	 shl	 ecx, 2
  00016	51		 push	 ecx
  00017	50		 push	 eax
  00018	57		 push	 edi
  00019	e8 00 00 00 00	 call	 _memmove

; 725  : 		_Destroy(_Mylast - 1, _Mylast);
; 726  : 		--_Mylast;

  0001e	83 46 08 fc	 add	 DWORD PTR [esi+8], -4	; fffffffcH

; 727  : 		return (_Where);

  00022	8b 44 24 18	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+16]
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	89 38		 mov	 DWORD PTR [eax], edi
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi

; 728  : 		}

  0002d	c2 08 00	 ret	 8
?erase@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE?AViterator@12@V312@@Z ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::erase
_TEXT	ENDS
PUBLIC	?clear@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAEXXZ ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::clear
; Function compile flags: /Ogty
;	COMDAT ?clear@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAEXXZ PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::clear, COMDAT
; _this$ = ecx

; 743  : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 744  : 		_Tidy();

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L180888
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L180888:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 745  : 		}

  00029	c3		 ret	 0
?clear@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAEXXZ ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::clear
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEPAPAUtagITEMMAGIC@@PAPAU3@IABQAU3@@Z ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Ufill
; Function compile flags: /Ogty
;	COMDAT ?_Ufill@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEPAPAUtagITEMMAGIC@@PAPAU3@IABQAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEPAPAUtagITEMMAGIC@@PAPAU3@IABQAU3@@Z PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Ufill, COMDAT
; _this$ = ecx

; 877  : 		{	// copy initializing _Count * _Val, using allocator

  00000	56		 push	 esi

; 878  : 		_Uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

  00001	8b 74 24 0c	 mov	 esi, DWORD PTR __Count$[esp]
  00005	85 f6		 test	 esi, esi
  00007	57		 push	 edi
  00008	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  0000c	8b c7		 mov	 eax, edi
  0000e	76 12		 jbe	 SHORT $L180930
  00010	8b 54 24 14	 mov	 edx, DWORD PTR __Val$[esp+4]
  00014	8b ce		 mov	 ecx, esi
  00016	53		 push	 ebx
$L180924:
  00017	8b 1a		 mov	 ebx, DWORD PTR [edx]
  00019	89 18		 mov	 DWORD PTR [eax], ebx
  0001b	83 c0 04	 add	 eax, 4
  0001e	49		 dec	 ecx
  0001f	75 f6		 jne	 SHORT $L180924
  00021	5b		 pop	 ebx
$L180930:

; 879  : 		return (_Ptr + _Count);

  00022	8d 04 b7	 lea	 eax, DWORD PTR [edi+esi*4]
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 880  : 		}

  00027	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEPAPAUtagITEMMAGIC@@PAPAU3@IABQAU3@@Z ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Ufill
_TEXT	ENDS
PUBLIC	??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::iterator::operator++
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::iterator::operator++, COMDAT
; _this$ = ecx

; 326  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 327  : 			++(*(const_iterator *)this);

  00003	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::_Inc

; 328  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 329  : 			}

  0000b	c3		 ret	 0
??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::iterator::operator++
_TEXT	ENDS
PUBLIC	??Fiterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::iterator::operator--
; Function compile flags: /Ogty
;	COMDAT ??Fiterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Fiterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::iterator::operator--, COMDAT
; _this$ = ecx

; 339  : 			{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 340  : 			--(*(const_iterator *)this);

  00003	e8 00 00 00 00	 call	 ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::_Dec

; 341  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 342  : 			}

  0000b	c3		 ret	 0
??Fiterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::iterator::operator--
_TEXT	ENDS
PUBLIC	??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::iterator::operator++
; Function compile flags: /Ogty
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::iterator::operator++, COMDAT
; _this$ = ecx

; 326  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 327  : 			++(*(const_iterator *)this);

  00003	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::const_iterator::_Inc

; 328  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 329  : 			}

  0000b	c3		 ret	 0
??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::iterator::operator++
_TEXT	ENDS
PUBLIC	??0?$_Tree_val@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKK@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Tree_val<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >
; Function compile flags: /Ogty
;	COMDAT ??0?$_Tree_val@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKK@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_val@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKK@std@@@1@@Z PROC NEAR ; std::_Tree_val<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Tree_val<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >, COMDAT
; _this$ = ecx

; 95   : 		{	// construct base, and allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 96   : 		}

  00002	c2 08 00	 ret	 8
??0?$_Tree_val@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@K@1@V?$allocator@U?$pair@$$CBKK@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Tree_val<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >
_TEXT	ENDS
PUBLIC	??0?$_Tree_val@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Tree_val<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >
; Function compile flags: /Ogty
;	COMDAT ??0?$_Tree_val@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_val@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z PROC NEAR ; std::_Tree_val<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Tree_val<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >, COMDAT
; _this$ = ecx

; 95   : 		{	// construct base, and allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 96   : 		}

  00002	c2 08 00	 ret	 8
??0?$_Tree_val@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Tree_val<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Buynode
; Function compile flags: /Ogty
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Buynode@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 1106 : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

  00000	6a 18		 push	 24			; 00000018H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 1107 : 		int _Linkcnt = 0;
; 1108 : 
; 1109 : 		_TRY_BEGIN
; 1110 : 		this->_Alptr.construct(&_Left(_Wherenode), 0);

  0000a	85 c0		 test	 eax, eax
  0000c	74 06		 je	 SHORT $L181080
  0000e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$L181080:

; 1111 : 		++_Linkcnt;
; 1112 : 		this->_Alptr.construct(&_Parent(_Wherenode), 0);

  00014	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00017	85 c9		 test	 ecx, ecx
  00019	74 06		 je	 SHORT $L181107
  0001b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$L181107:

; 1113 : 		++_Linkcnt;
; 1114 : 		this->_Alptr.construct(&_Right(_Wherenode), 0);

  00021	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
  00024	85 c9		 test	 ecx, ecx
  00026	74 06		 je	 SHORT $L181134
  00028	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$L181134:

; 1115 : 		_CATCH_ALL
; 1116 : 		if (1 < _Linkcnt)
; 1117 : 			this->_Alptr.destroy(&_Parent(_Wherenode));
; 1118 : 		if (0 < _Linkcnt)
; 1119 : 			this->_Alptr.destroy(&_Left(_Wherenode));
; 1120 : 		this->_Alnod.deallocate(_Wherenode, 1);
; 1121 : 		_RERAISE;
; 1122 : 		_CATCH_END
; 1123 : 		_Color(_Wherenode) = _Black;

  0002e	c6 40 14 01	 mov	 BYTE PTR [eax+20], 1

; 1124 : 		_Isnil(_Wherenode) = false;

  00032	c6 40 15 00	 mov	 BYTE PTR [eax+21], 0

; 1125 : 		return (_Wherenode);
; 1126 : 		}

  00036	c3		 ret	 0
?_Buynode@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Buynode
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Buynode
; Function compile flags: /Ogty
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Buynode@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 1106 : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

  00000	6a 18		 push	 24			; 00000018H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 1107 : 		int _Linkcnt = 0;
; 1108 : 
; 1109 : 		_TRY_BEGIN
; 1110 : 		this->_Alptr.construct(&_Left(_Wherenode), 0);

  0000a	85 c0		 test	 eax, eax
  0000c	74 06		 je	 SHORT $L181194
  0000e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$L181194:

; 1111 : 		++_Linkcnt;
; 1112 : 		this->_Alptr.construct(&_Parent(_Wherenode), 0);

  00014	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00017	85 c9		 test	 ecx, ecx
  00019	74 06		 je	 SHORT $L181221
  0001b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$L181221:

; 1113 : 		++_Linkcnt;
; 1114 : 		this->_Alptr.construct(&_Right(_Wherenode), 0);

  00021	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
  00024	85 c9		 test	 ecx, ecx
  00026	74 06		 je	 SHORT $L181248
  00028	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$L181248:

; 1115 : 		_CATCH_ALL
; 1116 : 		if (1 < _Linkcnt)
; 1117 : 			this->_Alptr.destroy(&_Parent(_Wherenode));
; 1118 : 		if (0 < _Linkcnt)
; 1119 : 			this->_Alptr.destroy(&_Left(_Wherenode));
; 1120 : 		this->_Alnod.deallocate(_Wherenode, 1);
; 1121 : 		_RERAISE;
; 1122 : 		_CATCH_END
; 1123 : 		_Color(_Wherenode) = _Black;

  0002e	c6 40 14 01	 mov	 BYTE PTR [eax+20], 1

; 1124 : 		_Isnil(_Wherenode) = false;

  00032	c6 40 15 00	 mov	 BYTE PTR [eax+21], 0

; 1125 : 		return (_Wherenode);
; 1126 : 		}

  00036	c3		 ret	 0
?_Buynode@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Buynode
_TEXT	ENDS
PUBLIC	??Eiterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AV012@H@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::iterator::operator++
; Function compile flags: /Ogty
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??Eiterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AV012@H@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::iterator::operator++, COMDAT
; _this$ = ecx

; 332  : 			{	// postincrement

  00000	56		 push	 esi

; 333  : 			iterator _Tmp = *this;

  00001	8b 31		 mov	 esi, DWORD PTR [ecx]

; 334  : 			++*this;

  00003	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::const_iterator::_Inc

; 335  : 			return (_Tmp);

  00008	8b 44 24 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  0000c	89 30		 mov	 DWORD PTR [eax], esi
  0000e	5e		 pop	 esi

; 336  : 			}

  0000f	c2 08 00	 ret	 8
??Eiterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AV012@H@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::iterator::operator++
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 456  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 457  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $L181317
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$L181317:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 458  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xlen
; Function compile flags: /Ogty
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1480 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	56		 push	 esi

; 1481 : 		if (max_size() < _Newsize)

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR __Newsize$[esp+4]
  00006	83 fe fe	 cmp	 esi, -2			; fffffffeH
  00009	8b e9		 mov	 ebp, ecx
  0000b	76 05		 jbe	 SHORT $L149774

; 1482 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L149774:

; 1483 : 		if (_Myres < _Newsize)

  00012	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00015	3b c6		 cmp	 eax, esi
  00017	73 19		 jae	 SHORT $L149775

; 1484 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0001c	50		 push	 eax
  0001d	56		 push	 esi
  0001e	8b cd		 mov	 ecx, ebp
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c0		 xor	 eax, eax
  00027	3b c6		 cmp	 eax, esi
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5d		 pop	 ebp

; 1491 : 		}

  0002f	c2 08 00	 ret	 8
$L149775:

; 1485 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	8a 4c 24 10	 mov	 cl, BYTE PTR __Trim$[esp+4]
  00036	84 c9		 test	 cl, cl
  00038	74 5c		 je	 SHORT $L149777
  0003a	83 fe 10	 cmp	 esi, 16			; 00000010H
  0003d	73 57		 jae	 SHORT $L149777
  0003f	53		 push	 ebx

; 1486 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1487 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  00040	8b 5d 14	 mov	 ebx, DWORD PTR [ebp+20]
  00043	3b f3		 cmp	 esi, ebx
  00045	73 02		 jae	 SHORT $L181337
  00047	8b de		 mov	 ebx, esi
$L181337:
  00049	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004c	72 2b		 jb	 SHORT $L181392
  0004e	85 db		 test	 ebx, ebx
  00050	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00053	57		 push	 edi
  00054	8d 7d 04	 lea	 edi, DWORD PTR [ebp+4]
  00057	76 16		 jbe	 SHORT $L181390
  00059	8b cb		 mov	 ecx, ebx
  0005b	8b d1		 mov	 edx, ecx
  0005d	c1 e9 02	 shr	 ecx, 2
  00060	8b f0		 mov	 esi, eax
  00062	f3 a5		 rep movsd
  00064	8b ca		 mov	 ecx, edx
  00066	83 e1 03	 and	 ecx, 3
  00069	f3 a4		 rep movsb
  0006b	8b 74 24 14	 mov	 esi, DWORD PTR __Newsize$[esp+12]
$L181390:
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00075	83 c4 04	 add	 esp, 4
  00078	5f		 pop	 edi
$L181392:
  00079	89 5d 14	 mov	 DWORD PTR [ebp+20], ebx

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  0007c	33 c0		 xor	 eax, eax
  0007e	c7 45 18 0f 00
	00 00		 mov	 DWORD PTR [ebp+24], 15	; 0000000fH
  00085	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0008a	3b c6		 cmp	 eax, esi
  0008c	5b		 pop	 ebx
  0008d	1b c0		 sbb	 eax, eax
  0008f	5e		 pop	 esi
  00090	f7 d8		 neg	 eax
  00092	5d		 pop	 ebp

; 1491 : 		}

  00093	c2 08 00	 ret	 8
$L149777:

; 1488 : 		else if (_Newsize == 0)

  00096	85 f6		 test	 esi, esi
  00098	75 23		 jne	 SHORT $L181428

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

  0009a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0009d	89 75 14	 mov	 DWORD PTR [ebp+20], esi
  000a0	72 14		 jb	 SHORT $L181424
  000a2	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000a5	33 c0		 xor	 eax, eax
  000a7	3b c6		 cmp	 eax, esi
  000a9	1b c0		 sbb	 eax, eax
  000ab	5e		 pop	 esi
  000ac	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
  000b0	f7 d8		 neg	 eax
  000b2	5d		 pop	 ebp

; 1491 : 		}

  000b3	c2 08 00	 ret	 8

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

$L181424:
  000b6	83 c5 04	 add	 ebp, 4
  000b9	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
$L181428:

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000bd	33 c0		 xor	 eax, eax
  000bf	3b c6		 cmp	 eax, esi
  000c1	1b c0		 sbb	 eax, eax
  000c3	5e		 pop	 esi
  000c4	f7 d8		 neg	 eax
  000c6	5d		 pop	 ebp

; 1491 : 		}

  000c7	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?GetMagicValue@CTItem@@QAEGE@Z			; CTItem::GetMagicValue
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\titem.cpp
;	COMDAT ?GetMagicValue@CTItem@@QAEGE@Z
_TEXT	SEGMENT
_finder$ = -4						; size = 4
_bMagicID$ = 8						; size = 1
?GetMagicValue@CTItem@@QAEGE@Z PROC NEAR		; CTItem::GetMagicValue, COMDAT
; _this$ = ecx

; 437  : {

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 438  : 	MAPTMAGIC::iterator finder = m_mapTMAGIC.find(bMagicID);

  00004	8d 44 24 0c	 lea	 eax, DWORD PTR _bMagicID$[esp+4]
  00008	50		 push	 eax
  00009	8d 4c 24 08	 lea	 ecx, DWORD PTR _finder$[esp+12]
  0000d	51		 push	 ecx
  0000e	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00011	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::find

; 439  : 	if( finder != m_mapTMAGIC.end() )

  00016	8b 44 24 04	 mov	 eax, DWORD PTR _finder$[esp+8]
  0001a	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  0001d	74 10		 je	 SHORT $L175543

; 440  : 		return GetMagicValue((*finder).second);

  0001f	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00022	52		 push	 edx
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?GetMagicValue@CTItem@@QAEGPAUtagTMAGIC@@@Z ; CTItem::GetMagicValue
  0002a	5e		 pop	 esi

; 443  : }

  0002b	59		 pop	 ecx
  0002c	c2 04 00	 ret	 4
$L175543:

; 441  : 
; 442  : 	return 0;

  0002f	66 33 c0	 xor	 ax, ax
  00032	5e		 pop	 esi

; 443  : }

  00033	59		 pop	 ecx
  00034	c2 04 00	 ret	 4
?GetMagicValue@CTItem@@QAEGE@Z ENDP			; CTItem::GetMagicValue
_TEXT	ENDS
PUBLIC	??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::iterator::operator++
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::iterator::operator++, COMDAT
; _this$ = ecx

; 332  : 			{	// postincrement

  00000	56		 push	 esi

; 333  : 			iterator _Tmp = *this;

  00001	8b 31		 mov	 esi, DWORD PTR [ecx]

; 334  : 			++*this;

  00003	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::_Inc

; 335  : 			return (_Tmp);

  00008	8b 44 24 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  0000c	89 30		 mov	 DWORD PTR [eax], esi
  0000e	5e		 pop	 esi

; 336  : 			}

  0000f	c2 08 00	 ret	 8
??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::iterator::operator++
_TEXT	ENDS
PUBLIC	??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::iterator::operator++
; Function compile flags: /Ogty
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::iterator::operator++, COMDAT
; _this$ = ecx

; 332  : 			{	// postincrement

  00000	56		 push	 esi

; 333  : 			iterator _Tmp = *this;

  00001	8b 31		 mov	 esi, DWORD PTR [ecx]

; 334  : 			++*this;

  00003	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::const_iterator::_Inc

; 335  : 			return (_Tmp);

  00008	8b 44 24 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  0000c	89 30		 mov	 DWORD PTR [eax], esi
  0000e	5e		 pop	 esi

; 336  : 			}

  0000f	c2 08 00	 ret	 8
??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::iterator::operator++
_TEXT	ENDS
PUBLIC	?_Init@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Init
; Function compile flags: /Ogty
;	COMDAT ?_Init@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Init, COMDAT
; _this$ = ecx

; 901  : 		{	// create head/nil node and make tree empty

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 902  : 		_Myhead = _Buynode();

  00003	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Buynode
  00008	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 903  : 		_Isnil(_Myhead) = true;

  0000b	c6 40 15 01	 mov	 BYTE PTR [eax+21], 1

; 904  : 		_Root() = _Myhead;

  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00012	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 905  : 		_Lmost() = _Myhead, _Rmost() = _Myhead;

  00015	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00018	89 00		 mov	 DWORD PTR [eax], eax
  0001a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001d	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 906  : 		_Mysize = 0;

  00020	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00027	5e		 pop	 esi

; 907  : 		}

  00028	c3		 ret	 0
?_Init@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Init
_TEXT	ENDS
PUBLIC	?_Init@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Init
; Function compile flags: /Ogty
;	COMDAT ?_Init@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Init, COMDAT
; _this$ = ecx

; 901  : 		{	// create head/nil node and make tree empty

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 902  : 		_Myhead = _Buynode();

  00003	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Buynode
  00008	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 903  : 		_Isnil(_Myhead) = true;

  0000b	c6 40 15 01	 mov	 BYTE PTR [eax+21], 1

; 904  : 		_Root() = _Myhead;

  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00012	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 905  : 		_Lmost() = _Myhead, _Rmost() = _Myhead;

  00015	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00018	89 00		 mov	 DWORD PTR [eax], eax
  0001a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001d	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 906  : 		_Mysize = 0;

  00020	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00027	5e		 pop	 esi

; 907  : 		}

  00028	c3		 ret	 0
?_Init@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Init
_TEXT	ENDS
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:NEAR		; std::logic_error::`vector deleting destructor'
EXTRN	??1exception@@UAE@XZ:NEAR			; exception::~exception
;	COMDAT ??_7logic_error@std@@6B@
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
CONST	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC NEAR			; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 23   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L181619
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L181619:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC NEAR		; std::logic_error::what, COMDAT
; _this$ = ecx

; 27   : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L181652
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  00009	c3		 ret	 0

; 27   : 		return (_Str.c_str());

$L181652:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  0000d	c3		 ret	 0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC NEAR		; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1logic_error@std@@UAE@XZ ; std::logic_error::~logic_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L181659
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L181659:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 590  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 591  : 		if (_Right.size() < _Roff)

  00003	8b 74 24 14	 mov	 esi, DWORD PTR __Roff$[esp+8]
  00007	57		 push	 edi
  00008	8b 7c 24 14	 mov	 edi, DWORD PTR __Right$[esp+12]
  0000c	39 77 14	 cmp	 DWORD PTR [edi+20], esi
  0000f	8b d9		 mov	 ebx, ecx
  00011	73 05		 jae	 SHORT $L148837

; 592  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L148837:

; 593  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 6f 14	 mov	 ebp, DWORD PTR [edi+20]

; 594  : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b ee		 sub	 ebp, esi
  00021	3b c5		 cmp	 eax, ebp
  00023	73 02		 jae	 SHORT $L148839

; 595  : 			_Num = _Count;	// trim _Num to size

  00025	8b e8		 mov	 ebp, eax
$L148839:

; 596  : 
; 597  : 		if (this == &_Right)

  00027	3b df		 cmp	 ebx, edi
  00029	75 1f		 jne	 SHORT $L148840

; 598  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 ee		 add	 ebp, esi
  0002f	55		 push	 ebp
  00030	8b cb		 mov	 ecx, ebx
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	56		 push	 esi
  00038	6a 00		 push	 0
  0003a	8b cb		 mov	 ecx, ebx
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00044	8b c3		 mov	 eax, ebx
  00046	5b		 pop	 ebx

; 605  : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$L148840:

; 599  : 		else if (_Grow(_Num))

  0004a	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  0004d	76 07		 jbe	 SHORT $L181768
  0004f	8b cb		 mov	 ecx, ebx
  00051	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L181768:
  00056	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00059	3b c5		 cmp	 eax, ebp
  0005b	73 21		 jae	 SHORT $L181769
  0005d	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00060	50		 push	 eax
  00061	55		 push	 ebp
  00062	8b cb		 mov	 ecx, ebx
  00064	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00069	85 ed		 test	 ebp, ebp
$L181856:
  0006b	76 6d		 jbe	 SHORT $L181855

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  0006d	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00070	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00075	3b c8		 cmp	 ecx, eax
  00077	72 2f		 jb	 SHORT $L181821
  00079	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0007c	eb 2d		 jmp	 SHORT $L181822

; 599  : 		else if (_Grow(_Num))

$L181769:
  0007e	85 ed		 test	 ebp, ebp
  00080	75 e9		 jne	 SHORT $L181856
  00082	83 f8 10	 cmp	 eax, 16			; 00000010H
  00085	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00088	72 0f		 jb	 SHORT $L181812
  0008a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	c6 00 00	 mov	 BYTE PTR [eax], 0
  00092	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00093	8b c3		 mov	 eax, ebx
  00095	5b		 pop	 ebx

; 605  : 		}

  00096	c2 0c 00	 ret	 12			; 0000000cH

; 599  : 		else if (_Grow(_Num))

$L181812:
  00099	5f		 pop	 edi
  0009a	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  0009d	5e		 pop	 esi
  0009e	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a1	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000a2	8b c3		 mov	 eax, ebx
  000a4	5b		 pop	 ebx

; 605  : 		}

  000a5	c2 0c 00	 ret	 12			; 0000000cH

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

$L181821:
  000a8	8d 57 04	 lea	 edx, DWORD PTR [edi+4]
$L181822:
  000ab	39 43 18	 cmp	 DWORD PTR [ebx+24], eax
  000ae	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000b1	72 04		 jb	 SHORT $L181828
  000b3	8b 38		 mov	 edi, DWORD PTR [eax]
  000b5	eb 02		 jmp	 SHORT $L181829
$L181828:
  000b7	8b f8		 mov	 edi, eax
$L181829:
  000b9	03 f2		 add	 esi, edx
  000bb	8b cd		 mov	 ecx, ebp
  000bd	8b d1		 mov	 edx, ecx
  000bf	c1 e9 02	 shr	 ecx, 2
  000c2	f3 a5		 rep movsd
  000c4	8b ca		 mov	 ecx, edx
  000c6	83 e1 03	 and	 ecx, 3
  000c9	f3 a4		 rep movsb

; 602  : 			_Eos(_Num);

  000cb	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000cf	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000d2	72 02		 jb	 SHORT $L181852
  000d4	8b 00		 mov	 eax, DWORD PTR [eax]
$L181852:
  000d6	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L181855:
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000dd	8b c3		 mov	 eax, ebx
  000df	5b		 pop	 ebx

; 605  : 		}

  000e0	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Num$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 608  : 		{	// assign [_Ptr, _Ptr + _Num)

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 609  : 		if (_Inside(_Ptr))

  00003	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  00006	83 fa 10	 cmp	 edx, 16			; 00000010H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	72 05		 jb	 SHORT $L181878
  0000d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00010	eb 03		 jmp	 SHORT $L181879
$L181878:
  00012	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$L181879:
  00015	8b 74 24 10	 mov	 esi, DWORD PTR __Ptr$[esp+8]
  00019	3b f0		 cmp	 esi, eax
  0001b	72 34		 jb	 SHORT $L149761
  0001d	83 fa 10	 cmp	 edx, 16			; 00000010H
  00020	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00023	72 04		 jb	 SHORT $L181882
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	eb 02		 jmp	 SHORT $L181883
$L181882:
  00029	8b c8		 mov	 ecx, eax
$L181883:
  0002b	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  0002e	03 f9		 add	 edi, ecx
  00030	3b fe		 cmp	 edi, esi
  00032	76 1d		 jbe	 SHORT $L149761

; 610  : 			return (assign(*this, _Ptr - _Myptr(), _Num));	// substring

  00034	83 fa 10	 cmp	 edx, 16			; 00000010H
  00037	72 02		 jb	 SHORT $L181895
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$L181895:
  0003b	8b 4c 24 14	 mov	 ecx, DWORD PTR __Num$[esp+8]
  0003f	51		 push	 ecx
  00040	2b f0		 sub	 esi, eax
  00042	56		 push	 esi
  00043	53		 push	 ebx
  00044	8b cb		 mov	 ecx, ebx
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx

; 618  : 		}

  0004e	c2 08 00	 ret	 8
$L149761:
  00051	55		 push	 ebp

; 611  : 
; 612  : 		if (_Grow(_Num))

  00052	8b 6c 24 18	 mov	 ebp, DWORD PTR __Num$[esp+12]
  00056	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  00059	76 07		 jbe	 SHORT $L181993
  0005b	8b cb		 mov	 ecx, ebx
  0005d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L181993:
  00062	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00065	3b c5		 cmp	 eax, ebp
  00067	73 1b		 jae	 SHORT $L181994
  00069	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  0006c	52		 push	 edx
  0006d	55		 push	 ebp
  0006e	8b cb		 mov	 ecx, ebx
  00070	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00075	85 ed		 test	 ebp, ebp
$L182074:
  00077	76 68		 jbe	 SHORT $L182071

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

  00079	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0007d	72 2f		 jb	 SHORT $L182046
  0007f	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00082	eb 2d		 jmp	 SHORT $L182047

; 611  : 
; 612  : 		if (_Grow(_Num))

$L181994:
  00084	85 ed		 test	 ebp, ebp
  00086	75 ef		 jne	 SHORT $L182074
  00088	83 f8 10	 cmp	 eax, 16			; 00000010H
  0008b	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  0008e	72 0f		 jb	 SHORT $L182037
  00090	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00093	5d		 pop	 ebp
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0
  00098	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  00099	8b c3		 mov	 eax, ebx
  0009b	5b		 pop	 ebx

; 618  : 		}

  0009c	c2 08 00	 ret	 8

; 611  : 
; 612  : 		if (_Grow(_Num))

$L182037:
  0009f	5d		 pop	 ebp
  000a0	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000a3	5f		 pop	 edi
  000a4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a7	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000a8	8b c3		 mov	 eax, ebx
  000aa	5b		 pop	 ebx

; 618  : 		}

  000ab	c2 08 00	 ret	 8

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

$L182046:
  000ae	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
$L182047:
  000b1	8b cd		 mov	 ecx, ebp
  000b3	8b c1		 mov	 eax, ecx
  000b5	c1 e9 02	 shr	 ecx, 2
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb

; 615  : 			_Eos(_Num);

  000c1	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000c5	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000c8	72 10		 jb	 SHORT $L182069
  000ca	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000cd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  000d1	5d		 pop	 ebp
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000d4	8b c3		 mov	 eax, ebx
  000d6	5b		 pop	 ebx

; 618  : 		}

  000d7	c2 08 00	 ret	 8

; 615  : 			_Eos(_Num);

$L182069:
  000da	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000dd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L182071:
  000e1	5d		 pop	 ebp
  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000e4	8b c3		 mov	 eax, ebx
  000e6	5b		 pop	 ebx

; 618  : 		}

  000e7	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??8CTItem@@QAEEAAV0@@Z				; CTItem::operator==
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\titem.cpp
;	COMDAT ??8CTItem@@QAEEAAV0@@Z
_TEXT	SEGMENT
_finder$175346 = -4					; size = 4
_itTMAGIC$ = 8						; size = 4
_param$ = 8						; size = 4
??8CTItem@@QAEEAAV0@@Z PROC NEAR			; CTItem::operator==, COMDAT
; _this$ = ecx

; 46   : {

  00000	51		 push	 ecx

; 47   : 	if( m_wItemID != param.m_wItemID ||
; 48   : 		m_mapTMAGIC.size() != param.m_mapTMAGIC.size() ||
; 49   : 		m_bLevel != param.m_bLevel || 
; 50   : 		m_pTITEMATTR != param.m_pTITEMATTR ||
; 51   : 		m_bGLevel != param.m_bGLevel ||
; 52   : 		m_dwDuraMax != param.m_dwDuraMax ||
; 53   : 		m_dwDuraCur != param.m_dwDuraCur ||
; 54   : 		m_bRefineCur != param.m_bRefineCur ||
; 55   : 		m_dEndTime != param.m_dEndTime)

  00001	66 8b 51 30	 mov	 dx, WORD PTR [ecx+48]
  00005	8b 44 24 08	 mov	 eax, DWORD PTR _param$[esp]
  00009	66 3b 50 30	 cmp	 dx, WORD PTR [eax+48]
  0000d	53		 push	 ebx
  0000e	56		 push	 esi
  0000f	0f 85 ff 00 00
	00		 jne	 $L175332
  00015	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00018	3b 50 10	 cmp	 edx, DWORD PTR [eax+16]
  0001b	0f 85 f3 00 00
	00		 jne	 $L175332
  00021	8a 51 29	 mov	 dl, BYTE PTR [ecx+41]
  00024	3a 50 29	 cmp	 dl, BYTE PTR [eax+41]
  00027	0f 85 e7 00 00
	00		 jne	 $L175332
  0002d	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00030	3b 50 18	 cmp	 edx, DWORD PTR [eax+24]
  00033	0f 85 db 00 00
	00		 jne	 $L175332
  00039	8a 51 33	 mov	 dl, BYTE PTR [ecx+51]
  0003c	3a 50 33	 cmp	 dl, BYTE PTR [eax+51]
  0003f	0f 85 cf 00 00
	00		 jne	 $L175332
  00045	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00048	3b 50 34	 cmp	 edx, DWORD PTR [eax+52]
  0004b	0f 85 c3 00 00
	00		 jne	 $L175332
  00051	8b 51 38	 mov	 edx, DWORD PTR [ecx+56]
  00054	3b 50 38	 cmp	 edx, DWORD PTR [eax+56]
  00057	0f 85 b7 00 00
	00		 jne	 $L175332
  0005d	8a 51 3c	 mov	 dl, BYTE PTR [ecx+60]
  00060	3a 50 3c	 cmp	 dl, BYTE PTR [eax+60]
  00063	0f 85 ab 00 00
	00		 jne	 $L175332
  00069	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  0006c	3b 50 40	 cmp	 edx, DWORD PTR [eax+64]
  0006f	0f 85 9f 00 00
	00		 jne	 $L175332
  00075	8b 51 44	 mov	 edx, DWORD PTR [ecx+68]
  00078	3b 50 44	 cmp	 edx, DWORD PTR [eax+68]
  0007b	0f 85 93 00 00
	00		 jne	 $L175332

; 57   : 
; 58   : 	for(BYTE ev=0; ev<TMAGIC_MAX; ev++)

  00081	32 db		 xor	 bl, bl
  00083	57		 push	 edi
  00084	eb 0a 8d a4 24
	00 00 00 00 8d
	49 00		 npad	 12
$L175335:

; 59   : 		if(m_dwExtValue[ev] != param.m_dwExtValue[ev])

  00090	0f b6 d3	 movzx	 edx, bl
  00093	8d 14 95 6c 00
	00 00		 lea	 edx, DWORD PTR [edx*4+108]
  0009a	8b 34 0a	 mov	 esi, DWORD PTR [edx+ecx]
  0009d	3b 34 02	 cmp	 esi, DWORD PTR [edx+eax]
  000a0	75 5f		 jne	 SHORT $L182233
  000a2	fe c3		 inc	 bl
  000a4	80 fb 06	 cmp	 bl, 6
  000a7	72 e7		 jb	 SHORT $L175335
  000a9	55		 push	 ebp

; 61   : 
; 62   : 	MAPTMAGIC::iterator itTMAGIC;
; 63   : 
; 64   : 	for( itTMAGIC = m_mapTMAGIC.begin(); itTMAGIC != m_mapTMAGIC.end(); itTMAGIC++)

  000aa	8b 69 0c	 mov	 ebp, DWORD PTR [ecx+12]
  000ad	8b 75 00	 mov	 esi, DWORD PTR [ebp]
  000b0	3b f5		 cmp	 esi, ebp
  000b2	89 74 24 18	 mov	 DWORD PTR _itTMAGIC$[esp+16], esi
  000b6	74 3f		 je	 SHORT $L175345
  000b8	8b 58 0c	 mov	 ebx, DWORD PTR [eax+12]
  000bb	8d 78 08	 lea	 edi, DWORD PTR [eax+8]
  000be	8b ff		 npad	 2
$L182141:

; 65   : 	{
; 66   : 		MAPTMAGIC::iterator finder = param.m_mapTMAGIC.find((*itTMAGIC).first);

  000c0	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  000c3	50		 push	 eax
  000c4	8d 4c 24 14	 lea	 ecx, DWORD PTR _finder$175346[esp+24]
  000c8	51		 push	 ecx
  000c9	8b cf		 mov	 ecx, edi
  000cb	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::find

; 67   : 
; 68   : 		if( finder == param.m_mapTMAGIC.end() )

  000d0	8b 44 24 10	 mov	 eax, DWORD PTR _finder$175346[esp+20]
  000d4	3b c3		 cmp	 eax, ebx
  000d6	74 32		 je	 SHORT $L182234

; 70   : 
; 71   : 		if( (*itTMAGIC).second->m_wValue != (*finder).second->m_wValue )

  000d8	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  000db	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000de	66 8b 08	 mov	 cx, WORD PTR [eax]
  000e1	66 3b 0a	 cmp	 cx, WORD PTR [edx]
  000e4	75 24		 jne	 SHORT $L182234
  000e6	8d 4c 24 18	 lea	 ecx, DWORD PTR _itTMAGIC$[esp+16]
  000ea	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::_Inc
  000ef	8b 74 24 18	 mov	 esi, DWORD PTR _itTMAGIC$[esp+16]
  000f3	3b f5		 cmp	 esi, ebp
  000f5	75 c9		 jne	 SHORT $L182141
$L175345:
  000f7	5d		 pop	 ebp
  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi

; 72   : 			return FALSE;
; 73   : 	}
; 74   : 
; 75   : 	return TRUE;

  000fa	b0 01		 mov	 al, 1
  000fc	5b		 pop	 ebx

; 76   : }

  000fd	59		 pop	 ecx
  000fe	c2 04 00	 ret	 4
$L182233:
  00101	5f		 pop	 edi
  00102	5e		 pop	 esi

; 60   : 			return FALSE;

  00103	32 c0		 xor	 al, al
  00105	5b		 pop	 ebx

; 76   : }

  00106	59		 pop	 ecx
  00107	c2 04 00	 ret	 4
$L182234:
  0010a	5d		 pop	 ebp
  0010b	5f		 pop	 edi
  0010c	5e		 pop	 esi

; 69   : 			return FALSE;

  0010d	32 c0		 xor	 al, al
  0010f	5b		 pop	 ebx

; 76   : }

  00110	59		 pop	 ecx
  00111	c2 04 00	 ret	 4
$L175332:
  00114	5e		 pop	 esi

; 56   : 		return FALSE;

  00115	32 c0		 xor	 al, al
  00117	5b		 pop	 ebx

; 76   : }

  00118	59		 pop	 ecx
  00119	c2 04 00	 ret	 4
??8CTItem@@QAEEAAV0@@Z ENDP				; CTItem::operator==
_TEXT	ENDS
PUBLIC	??9CTItem@@QAEEAAV0@@Z				; CTItem::operator!=
; Function compile flags: /Ogty
;	COMDAT ??9CTItem@@QAEEAAV0@@Z
_TEXT	SEGMENT
_param$ = 8						; size = 4
??9CTItem@@QAEEAAV0@@Z PROC NEAR			; CTItem::operator!=, COMDAT
; _this$ = ecx

; 80   : 	return (*this) == param ? FALSE : TRUE;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _param$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??8CTItem@@QAEEAAV0@@Z	; CTItem::operator==
  0000a	f6 d8		 neg	 al
  0000c	1b c0		 sbb	 eax, eax
  0000e	40		 inc	 eax

; 81   : }

  0000f	c2 04 00	 ret	 4
??9CTItem@@QAEEAAV0@@Z ENDP				; CTItem::operator!=
_TEXT	ENDS
PUBLIC	?GetMaxAP@CTItem@@QAEKXZ			; CTItem::GetMaxAP
; Function compile flags: /Ogty
;	COMDAT ?GetMaxAP@CTItem@@QAEKXZ
_TEXT	SEGMENT
$T182373 = -16						; size = 1
$T182309 = -16						; size = 1
_finder$182371 = -12					; size = 4
_finder$182296 = -12					; size = 4
tv226 = -8						; size = 4
tv230 = -4						; size = 4
?GetMaxAP@CTItem@@QAEKXZ PROC NEAR			; CTItem::GetMaxAP, COMDAT
; _this$ = ecx

; 316  : {

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 317  : 	if(!m_pTITEM || !m_pTITEMATTR)

  00006	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00009	85 c0		 test	 eax, eax
  0000b	89 44 24 0c	 mov	 DWORD PTR tv226[esp+20], eax
  0000f	0f 84 98 00 00
	00		 je	 $L175484
  00015	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00018	85 c0		 test	 eax, eax
  0001a	89 44 24 10	 mov	 DWORD PTR tv230[esp+20], eax
  0001e	0f 84 89 00 00
	00		 je	 $L175484
  00024	53		 push	 ebx
  00025	55		 push	 ebp
  00026	57		 push	 edi

; 319  : 
; 320  : 	DWORD dwValue=0;
; 321  : 
; 322  : 	dwValue += GetMagicValue(MTYPE_PAP)
; 323  : 		+ GetMagicValue(MTYPE_PMAXAP);

  00027	8d 44 24 10	 lea	 eax, DWORD PTR $T182309[esp+32]
  0002b	50		 push	 eax
  0002c	8d 4c 24 18	 lea	 ecx, DWORD PTR _finder$182296[esp+36]
  00030	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  00033	51		 push	 ecx
  00034	8b cf		 mov	 ecx, edi
  00036	c6 44 24 18 07	 mov	 BYTE PTR $T182309[esp+40], 7
  0003b	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::find
  00040	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00043	8b 44 24 14	 mov	 eax, DWORD PTR _finder$182296[esp+32]
  00047	3b c3		 cmp	 eax, ebx
  00049	74 0f		 je	 SHORT $L182297
  0004b	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0004e	52		 push	 edx
  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 ?GetMagicValue@CTItem@@QAEGPAUtagTMAGIC@@@Z ; CTItem::GetMagicValue
  00056	8b e8		 mov	 ebp, eax
  00058	eb 02		 jmp	 SHORT $L182295
$L182297:
  0005a	33 ed		 xor	 ebp, ebp
$L182295:
  0005c	8d 44 24 10	 lea	 eax, DWORD PTR $T182373[esp+32]
  00060	50		 push	 eax
  00061	8d 4c 24 18	 lea	 ecx, DWORD PTR _finder$182371[esp+36]
  00065	51		 push	 ecx
  00066	8b cf		 mov	 ecx, edi
  00068	c6 44 24 18 3e	 mov	 BYTE PTR $T182373[esp+40], 62 ; 0000003eH
  0006d	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::find
  00072	8b 44 24 14	 mov	 eax, DWORD PTR _finder$182371[esp+32]
  00076	3b c3		 cmp	 eax, ebx
  00078	74 0d		 je	 SHORT $L182372
  0007a	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0007d	52		 push	 edx
  0007e	8b ce		 mov	 ecx, esi
  00080	e8 00 00 00 00	 call	 ?GetMagicValue@CTItem@@QAEGPAUtagTMAGIC@@@Z ; CTItem::GetMagicValue
  00085	eb 02		 jmp	 SHORT $L182370
$L182372:
  00087	33 c0		 xor	 eax, eax
$L182370:

; 324  : 
; 325  : 	if(m_pTITEM->m_bType == IT_WEAPON)

  00089	8b 54 24 18	 mov	 edx, DWORD PTR tv226[esp+32]
  0008d	0f b7 cd	 movzx	 ecx, bp
  00090	0f b7 c0	 movzx	 eax, ax
  00093	03 c1		 add	 eax, ecx
  00095	80 7a 02 01	 cmp	 BYTE PTR [edx+2], 1
  00099	5f		 pop	 edi
  0009a	5d		 pop	 ebp
  0009b	5b		 pop	 ebx
  0009c	75 11		 jne	 SHORT $L175482

; 326  : 		dwValue += m_pTITEMATTR->m_wMaxAP;

  0009e	8b 4c 24 10	 mov	 ecx, DWORD PTR tv230[esp+20]
  000a2	0f b7 51 06	 movzx	 edx, WORD PTR [ecx+6]
  000a6	03 c2		 add	 eax, edx
  000a8	5e		 pop	 esi

; 327  : 
; 328  : 	return dwValue;
; 329  : }

  000a9	83 c4 10	 add	 esp, 16			; 00000010H
  000ac	c3		 ret	 0
$L175484:

; 318  : 		return 0;

  000ad	33 c0		 xor	 eax, eax
$L175482:
  000af	5e		 pop	 esi

; 327  : 
; 328  : 	return dwValue;
; 329  : }

  000b0	83 c4 10	 add	 esp, 16			; 00000010H
  000b3	c3		 ret	 0
?GetMaxAP@CTItem@@QAEKXZ ENDP				; CTItem::GetMaxAP
_TEXT	ENDS
PUBLIC	?GetMaxLAP@CTItem@@QAEKXZ			; CTItem::GetMaxLAP
; Function compile flags: /Ogty
;	COMDAT ?GetMaxLAP@CTItem@@QAEKXZ
_TEXT	SEGMENT
$T182504 = -16						; size = 1
$T182440 = -16						; size = 1
_finder$182502 = -12					; size = 4
_finder$182438 = -12					; size = 4
tv226 = -8						; size = 4
tv230 = -4						; size = 4
?GetMaxLAP@CTItem@@QAEKXZ PROC NEAR			; CTItem::GetMaxLAP, COMDAT
; _this$ = ecx

; 331  : {

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 332  : 	if(!m_pTITEM || !m_pTITEMATTR)

  00006	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00009	85 c0		 test	 eax, eax
  0000b	89 44 24 0c	 mov	 DWORD PTR tv226[esp+20], eax
  0000f	0f 84 98 00 00
	00		 je	 $L175491
  00015	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00018	85 c0		 test	 eax, eax
  0001a	89 44 24 10	 mov	 DWORD PTR tv230[esp+20], eax
  0001e	0f 84 89 00 00
	00		 je	 $L175491
  00024	53		 push	 ebx
  00025	55		 push	 ebp
  00026	57		 push	 edi

; 334  : 
; 335  : 	DWORD dwValue=0;
; 336  : 
; 337  : 	dwValue += GetMagicValue(MTYPE_LAP)
; 338  : 		+ GetMagicValue(MTYPE_LMAXAP);

  00027	8d 44 24 10	 lea	 eax, DWORD PTR $T182440[esp+32]
  0002b	50		 push	 eax
  0002c	8d 4c 24 18	 lea	 ecx, DWORD PTR _finder$182438[esp+36]
  00030	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  00033	51		 push	 ecx
  00034	8b cf		 mov	 ecx, edi
  00036	c6 44 24 18 09	 mov	 BYTE PTR $T182440[esp+40], 9
  0003b	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::find
  00040	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00043	8b 44 24 14	 mov	 eax, DWORD PTR _finder$182438[esp+32]
  00047	3b c3		 cmp	 eax, ebx
  00049	74 0f		 je	 SHORT $L182439
  0004b	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0004e	52		 push	 edx
  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 ?GetMagicValue@CTItem@@QAEGPAUtagTMAGIC@@@Z ; CTItem::GetMagicValue
  00056	8b e8		 mov	 ebp, eax
  00058	eb 02		 jmp	 SHORT $L182437
$L182439:
  0005a	33 ed		 xor	 ebp, ebp
$L182437:
  0005c	8d 44 24 10	 lea	 eax, DWORD PTR $T182504[esp+32]
  00060	50		 push	 eax
  00061	8d 4c 24 18	 lea	 ecx, DWORD PTR _finder$182502[esp+36]
  00065	51		 push	 ecx
  00066	8b cf		 mov	 ecx, edi
  00068	c6 44 24 18 40	 mov	 BYTE PTR $T182504[esp+40], 64 ; 00000040H
  0006d	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::find
  00072	8b 44 24 14	 mov	 eax, DWORD PTR _finder$182502[esp+32]
  00076	3b c3		 cmp	 eax, ebx
  00078	74 0d		 je	 SHORT $L182503
  0007a	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0007d	52		 push	 edx
  0007e	8b ce		 mov	 ecx, esi
  00080	e8 00 00 00 00	 call	 ?GetMagicValue@CTItem@@QAEGPAUtagTMAGIC@@@Z ; CTItem::GetMagicValue
  00085	eb 02		 jmp	 SHORT $L182501
$L182503:
  00087	33 c0		 xor	 eax, eax
$L182501:

; 339  : 
; 340  : 	if(m_pTITEM->m_bType == IT_LONG)

  00089	8b 54 24 18	 mov	 edx, DWORD PTR tv226[esp+32]
  0008d	0f b7 cd	 movzx	 ecx, bp
  00090	0f b7 c0	 movzx	 eax, ax
  00093	03 c1		 add	 eax, ecx
  00095	80 7a 02 04	 cmp	 BYTE PTR [edx+2], 4
  00099	5f		 pop	 edi
  0009a	5d		 pop	 ebp
  0009b	5b		 pop	 ebx
  0009c	75 11		 jne	 SHORT $L175489

; 341  : 		dwValue += m_pTITEMATTR->m_wMaxAP;

  0009e	8b 4c 24 10	 mov	 ecx, DWORD PTR tv230[esp+20]
  000a2	0f b7 51 06	 movzx	 edx, WORD PTR [ecx+6]
  000a6	03 c2		 add	 eax, edx
  000a8	5e		 pop	 esi

; 342  : 
; 343  : 	return dwValue;
; 344  : }

  000a9	83 c4 10	 add	 esp, 16			; 00000010H
  000ac	c3		 ret	 0
$L175491:

; 333  : 		return 0;

  000ad	33 c0		 xor	 eax, eax
$L175489:
  000af	5e		 pop	 esi

; 342  : 
; 343  : 	return dwValue;
; 344  : }

  000b0	83 c4 10	 add	 esp, 16			; 00000010H
  000b3	c3		 ret	 0
?GetMaxLAP@CTItem@@QAEKXZ ENDP				; CTItem::GetMaxLAP
_TEXT	ENDS
PUBLIC	?GetMinAP@CTItem@@QAEKXZ			; CTItem::GetMinAP
; Function compile flags: /Ogty
;	COMDAT ?GetMinAP@CTItem@@QAEKXZ
_TEXT	SEGMENT
$T182635 = -16						; size = 1
$T182571 = -16						; size = 1
_finder$182633 = -12					; size = 4
_finder$182569 = -12					; size = 4
tv226 = -8						; size = 4
tv230 = -4						; size = 4
?GetMinAP@CTItem@@QAEKXZ PROC NEAR			; CTItem::GetMinAP, COMDAT
; _this$ = ecx

; 346  : {

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 347  : 	if(!m_pTITEM || !m_pTITEMATTR)

  00006	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00009	85 c0		 test	 eax, eax
  0000b	89 44 24 0c	 mov	 DWORD PTR tv226[esp+20], eax
  0000f	0f 84 98 00 00
	00		 je	 $L175498
  00015	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00018	85 c0		 test	 eax, eax
  0001a	89 44 24 10	 mov	 DWORD PTR tv230[esp+20], eax
  0001e	0f 84 89 00 00
	00		 je	 $L175498
  00024	53		 push	 ebx
  00025	55		 push	 ebp
  00026	57		 push	 edi

; 349  : 
; 350  : 	DWORD dwValue=0;
; 351  : 
; 352  : 	dwValue += GetMagicValue(MTYPE_PAP)
; 353  : 		+ GetMagicValue(MTYPE_PMINAP);

  00027	8d 44 24 10	 lea	 eax, DWORD PTR $T182571[esp+32]
  0002b	50		 push	 eax
  0002c	8d 4c 24 18	 lea	 ecx, DWORD PTR _finder$182569[esp+36]
  00030	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  00033	51		 push	 ecx
  00034	8b cf		 mov	 ecx, edi
  00036	c6 44 24 18 07	 mov	 BYTE PTR $T182571[esp+40], 7
  0003b	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::find
  00040	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00043	8b 44 24 14	 mov	 eax, DWORD PTR _finder$182569[esp+32]
  00047	3b c3		 cmp	 eax, ebx
  00049	74 0f		 je	 SHORT $L182570
  0004b	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0004e	52		 push	 edx
  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 ?GetMagicValue@CTItem@@QAEGPAUtagTMAGIC@@@Z ; CTItem::GetMagicValue
  00056	8b e8		 mov	 ebp, eax
  00058	eb 02		 jmp	 SHORT $L182568
$L182570:
  0005a	33 ed		 xor	 ebp, ebp
$L182568:
  0005c	8d 44 24 10	 lea	 eax, DWORD PTR $T182635[esp+32]
  00060	50		 push	 eax
  00061	8d 4c 24 18	 lea	 ecx, DWORD PTR _finder$182633[esp+36]
  00065	51		 push	 ecx
  00066	8b cf		 mov	 ecx, edi
  00068	c6 44 24 18 3d	 mov	 BYTE PTR $T182635[esp+40], 61 ; 0000003dH
  0006d	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::find
  00072	8b 44 24 14	 mov	 eax, DWORD PTR _finder$182633[esp+32]
  00076	3b c3		 cmp	 eax, ebx
  00078	74 0d		 je	 SHORT $L182634
  0007a	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0007d	52		 push	 edx
  0007e	8b ce		 mov	 ecx, esi
  00080	e8 00 00 00 00	 call	 ?GetMagicValue@CTItem@@QAEGPAUtagTMAGIC@@@Z ; CTItem::GetMagicValue
  00085	eb 02		 jmp	 SHORT $L182632
$L182634:
  00087	33 c0		 xor	 eax, eax
$L182632:

; 354  : 
; 355  : 	if(m_pTITEM->m_bType == IT_WEAPON)

  00089	8b 54 24 18	 mov	 edx, DWORD PTR tv226[esp+32]
  0008d	0f b7 cd	 movzx	 ecx, bp
  00090	0f b7 c0	 movzx	 eax, ax
  00093	03 c1		 add	 eax, ecx
  00095	80 7a 02 01	 cmp	 BYTE PTR [edx+2], 1
  00099	5f		 pop	 edi
  0009a	5d		 pop	 ebp
  0009b	5b		 pop	 ebx
  0009c	75 11		 jne	 SHORT $L175496

; 356  : 		dwValue += m_pTITEMATTR->m_wMinAP;

  0009e	8b 4c 24 10	 mov	 ecx, DWORD PTR tv230[esp+20]
  000a2	0f b7 51 04	 movzx	 edx, WORD PTR [ecx+4]
  000a6	03 c2		 add	 eax, edx
  000a8	5e		 pop	 esi

; 357  : 
; 358  : 	return dwValue;
; 359  : }

  000a9	83 c4 10	 add	 esp, 16			; 00000010H
  000ac	c3		 ret	 0
$L175498:

; 348  : 		return 0;

  000ad	33 c0		 xor	 eax, eax
$L175496:
  000af	5e		 pop	 esi

; 357  : 
; 358  : 	return dwValue;
; 359  : }

  000b0	83 c4 10	 add	 esp, 16			; 00000010H
  000b3	c3		 ret	 0
?GetMinAP@CTItem@@QAEKXZ ENDP				; CTItem::GetMinAP
_TEXT	ENDS
PUBLIC	?GetMinLAP@CTItem@@QAEKXZ			; CTItem::GetMinLAP
; Function compile flags: /Ogty
;	COMDAT ?GetMinLAP@CTItem@@QAEKXZ
_TEXT	SEGMENT
$T182766 = -16						; size = 1
$T182702 = -16						; size = 1
_finder$182748 = -12					; size = 4
_finder$182700 = -12					; size = 4
tv226 = -8						; size = 4
tv230 = -4						; size = 4
?GetMinLAP@CTItem@@QAEKXZ PROC NEAR			; CTItem::GetMinLAP, COMDAT
; _this$ = ecx

; 361  : {

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 362  : 	if(!m_pTITEM || !m_pTITEMATTR)

  00006	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00009	85 c0		 test	 eax, eax
  0000b	89 44 24 0c	 mov	 DWORD PTR tv226[esp+20], eax
  0000f	0f 84 98 00 00
	00		 je	 $L175505
  00015	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00018	85 c0		 test	 eax, eax
  0001a	89 44 24 10	 mov	 DWORD PTR tv230[esp+20], eax
  0001e	0f 84 89 00 00
	00		 je	 $L175505
  00024	53		 push	 ebx
  00025	55		 push	 ebp
  00026	57		 push	 edi

; 364  : 
; 365  : 	DWORD dwValue=0;
; 366  : 
; 367  : 	dwValue += GetMagicValue(MTYPE_LAP)
; 368  : 		+ GetMagicValue(MTYPE_LMINAP);

  00027	8d 44 24 10	 lea	 eax, DWORD PTR $T182702[esp+32]
  0002b	50		 push	 eax
  0002c	8d 4c 24 18	 lea	 ecx, DWORD PTR _finder$182700[esp+36]
  00030	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  00033	51		 push	 ecx
  00034	8b cf		 mov	 ecx, edi
  00036	c6 44 24 18 09	 mov	 BYTE PTR $T182702[esp+40], 9
  0003b	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::find
  00040	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00043	8b 44 24 14	 mov	 eax, DWORD PTR _finder$182700[esp+32]
  00047	3b c3		 cmp	 eax, ebx
  00049	74 0f		 je	 SHORT $L182701
  0004b	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0004e	52		 push	 edx
  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 ?GetMagicValue@CTItem@@QAEGPAUtagTMAGIC@@@Z ; CTItem::GetMagicValue
  00056	8b e8		 mov	 ebp, eax
  00058	eb 02		 jmp	 SHORT $L182699
$L182701:
  0005a	33 ed		 xor	 ebp, ebp
$L182699:
  0005c	8d 44 24 10	 lea	 eax, DWORD PTR $T182766[esp+32]
  00060	50		 push	 eax
  00061	8d 4c 24 18	 lea	 ecx, DWORD PTR _finder$182748[esp+36]
  00065	51		 push	 ecx
  00066	8b cf		 mov	 ecx, edi
  00068	c6 44 24 18 3f	 mov	 BYTE PTR $T182766[esp+40], 63 ; 0000003fH
  0006d	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::find
  00072	8b 44 24 14	 mov	 eax, DWORD PTR _finder$182748[esp+32]
  00076	3b c3		 cmp	 eax, ebx
  00078	74 0d		 je	 SHORT $L182749
  0007a	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0007d	52		 push	 edx
  0007e	8b ce		 mov	 ecx, esi
  00080	e8 00 00 00 00	 call	 ?GetMagicValue@CTItem@@QAEGPAUtagTMAGIC@@@Z ; CTItem::GetMagicValue
  00085	eb 02		 jmp	 SHORT $L182747
$L182749:
  00087	33 c0		 xor	 eax, eax
$L182747:

; 369  : 
; 370  : 	if(m_pTITEM->m_bType == IT_LONG)

  00089	8b 54 24 18	 mov	 edx, DWORD PTR tv226[esp+32]
  0008d	0f b7 cd	 movzx	 ecx, bp
  00090	0f b7 c0	 movzx	 eax, ax
  00093	03 c1		 add	 eax, ecx
  00095	80 7a 02 04	 cmp	 BYTE PTR [edx+2], 4
  00099	5f		 pop	 edi
  0009a	5d		 pop	 ebp
  0009b	5b		 pop	 ebx
  0009c	75 11		 jne	 SHORT $L175503

; 371  : 		dwValue += m_pTITEMATTR->m_wMinAP;

  0009e	8b 4c 24 10	 mov	 ecx, DWORD PTR tv230[esp+20]
  000a2	0f b7 51 04	 movzx	 edx, WORD PTR [ecx+4]
  000a6	03 c2		 add	 eax, edx
  000a8	5e		 pop	 esi

; 372  : 
; 373  : 	return dwValue;
; 374  : }

  000a9	83 c4 10	 add	 esp, 16			; 00000010H
  000ac	c3		 ret	 0
$L175505:

; 363  : 		return 0;

  000ad	33 c0		 xor	 eax, eax
$L175503:
  000af	5e		 pop	 esi

; 372  : 
; 373  : 	return dwValue;
; 374  : }

  000b0	83 c4 10	 add	 esp, 16			; 00000010H
  000b3	c3		 ret	 0
?GetMinLAP@CTItem@@QAEKXZ ENDP				; CTItem::GetMinLAP
_TEXT	ENDS
PUBLIC	?GetMaxMagicAP@CTItem@@QAEKXZ			; CTItem::GetMaxMagicAP
; Function compile flags: /Ogty
;	COMDAT ?GetMaxMagicAP@CTItem@@QAEKXZ
_TEXT	SEGMENT
$T182897 = -16						; size = 1
$T182833 = -16						; size = 1
_finder$182877 = -12					; size = 4
_finder$182813 = -12					; size = 4
tv226 = -8						; size = 4
tv230 = -4						; size = 4
?GetMaxMagicAP@CTItem@@QAEKXZ PROC NEAR			; CTItem::GetMaxMagicAP, COMDAT
; _this$ = ecx

; 376  : {

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 377  : 	if(!m_pTITEM || !m_pTITEMATTR)

  00006	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00009	85 c0		 test	 eax, eax
  0000b	89 44 24 0c	 mov	 DWORD PTR tv226[esp+20], eax
  0000f	0f 84 98 00 00
	00		 je	 $L175512
  00015	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00018	85 c0		 test	 eax, eax
  0001a	89 44 24 10	 mov	 DWORD PTR tv230[esp+20], eax
  0001e	0f 84 89 00 00
	00		 je	 $L175512
  00024	53		 push	 ebx
  00025	55		 push	 ebp
  00026	57		 push	 edi

; 379  : 
; 380  : 	DWORD dwValue=0;
; 381  : 
; 382  : 	dwValue += GetMagicValue(MTYPE_MAP)
; 383  : 		+ GetMagicValue(MTYPE_MPMAXAP);

  00027	8d 44 24 10	 lea	 eax, DWORD PTR $T182833[esp+32]
  0002b	50		 push	 eax
  0002c	8d 4c 24 18	 lea	 ecx, DWORD PTR _finder$182813[esp+36]
  00030	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  00033	51		 push	 ecx
  00034	8b cf		 mov	 ecx, edi
  00036	c6 44 24 18 11	 mov	 BYTE PTR $T182833[esp+40], 17 ; 00000011H
  0003b	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::find
  00040	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00043	8b 44 24 14	 mov	 eax, DWORD PTR _finder$182813[esp+32]
  00047	3b c3		 cmp	 eax, ebx
  00049	74 0f		 je	 SHORT $L182814
  0004b	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0004e	52		 push	 edx
  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 ?GetMagicValue@CTItem@@QAEGPAUtagTMAGIC@@@Z ; CTItem::GetMagicValue
  00056	8b e8		 mov	 ebp, eax
  00058	eb 02		 jmp	 SHORT $L182812
$L182814:
  0005a	33 ed		 xor	 ebp, ebp
$L182812:
  0005c	8d 44 24 10	 lea	 eax, DWORD PTR $T182897[esp+32]
  00060	50		 push	 eax
  00061	8d 4c 24 18	 lea	 ecx, DWORD PTR _finder$182877[esp+36]
  00065	51		 push	 ecx
  00066	8b cf		 mov	 ecx, edi
  00068	c6 44 24 18 42	 mov	 BYTE PTR $T182897[esp+40], 66 ; 00000042H
  0006d	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::find
  00072	8b 44 24 14	 mov	 eax, DWORD PTR _finder$182877[esp+32]
  00076	3b c3		 cmp	 eax, ebx
  00078	74 0d		 je	 SHORT $L182878
  0007a	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0007d	52		 push	 edx
  0007e	8b ce		 mov	 ecx, esi
  00080	e8 00 00 00 00	 call	 ?GetMagicValue@CTItem@@QAEGPAUtagTMAGIC@@@Z ; CTItem::GetMagicValue
  00085	eb 02		 jmp	 SHORT $L182876
$L182878:
  00087	33 c0		 xor	 eax, eax
$L182876:

; 384  : 
; 385  : 	if(m_pTITEM->m_bType == IT_WEAPON)

  00089	8b 54 24 18	 mov	 edx, DWORD PTR tv226[esp+32]
  0008d	0f b7 cd	 movzx	 ecx, bp
  00090	0f b7 c0	 movzx	 eax, ax
  00093	03 c1		 add	 eax, ecx
  00095	80 7a 02 01	 cmp	 BYTE PTR [edx+2], 1
  00099	5f		 pop	 edi
  0009a	5d		 pop	 ebp
  0009b	5b		 pop	 ebx
  0009c	75 11		 jne	 SHORT $L175510

; 386  : 		dwValue += m_pTITEMATTR->m_wMaxMAP;

  0009e	8b 4c 24 10	 mov	 ecx, DWORD PTR tv230[esp+20]
  000a2	0f b7 51 0c	 movzx	 edx, WORD PTR [ecx+12]
  000a6	03 c2		 add	 eax, edx
  000a8	5e		 pop	 esi

; 387  : 
; 388  : 	return dwValue;
; 389  : }

  000a9	83 c4 10	 add	 esp, 16			; 00000010H
  000ac	c3		 ret	 0
$L175512:

; 378  : 		return 0;

  000ad	33 c0		 xor	 eax, eax
$L175510:
  000af	5e		 pop	 esi

; 387  : 
; 388  : 	return dwValue;
; 389  : }

  000b0	83 c4 10	 add	 esp, 16			; 00000010H
  000b3	c3		 ret	 0
?GetMaxMagicAP@CTItem@@QAEKXZ ENDP			; CTItem::GetMaxMagicAP
_TEXT	ENDS
PUBLIC	?GetMinMagicAP@CTItem@@QAEKXZ			; CTItem::GetMinMagicAP
; Function compile flags: /Ogty
;	COMDAT ?GetMinMagicAP@CTItem@@QAEKXZ
_TEXT	SEGMENT
$T183028 = -16						; size = 1
$T182964 = -16						; size = 1
_finder$183008 = -12					; size = 4
_finder$182944 = -12					; size = 4
tv226 = -8						; size = 4
tv230 = -4						; size = 4
?GetMinMagicAP@CTItem@@QAEKXZ PROC NEAR			; CTItem::GetMinMagicAP, COMDAT
; _this$ = ecx

; 392  : {

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 393  : 	if(!m_pTITEM || !m_pTITEMATTR)

  00006	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00009	85 c0		 test	 eax, eax
  0000b	89 44 24 0c	 mov	 DWORD PTR tv226[esp+20], eax
  0000f	0f 84 98 00 00
	00		 je	 $L175519
  00015	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00018	85 c0		 test	 eax, eax
  0001a	89 44 24 10	 mov	 DWORD PTR tv230[esp+20], eax
  0001e	0f 84 89 00 00
	00		 je	 $L175519
  00024	53		 push	 ebx
  00025	55		 push	 ebp
  00026	57		 push	 edi

; 395  : 
; 396  : 	DWORD dwValue=0;
; 397  : 
; 398  : 	dwValue += GetMagicValue(MTYPE_MAP)
; 399  : 		+ GetMagicValue(MTYPE_MPMINAP);

  00027	8d 44 24 10	 lea	 eax, DWORD PTR $T182964[esp+32]
  0002b	50		 push	 eax
  0002c	8d 4c 24 18	 lea	 ecx, DWORD PTR _finder$182944[esp+36]
  00030	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  00033	51		 push	 ecx
  00034	8b cf		 mov	 ecx, edi
  00036	c6 44 24 18 11	 mov	 BYTE PTR $T182964[esp+40], 17 ; 00000011H
  0003b	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::find
  00040	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  00043	8b 44 24 14	 mov	 eax, DWORD PTR _finder$182944[esp+32]
  00047	3b c3		 cmp	 eax, ebx
  00049	74 0f		 je	 SHORT $L182945
  0004b	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0004e	52		 push	 edx
  0004f	8b ce		 mov	 ecx, esi
  00051	e8 00 00 00 00	 call	 ?GetMagicValue@CTItem@@QAEGPAUtagTMAGIC@@@Z ; CTItem::GetMagicValue
  00056	8b e8		 mov	 ebp, eax
  00058	eb 02		 jmp	 SHORT $L182943
$L182945:
  0005a	33 ed		 xor	 ebp, ebp
$L182943:
  0005c	8d 44 24 10	 lea	 eax, DWORD PTR $T183028[esp+32]
  00060	50		 push	 eax
  00061	8d 4c 24 18	 lea	 ecx, DWORD PTR _finder$183008[esp+36]
  00065	51		 push	 ecx
  00066	8b cf		 mov	 ecx, edi
  00068	c6 44 24 18 41	 mov	 BYTE PTR $T183028[esp+40], 65 ; 00000041H
  0006d	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::find
  00072	8b 44 24 14	 mov	 eax, DWORD PTR _finder$183008[esp+32]
  00076	3b c3		 cmp	 eax, ebx
  00078	74 0d		 je	 SHORT $L183009
  0007a	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0007d	52		 push	 edx
  0007e	8b ce		 mov	 ecx, esi
  00080	e8 00 00 00 00	 call	 ?GetMagicValue@CTItem@@QAEGPAUtagTMAGIC@@@Z ; CTItem::GetMagicValue
  00085	eb 02		 jmp	 SHORT $L183007
$L183009:
  00087	33 c0		 xor	 eax, eax
$L183007:

; 400  : 
; 401  : 	if(m_pTITEM->m_bType == IT_WEAPON)

  00089	8b 54 24 18	 mov	 edx, DWORD PTR tv226[esp+32]
  0008d	0f b7 cd	 movzx	 ecx, bp
  00090	0f b7 c0	 movzx	 eax, ax
  00093	03 c1		 add	 eax, ecx
  00095	80 7a 02 01	 cmp	 BYTE PTR [edx+2], 1
  00099	5f		 pop	 edi
  0009a	5d		 pop	 ebp
  0009b	5b		 pop	 ebx
  0009c	75 11		 jne	 SHORT $L175517

; 402  : 		dwValue += m_pTITEMATTR->m_wMinMAP;

  0009e	8b 4c 24 10	 mov	 ecx, DWORD PTR tv230[esp+20]
  000a2	0f b7 51 0a	 movzx	 edx, WORD PTR [ecx+10]
  000a6	03 c2		 add	 eax, edx
  000a8	5e		 pop	 esi

; 403  : 
; 404  : 	return dwValue;
; 405  : }

  000a9	83 c4 10	 add	 esp, 16			; 00000010H
  000ac	c3		 ret	 0
$L175519:

; 394  : 		return 0;

  000ad	33 c0		 xor	 eax, eax
$L175517:
  000af	5e		 pop	 esi

; 403  : 
; 404  : 	return dwValue;
; 405  : }

  000b0	83 c4 10	 add	 esp, 16			; 00000010H
  000b3	c3		 ret	 0
?GetMinMagicAP@CTItem@@QAEKXZ ENDP			; CTItem::GetMinMagicAP
_TEXT	ENDS
PUBLIC	?GetDefendPower@CTItem@@QAEKXZ			; CTItem::GetDefendPower
; Function compile flags: /Ogty
;	COMDAT ?GetDefendPower@CTItem@@QAEKXZ
_TEXT	SEGMENT
$T183095 = -8						; size = 1
_finder$183075 = -4					; size = 4
?GetDefendPower@CTItem@@QAEKXZ PROC NEAR		; CTItem::GetDefendPower, COMDAT
; _this$ = ecx

; 408  : {

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 409  : 	if(!m_pTITEM || !m_pTITEMATTR)

  00008	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0000b	85 ff		 test	 edi, edi
  0000d	74 4c		 je	 SHORT $L175526
  0000f	8b 5e 18	 mov	 ebx, DWORD PTR [esi+24]
  00012	85 db		 test	 ebx, ebx
  00014	74 45		 je	 SHORT $L175526

; 411  : 
; 412  : 	DWORD dwValue=0;
; 413  : 
; 414  : 	dwValue += GetMagicValue(MTYPE_PDP);

  00016	8d 44 24 0c	 lea	 eax, DWORD PTR $T183095[esp+20]
  0001a	50		 push	 eax
  0001b	8d 4c 24 14	 lea	 ecx, DWORD PTR _finder$183075[esp+24]
  0001f	51		 push	 ecx
  00020	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00023	c6 44 24 14 08	 mov	 BYTE PTR $T183095[esp+28], 8
  00028	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::find
  0002d	8b 44 24 10	 mov	 eax, DWORD PTR _finder$183075[esp+20]
  00031	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  00034	74 0d		 je	 SHORT $L183076
  00036	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00039	52		 push	 edx
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?GetMagicValue@CTItem@@QAEGPAUtagTMAGIC@@@Z ; CTItem::GetMagicValue
  00041	eb 02		 jmp	 SHORT $L183074
$L183076:
  00043	33 c0		 xor	 eax, eax
$L183074:

; 415  : 
; 416  : 	if(m_pTITEM->m_bType != IT_SHIELD)

  00045	80 7f 02 06	 cmp	 BYTE PTR [edi+2], 6
  00049	0f b7 c0	 movzx	 eax, ax
  0004c	74 0f		 je	 SHORT $L175524

; 417  : 		dwValue += m_pTITEMATTR->m_wDP;

  0004e	0f b7 4b 08	 movzx	 ecx, WORD PTR [ebx+8]
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	03 c1		 add	 eax, ecx
  00056	5b		 pop	 ebx

; 418  : 
; 419  : 	return dwValue;
; 420  : }

  00057	83 c4 08	 add	 esp, 8
  0005a	c3		 ret	 0
$L175526:

; 410  : 		return 0;

  0005b	33 c0		 xor	 eax, eax
$L175524:
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx

; 418  : 
; 419  : 	return dwValue;
; 420  : }

  00060	83 c4 08	 add	 esp, 8
  00063	c3		 ret	 0
?GetDefendPower@CTItem@@QAEKXZ ENDP			; CTItem::GetDefendPower
_TEXT	ENDS
PUBLIC	?GetMagicDefPower@CTItem@@QAEKXZ		; CTItem::GetMagicDefPower
; Function compile flags: /Ogty
;	COMDAT ?GetMagicDefPower@CTItem@@QAEKXZ
_TEXT	SEGMENT
$T183162 = -8						; size = 1
_finder$183142 = -4					; size = 4
?GetMagicDefPower@CTItem@@QAEKXZ PROC NEAR		; CTItem::GetMagicDefPower, COMDAT
; _this$ = ecx

; 422  : {

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 423  : 	if(!m_pTITEM || !m_pTITEMATTR)

  00008	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0000b	85 ff		 test	 edi, edi
  0000d	74 4c		 je	 SHORT $L175533
  0000f	8b 5e 18	 mov	 ebx, DWORD PTR [esi+24]
  00012	85 db		 test	 ebx, ebx
  00014	74 45		 je	 SHORT $L175533

; 425  : 
; 426  : 	DWORD dwValue=0;
; 427  : 
; 428  : 	dwValue += GetMagicValue(MTYPE_MDP);

  00016	8d 44 24 0c	 lea	 eax, DWORD PTR $T183162[esp+20]
  0001a	50		 push	 eax
  0001b	8d 4c 24 14	 lea	 ecx, DWORD PTR _finder$183142[esp+24]
  0001f	51		 push	 ecx
  00020	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00023	c6 44 24 14 10	 mov	 BYTE PTR $T183162[esp+28], 16 ; 00000010H
  00028	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::find
  0002d	8b 44 24 10	 mov	 eax, DWORD PTR _finder$183142[esp+20]
  00031	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  00034	74 0d		 je	 SHORT $L183143
  00036	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00039	52		 push	 edx
  0003a	8b ce		 mov	 ecx, esi
  0003c	e8 00 00 00 00	 call	 ?GetMagicValue@CTItem@@QAEGPAUtagTMAGIC@@@Z ; CTItem::GetMagicValue
  00041	eb 02		 jmp	 SHORT $L183141
$L183143:
  00043	33 c0		 xor	 eax, eax
$L183141:

; 429  : 
; 430  : 	if(m_pTITEM->m_bType != IT_SHIELD)

  00045	80 7f 02 06	 cmp	 BYTE PTR [edi+2], 6
  00049	0f b7 c0	 movzx	 eax, ax
  0004c	74 0f		 je	 SHORT $L175531

; 431  : 		dwValue += m_pTITEMATTR->m_wMDP;

  0004e	0f b7 4b 0e	 movzx	 ecx, WORD PTR [ebx+14]
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	03 c1		 add	 eax, ecx
  00056	5b		 pop	 ebx

; 432  : 
; 433  : 	return dwValue;
; 434  : }

  00057	83 c4 08	 add	 esp, 8
  0005a	c3		 ret	 0
$L175533:

; 424  : 		return 0;

  0005b	33 c0		 xor	 eax, eax
$L175531:
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx

; 432  : 
; 433  : 	return dwValue;
; 434  : }

  00060	83 c4 08	 add	 esp, 8
  00063	c3		 ret	 0
?GetMagicDefPower@CTItem@@QAEKXZ ENDP			; CTItem::GetMagicDefPower
_TEXT	ENDS
PUBLIC	?WrapPacket@CTItem@@QAEXPAVCPacket@@@Z		; CTItem::WrapPacket
EXTRN	??6CPacket@@QAEAAV0@K@Z:NEAR			; CPacket::operator<<
EXTRN	??6CPacket@@QAEAAV0@G@Z:NEAR			; CPacket::operator<<
EXTRN	??6CPacket@@QAEAAV0@E@Z:NEAR			; CPacket::operator<<
EXTRN	??6CPacket@@QAEAAV0@_J@Z:NEAR			; CPacket::operator<<
; Function compile flags: /Ogty
;	COMDAT ?WrapPacket@CTItem@@QAEXPAVCPacket@@@Z
_TEXT	SEGMENT
_itTMAGIC$ = 8						; size = 4
_pPacket$ = 8						; size = 4
?WrapPacket@CTItem@@QAEXPAVCPacket@@@Z PROC NEAR	; CTItem::WrapPacket, COMDAT
; _this$ = ecx

; 463  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 464  : 	(*pPacket)
; 465  : 		<< m_dlID
; 466  : 		<< m_bItemID
; 467  : 		<< m_wItemID
; 468  : 		<< m_bLevel
; 469  : 		<< m_bCount
; 470  : 		<< m_bGLevel
; 471  : 		<< m_dwDuraMax
; 472  : 		<< m_dwDuraCur
; 473  : 		<< m_bRefineCur
; 474  : 		<< m_dEndTime
; 475  : 		<< m_bGradeEffect
; 476  : 		<< m_dwExtValue[IEV_ELD]
; 477  : 		<< m_dwExtValue[IEV_WRAP]
; 478  : 		<< m_dwExtValue[IEV_COLOR]
; 479  : 		<< m_dwExtValue[IEV_GUILD]
; 480  : 		<< BYTE(m_mapTMAGIC.size());

  00003	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00006	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  00009	8b 56 70	 mov	 edx, DWORD PTR [esi+112]
  0000c	57		 push	 edi
  0000d	50		 push	 eax
  0000e	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  00011	50		 push	 eax
  00012	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00015	51		 push	 ecx
  00016	52		 push	 edx
  00017	8b 56 44	 mov	 edx, DWORD PTR [esi+68]
  0001a	50		 push	 eax
  0001b	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  0001e	33 c9		 xor	 ecx, ecx
  00020	8a 4e 68	 mov	 cl, BYTE PTR [esi+104]
  00023	8b 7c 24 20	 mov	 edi, DWORD PTR _pPacket$[esp+24]
  00027	51		 push	 ecx
  00028	52		 push	 edx
  00029	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0002c	33 c9		 xor	 ecx, ecx
  0002e	8a 4e 3c	 mov	 cl, BYTE PTR [esi+60]
  00031	50		 push	 eax
  00032	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00035	51		 push	 ecx
  00036	52		 push	 edx
  00037	33 c9		 xor	 ecx, ecx
  00039	8a 4e 33	 mov	 cl, BYTE PTR [esi+51]
  0003c	50		 push	 eax
  0003d	33 d2		 xor	 edx, edx
  0003f	8a 56 32	 mov	 dl, BYTE PTR [esi+50]
  00042	33 c0		 xor	 eax, eax
  00044	8a 46 29	 mov	 al, BYTE PTR [esi+41]
  00047	51		 push	 ecx
  00048	33 c9		 xor	 ecx, ecx
  0004a	66 8b 4e 30	 mov	 cx, WORD PTR [esi+48]
  0004e	52		 push	 edx
  0004f	33 d2		 xor	 edx, edx
  00051	8a 56 28	 mov	 dl, BYTE PTR [esi+40]
  00054	50		 push	 eax
  00055	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00058	51		 push	 ecx
  00059	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  0005c	52		 push	 edx
  0005d	50		 push	 eax
  0005e	51		 push	 ecx
  0005f	8b cf		 mov	 ecx, edi
  00061	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@_J@Z ; CPacket::operator<<
  00066	8b c8		 mov	 ecx, eax
  00068	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  0006d	8b c8		 mov	 ecx, eax
  0006f	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<
  00074	8b c8		 mov	 ecx, eax
  00076	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  0007b	8b c8		 mov	 ecx, eax
  0007d	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  00082	8b c8		 mov	 ecx, eax
  00084	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  00089	8b c8		 mov	 ecx, eax
  0008b	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<
  00090	8b c8		 mov	 ecx, eax
  00092	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<
  00097	8b c8		 mov	 ecx, eax
  00099	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  0009e	8b c8		 mov	 ecx, eax
  000a0	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@_J@Z ; CPacket::operator<<
  000a5	8b c8		 mov	 ecx, eax
  000a7	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  000ac	8b c8		 mov	 ecx, eax
  000ae	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<
  000b3	8b c8		 mov	 ecx, eax
  000b5	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<
  000ba	8b c8		 mov	 ecx, eax
  000bc	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<
  000c1	8b c8		 mov	 ecx, eax
  000c3	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<
  000c8	8b c8		 mov	 ecx, eax
  000ca	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<

; 481  : 
; 482  : 	MAPTMAGIC::iterator itTMAGIC;
; 483  : 	for( itTMAGIC = m_mapTMAGIC.begin(); itTMAGIC != m_mapTMAGIC.end(); itTMAGIC++)

  000cf	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  000d2	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d4	3b c1		 cmp	 eax, ecx
  000d6	89 44 24 0c	 mov	 DWORD PTR _itTMAGIC$[esp+4], eax
  000da	74 33		 je	 SHORT $L175568
  000dc	8d 64 24 00	 npad	 4
$L183225:

; 484  : 	{
; 485  : 		(*pPacket)
; 486  : 			<< (*itTMAGIC).first
; 487  : 			<< (*itTMAGIC).second->m_wValue;

  000e0	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  000e3	33 c9		 xor	 ecx, ecx
  000e5	66 8b 0a	 mov	 cx, WORD PTR [edx]
  000e8	33 d2		 xor	 edx, edx
  000ea	8a 50 0c	 mov	 dl, BYTE PTR [eax+12]
  000ed	51		 push	 ecx
  000ee	8b cf		 mov	 ecx, edi
  000f0	52		 push	 edx
  000f1	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  000f6	8b c8		 mov	 ecx, eax
  000f8	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<
  000fd	8d 4c 24 0c	 lea	 ecx, DWORD PTR _itTMAGIC$[esp+4]
  00101	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::_Inc
  00106	8b 44 24 0c	 mov	 eax, DWORD PTR _itTMAGIC$[esp+4]
  0010a	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  0010d	75 d1		 jne	 SHORT $L183225
$L175568:
  0010f	5f		 pop	 edi
  00110	5e		 pop	 esi

; 488  : 	}
; 489  : }

  00111	c2 04 00	 ret	 4
?WrapPacket@CTItem@@QAEXPAVCPacket@@@Z ENDP		; CTItem::WrapPacket
_TEXT	ENDS
PUBLIC	?WrapPacketClient@CTItem@@QAEXPAVCPacket@@KEGE@Z ; CTItem::WrapPacketClient
; Function compile flags: /Ogty
;	COMDAT ?WrapPacketClient@CTItem@@QAEXPAVCPacket@@KEGE@Z
_TEXT	SEGMENT
_bRegGuild$ = -4					; size = 1
_pPacket$ = 8						; size = 4
_dwCharID$ = 12						; size = 4
_itTMAGIC$ = 16						; size = 4
_bAddItemID$ = 16					; size = 1
_wUseTime$ = 20						; size = 2
tv348 = 24						; size = 4
tv344 = 24						; size = 4
_bCashItem$ = 24					; size = 1
?WrapPacketClient@CTItem@@QAEXPAVCPacket@@KEGE@Z PROC NEAR ; CTItem::WrapPacketClient, COMDAT
; _this$ = ecx

; 492  : {

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	56		 push	 esi
  00003	8b f1		 mov	 esi, ecx

; 493  : 	BYTE bRegGuild = FALSE;
; 494  : 
; 495  : 	if(	m_dwExtValue[IEV_GUILD] &&
; 496  : 		m_dwExtValue[IEV_GUILD] == dwCharID)

  00005	8b 46 78	 mov	 eax, DWORD PTR [esi+120]
  00008	85 c0		 test	 eax, eax
  0000a	57		 push	 edi
  0000b	c6 44 24 0c 00	 mov	 BYTE PTR _bRegGuild$[esp+16], 0
  00010	74 0b		 je	 SHORT $L175578
  00012	3b 44 24 18	 cmp	 eax, DWORD PTR _dwCharID$[esp+12]
  00016	75 05		 jne	 SHORT $L175578

; 497  : 		bRegGuild = TRUE;

  00018	c6 44 24 0c 01	 mov	 BYTE PTR _bRegGuild$[esp+16], 1
$L175578:

; 498  : 
; 499  : 	if(bAddItemID)

  0001d	8a 44 24 1c	 mov	 al, BYTE PTR _bAddItemID$[esp+12]
  00021	84 c0		 test	 al, al
  00023	8b 5c 24 14	 mov	 ebx, DWORD PTR _pPacket$[esp+12]
  00027	74 0d		 je	 SHORT $L175579

; 500  : 		(*pPacket) << m_bItemID;

  00029	33 c0		 xor	 eax, eax
  0002b	8a 46 28	 mov	 al, BYTE PTR [esi+40]
  0002e	8b cb		 mov	 ecx, ebx
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
$L175579:

; 501  : 
; 502  : 	(*pPacket)
; 503  : 		<< m_wItemID
; 504  : 		<< m_bLevel
; 505  : 		<< m_bCount
; 506  : 		<< m_dwDuraMax
; 507  : 		<< m_dwDuraCur
; 508  : 		<< m_pTITEM->m_bRefineMax
; 509  : 		<< m_bRefineCur
; 510  : 		<< m_bGLevel;

  00036	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00039	33 c9		 xor	 ecx, ecx
  0003b	8a 4e 33	 mov	 cl, BYTE PTR [esi+51]
  0003e	33 d2		 xor	 edx, edx
  00040	8a 56 3c	 mov	 dl, BYTE PTR [esi+60]
  00043	51		 push	 ecx
  00044	33 c9		 xor	 ecx, ecx
  00046	8a 48 58	 mov	 cl, BYTE PTR [eax+88]
  00049	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  0004c	52		 push	 edx
  0004d	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00050	51		 push	 ecx
  00051	52		 push	 edx
  00052	33 c9		 xor	 ecx, ecx
  00054	8a 4e 32	 mov	 cl, BYTE PTR [esi+50]
  00057	50		 push	 eax
  00058	33 d2		 xor	 edx, edx
  0005a	8a 56 29	 mov	 dl, BYTE PTR [esi+41]
  0005d	33 c0		 xor	 eax, eax
  0005f	66 8b 46 30	 mov	 ax, WORD PTR [esi+48]
  00063	51		 push	 ecx
  00064	8b cb		 mov	 ecx, ebx
  00066	52		 push	 edx
  00067	50		 push	 eax
  00068	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<
  0006d	8b c8		 mov	 ecx, eax
  0006f	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  00074	8b c8		 mov	 ecx, eax
  00076	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  0007b	8b c8		 mov	 ecx, eax
  0007d	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<
  00082	8b c8		 mov	 ecx, eax
  00084	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<
  00089	8b c8		 mov	 ecx, eax
  0008b	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  00090	8b c8		 mov	 ecx, eax
  00092	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  00097	8b c8		 mov	 ecx, eax
  00099	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<

; 511  : 
; 512  : 	if(bCashItem)

  0009e	8a 44 24 24	 mov	 al, BYTE PTR _bCashItem$[esp+12]
  000a2	84 c0		 test	 al, al
  000a4	74 0e		 je	 SHORT $L175580

; 513  : 		(*pPacket) << wUseTime;

  000a6	8b 4c 24 20	 mov	 ecx, DWORD PTR _wUseTime$[esp+12]
  000aa	51		 push	 ecx
  000ab	8b cb		 mov	 ecx, ebx
  000ad	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<

; 514  : 	else

  000b2	eb 0f		 jmp	 SHORT $L175581
$L175580:

; 515  : 		(*pPacket) << m_dEndTime;

  000b4	8b 56 44	 mov	 edx, DWORD PTR [esi+68]
  000b7	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  000ba	52		 push	 edx
  000bb	50		 push	 eax
  000bc	8b cb		 mov	 ecx, ebx
  000be	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@_J@Z ; CPacket::operator<<
$L175581:

; 516  : 
; 517  : 	(*pPacket)
; 518  : 		<< m_bGradeEffect
; 519  : 		<< BYTE(m_dwExtValue[IEV_ELD])
; 520  : 		<< BYTE(m_dwExtValue[IEV_WRAP])
; 521  : 		<< WORD(m_dwExtValue[IEV_COLOR])
; 522  : 		<< bRegGuild
; 523  : 		<< BYTE(m_mapTMAGIC.size());

  000c3	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  000c6	8b 4c 24 0c	 mov	 ecx, DWORD PTR _bRegGuild$[esp+16]
  000ca	33 d2		 xor	 edx, edx
  000cc	66 8b 56 74	 mov	 dx, WORD PTR [esi+116]
  000d0	50		 push	 eax
  000d1	51		 push	 ecx
  000d2	33 c0		 xor	 eax, eax
  000d4	8a 46 70	 mov	 al, BYTE PTR [esi+112]
  000d7	33 c9		 xor	 ecx, ecx
  000d9	8a 4e 6c	 mov	 cl, BYTE PTR [esi+108]
  000dc	52		 push	 edx
  000dd	33 d2		 xor	 edx, edx
  000df	8a 56 68	 mov	 dl, BYTE PTR [esi+104]
  000e2	50		 push	 eax
  000e3	51		 push	 ecx
  000e4	8b cb		 mov	 ecx, ebx
  000e6	52		 push	 edx
  000e7	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  000ec	8b c8		 mov	 ecx, eax
  000ee	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  000f3	8b c8		 mov	 ecx, eax
  000f5	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  000fa	8b c8		 mov	 ecx, eax
  000fc	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<
  00101	8b c8		 mov	 ecx, eax
  00103	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  00108	8b c8		 mov	 ecx, eax
  0010a	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<

; 524  : 
; 525  : 	MAPTMAGIC::iterator itTMAGIC;
; 526  : 	for( itTMAGIC = m_mapTMAGIC.begin(); itTMAGIC != m_mapTMAGIC.end(); itTMAGIC++)

  0010f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00112	8b 38		 mov	 edi, DWORD PTR [eax]
  00114	3b f8		 cmp	 edi, eax
  00116	89 7c 24 1c	 mov	 DWORD PTR _itTMAGIC$[esp+12], edi
  0011a	0f 84 8e 00 00
	00		 je	 $L175588
  00120	55		 push	 ebp
$L183417:

; 527  : 	{
; 528  : 		(*pPacket)
; 529  : 			<< (*itTMAGIC).first
; 530  : 			<< GetMagicValue((*itTMAGIC).second);

  00121	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00124	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00127	8a 51 08	 mov	 dl, BYTE PTR [ecx+8]
  0012a	84 d2		 test	 dl, dl
  0012c	74 0c		 je	 SHORT $L183391
  0012e	8b 6e 14	 mov	 ebp, DWORD PTR [esi+20]
  00131	0f b6 d2	 movzx	 edx, dl
  00134	d9 44 95 14	 fld	 DWORD PTR [ebp+edx*4+20]
  00138	eb 06		 jmp	 SHORT $L183392
$L183391:
  0013a	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@3ff0000000000000
$L183392:
  00140	0f b7 49 0a	 movzx	 ecx, WORD PTR [ecx+10]
  00144	0f b7 10	 movzx	 edx, WORD PTR [eax]
  00147	89 4c 24 28	 mov	 DWORD PTR tv348[esp+16], ecx
  0014b	db 44 24 28	 fild	 DWORD PTR tv348[esp+16]
  0014f	89 54 24 28	 mov	 DWORD PTR tv344[esp+16], edx
  00153	d9 c9		 fxch	 ST(1)
  00155	de c9		 fmulp	 ST(1), ST(0)
  00157	da 4c 24 28	 fimul	 DWORD PTR tv344[esp+16]
  0015b	e8 00 00 00 00	 call	 __ftol2
  00160	0f b7 c8	 movzx	 ecx, ax
  00163	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  00168	f7 e9		 imul	 ecx
  0016a	c1 fa 05	 sar	 edx, 5
  0016d	8b c2		 mov	 eax, edx
  0016f	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00172	03 c2		 add	 eax, edx
  00174	66 3d 01 00	 cmp	 ax, 1
  00178	0f b7 c0	 movzx	 eax, ax
  0017b	77 05		 ja	 SHORT $L183394
  0017d	b8 01 00 00 00	 mov	 eax, 1
$L183394:
  00182	50		 push	 eax
  00183	33 c0		 xor	 eax, eax
  00185	8a 47 0c	 mov	 al, BYTE PTR [edi+12]
  00188	8b cb		 mov	 ecx, ebx
  0018a	50		 push	 eax
  0018b	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  00190	8b c8		 mov	 ecx, eax
  00192	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<
  00197	8d 4c 24 20	 lea	 ecx, DWORD PTR _itTMAGIC$[esp+16]
  0019b	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::_Inc
  001a0	8b 7c 24 20	 mov	 edi, DWORD PTR _itTMAGIC$[esp+16]
  001a4	3b 7e 0c	 cmp	 edi, DWORD PTR [esi+12]
  001a7	0f 85 74 ff ff
	ff		 jne	 $L183417
  001ad	5d		 pop	 ebp
$L175588:
  001ae	5f		 pop	 edi
  001af	5e		 pop	 esi
  001b0	5b		 pop	 ebx

; 531  : 	}
; 532  : }

  001b1	59		 pop	 ecx
  001b2	c2 14 00	 ret	 20			; 00000014H
?WrapPacketClient@CTItem@@QAEXPAVCPacket@@KEGE@Z ENDP	; CTItem::WrapPacketClient
_TEXT	ENDS
PUBLIC	?GetAutoSkill@CTItem@@QAEGXZ			; CTItem::GetAutoSkill
; Function compile flags: /Ogty
;	COMDAT ?GetAutoSkill@CTItem@@QAEGXZ
_TEXT	SEGMENT
_it$ = -4						; size = 4
?GetAutoSkill@CTItem@@QAEGXZ PROC NEAR			; CTItem::GetAutoSkill, COMDAT
; _this$ = ecx

; 599  : {

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b f9		 mov	 edi, ecx

; 600  : 	MAPTMAGIC::iterator it;
; 601  : 	for(it=m_mapTMAGIC.begin(); it!=m_mapTMAGIC.end(); it++)

  00005	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00008	8b 30		 mov	 esi, DWORD PTR [eax]
  0000a	3b f0		 cmp	 esi, eax
  0000c	89 74 24 08	 mov	 DWORD PTR _it$[esp+12], esi
  00010	74 36		 je	 SHORT $L175634
$L183475:

; 602  : 	{
; 603  : 		if((*it).second->m_pMagic->m_wAutoSkill)

  00012	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00015	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00018	66 83 79 12 00	 cmp	 WORD PTR [ecx+18], 0
  0001d	74 17		 je	 SHORT $L175633

; 604  : 		{
; 605  : 			if((*it).second->m_wValue > rand() % 100)

  0001f	e8 00 00 00 00	 call	 _rand
  00024	99		 cdq
  00025	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  0002a	f7 f9		 idiv	 ecx
  0002c	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  0002f	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00032	3b ca		 cmp	 ecx, edx
  00034	7f 19		 jg	 SHORT $L183547
$L175633:

; 600  : 	MAPTMAGIC::iterator it;
; 601  : 	for(it=m_mapTMAGIC.begin(); it!=m_mapTMAGIC.end(); it++)

  00036	8d 4c 24 08	 lea	 ecx, DWORD PTR _it$[esp+12]
  0003a	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::_Inc
  0003f	8b 74 24 08	 mov	 esi, DWORD PTR _it$[esp+12]
  00043	3b 77 0c	 cmp	 esi, DWORD PTR [edi+12]
  00046	75 ca		 jne	 SHORT $L183475
$L175634:
  00048	5f		 pop	 edi

; 607  : 		}
; 608  : 	}
; 609  : 
; 610  : 	return 0;

  00049	66 33 c0	 xor	 ax, ax
  0004c	5e		 pop	 esi

; 611  : }

  0004d	59		 pop	 ecx
  0004e	c3		 ret	 0
$L183547:

; 606  : 				return (*it).second->m_pMagic->m_wAutoSkill;

  0004f	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00052	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00055	66 8b 40 12	 mov	 ax, WORD PTR [eax+18]
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi

; 611  : }

  0005b	59		 pop	 ecx
  0005c	c3		 ret	 0
?GetAutoSkill@CTItem@@QAEGXZ ENDP			; CTItem::GetAutoSkill
_TEXT	ENDS
PUBLIC	??0?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKK@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKK@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKK@std@@@1@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >, COMDAT
; _this$ = ecx

; 361  : 		{	// construct empty tree

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 362  : 		_Init();

  00003	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Buynode
  00008	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000b	c6 40 15 01	 mov	 BYTE PTR [eax+21], 1
  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00012	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00015	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00018	89 00		 mov	 DWORD PTR [eax], eax
  0001a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001d	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00020	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 363  : 		}

  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	c2 08 00	 ret	 8
??0?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@K@1@ABV?$allocator@U?$pair@$$CBKK@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >
_TEXT	ENDS
PUBLIC	??0?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@E@1@ABV?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >
; Function compile flags: /Ogty
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@E@1@ABV?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@E@1@ABV?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >, COMDAT
; _this$ = ecx

; 361  : 		{	// construct empty tree

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 362  : 		_Init();

  00003	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Buynode
  00008	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000b	c6 40 15 01	 mov	 BYTE PTR [eax+21], 1
  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00012	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00015	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00018	89 00		 mov	 DWORD PTR [eax], eax
  0001a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001d	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00020	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 363  : 		}

  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	c2 08 00	 ret	 8
??0?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@E@1@ABV?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 323  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 324  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 325  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 326  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 621  : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 622  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$L183855:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $L183855
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 623  : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 361  : 		_Tidy();
; 362  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$L183930:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $L183930
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 363  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?GetWeaponPowerLevel@CTItem@@QAEEXZ		; CTItem::GetWeaponPowerLevel
PUBLIC	__real@3f800000
PUBLIC	__real@4f800000
EXTRN	?GetFormulaRateX@CTMapSvrModule@@QAEME@Z:NEAR	; CTMapSvrModule::GetFormulaRateX
EXTRN	?GetFormulaRateY@CTMapSvrModule@@QAEME@Z:NEAR	; CTMapSvrModule::GetFormulaRateY
;	COMDAT ?vPowerRate@?1??GetWeaponPowerLevel@CTItem@@QAEEXZ@4PAMA
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\math.h
_DATA	SEGMENT
?vPowerRate@?1??GetWeaponPowerLevel@CTItem@@QAEEXZ@4PAMA DD 000000000r ; 0 ; `CTItem::GetWeaponPowerLevel'::`2'::vPowerRate
	DD	03f400000r			; 0.75
	DD	03e4ccccdr			; 0.2
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f8ccccdr			; 1.1
	DD	03f4ccccdr			; 0.8
	DD	03f800000r			; 1
	DD	03f4ccccdr			; 0.8
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
_DATA	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\titem.cpp
CONST	ENDS
;	COMDAT ?GetWeaponPowerLevel@CTItem@@QAEEXZ
_TEXT	SEGMENT
tv295 = -16						; size = 4
_dwMinAP$ = -16						; size = 4
_fLevelConst$ = -12					; size = 4
tv287 = -8						; size = 4
_fItemMinRate$ = -8					; size = 4
_fItemMaxRate$ = -4					; size = 4
?GetWeaponPowerLevel@CTItem@@QAEEXZ PROC NEAR		; CTItem::GetWeaponPowerLevel, COMDAT
; _this$ = ecx

; 176  : {

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 177  : 	static FLOAT vPowerRate[IK_HP] = {
; 178  : 		0.0f,	// IK_NONE
; 179  : 		0.75f,	// IK_1HAND
; 180  : 		0.2f,	// IK_LHAND
; 181  : 		1.0f,	// IK_2HAND
; 182  : 		1.0f,	// IK_CAKRAM
; 183  : 		1.1f,	// IK_AX
; 184  : 		0.8f,	// IK_BOW
; 185  : 		1.0f,	// IK_ARBALEST
; 186  : 		0.8f,	// IK_MBAR
; 187  : 		1.0f,	// IK_MSTICK
; 188  : 		0.0f,	// IK_VAJRA
; 189  : 		0.0f,	// IK_MULTIVAJRA
; 190  : 		0.0f,	// IK_SHIELD
; 191  : 		0.0f,	// IK_CLOTH
; 192  : 		0.0f,	// IK_UNIFORM
; 193  : 		0.0f,	// IK_LLEATHER
; 194  : 		0.0f,	// IK_HLEATHER
; 195  : 		0.0f,	// IK_LARMOR
; 196  : 		0.0f,	// IK_HARMOR
; 197  : 		0.0f,	// IK_BACK
; 198  : 		0.0f,	// IK_NECK
; 199  : 		0.0f,	// IK_FINGER
; 200  : 		0.0f,	// IK_BALL
; 201  : 		0.0f,	// IK_PET
; 202  : 		0.0f,	// IK_ARROW
; 203  : 		0.0f};	// IK_SARROW
; 204  : 
; 205  : 	if( m_pTITEM->m_bKind >= IK_HP || vPowerRate[m_pTITEM->m_bKind] == 0.0f )

  00006	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00009	8a 40 03	 mov	 al, BYTE PTR [eax+3]
  0000c	3c 1a		 cmp	 al, 26			; 0000001aH
  0000e	0f 83 27 01 00
	00		 jae	 $L175445
  00014	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@00000000
  0001a	0f b6 c8	 movzx	 ecx, al
  0001d	d9 04 8d 00 00
	00 00		 fld	 DWORD PTR ?vPowerRate@?1??GetWeaponPowerLevel@CTItem@@QAEEXZ@4PAMA[ecx*4]
  00024	da e9		 fucompp
  00026	df e0		 fnstsw	 ax
  00028	f6 c4 44	 test	 ah, 68			; 00000044H
  0002b	0f 8b 0a 01 00
	00		 jnp	 $L175445
  00031	53		 push	 ebx
  00032	55		 push	 ebp
  00033	57		 push	 edi

; 207  : 
; 208  : 	FLOAT fLevelConst = 1.0f / logf(_AtlModule.GetFormulaRateX(FTYPE_1ST));

  00034	6a 22		 push	 34			; 00000022H
  00036	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?_AtlModule@@3VCTMapSvrModule@@A
  0003b	e8 00 00 00 00	 call	 ?GetFormulaRateX@CTMapSvrModule@@QAEME@Z ; CTMapSvrModule::GetFormulaRateX
  00040	d9 ed		 fldln2
  00042	d9 c9		 fxch	 ST(1)

; 209  : 	FLOAT fItemMinRate = _AtlModule.GetFormulaRateX(FTYPE_WEAPONPOWER);

  00044	6a 16		 push	 22			; 00000016H
  00046	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?_AtlModule@@3VCTMapSvrModule@@A
  0004b	d9 f1		 fyl2x
  0004d	d8 3d 00 00 00
	00		 fdivr	 DWORD PTR __real@3f800000
  00053	d9 5c 24 18	 fstp	 DWORD PTR _fLevelConst$[esp+36]
  00057	e8 00 00 00 00	 call	 ?GetFormulaRateX@CTMapSvrModule@@QAEME@Z ; CTMapSvrModule::GetFormulaRateX
  0005c	d9 5c 24 18	 fstp	 DWORD PTR _fItemMinRate$[esp+32]

; 210  : 	FLOAT fItemMaxRate = _AtlModule.GetFormulaRateY(FTYPE_WEAPONPOWER);

  00060	6a 16		 push	 22			; 00000016H
  00062	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?_AtlModule@@3VCTMapSvrModule@@A
  00067	e8 00 00 00 00	 call	 ?GetFormulaRateY@CTMapSvrModule@@QAEME@Z ; CTMapSvrModule::GetFormulaRateY
  0006c	d9 5c 24 1c	 fstp	 DWORD PTR _fItemMaxRate$[esp+32]

; 211  : 
; 212  : 	DWORD dwMinAP = m_pTITEM->m_bType == IT_LONG ? GetMinLAP() : GetMinAP();

  00070	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  00073	8a 5f 02	 mov	 bl, BYTE PTR [edi+2]
  00076	80 fb 04	 cmp	 bl, 4
  00079	8b ce		 mov	 ecx, esi
  0007b	75 07		 jne	 SHORT $L183934
  0007d	e8 00 00 00 00	 call	 ?GetMinLAP@CTItem@@QAEKXZ ; CTItem::GetMinLAP
  00082	eb 05		 jmp	 SHORT $L183958
$L183934:
  00084	e8 00 00 00 00	 call	 ?GetMinAP@CTItem@@QAEKXZ ; CTItem::GetMinAP
$L183958:

; 213  : 	DWORD dwMaxAP = m_pTITEM->m_bType == IT_LONG ? GetMaxLAP() : GetMaxAP();

  00089	80 fb 04	 cmp	 bl, 4
  0008c	89 44 24 10	 mov	 DWORD PTR _dwMinAP$[esp+32], eax
  00090	8b ce		 mov	 ecx, esi
  00092	75 07		 jne	 SHORT $L183936
  00094	e8 00 00 00 00	 call	 ?GetMaxLAP@CTItem@@QAEKXZ ; CTItem::GetMaxLAP
  00099	eb 05		 jmp	 SHORT $L183959
$L183936:
  0009b	e8 00 00 00 00	 call	 ?GetMaxAP@CTItem@@QAEKXZ ; CTItem::GetMaxAP
$L183959:

; 214  : 
; 215  : 	dwMinAP += GetMinMagicAP();
; 216  : 	dwMaxAP += GetMaxMagicAP();
; 217  : 
; 218  : 	BYTE bMinLevel = BYTE(logf(FLOAT(dwMinAP) / (vPowerRate[m_pTITEM->m_bKind] * fItemMinRate)) * fLevelConst) + 1;

  000a0	0f b6 7f 03	 movzx	 edi, BYTE PTR [edi+3]
  000a4	8b ce		 mov	 ecx, esi
  000a6	8b e8		 mov	 ebp, eax
  000a8	e8 00 00 00 00	 call	 ?GetMinMagicAP@CTItem@@QAEKXZ ; CTItem::GetMinMagicAP
  000ad	03 44 24 10	 add	 eax, DWORD PTR _dwMinAP$[esp+32]
  000b1	85 c0		 test	 eax, eax
  000b3	89 44 24 10	 mov	 DWORD PTR tv295[esp+32], eax
  000b7	db 44 24 10	 fild	 DWORD PTR tv295[esp+32]
  000bb	7d 06		 jge	 SHORT $L183954
  000bd	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$L183954:
  000c3	d9 44 24 18	 fld	 DWORD PTR _fItemMinRate$[esp+32]
  000c7	d8 0c bd 00 00
	00 00		 fmul	 DWORD PTR ?vPowerRate@?1??GetWeaponPowerLevel@CTItem@@QAEEXZ@4PAMA[edi*4]
  000ce	de f9		 fdivp	 ST(1), ST(0)
  000d0	d9 ed		 fldln2
  000d2	d9 c9		 fxch	 ST(1)
  000d4	d9 f1		 fyl2x
  000d6	d8 4c 24 14	 fmul	 DWORD PTR _fLevelConst$[esp+32]
  000da	e8 00 00 00 00	 call	 __ftol2
  000df	8a d8		 mov	 bl, al
  000e1	8b ce		 mov	 ecx, esi
  000e3	fe c3		 inc	 bl
  000e5	e8 00 00 00 00	 call	 ?GetMaxMagicAP@CTItem@@QAEKXZ ; CTItem::GetMaxMagicAP
  000ea	03 c5		 add	 eax, ebp

; 219  : 	BYTE bMaxLevel = BYTE(logf(FLOAT(dwMaxAP) / (vPowerRate[m_pTITEM->m_bKind] * fItemMaxRate)) * fLevelConst) + 1;

  000ec	85 c0		 test	 eax, eax
  000ee	89 44 24 18	 mov	 DWORD PTR tv287[esp+32], eax
  000f2	db 44 24 18	 fild	 DWORD PTR tv287[esp+32]
  000f6	7d 06		 jge	 SHORT $L183957
  000f8	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$L183957:
  000fe	d9 44 24 1c	 fld	 DWORD PTR _fItemMaxRate$[esp+32]
  00102	d8 0c bd 00 00
	00 00		 fmul	 DWORD PTR ?vPowerRate@?1??GetWeaponPowerLevel@CTItem@@QAEEXZ@4PAMA[edi*4]
  00109	de f9		 fdivp	 ST(1), ST(0)
  0010b	d9 ed		 fldln2
  0010d	d9 c9		 fxch	 ST(1)
  0010f	d9 f1		 fyl2x
  00111	d8 4c 24 14	 fmul	 DWORD PTR _fLevelConst$[esp+32]
  00115	e8 00 00 00 00	 call	 __ftol2
  0011a	fe c0		 inc	 al

; 220  : 
; 221  : 	return BYTE(max( (bMinLevel + bMaxLevel) / 2, 1));

  0011c	0f b6 c0	 movzx	 eax, al
  0011f	0f b6 d3	 movzx	 edx, bl
  00122	03 c2		 add	 eax, edx
  00124	99		 cdq
  00125	2b c2		 sub	 eax, edx
  00127	5f		 pop	 edi
  00128	d1 f8		 sar	 eax, 1
  0012a	83 f8 01	 cmp	 eax, 1
  0012d	5d		 pop	 ebp
  0012e	5b		 pop	 ebx
  0012f	7f 0c		 jg	 SHORT $L175441
  00131	b8 01 00 00 00	 mov	 eax, 1
  00136	5e		 pop	 esi

; 222  : }

  00137	83 c4 10	 add	 esp, 16			; 00000010H
  0013a	c3		 ret	 0
$L175445:

; 206  : 		return BYTE(1);

  0013b	b0 01		 mov	 al, 1
$L175441:
  0013d	5e		 pop	 esi

; 222  : }

  0013e	83 c4 10	 add	 esp, 16			; 00000010H
  00141	c3		 ret	 0
?GetWeaponPowerLevel@CTItem@@QAEEXZ ENDP		; CTItem::GetWeaponPowerLevel
_TEXT	ENDS
PUBLIC	?GetShieldPowerLevel@CTItem@@QAEEXZ		; CTItem::GetShieldPowerLevel
;	COMDAT ?vPartsPower@?1??GetShieldPowerLevel@CTItem@@QAEEXZ@4PAMA
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\math.h
_DATA	SEGMENT
?vPartsPower@?1??GetShieldPowerLevel@CTItem@@QAEEXZ@4PAMA DD 000000000r ; 0 ; `CTItem::GetShieldPowerLevel'::`2'::vPartsPower
	DD	03e99999ar			; 0.3
	DD	000000000r			; 0
	DD	03e4ccccdr			; 0.2
	DD	000000000r			; 0
	DD	03e99999ar			; 0.3
	DD	03e800000r			; 0.25
	DD	03e19999ar			; 0.15
	DD	03dcccccdr			; 0.1
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	ORG $+16
_DATA	ENDS
;	COMDAT ?vPowerRate@?1??GetShieldPowerLevel@CTItem@@QAEEXZ@4PAMA
_DATA	SEGMENT
?vPowerRate@?1??GetShieldPowerLevel@CTItem@@QAEEXZ@4PAMA DD 000000000r ; 0 ; `CTItem::GetShieldPowerLevel'::`2'::vPowerRate
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f4ccccdr			; 0.8
	DD	03f800000r			; 1
	DD	03fa66666r			; 1.3
	DD	03fa66666r			; 1.3
	DD	03fa66666r			; 1.3
	DD	03fa66666r			; 1.3
	DD	03fa66666r			; 1.3
	DD	03fa66666r			; 1.3
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\titem.cpp
_DATA	ENDS
;	COMDAT ?GetShieldPowerLevel@CTItem@@QAEEXZ
_TEXT	SEGMENT
_fItemRate$ = -12					; size = 4
_fLevelConst$ = -8					; size = 4
tv278 = -4						; size = 4
?GetShieldPowerLevel@CTItem@@QAEEXZ PROC NEAR		; CTItem::GetShieldPowerLevel, COMDAT
; _this$ = ecx

; 225  : {

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 226  : 	static FLOAT vPowerRate[IK_HP] = {
; 227  : 		0.0f,	// IK_NONE
; 228  : 		0.0f,	// IK_1HAND
; 229  : 		0.0f,	// IK_LHAND
; 230  : 		0.0f,	// IK_2HAND
; 231  : 		0.0f,	// IK_CAKRAM
; 232  : 		0.0f,	// IK_AX
; 233  : 		0.0f,	// IK_BOW
; 234  : 		0.0f,	// IK_ARBALEST
; 235  : 		0.0f,	// IK_MBAR
; 236  : 		0.0f,	// IK_MSTICK
; 237  : 		0.0f,	// IK_VAJRA
; 238  : 		0.8f,	// IK_MULTIVAJRA
; 239  : 		1.0f,	// IK_SHIELD
; 240  : 		1.3f,	// IK_CLOTH
; 241  : 		1.3f,	// IK_UNIFORM
; 242  : 		1.3f,	// IK_LLEATHER
; 243  : 		1.3f,	// IK_HLEATHER
; 244  : 		1.3f,	// IK_LARMOR
; 245  : 		1.3f,	// IK_HARMOR
; 246  : 		0.0f,	// IK_BACK
; 247  : 		0.0f,	// IK_NECK
; 248  : 		0.0f,	// IK_FINGER
; 249  : 		0.0f,	// IK_BALL
; 250  : 		0.0f,	// IK_PET
; 251  : 		0.0f,	// IK_ARROW
; 252  : 		0.0f};	// IK_SARROW
; 253  : 
; 254  : 	static FLOAT vPartsPower[ES_COUNT] = {
; 255  : 		0.0f,	// ES_PRMWEAPON
; 256  : 		0.3f,	// ES_SNDWEAPON
; 257  : 		0.0f,	// ES_LONGWEAPON
; 258  : 		0.2f,	// ES_HEAD
; 259  : 		0.0f,	// ES_BACK
; 260  : 		0.3f,	// ES_BODY
; 261  : 		0.25f,	// ES_PANTS
; 262  : 		0.15f,	// ES_FOOT
; 263  : 		0.1f,	// ES_HAND
; 264  : 		0.0f,	// ES_NECK
; 265  : 		0.0f,	// ES_LFINGER
; 266  : 		0.0f,	// ES_RFINGER
; 267  : 		0.0f,	// ES_LEAR
; 268  : 		0.0f,	// ES_REAR
; 269  : 		0.0f};	// ES_FACE
; 270  : 
; 271  : 	if( m_pTITEM->m_bPrmSlotID >= ES_COUNT ||
; 272  : 		vPartsPower[m_pTITEM->m_bPrmSlotID] == 0.0f ||
; 273  : 		m_pTITEM->m_bKind >= IK_HP ||
; 274  : 		vPowerRate[m_pTITEM->m_bKind] == 0.0f )

  00006	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00009	8a 41 29	 mov	 al, BYTE PTR [ecx+41]
  0000c	3c 13		 cmp	 al, 19			; 00000013H
  0000e	0f 83 f6 00 00
	00		 jae	 $L175461
  00014	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@00000000
  0001a	0f b6 c0	 movzx	 eax, al
  0001d	d9 04 85 00 00
	00 00		 fld	 DWORD PTR ?vPartsPower@?1??GetShieldPowerLevel@CTItem@@QAEEXZ@4PAMA[eax*4]
  00024	da e9		 fucompp
  00026	df e0		 fnstsw	 ax
  00028	f6 c4 44	 test	 ah, 68			; 00000044H
  0002b	0f 8b d9 00 00
	00		 jnp	 $L175461
  00031	8a 49 03	 mov	 cl, BYTE PTR [ecx+3]
  00034	80 f9 1a	 cmp	 cl, 26			; 0000001aH
  00037	0f 83 cd 00 00
	00		 jae	 $L175461
  0003d	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@00000000
  00043	0f b6 c9	 movzx	 ecx, cl
  00046	d9 04 8d 00 00
	00 00		 fld	 DWORD PTR ?vPowerRate@?1??GetShieldPowerLevel@CTItem@@QAEEXZ@4PAMA[ecx*4]
  0004d	da e9		 fucompp
  0004f	df e0		 fnstsw	 ax
  00051	f6 c4 44	 test	 ah, 68			; 00000044H
  00054	0f 8b b0 00 00
	00		 jnp	 $L175461
  0005a	57		 push	 edi

; 276  : 
; 277  : 	FLOAT fLevelConst = 1.0f / logf(_AtlModule.GetFormulaRateX(FTYPE_1ST));

  0005b	6a 22		 push	 34			; 00000022H
  0005d	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?_AtlModule@@3VCTMapSvrModule@@A
  00062	e8 00 00 00 00	 call	 ?GetFormulaRateX@CTMapSvrModule@@QAEME@Z ; CTMapSvrModule::GetFormulaRateX
  00067	d9 ed		 fldln2
  00069	d9 c9		 fxch	 ST(1)

; 278  : 	FLOAT fItemRate = _AtlModule.GetFormulaRateX(FTYPE_ITEMPOWER);

  0006b	6a 15		 push	 21			; 00000015H
  0006d	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?_AtlModule@@3VCTMapSvrModule@@A
  00072	d9 f1		 fyl2x
  00074	d8 3d 00 00 00
	00		 fdivr	 DWORD PTR __real@3f800000
  0007a	d9 5c 24 10	 fstp	 DWORD PTR _fLevelConst$[esp+24]
  0007e	e8 00 00 00 00	 call	 ?GetFormulaRateX@CTMapSvrModule@@QAEME@Z ; CTMapSvrModule::GetFormulaRateX
  00083	d9 5c 24 08	 fstp	 DWORD PTR _fItemRate$[esp+20]

; 279  : 	DWORD dwDP = GetDefendPower() + GetMagicDefPower();

  00087	8b ce		 mov	 ecx, esi
  00089	e8 00 00 00 00	 call	 ?GetMagicDefPower@CTItem@@QAEKXZ ; CTItem::GetMagicDefPower
  0008e	8b ce		 mov	 ecx, esi
  00090	8b f8		 mov	 edi, eax
  00092	e8 00 00 00 00	 call	 ?GetDefendPower@CTItem@@QAEKXZ ; CTItem::GetDefendPower

; 280  : 
; 281  : 	if( m_pTITEM->m_bType == IT_SHIELD )

  00097	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0009a	03 f8		 add	 edi, eax
  0009c	80 7a 02 06	 cmp	 BYTE PTR [edx+2], 6
  000a0	75 10		 jne	 SHORT $L175465

; 282  : 		dwDP += m_pTITEMATTR->m_wDP + m_pTITEMATTR->m_wMDP;

  000a2	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  000a5	0f b7 50 08	 movzx	 edx, WORD PTR [eax+8]
  000a9	0f b7 48 0e	 movzx	 ecx, WORD PTR [eax+14]
  000ad	03 d7		 add	 edx, edi
  000af	8d 3c 0a	 lea	 edi, DWORD PTR [edx+ecx]
$L175465:

; 283  : 
; 284  : 	fItemRate = FLOAT(dwDP) / (vPowerRate[m_pTITEM->m_bKind] * vPartsPower[m_pTITEM->m_bPrmSlotID] * fItemRate);
; 285  : 	fItemRate = logf(fItemRate) * fLevelConst + 1;

  000b2	85 ff		 test	 edi, edi
  000b4	8b 76 14	 mov	 esi, DWORD PTR [esi+20]
  000b7	89 7c 24 10	 mov	 DWORD PTR tv278[esp+20], edi
  000bb	db 44 24 10	 fild	 DWORD PTR tv278[esp+20]
  000bf	7d 06		 jge	 SHORT $L183972
  000c1	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$L183972:
  000c7	0f b6 46 29	 movzx	 eax, BYTE PTR [esi+41]
  000cb	0f b6 4e 03	 movzx	 ecx, BYTE PTR [esi+3]
  000cf	d9 04 85 00 00
	00 00		 fld	 DWORD PTR ?vPartsPower@?1??GetShieldPowerLevel@CTItem@@QAEEXZ@4PAMA[eax*4]
  000d6	d8 0c 8d 00 00
	00 00		 fmul	 DWORD PTR ?vPowerRate@?1??GetShieldPowerLevel@CTItem@@QAEEXZ@4PAMA[ecx*4]
  000dd	d8 4c 24 08	 fmul	 DWORD PTR _fItemRate$[esp+20]
  000e1	de f9		 fdivp	 ST(1), ST(0)
  000e3	d9 ed		 fldln2
  000e5	d9 c9		 fxch	 ST(1)
  000e7	d9 f1		 fyl2x
  000e9	d8 4c 24 0c	 fmul	 DWORD PTR _fLevelConst$[esp+20]
  000ed	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@3f800000

; 286  : 
; 287  : 	return max( BYTE(fItemRate), 1);

  000f3	e8 00 00 00 00	 call	 __ftol2
  000f8	3c 01		 cmp	 al, 1
  000fa	5f		 pop	 edi
  000fb	0f b6 c0	 movzx	 eax, al
  000fe	77 0c		 ja	 SHORT $L175455
  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	5e		 pop	 esi

; 288  : }

  00106	83 c4 0c	 add	 esp, 12			; 0000000cH
  00109	c3		 ret	 0
$L175461:

; 275  : 		return BYTE(1);

  0010a	b0 01		 mov	 al, 1
$L175455:
  0010c	5e		 pop	 esi

; 288  : }

  0010d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00110	c3		 ret	 0
?GetShieldPowerLevel@CTItem@@QAEEXZ ENDP		; CTItem::GetShieldPowerLevel
_TEXT	ENDS
PUBLIC	?GetPowerLevel@CTItem@@QAEEXZ			; CTItem::GetPowerLevel
; Function compile flags: /Ogty
;	COMDAT ?GetPowerLevel@CTItem@@QAEEXZ
_TEXT	SEGMENT
$T184038 = -8						; size = 1
_finder$184018 = -4					; size = 4
?GetPowerLevel@CTItem@@QAEEXZ PROC NEAR			; CTItem::GetPowerLevel, COMDAT
; _this$ = ecx

; 291  : {

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	57		 push	 edi

; 292  : 	if( !m_pTITEM || !m_pTITEMATTR )

  00008	8b 7e 14	 mov	 edi, DWORD PTR [esi+20]
  0000b	85 ff		 test	 edi, edi
  0000d	0f 84 aa 00 00
	00		 je	 $L175470
  00013	8b 5e 18	 mov	 ebx, DWORD PTR [esi+24]
  00016	85 db		 test	 ebx, ebx
  00018	0f 84 9f 00 00
	00		 je	 $L175470

; 294  : 
; 295  : 	if( GetMagicValue(MTYPE_PAP) ||
; 296  : 		GetMagicValue(MTYPE_LAP) ||
; 297  : 		GetMagicValue(MTYPE_PDP) ||
; 298  : 		GetMagicValue(MTYPE_MAP) ||
; 299  : 		GetMagicValue(MTYPE_MDP) )

  0001e	8d 44 24 0c	 lea	 eax, DWORD PTR $T184038[esp+20]
  00022	50		 push	 eax
  00023	8d 4c 24 14	 lea	 ecx, DWORD PTR _finder$184018[esp+24]
  00027	51		 push	 ecx
  00028	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0002b	c6 44 24 14 07	 mov	 BYTE PTR $T184038[esp+28], 7
  00030	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::find
  00035	8b 44 24 10	 mov	 eax, DWORD PTR _finder$184018[esp+20]
  00039	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  0003c	74 10		 je	 SHORT $L184040
  0003e	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  00041	52		 push	 edx
  00042	8b ce		 mov	 ecx, esi
  00044	e8 00 00 00 00	 call	 ?GetMagicValue@CTItem@@QAEGPAUtagTMAGIC@@@Z ; CTItem::GetMagicValue
  00049	66 85 c0	 test	 ax, ax
  0004c	75 42		 jne	 SHORT $L175472
$L184040:
  0004e	6a 09		 push	 9
  00050	8b ce		 mov	 ecx, esi
  00052	e8 00 00 00 00	 call	 ?GetMagicValue@CTItem@@QAEGE@Z ; CTItem::GetMagicValue
  00057	66 85 c0	 test	 ax, ax
  0005a	75 34		 jne	 SHORT $L175472
  0005c	6a 08		 push	 8
  0005e	8b ce		 mov	 ecx, esi
  00060	e8 00 00 00 00	 call	 ?GetMagicValue@CTItem@@QAEGE@Z ; CTItem::GetMagicValue
  00065	66 85 c0	 test	 ax, ax
  00068	75 26		 jne	 SHORT $L175472
  0006a	6a 11		 push	 17			; 00000011H
  0006c	8b ce		 mov	 ecx, esi
  0006e	e8 00 00 00 00	 call	 ?GetMagicValue@CTItem@@QAEGE@Z ; CTItem::GetMagicValue
  00073	66 85 c0	 test	 ax, ax
  00076	75 18		 jne	 SHORT $L175472
  00078	6a 10		 push	 16			; 00000010H
  0007a	8b ce		 mov	 ecx, esi
  0007c	e8 00 00 00 00	 call	 ?GetMagicValue@CTItem@@QAEGE@Z ; CTItem::GetMagicValue
  00081	66 85 c0	 test	 ax, ax
  00084	75 0a		 jne	 SHORT $L175472

; 307  : 		}
; 308  : 	}
; 309  : 	else
; 310  : 		return m_pTITEMATTR->m_bGrade;

  00086	8a 43 03	 mov	 al, BYTE PTR [ebx+3]
  00089	5f		 pop	 edi
  0008a	5e		 pop	 esi
  0008b	5b		 pop	 ebx

; 311  : 
; 312  : 	return BYTE(1);
; 313  : }

  0008c	83 c4 08	 add	 esp, 8
  0008f	c3		 ret	 0
$L175472:

; 300  : 	{
; 301  : 		switch(m_pTITEM->m_bType)

  00090	0f b6 47 02	 movzx	 eax, BYTE PTR [edi+2]
  00094	48		 dec	 eax
  00095	83 f8 05	 cmp	 eax, 5
  00098	77 23		 ja	 SHORT $L175470
  0009a	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L184041[eax*4]
$L175477:

; 302  : 		{
; 303  : 		case IT_WEAPON		:
; 304  : 		case IT_LONG		: return GetWeaponPowerLevel();

  000a1	8b ce		 mov	 ecx, esi
  000a3	e8 00 00 00 00	 call	 ?GetWeaponPowerLevel@CTItem@@QAEEXZ ; CTItem::GetWeaponPowerLevel
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx

; 311  : 
; 312  : 	return BYTE(1);
; 313  : }

  000ab	83 c4 08	 add	 esp, 8
  000ae	c3		 ret	 0
$L175478:

; 305  : 		case IT_DEFENSIVE	:
; 306  : 		case IT_SHIELD		: return GetShieldPowerLevel();

  000af	8b ce		 mov	 ecx, esi
  000b1	e8 00 00 00 00	 call	 ?GetShieldPowerLevel@CTItem@@QAEEXZ ; CTItem::GetShieldPowerLevel
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx

; 311  : 
; 312  : 	return BYTE(1);
; 313  : }

  000b9	83 c4 08	 add	 esp, 8
  000bc	c3		 ret	 0
$L175470:
  000bd	5f		 pop	 edi
  000be	5e		 pop	 esi

; 293  : 		return BYTE(1);

  000bf	b0 01		 mov	 al, 1
  000c1	5b		 pop	 ebx

; 311  : 
; 312  : 	return BYTE(1);
; 313  : }

  000c2	83 c4 08	 add	 esp, 8
  000c5	c3		 ret	 0
  000c6	8b ff		 npad	 2
$L184041:
  000c8	00 00 00 00	 DD	 $L175477
  000cc	00 00 00 00	 DD	 $L175478
  000d0	00 00 00 00	 DD	 $L175470
  000d4	00 00 00 00	 DD	 $L175477
  000d8	00 00 00 00	 DD	 $L175470
  000dc	00 00 00 00	 DD	 $L175478
?GetPowerLevel@CTItem@@QAEEXZ ENDP			; CTItem::GetPowerLevel
_TEXT	ENDS
PUBLIC	?GetPrice@CTItem@@QAEKXZ			; CTItem::GetPrice
PUBLIC	__real@3fefae147ae147ae
EXTRN	?FindTLevel@CTMapSvrModule@@QAEPAUtagTLEVEL@@E@Z:NEAR ; CTMapSvrModule::FindTLevel
;	COMDAT __real@3fefae147ae147ae
CONST	SEGMENT
__real@3fefae147ae147ae DQ 03fefae147ae147aer	; 0.99
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ?GetPrice@CTItem@@QAEKXZ
_TEXT	SEGMENT
tv152 = -4						; size = 4
_bGrade$ = -4						; size = 1
?GetPrice@CTItem@@QAEKXZ PROC NEAR			; CTItem::GetPrice, COMDAT
; _this$ = ecx

; 545  : {

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 546  : 	if(!m_pTITEM || !m_pTITEMATTR)

  00004	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00007	85 c0		 test	 eax, eax
  00009	74 52		 je	 SHORT $L175599
  0000b	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0000e	85 c9		 test	 ecx, ecx
  00010	74 4b		 je	 SHORT $L175599

; 548  : 
; 549  : 	BYTE bGrade = 0;
; 550  : 	if(m_pTITEM->m_wAttrID)

  00012	66 83 78 04 00	 cmp	 WORD PTR [eax+4], 0
  00017	74 09		 je	 SHORT $L175601

; 551  : 		bGrade = GetPowerLevel();

  00019	8b ce		 mov	 ecx, esi
  0001b	e8 00 00 00 00	 call	 ?GetPowerLevel@CTItem@@QAEEXZ ; CTItem::GetPowerLevel

; 552  : 	else

  00020	eb 03		 jmp	 SHORT $L184049
$L175601:

; 553  : 		bGrade = m_pTITEM->m_bDefaultLevel;

  00022	8a 40 2e	 mov	 al, BYTE PTR [eax+46]
$L184049:
  00025	88 44 24 04	 mov	 BYTE PTR _bGrade$[esp+8], al

; 554  : 
; 555  : 	return DWORD(_AtlModule.FindTLevel(bGrade)->m_dwMoney * m_pTITEM->m_fPrice + 0.99);

  00029	8b 4c 24 04	 mov	 ecx, DWORD PTR _bGrade$[esp+8]
  0002d	51		 push	 ecx
  0002e	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?_AtlModule@@3VCTMapSvrModule@@A
  00033	e8 00 00 00 00	 call	 ?FindTLevel@CTMapSvrModule@@QAEPAUtagTLEVEL@@E@Z ; CTMapSvrModule::FindTLevel
  00038	db 40 14	 fild	 DWORD PTR [eax+20]
  0003b	8b 50 14	 mov	 edx, DWORD PTR [eax+20]
  0003e	85 d2		 test	 edx, edx
  00040	7d 06		 jge	 SHORT $L184048
  00042	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$L184048:
  00048	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0004b	d8 48 10	 fmul	 DWORD PTR [eax+16]
  0004e	5e		 pop	 esi
  0004f	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fefae147ae147ae

; 556  : }

  00055	83 c4 04	 add	 esp, 4

; 554  : 
; 555  : 	return DWORD(_AtlModule.FindTLevel(bGrade)->m_dwMoney * m_pTITEM->m_fPrice + 0.99);

  00058	e9 00 00 00 00	 jmp	 __ftol2
$L175599:

; 547  : 		return 0;

  0005d	33 c0		 xor	 eax, eax
  0005f	5e		 pop	 esi

; 556  : }

  00060	59		 pop	 ecx
  00061	c3		 ret	 0
?GetPrice@CTItem@@QAEKXZ ENDP				; CTItem::GetPrice
_TEXT	ENDS
PUBLIC	?GetPvPoint@CTItem@@QAEKXZ			; CTItem::GetPvPoint
; Function compile flags: /Ogty
;	COMDAT ?GetPvPoint@CTItem@@QAEKXZ
_TEXT	SEGMENT
tv152 = -4						; size = 4
_bGrade$ = -4						; size = 1
?GetPvPoint@CTItem@@QAEKXZ PROC NEAR			; CTItem::GetPvPoint, COMDAT
; _this$ = ecx

; 559  : {

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 560  : 	if(!m_pTITEM || !m_pTITEMATTR)

  00004	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00007	85 c0		 test	 eax, eax
  00009	74 52		 je	 SHORT $L175607
  0000b	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0000e	85 c9		 test	 ecx, ecx
  00010	74 4b		 je	 SHORT $L175607

; 562  : 
; 563  : 	BYTE bGrade = 0;
; 564  : 	if(m_pTITEM->m_wAttrID)

  00012	66 83 78 04 00	 cmp	 WORD PTR [eax+4], 0
  00017	74 09		 je	 SHORT $L175609

; 565  : 		bGrade = GetPowerLevel();

  00019	8b ce		 mov	 ecx, esi
  0001b	e8 00 00 00 00	 call	 ?GetPowerLevel@CTItem@@QAEEXZ ; CTItem::GetPowerLevel

; 566  : 	else

  00020	eb 03		 jmp	 SHORT $L184055
$L175609:

; 567  : 		bGrade = m_pTITEM->m_bDefaultLevel;

  00022	8a 40 2e	 mov	 al, BYTE PTR [eax+46]
$L184055:
  00025	88 44 24 04	 mov	 BYTE PTR _bGrade$[esp+8], al

; 568  : 
; 569  : 	return DWORD(_AtlModule.FindTLevel(bGrade)->m_dwPvPMoney * m_pTITEM->m_fPrice + 0.99);

  00029	8b 4c 24 04	 mov	 ecx, DWORD PTR _bGrade$[esp+8]
  0002d	51		 push	 ecx
  0002e	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?_AtlModule@@3VCTMapSvrModule@@A
  00033	e8 00 00 00 00	 call	 ?FindTLevel@CTMapSvrModule@@QAEPAUtagTLEVEL@@E@Z ; CTMapSvrModule::FindTLevel
  00038	db 40 34	 fild	 DWORD PTR [eax+52]
  0003b	8b 50 34	 mov	 edx, DWORD PTR [eax+52]
  0003e	85 d2		 test	 edx, edx
  00040	7d 06		 jge	 SHORT $L184054
  00042	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$L184054:
  00048	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  0004b	d8 48 10	 fmul	 DWORD PTR [eax+16]
  0004e	5e		 pop	 esi
  0004f	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fefae147ae147ae

; 570  : }

  00055	83 c4 04	 add	 esp, 4

; 568  : 
; 569  : 	return DWORD(_AtlModule.FindTLevel(bGrade)->m_dwPvPMoney * m_pTITEM->m_fPrice + 0.99);

  00058	e9 00 00 00 00	 jmp	 __ftol2
$L175607:

; 561  : 		return 0;

  0005d	33 c0		 xor	 eax, eax
  0005f	5e		 pop	 esi

; 570  : }

  00060	59		 pop	 ecx
  00061	c3		 ret	 0
?GetPvPoint@CTItem@@QAEKXZ ENDP				; CTItem::GetPvPoint
_TEXT	ENDS
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
EXTRN	??0exception@@QAE@XZ:NEAR			; exception::exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T184158 DD	0ffffffffH
	DD	FLAT:$L184059
$T184156 DD	019930520H
	DD	01H
	DD	FLAT:$T184158
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 19   : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	89 74 24 04	 mov	 DWORD PTR _this$[esp+20], esi
  0001d	e8 00 00 00 00	 call	 ??0exception@@QAE@XZ	; exception::exception
  00022	33 c0		 xor	 eax, eax
  00024	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  0002d	6a ff		 push	 -1
  0002f	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00032	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00039	50		 push	 eax
  0003a	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  0003e	88 41 04	 mov	 BYTE PTR [ecx+4], al
  00041	8b 44 24 20	 mov	 eax, DWORD PTR __Message$[esp+24]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 20   : 		}

  0004b	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  0004f	8b c6		 mov	 eax, esi
  00051	5e		 pop	 esi
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L184059:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T184156
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_Glength_error@std@@UAEPAXI@Z			; std::length_error::`scalar deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:NEAR		; std::length_error::`vector deleting destructor'
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 95   : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@

; 96   : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
; Function compile flags: /Ogty
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC NEAR		; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1length_error@std@@UAE@XZ ; std::length_error::~length_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L184168
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L184168:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC NEAR			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 99   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L184263
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L184263:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
_TEXT	ENDS
PUBLIC	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
PUBLIC	??_7out_of_range@std@@6B@			; std::out_of_range::`vftable'
PUBLIC	??_Gout_of_range@std@@UAEPAXI@Z			; std::out_of_range::`scalar deleting destructor'
EXTRN	??_Eout_of_range@std@@UAEPAXI@Z:NEAR		; std::out_of_range::`vector deleting destructor'
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT
??_7out_of_range@std@@6B@ DD FLAT:??_Eout_of_range@std@@UAEPAXI@Z ; std::out_of_range::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx

; 118  : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7out_of_range@std@@6B@

; 119  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::out_of_range::out_of_range
_TEXT	ENDS
PUBLIC	??1out_of_range@std@@UAE@XZ			; std::out_of_range::~out_of_range
; Function compile flags: /Ogty
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gout_of_range@std@@UAEPAXI@Z PROC NEAR		; std::out_of_range::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1out_of_range@std@@UAE@XZ ; std::out_of_range::~out_of_range
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L184282
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L184282:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Gout_of_range@std@@UAEPAXI@Z ENDP			; std::out_of_range::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT
??1out_of_range@std@@UAE@XZ PROC NEAR			; std::out_of_range::~out_of_range, COMDAT
; _this$ = ecx

; 122  : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L184373
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L184373:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1out_of_range@std@@UAE@XZ ENDP			; std::out_of_range::~out_of_range
_TEXT	ENDS
PUBLIC	?GetRepairCost@CTItem@@QAEKXZ			; CTItem::GetRepairCost
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\titem.cpp
;	COMDAT ?GetRepairCost@CTItem@@QAEKXZ
_TEXT	SEGMENT
$T184394 = -5						; size = 1
tv235 = -4						; size = 4
tv233 = -4						; size = 4
tv226 = -4						; size = 4
tv224 = -4						; size = 4
_it$175434 = -4						; size = 4
?GetRepairCost@CTItem@@QAEKXZ PROC NEAR			; CTItem::GetRepairCost, COMDAT
; _this$ = ecx

; 160  : {

  00000	83 ec 08	 sub	 esp, 8
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 161  : 	LPTLEVEL pLevel = _AtlModule.FindTLevel(GetPowerLevel());

  00006	e8 00 00 00 00	 call	 ?GetPowerLevel@CTItem@@QAEEXZ ; CTItem::GetPowerLevel
  0000b	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?_AtlModule@@3VCTMapSvrModule@@A
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 ?FindTLevel@CTMapSvrModule@@QAEPAUtagTLEVEL@@E@Z ; CTMapSvrModule::FindTLevel

; 162  : 	if(!pLevel)

  00016	85 c0		 test	 eax, eax
  00018	75 05		 jne	 SHORT $L175430
  0001a	5e		 pop	 esi

; 172  : 	}
; 173  : }

  0001b	83 c4 08	 add	 esp, 8
  0001e	c3		 ret	 0
$L175430:

; 163  : 		return 0;
; 164  : 	else
; 165  : 	{
; 166  : 		DWORD dwCost = (DWORD)max(1, pLevel->m_dwRepairCost * (m_dwDuraMax - m_dwDuraCur) * m_pTITEM->m_fPrice / m_dwDuraMax);

  0001f	8b 4e 34	 mov	 ecx, DWORD PTR [esi+52]
  00022	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00025	53		 push	 ebx
  00026	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  00029	57		 push	 edi
  0002a	8b 78 28	 mov	 edi, DWORD PTR [eax+40]
  0002d	8b c1		 mov	 eax, ecx
  0002f	2b c2		 sub	 eax, edx
  00031	0f af c7	 imul	 eax, edi
  00034	85 c0		 test	 eax, eax
  00036	89 44 24 10	 mov	 DWORD PTR tv235[esp+20], eax
  0003a	db 44 24 10	 fild	 DWORD PTR tv235[esp+20]
  0003e	7d 06		 jge	 SHORT $L184435
  00040	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$L184435:
  00046	85 c9		 test	 ecx, ecx
  00048	d8 4b 10	 fmul	 DWORD PTR [ebx+16]
  0004b	89 4c 24 10	 mov	 DWORD PTR tv233[esp+20], ecx
  0004f	db 44 24 10	 fild	 DWORD PTR tv233[esp+20]
  00053	7d 06		 jge	 SHORT $L184436
  00055	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$L184436:
  0005b	de f9		 fdivp	 ST(1), ST(0)
  0005d	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f800000
  00063	df e0		 fnstsw	 ax
  00065	f6 c4 05	 test	 ah, 5
  00068	7a 08		 jp	 SHORT $L184392
  0006a	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f800000
  00070	eb 33		 jmp	 SHORT $L184393
$L184392:
  00072	8b 46 34	 mov	 eax, DWORD PTR [esi+52]
  00075	8b c8		 mov	 ecx, eax
  00077	2b ca		 sub	 ecx, edx
  00079	0f af cf	 imul	 ecx, edi
  0007c	85 c9		 test	 ecx, ecx
  0007e	89 4c 24 10	 mov	 DWORD PTR tv226[esp+20], ecx
  00082	db 44 24 10	 fild	 DWORD PTR tv226[esp+20]
  00086	7d 06		 jge	 SHORT $L184437
  00088	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$L184437:
  0008e	85 c0		 test	 eax, eax
  00090	d8 4b 10	 fmul	 DWORD PTR [ebx+16]
  00093	89 44 24 10	 mov	 DWORD PTR tv224[esp+20], eax
  00097	db 44 24 10	 fild	 DWORD PTR tv224[esp+20]
  0009b	7d 06		 jge	 SHORT $L184438
  0009d	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$L184438:
  000a3	de f9		 fdivp	 ST(1), ST(0)
$L184393:
  000a5	e8 00 00 00 00	 call	 __ftol2

; 167  : 		MAPTMAGIC::iterator it = m_mapTMAGIC.find(MTYPE_REPCOST);

  000aa	8d 54 24 0f	 lea	 edx, DWORD PTR $T184394[esp+20]
  000ae	8b f8		 mov	 edi, eax
  000b0	52		 push	 edx
  000b1	8d 44 24 14	 lea	 eax, DWORD PTR _it$175434[esp+24]
  000b5	50		 push	 eax
  000b6	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  000b9	c6 44 24 17 70	 mov	 BYTE PTR $T184394[esp+28], 112 ; 00000070H
  000be	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::find

; 168  : 		if(it!=m_mapTMAGIC.end())

  000c3	8b 44 24 10	 mov	 eax, DWORD PTR _it$175434[esp+20]
  000c7	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  000ca	74 15		 je	 SHORT $L175438

; 169  : 			dwCost = dwCost * (*it).second->m_wValue / 100;

  000cc	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000cf	0f b7 11	 movzx	 edx, WORD PTR [ecx]
  000d2	0f af d7	 imul	 edx, edi
  000d5	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  000da	f7 e2		 mul	 edx
  000dc	c1 ea 05	 shr	 edx, 5
  000df	8b fa		 mov	 edi, edx
$L175438:

; 170  : 
; 171  : 		return dwCost;

  000e1	8b c7		 mov	 eax, edi
  000e3	5f		 pop	 edi
  000e4	5b		 pop	 ebx
  000e5	5e		 pop	 esi

; 172  : 	}
; 173  : }

  000e6	83 c4 08	 add	 esp, 8
  000e9	c3		 ret	 0
?GetRepairCost@CTItem@@QAEKXZ ENDP			; CTItem::GetRepairCost
_TEXT	ENDS
PUBLIC	?_Insert@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBEPAUtagTMAGIC@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Insert
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVexception@@@8				; exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	??0exception@@QAE@ABV0@@Z:NEAR			; exception::exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
xdata$x	SEGMENT
$T184813 DD	0ffffffffH
	DD	FLAT:$L184444
$T184808 DD	019930520H
	DD	01H
	DD	FLAT:$T184813
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
CONST	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT
??_R0?AVexception@@@8 DD FLAT:??_7type_info@@6B@	; exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@@', 00H
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?_Insert@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBEPAUtagTMAGIC@@@2@@Z
_TEXT	SEGMENT
$T184443 = -80						; size = 28
$T184442 = -52						; size = 40
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Newnode$ = 20						; size = 4
__Val$ = 20						; size = 4
?_Insert@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBEPAUtagTMAGIC@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Insert, COMDAT
; _this$ = ecx

; 911  : 		{	// add node with value next to _Wherenode, to left if _Addnode

  00000	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00006	6a ff		 push	 -1
  00008	68 00 00 00 00	 push	 __ehhandler$?_Insert@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBEPAUtagTMAGIC@@@2@@Z
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 44	 sub	 esp, 68			; 00000044H
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8b f9		 mov	 edi, ecx

; 912  : 		if (max_size() - 1 <= _Mysize)

  0001c	81 7f 08 fe ff
	ff 1f		 cmp	 DWORD PTR [edi+8], 536870910 ; 1ffffffeH
  00023	72 4c		 jb	 SHORT $L176327

; 913  : 			_THROW(length_error, "map/set<T> too long");

  00025	6a 13		 push	 19			; 00000013H
  00027	33 f6		 xor	 esi, esi
  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
  0002e	8d 4c 24 10	 lea	 ecx, DWORD PTR $T184443[esp+96]
  00032	c7 44 24 28 0f
	00 00 00	 mov	 DWORD PTR $T184443[esp+120], 15 ; 0000000fH
  0003a	89 74 24 24	 mov	 DWORD PTR $T184443[esp+116], esi
  0003e	c6 44 24 14 00	 mov	 BYTE PTR $T184443[esp+100], 0
  00043	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00048	8d 44 24 08	 lea	 eax, DWORD PTR $T184443[esp+88]
  0004c	50		 push	 eax
  0004d	8d 4c 24 28	 lea	 ecx, DWORD PTR $T184442[esp+92]
  00051	89 74 24 58	 mov	 DWORD PTR __$EHRec$[esp+100], esi
  00055	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0005a	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVlength_error@std@@
  0005f	8d 4c 24 28	 lea	 ecx, DWORD PTR $T184442[esp+92]
  00063	51		 push	 ecx
  00064	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR $T184442[esp+96], OFFSET FLAT:??_7length_error@std@@6B@
  0006c	e8 00 00 00 00	 call	 __CxxThrowException@8
$L184814:
$L176327:

; 914  : 		_Nodeptr _Newnode = _Buynode(_Myhead, _Wherenode, _Myhead,
; 915  : 			_Val, _Red);

  00071	8b 54 24 68	 mov	 edx, DWORD PTR __Val$[esp+84]
  00075	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00078	8b 74 24 64	 mov	 esi, DWORD PTR __Wherenode$[esp+84]
  0007c	53		 push	 ebx
  0007d	6a 00		 push	 0
  0007f	52		 push	 edx
  00080	50		 push	 eax
  00081	56		 push	 esi
  00082	50		 push	 eax
  00083	8b cf		 mov	 ecx, edi
  00085	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBEPAUtagTMAGIC@@@2@D@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Buynode

; 916  : 
; 917  : 		++_Mysize;

  0008a	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0008d	8b c8		 mov	 ecx, eax

; 918  : 		if (_Wherenode == _Myhead)

  0008f	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00092	43		 inc	 ebx
  00093	3b f0		 cmp	 esi, eax
  00095	89 4c 24 6c	 mov	 DWORD PTR __Newnode$[esp+88], ecx
  00099	89 5f 08	 mov	 DWORD PTR [edi+8], ebx
  0009c	75 10		 jne	 SHORT $L176333

; 919  : 			{	// first node in tree, just set head values
; 920  : 			_Root() = _Newnode;

  0009e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 921  : 			_Lmost() = _Newnode, _Rmost() = _Newnode;

  000a1	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a4	89 08		 mov	 DWORD PTR [eax], ecx
  000a6	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  000a9	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 922  : 			}
; 923  : 		else if (_Addleft)

  000ac	eb 23		 jmp	 SHORT $L176338
$L176333:
  000ae	8a 44 24 64	 mov	 al, BYTE PTR __Addleft$[esp+88]
  000b2	84 c0		 test	 al, al
  000b4	74 0d		 je	 SHORT $L176335

; 924  : 			{	// add to left of _Wherenode
; 925  : 			_Left(_Wherenode) = _Newnode;

  000b6	89 0e		 mov	 DWORD PTR [esi], ecx

; 926  : 			if (_Wherenode == _Lmost())

  000b8	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000bb	3b 30		 cmp	 esi, DWORD PTR [eax]
  000bd	75 12		 jne	 SHORT $L176338

; 927  : 				_Lmost() = _Newnode;

  000bf	89 08		 mov	 DWORD PTR [eax], ecx

; 928  : 			}
; 929  : 		else

  000c1	eb 0e		 jmp	 SHORT $L176338
$L176335:

; 930  : 			{	// add to right of _Wherenode
; 931  : 			_Right(_Wherenode) = _Newnode;

  000c3	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 932  : 			if (_Wherenode == _Rmost())

  000c6	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000c9	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  000cc	75 03		 jne	 SHORT $L176338

; 933  : 				_Rmost() = _Newnode;

  000ce	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$L176338:

; 934  : 			}
; 935  : 
; 936  : 		for (_Nodeptr _Pnode = _Newnode; _Color(_Parent(_Pnode)) == _Red; )

  000d1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d4	80 7a 14 00	 cmp	 BYTE PTR [edx+20], 0
  000d8	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  000db	8b f1		 mov	 esi, ecx
  000dd	b3 01		 mov	 bl, 1
  000df	0f 85 a5 00 00
	00		 jne	 $L176342
  000e5	55		 push	 ebp
$L176341:

; 937  : 			if (_Parent(_Pnode) == _Left(_Parent(_Parent(_Pnode))))

  000e6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e8	8b 69 04	 mov	 ebp, DWORD PTR [ecx+4]
  000eb	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  000ee	3b ca		 cmp	 ecx, edx
  000f0	75 50		 jne	 SHORT $L176343

; 938  : 				{	// fixup red-red in left subtree
; 939  : 				_Wherenode = _Right(_Parent(_Parent(_Pnode)));

  000f2	8b 55 08	 mov	 edx, DWORD PTR [ebp+8]

; 940  : 				if (_Color(_Wherenode) == _Red)

  000f5	80 7a 14 00	 cmp	 BYTE PTR [edx+20], 0
  000f9	75 18		 jne	 SHORT $L176344
$L184812:

; 941  : 					{	// parent has two red children, blacken both
; 942  : 					_Color(_Parent(_Pnode)) = _Black;

  000fb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fd	88 59 14	 mov	 BYTE PTR [ecx+20], bl

; 943  : 					_Color(_Wherenode) = _Black;

  00100	88 5a 14	 mov	 BYTE PTR [edx+20], bl

; 944  : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

  00103	8b 10		 mov	 edx, DWORD PTR [eax]
  00105	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00108	c6 41 14 00	 mov	 BYTE PTR [ecx+20], 0

; 945  : 					_Pnode = _Parent(_Parent(_Pnode));

  0010c	8b 10		 mov	 edx, DWORD PTR [eax]
  0010e	8b 72 04	 mov	 esi, DWORD PTR [edx+4]

; 946  : 					}
; 947  : 				else

  00111	eb 61		 jmp	 SHORT $L176349
$L176344:

; 948  : 					{	// parent has red and black children
; 949  : 					if (_Pnode == _Right(_Parent(_Pnode)))

  00113	3b 71 08	 cmp	 esi, DWORD PTR [ecx+8]
  00116	75 0a		 jne	 SHORT $L176346

; 950  : 						{	// rotate right child to left
; 951  : 						_Pnode = _Parent(_Pnode);

  00118	8b f1		 mov	 esi, ecx

; 952  : 						_Lrotate(_Pnode);

  0011a	56		 push	 esi
  0011b	8b cf		 mov	 ecx, edi
  0011d	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Lrotate
$L176346:

; 953  : 						}
; 954  : 					_Color(_Parent(_Pnode)) = _Black;	// propagate red up

  00122	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00125	88 58 14	 mov	 BYTE PTR [eax+20], bl

; 955  : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

  00128	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0012b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0012e	c6 42 14 00	 mov	 BYTE PTR [edx+20], 0

; 956  : 					_Rrotate(_Parent(_Parent(_Pnode)));

  00132	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00135	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00138	51		 push	 ecx
  00139	8b cf		 mov	 ecx, edi
  0013b	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Rrotate

; 957  : 					}
; 958  : 				}
; 959  : 			else

  00140	eb 32		 jmp	 SHORT $L176349
$L176343:

; 960  : 				{	// fixup red-red in right subtree
; 961  : 				_Wherenode = _Left(_Parent(_Parent(_Pnode)));
; 962  : 				if (_Color(_Wherenode) == _Red)

  00142	80 7a 14 00	 cmp	 BYTE PTR [edx+20], 0

; 963  : 					{	// parent has two red children, blacken both
; 964  : 					_Color(_Parent(_Pnode)) = _Black;
; 965  : 					_Color(_Wherenode) = _Black;
; 966  : 					_Color(_Parent(_Parent(_Pnode))) = _Red;
; 967  : 					_Pnode = _Parent(_Parent(_Pnode));
; 968  : 					}
; 969  : 				else

  00146	74 b3		 je	 SHORT $L184812

; 970  : 					{	// parent has red and black children
; 971  : 					if (_Pnode == _Left(_Parent(_Pnode)))

  00148	3b 31		 cmp	 esi, DWORD PTR [ecx]
  0014a	75 0a		 jne	 SHORT $L176350

; 972  : 						{	// rotate left child to right
; 973  : 						_Pnode = _Parent(_Pnode);

  0014c	8b f1		 mov	 esi, ecx

; 974  : 						_Rrotate(_Pnode);

  0014e	56		 push	 esi
  0014f	8b cf		 mov	 ecx, edi
  00151	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Rrotate
$L176350:

; 975  : 						}
; 976  : 					_Color(_Parent(_Pnode)) = _Black;	// propagate red up

  00156	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00159	88 58 14	 mov	 BYTE PTR [eax+20], bl

; 977  : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

  0015c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0015f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00162	c6 42 14 00	 mov	 BYTE PTR [edx+20], 0

; 978  : 					_Lrotate(_Parent(_Parent(_Pnode)));

  00166	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00169	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0016c	51		 push	 ecx
  0016d	8b cf		 mov	 ecx, edi
  0016f	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Lrotate
$L176349:
  00174	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00177	8a 4a 14	 mov	 cl, BYTE PTR [edx+20]
  0017a	84 c9		 test	 cl, cl
  0017c	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0017f	0f 84 61 ff ff
	ff		 je	 $L176341
  00185	8b 4c 24 70	 mov	 ecx, DWORD PTR __Newnode$[esp+92]
  00189	5d		 pop	 ebp
$L176342:

; 979  : 					}
; 980  : 				}
; 981  : 
; 982  : 		_Color(_Root()) = _Black;	// root is always black

  0018a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0018d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 983  : 		return (_TREE_ITERATOR(_Newnode));

  00190	8b 44 24 60	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+88]
  00194	88 5a 14	 mov	 BYTE PTR [edx+20], bl
  00197	5b		 pop	 ebx
  00198	89 08		 mov	 DWORD PTR [eax], ecx

; 984  : 		}

  0019a	8b 4c 24 4c	 mov	 ecx, DWORD PTR __$EHRec$[esp+88]
  0019e	5f		 pop	 edi
  0019f	5e		 pop	 esi
  001a0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001a7	83 c4 50	 add	 esp, 80			; 00000050H
  001aa	c2 10 00	 ret	 16			; 00000010H
$L184811:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L184444:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T184443[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Insert@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBEPAUtagTMAGIC@@@2@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T184808
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Insert@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBEPAUtagTMAGIC@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Insert
;	COMDAT xdata$x
xdata$x	SEGMENT
$T184919 DD	0ffffffffH
	DD	FLAT:$L184820
$T184917 DD	019930520H
	DD	01H
	DD	FLAT:$T184919
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC NEAR		; std::logic_error::logic_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 1c	 mov	 edi, DWORD PTR ___that$[esp+20]
  0001c	8b f1		 mov	 esi, ecx
  0001e	57		 push	 edi
  0001f	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00023	e8 00 00 00 00	 call	 ??0exception@@QAE@ABV0@@Z ; exception::exception
  00028	33 c0		 xor	 eax, eax
  0002a	6a ff		 push	 -1
  0002c	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00035	50		 push	 eax
  00036	83 c7 0c	 add	 edi, 12			; 0000000cH
  00039	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00040	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00043	57		 push	 edi
  00044	89 44 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], eax
  00048	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00050	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00054	5f		 pop	 edi
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L184820:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T184917
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Ogty
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC NEAR		; std::length_error::length_error, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IBEXXZ ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Xlen
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	SEGMENT
$T185045 DD	0ffffffffH
	DD	FLAT:$L184931
$T185042 DD	019930520H
	DD	01H
	DD	FLAT:$T185045
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
$T184930 = -80						; size = 28
$T184929 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IBEXXZ PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Xlen, COMDAT
; _this$ = ecx

; 883  : 		{	// report a length_error

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Xlen@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IBEXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 44	 sub	 esp, 68			; 00000044H

; 884  : 		_THROW(length_error, "vector<T> too long");

  00018	6a 12		 push	 18			; 00000012H
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001f	8d 4c 24 08	 lea	 ecx, DWORD PTR $T184930[esp+88]
  00023	c7 44 24 20 0f
	00 00 00	 mov	 DWORD PTR $T184930[esp+112], 15 ; 0000000fH
  0002b	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T184930[esp+108], 0
  00033	c6 44 24 0c 00	 mov	 BYTE PTR $T184930[esp+92], 0
  00038	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0003d	8d 04 24	 lea	 eax, DWORD PTR $T184930[esp+80]
  00040	50		 push	 eax
  00041	8d 4c 24 20	 lea	 ecx, DWORD PTR $T184929[esp+84]
  00045	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+92], 0
  0004d	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00052	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVlength_error@std@@
  00057	8d 4c 24 20	 lea	 ecx, DWORD PTR $T184929[esp+84]
  0005b	51		 push	 ecx
  0005c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T184929[esp+88], OFFSET FLAT:??_7length_error@std@@6B@
  00064	e8 00 00 00 00	 call	 __CxxThrowException@8
$L185046:
$L185044:
  00069	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L184931:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T184930[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xlen@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IBEXXZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T185042
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Xlen@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IBEXXZ ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Xlen
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
PUBLIC	??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ ; `string'
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::erase
PUBLIC	??0out_of_range@std@@QAE@ABV01@@Z		; std::out_of_range::out_of_range
PUBLIC	__TI3?AVout_of_range@std@@
PUBLIC	__CTA3?AVout_of_range@std@@
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
xdata$x	SEGMENT
$T185543 DD	0ffffffffH
	DD	FLAT:$L185058
$T185535 DD	019930520H
	DD	01H
	DD	FLAT:$T185543
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
CONST	SEGMENT
??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ DB 'invalid '
	DB	'map/set<T> iterator', 00H			; `string'
CONST	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT
__TI3?AVout_of_range@std@@ DD 00H
	DD	FLAT:??1out_of_range@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVout_of_range@std@@
xdata$x	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT
__CTA3?AVout_of_range@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
_DATA	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT
__Erasednode$ = -84					; size = 4
$T185053 = -80						; size = 28
$T185052 = -52						; size = 40
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::erase, COMDAT
; _this$ = ecx

; 590  : 		{	// erase element at _Where

  00000	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00006	6a ff		 push	 -1
  00008	68 00 00 00 00	 push	 __ehhandler$?erase@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z
  0000d	50		 push	 eax

; 591  : 		if (_Isnil(_Where._Mynode()))

  0000e	8b 44 24 14	 mov	 eax, DWORD PTR __Where$[esp+8]
  00012	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00019	83 ec 48	 sub	 esp, 72			; 00000048H
  0001c	55		 push	 ebp
  0001d	8b e9		 mov	 ebp, ecx
  0001f	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  00022	84 c9		 test	 cl, cl
  00024	56		 push	 esi
  00025	74 4c		 je	 SHORT $L176719

; 592  : 			_THROW(out_of_range, "invalid map/set<T> iterator");

  00027	6a 1b		 push	 27			; 0000001bH
  00029	33 f6		 xor	 esi, esi
  0002b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
  00030	8d 4c 24 14	 lea	 ecx, DWORD PTR $T185053[esp+100]
  00034	c7 44 24 2c 0f
	00 00 00	 mov	 DWORD PTR $T185053[esp+124], 15 ; 0000000fH
  0003c	89 74 24 28	 mov	 DWORD PTR $T185053[esp+120], esi
  00040	c6 44 24 18 00	 mov	 BYTE PTR $T185053[esp+104], 0
  00045	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004a	8d 44 24 0c	 lea	 eax, DWORD PTR $T185053[esp+92]
  0004e	50		 push	 eax
  0004f	8d 4c 24 2c	 lea	 ecx, DWORD PTR $T185052[esp+96]
  00053	89 74 24 5c	 mov	 DWORD PTR __$EHRec$[esp+104], esi
  00057	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0005c	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVout_of_range@std@@
  00061	8d 4c 24 2c	 lea	 ecx, DWORD PTR $T185052[esp+96]
  00065	51		 push	 ecx
  00066	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR $T185052[esp+100], OFFSET FLAT:??_7out_of_range@std@@6B@
  0006e	e8 00 00 00 00	 call	 __CxxThrowException@8
$L185544:
$L176719:
  00073	53		 push	 ebx

; 593  : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase

  00074	8b d8		 mov	 ebx, eax
  00076	57		 push	 edi

; 594  : 		++_Where;	// save successor iterator for return

  00077	8d 4c 24 6c	 lea	 ecx, DWORD PTR __Where$[esp+96]
  0007b	89 5c 24 10	 mov	 DWORD PTR __Erasednode$[esp+100], ebx
  0007f	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::const_iterator::_Inc

; 595  : 
; 596  : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 597  : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 598  : 		_Nodeptr _Pnode = _Erasednode;
; 599  : 
; 600  : 		if (_Isnil(_Left(_Pnode)))

  00084	8b 03		 mov	 eax, DWORD PTR [ebx]
  00086	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  00089	84 c9		 test	 cl, cl
  0008b	74 05		 je	 SHORT $L176727

; 601  : 			_Fixnode = _Right(_Pnode);	// must stitch up right subtree

  0008d	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]

; 602  : 		else if (_Isnil(_Right(_Pnode)))

  00090	eb 19		 jmp	 SHORT $L185538
$L176727:
  00092	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00095	8a 4a 15	 mov	 cl, BYTE PTR [edx+21]
  00098	84 c9		 test	 cl, cl
  0009a	74 04		 je	 SHORT $L176729

; 603  : 			_Fixnode = _Left(_Pnode);	// must stitch up left subtree

  0009c	8b f8		 mov	 edi, eax

; 604  : 		else

  0009e	eb 0b		 jmp	 SHORT $L185538
$L176729:

; 605  : 			{	// two subtrees, must lift successor node to replace erased
; 606  : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 607  : 			_Fixnode = _Right(_Pnode);	// _Fixnode is its only subtree

  000a0	8b 4c 24 6c	 mov	 ecx, DWORD PTR __Where$[esp+96]

; 608  : 			}
; 609  : 
; 610  : 		if (_Pnode == _Erasednode)

  000a4	3b cb		 cmp	 ecx, ebx
  000a6	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  000a9	75 6e		 jne	 SHORT $L176731
$L185538:

; 611  : 			{	// at most one subtree, relink it
; 612  : 			_Fixnodeparent = _Parent(_Erasednode);
; 613  : 			if (!_Isnil(_Fixnode))

  000ab	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  000ae	84 c0		 test	 al, al
  000b0	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  000b3	75 03		 jne	 SHORT $L176732

; 614  : 				_Parent(_Fixnode) = _Fixnodeparent;	// link up

  000b5	89 77 04	 mov	 DWORD PTR [edi+4], esi
$L176732:

; 615  : 
; 616  : 			if (_Root() == _Erasednode)

  000b8	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  000bb	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  000be	75 05		 jne	 SHORT $L176733

; 617  : 				_Root() = _Fixnode;	// link down from root

  000c0	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 618  : 			else if (_Left(_Fixnodeparent) == _Erasednode)

  000c3	eb 0b		 jmp	 SHORT $L176736
$L176733:
  000c5	39 1e		 cmp	 DWORD PTR [esi], ebx
  000c7	75 04		 jne	 SHORT $L176735

; 619  : 				_Left(_Fixnodeparent) = _Fixnode;	// link down to left

  000c9	89 3e		 mov	 DWORD PTR [esi], edi

; 620  : 			else

  000cb	eb 03		 jmp	 SHORT $L176736
$L176735:

; 621  : 				_Right(_Fixnodeparent) = _Fixnode;	// link down to right

  000cd	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$L176736:

; 622  : 
; 623  : 			if (_Lmost() == _Erasednode)

  000d0	8b 5d 04	 mov	 ebx, DWORD PTR [ebp+4]
  000d3	8b 03		 mov	 eax, DWORD PTR [ebx]
  000d5	3b 44 24 10	 cmp	 eax, DWORD PTR __Erasednode$[esp+100]
  000d9	75 16		 jne	 SHORT $L176737

; 624  : 				_Lmost() = _Isnil(_Fixnode)
; 625  : 					? _Fixnodeparent	// smallest is parent of erased node
; 626  : 					: _Min(_Fixnode);	// smallest in relinked subtree

  000db	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  000de	84 c0		 test	 al, al
  000e0	74 04		 je	 SHORT $L185054
  000e2	8b c6		 mov	 eax, esi
  000e4	eb 09		 jmp	 SHORT $L185055
$L185054:
  000e6	57		 push	 edi
  000e7	e8 00 00 00 00	 call	 ?_Min@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Min
  000ec	83 c4 04	 add	 esp, 4
$L185055:
  000ef	89 03		 mov	 DWORD PTR [ebx], eax
$L176737:

; 627  : 
; 628  : 			if (_Rmost() == _Erasednode)

  000f1	8b 5d 04	 mov	 ebx, DWORD PTR [ebp+4]
  000f4	8b 4c 24 10	 mov	 ecx, DWORD PTR __Erasednode$[esp+100]
  000f8	39 4b 08	 cmp	 DWORD PTR [ebx+8], ecx
  000fb	75 74		 jne	 SHORT $L185372

; 629  : 				_Rmost() = _Isnil(_Fixnode)
; 630  : 					? _Fixnodeparent	// largest is parent of erased node
; 631  : 					: _Max(_Fixnode);	// largest in relinked subtree

  000fd	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  00100	84 c0		 test	 al, al
  00102	74 07		 je	 SHORT $L185056
  00104	8b c6		 mov	 eax, esi
  00106	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 632  : 			}
; 633  : 		else

  00109	eb 66		 jmp	 SHORT $L185372
$L185056:

; 629  : 				_Rmost() = _Isnil(_Fixnode)
; 630  : 					? _Fixnodeparent	// largest is parent of erased node
; 631  : 					: _Max(_Fixnode);	// largest in relinked subtree

  0010b	57		 push	 edi
  0010c	e8 00 00 00 00	 call	 ?_Max@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Max
  00111	83 c4 04	 add	 esp, 4
  00114	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 632  : 			}
; 633  : 		else

  00117	eb 58		 jmp	 SHORT $L185372
$L176731:

; 634  : 			{	// erased has two subtrees, _Pnode is successor to erased
; 635  : 			_Parent(_Left(_Erasednode)) = _Pnode;	// link left up

  00119	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 636  : 			_Left(_Pnode) = _Left(_Erasednode);	// link successor down

  0011c	8b 13		 mov	 edx, DWORD PTR [ebx]
  0011e	89 11		 mov	 DWORD PTR [ecx], edx

; 637  : 
; 638  : 			if (_Pnode == _Right(_Erasednode))

  00120	3b 4b 08	 cmp	 ecx, DWORD PTR [ebx+8]
  00123	75 04		 jne	 SHORT $L176740

; 639  : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  00125	8b f1		 mov	 esi, ecx

; 640  : 			else

  00127	eb 1b		 jmp	 SHORT $L176741
$L176740:

; 641  : 				{	// successor further down, link in place of erased
; 642  : 				_Fixnodeparent = _Parent(_Pnode);	// parent is successor's
; 643  : 				if (!_Isnil(_Fixnode))

  00129	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  0012c	84 c0		 test	 al, al
  0012e	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00131	75 03		 jne	 SHORT $L176742

; 644  : 					_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

  00133	89 77 04	 mov	 DWORD PTR [edi+4], esi
$L176742:

; 645  : 				_Left(_Fixnodeparent) = _Fixnode;	// link fix down

  00136	89 3e		 mov	 DWORD PTR [esi], edi

; 646  : 				_Right(_Pnode) = _Right(_Erasednode);	// link successor down

  00138	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0013b	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 647  : 				_Parent(_Right(_Erasednode)) = _Pnode;	// link right up

  0013e	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00141	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$L176741:

; 648  : 				}
; 649  : 
; 650  : 			if (_Root() == _Erasednode)

  00144	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00147	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  0014a	75 05		 jne	 SHORT $L176743

; 651  : 				_Root() = _Pnode;	// link down from root

  0014c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 652  : 			else if (_Left(_Parent(_Erasednode)) == _Erasednode)

  0014f	eb 0e		 jmp	 SHORT $L176746
$L176743:
  00151	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00154	39 18		 cmp	 DWORD PTR [eax], ebx
  00156	75 04		 jne	 SHORT $L176745

; 653  : 				_Left(_Parent(_Erasednode)) = _Pnode;	// link down to left

  00158	89 08		 mov	 DWORD PTR [eax], ecx

; 654  : 			else

  0015a	eb 03		 jmp	 SHORT $L176746
$L176745:

; 655  : 				_Right(_Parent(_Erasednode)) = _Pnode;	// link down to right

  0015c	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$L176746:

; 656  : 
; 657  : 			_Parent(_Pnode) = _Parent(_Erasednode);	// link successor up

  0015f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00162	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 658  : 			std::swap(_Color(_Pnode), _Color(_Erasednode));	// recolor it

  00165	8a 53 14	 mov	 dl, BYTE PTR [ebx+20]
  00168	8a 41 14	 mov	 al, BYTE PTR [ecx+20]
  0016b	88 51 14	 mov	 BYTE PTR [ecx+20], dl
  0016e	88 43 14	 mov	 BYTE PTR [ebx+20], al
$L185372:

; 659  : 			}
; 660  : 
; 661  : 		if (_Color(_Erasednode) == _Black)

  00171	8b 44 24 10	 mov	 eax, DWORD PTR __Erasednode$[esp+100]
  00175	8a 48 14	 mov	 cl, BYTE PTR [eax+20]
  00178	b3 01		 mov	 bl, 1
  0017a	3a cb		 cmp	 cl, bl
  0017c	0f 85 ff 00 00
	00		 jne	 $L176747

; 662  : 			{	// erasing black link, must recolor/rebalance tree
; 663  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 664  : 				_Fixnodeparent = _Parent(_Fixnode))

  00182	8b 4d 04	 mov	 ecx, DWORD PTR [ebp+4]
  00185	3b 79 04	 cmp	 edi, DWORD PTR [ecx+4]
  00188	0f 84 f0 00 00
	00		 je	 $L176750
  0018e	8b ff		 npad	 2
$L176748:
  00190	38 5f 14	 cmp	 BYTE PTR [edi+20], bl
  00193	0f 85 e5 00 00
	00		 jne	 $L176750

; 665  : 				if (_Fixnode == _Left(_Fixnodeparent))

  00199	8b 06		 mov	 eax, DWORD PTR [esi]
  0019b	3b f8		 cmp	 edi, eax
  0019d	75 67		 jne	 SHORT $L176751

; 666  : 					{	// fixup left subtree
; 667  : 					_Pnode = _Right(_Fixnodeparent);

  0019f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 668  : 					if (_Color(_Pnode) == _Red)

  001a2	8a 48 14	 mov	 cl, BYTE PTR [eax+20]
  001a5	84 c9		 test	 cl, cl
  001a7	75 12		 jne	 SHORT $L176752

; 669  : 						{	// rotate red up from right subtree
; 670  : 						_Color(_Pnode) = _Black;

  001a9	88 58 14	 mov	 BYTE PTR [eax+20], bl

; 671  : 						_Color(_Fixnodeparent) = _Red;
; 672  : 						_Lrotate(_Fixnodeparent);

  001ac	56		 push	 esi
  001ad	8b cd		 mov	 ecx, ebp
  001af	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0
  001b3	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Lrotate

; 673  : 						_Pnode = _Right(_Fixnodeparent);

  001b8	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
$L176752:

; 674  : 						}
; 675  : 
; 676  : 					if (_Isnil(_Pnode))

  001bb	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  001be	84 c9		 test	 cl, cl

; 677  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 678  : 					else if (_Color(_Left(_Pnode)) == _Black

  001c0	75 76		 jne	 SHORT $L185541

; 679  : 						&& _Color(_Right(_Pnode)) == _Black)

  001c2	8b 10		 mov	 edx, DWORD PTR [eax]
  001c4	38 5a 14	 cmp	 BYTE PTR [edx+20], bl
  001c7	75 08		 jne	 SHORT $L176755
  001c9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001cc	38 59 14	 cmp	 BYTE PTR [ecx+20], bl
  001cf	74 63		 je	 SHORT $L185542
$L176755:

; 680  : 						{	// redden right subtree with black children
; 681  : 						_Color(_Pnode) = _Red;
; 682  : 						_Fixnode = _Fixnodeparent;
; 683  : 						}
; 684  : 					else
; 685  : 						{	// must rearrange right subtree
; 686  : 						if (_Color(_Right(_Pnode)) == _Black)

  001d1	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001d4	38 59 14	 cmp	 BYTE PTR [ecx+20], bl
  001d7	75 14		 jne	 SHORT $L176757

; 687  : 							{	// rotate red up from left sub-subtree
; 688  : 							_Color(_Left(_Pnode)) = _Black;

  001d9	8b 10		 mov	 edx, DWORD PTR [eax]
  001db	88 5a 14	 mov	 BYTE PTR [edx+20], bl

; 689  : 							_Color(_Pnode) = _Red;
; 690  : 							_Rrotate(_Pnode);

  001de	50		 push	 eax
  001df	8b cd		 mov	 ecx, ebp
  001e1	c6 40 14 00	 mov	 BYTE PTR [eax+20], 0
  001e5	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Rrotate

; 691  : 							_Pnode = _Right(_Fixnodeparent);

  001ea	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
$L176757:

; 692  : 							}
; 693  : 
; 694  : 						_Color(_Pnode) = _Color(_Fixnodeparent);

  001ed	8a 4e 14	 mov	 cl, BYTE PTR [esi+20]
  001f0	88 48 14	 mov	 BYTE PTR [eax+20], cl

; 695  : 						_Color(_Fixnodeparent) = _Black;

  001f3	88 5e 14	 mov	 BYTE PTR [esi+20], bl

; 696  : 						_Color(_Right(_Pnode)) = _Black;

  001f6	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 697  : 						_Lrotate(_Fixnodeparent);

  001f9	56		 push	 esi
  001fa	8b cd		 mov	 ecx, ebp
  001fc	88 5a 14	 mov	 BYTE PTR [edx+20], bl
  001ff	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Lrotate

; 698  : 						break;	// tree now recolored/rebalanced

  00204	eb 78		 jmp	 SHORT $L176750
$L176751:

; 699  : 						}
; 700  : 					}
; 701  : 				else
; 702  : 					{	// fixup right subtree
; 703  : 					_Pnode = _Left(_Fixnodeparent);
; 704  : 					if (_Color(_Pnode) == _Red)

  00206	8a 48 14	 mov	 cl, BYTE PTR [eax+20]
  00209	84 c9		 test	 cl, cl
  0020b	75 11		 jne	 SHORT $L176759

; 705  : 						{	// rotate red up from left subtree
; 706  : 						_Color(_Pnode) = _Black;

  0020d	88 58 14	 mov	 BYTE PTR [eax+20], bl

; 707  : 						_Color(_Fixnodeparent) = _Red;
; 708  : 						_Rrotate(_Fixnodeparent);

  00210	56		 push	 esi
  00211	8b cd		 mov	 ecx, ebp
  00213	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0
  00217	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Rrotate

; 709  : 						_Pnode = _Left(_Fixnodeparent);

  0021c	8b 06		 mov	 eax, DWORD PTR [esi]
$L176759:

; 710  : 						}
; 711  : 					if (_Isnil(_Pnode))

  0021e	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  00221	84 c9		 test	 cl, cl

; 712  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 713  : 					else if (_Color(_Right(_Pnode)) == _Black

  00223	75 13		 jne	 SHORT $L185541

; 714  : 						&& _Color(_Left(_Pnode)) == _Black)

  00225	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00228	38 5a 14	 cmp	 BYTE PTR [edx+20], bl
  0022b	75 20		 jne	 SHORT $L176762
  0022d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0022f	38 59 14	 cmp	 BYTE PTR [ecx+20], bl
  00232	75 19		 jne	 SHORT $L176762
$L185542:

; 715  : 						{	// redden left subtree with black children
; 716  : 						_Color(_Pnode) = _Red;

  00234	c6 40 14 00	 mov	 BYTE PTR [eax+20], 0
$L185541:

; 662  : 			{	// erasing black link, must recolor/rebalance tree
; 663  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 664  : 				_Fixnodeparent = _Parent(_Fixnode))

  00238	8b 55 04	 mov	 edx, DWORD PTR [ebp+4]
  0023b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 717  : 						_Fixnode = _Fixnodeparent;

  0023e	8b fe		 mov	 edi, esi
  00240	3b f8		 cmp	 edi, eax
  00242	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00245	0f 85 45 ff ff
	ff		 jne	 $L176748

; 662  : 			{	// erasing black link, must recolor/rebalance tree
; 663  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 664  : 				_Fixnodeparent = _Parent(_Fixnode))

  0024b	eb 31		 jmp	 SHORT $L176750
$L176762:

; 718  : 						}
; 719  : 					else
; 720  : 						{	// must rearrange left subtree
; 721  : 						if (_Color(_Left(_Pnode)) == _Black)

  0024d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0024f	38 59 14	 cmp	 BYTE PTR [ecx+20], bl
  00252	75 14		 jne	 SHORT $L176764

; 722  : 							{	// rotate red up from right sub-subtree
; 723  : 							_Color(_Right(_Pnode)) = _Black;

  00254	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00257	88 5a 14	 mov	 BYTE PTR [edx+20], bl

; 724  : 							_Color(_Pnode) = _Red;
; 725  : 							_Lrotate(_Pnode);

  0025a	50		 push	 eax
  0025b	8b cd		 mov	 ecx, ebp
  0025d	c6 40 14 00	 mov	 BYTE PTR [eax+20], 0
  00261	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Lrotate

; 726  : 							_Pnode = _Left(_Fixnodeparent);

  00266	8b 06		 mov	 eax, DWORD PTR [esi]
$L176764:

; 727  : 							}
; 728  : 
; 729  : 						_Color(_Pnode) = _Color(_Fixnodeparent);

  00268	8a 4e 14	 mov	 cl, BYTE PTR [esi+20]
  0026b	88 48 14	 mov	 BYTE PTR [eax+20], cl

; 730  : 						_Color(_Fixnodeparent) = _Black;

  0026e	88 5e 14	 mov	 BYTE PTR [esi+20], bl

; 731  : 						_Color(_Left(_Pnode)) = _Black;

  00271	8b 10		 mov	 edx, DWORD PTR [eax]

; 732  : 						_Rrotate(_Fixnodeparent);

  00273	56		 push	 esi
  00274	8b cd		 mov	 ecx, ebp
  00276	88 5a 14	 mov	 BYTE PTR [edx+20], bl
  00279	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Rrotate
$L176750:

; 733  : 						break;	// tree now recolored/rebalanced
; 734  : 						}
; 735  : 					}
; 736  : 
; 737  : 			_Color(_Fixnode) = _Black;	// ensure stopping node is black

  0027e	88 5f 14	 mov	 BYTE PTR [edi+20], bl
$L176747:

; 738  : 			}
; 739  : 
; 740  : 		this->_Alnod.destroy(_Erasednode);	// destroy, free erased node
; 741  : 		this->_Alnod.deallocate(_Erasednode, 1);

  00281	8b 44 24 10	 mov	 eax, DWORD PTR __Erasednode$[esp+100]
  00285	50		 push	 eax
  00286	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 742  : 
; 743  : 		if (0 < _Mysize)

  0028b	8b 45 08	 mov	 eax, DWORD PTR [ebp+8]
  0028e	83 c4 04	 add	 esp, 4
  00291	85 c0		 test	 eax, eax
  00293	5f		 pop	 edi
  00294	5b		 pop	 ebx
  00295	76 04		 jbe	 SHORT $L176765

; 744  : 			--_Mysize;

  00297	48		 dec	 eax
  00298	89 45 08	 mov	 DWORD PTR [ebp+8], eax
$L176765:

; 745  : 
; 746  : 		return (_Where);	// return successor iterator

  0029b	8b 4c 24 64	 mov	 ecx, DWORD PTR __Where$[esp+88]
  0029f	8b 44 24 60	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+88]
  002a3	89 08		 mov	 DWORD PTR [eax], ecx

; 747  : 		}

  002a5	8b 4c 24 50	 mov	 ecx, DWORD PTR __$EHRec$[esp+92]
  002a9	5e		 pop	 esi
  002aa	5d		 pop	 ebp
  002ab	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  002b2	83 c4 54	 add	 esp, 84			; 00000054H
  002b5	c2 08 00	 ret	 8
$L185540:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L185058:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T185053[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?erase@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T185535
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?erase@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::erase
; Function compile flags: /Ogty
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV01@@Z PROC NEAR		; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7out_of_range@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0out_of_range@std@@QAE@ABV01@@Z ENDP			; std::out_of_range::out_of_range
_TEXT	ENDS
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::erase
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
xdata$x	SEGMENT
$T186045 DD	0ffffffffH
	DD	FLAT:$L185560
$T186037 DD	019930520H
	DD	01H
	DD	FLAT:$T186045
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
xdata$x	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT
__Erasednode$ = -84					; size = 4
$T185555 = -80						; size = 28
$T185554 = -52						; size = 40
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::erase, COMDAT
; _this$ = ecx

; 590  : 		{	// erase element at _Where

  00000	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00006	6a ff		 push	 -1
  00008	68 00 00 00 00	 push	 __ehhandler$?erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z
  0000d	50		 push	 eax

; 591  : 		if (_Isnil(_Where._Mynode()))

  0000e	8b 44 24 14	 mov	 eax, DWORD PTR __Where$[esp+8]
  00012	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00019	83 ec 48	 sub	 esp, 72			; 00000048H
  0001c	55		 push	 ebp
  0001d	8b e9		 mov	 ebp, ecx
  0001f	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  00022	84 c9		 test	 cl, cl
  00024	56		 push	 esi
  00025	74 4c		 je	 SHORT $L176785

; 592  : 			_THROW(out_of_range, "invalid map/set<T> iterator");

  00027	6a 1b		 push	 27			; 0000001bH
  00029	33 f6		 xor	 esi, esi
  0002b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
  00030	8d 4c 24 14	 lea	 ecx, DWORD PTR $T185555[esp+100]
  00034	c7 44 24 2c 0f
	00 00 00	 mov	 DWORD PTR $T185555[esp+124], 15 ; 0000000fH
  0003c	89 74 24 28	 mov	 DWORD PTR $T185555[esp+120], esi
  00040	c6 44 24 18 00	 mov	 BYTE PTR $T185555[esp+104], 0
  00045	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004a	8d 44 24 0c	 lea	 eax, DWORD PTR $T185555[esp+92]
  0004e	50		 push	 eax
  0004f	8d 4c 24 2c	 lea	 ecx, DWORD PTR $T185554[esp+96]
  00053	89 74 24 5c	 mov	 DWORD PTR __$EHRec$[esp+104], esi
  00057	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0005c	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVout_of_range@std@@
  00061	8d 4c 24 2c	 lea	 ecx, DWORD PTR $T185554[esp+96]
  00065	51		 push	 ecx
  00066	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR $T185554[esp+100], OFFSET FLAT:??_7out_of_range@std@@6B@
  0006e	e8 00 00 00 00	 call	 __CxxThrowException@8
$L186046:
$L176785:
  00073	53		 push	 ebx

; 593  : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase

  00074	8b d8		 mov	 ebx, eax
  00076	57		 push	 edi

; 594  : 		++_Where;	// save successor iterator for return

  00077	8d 4c 24 6c	 lea	 ecx, DWORD PTR __Where$[esp+96]
  0007b	89 5c 24 10	 mov	 DWORD PTR __Erasednode$[esp+100], ebx
  0007f	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::_Inc

; 595  : 
; 596  : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 597  : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 598  : 		_Nodeptr _Pnode = _Erasednode;
; 599  : 
; 600  : 		if (_Isnil(_Left(_Pnode)))

  00084	8b 03		 mov	 eax, DWORD PTR [ebx]
  00086	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  00089	84 c9		 test	 cl, cl
  0008b	74 05		 je	 SHORT $L176793

; 601  : 			_Fixnode = _Right(_Pnode);	// must stitch up right subtree

  0008d	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]

; 602  : 		else if (_Isnil(_Right(_Pnode)))

  00090	eb 19		 jmp	 SHORT $L186040
$L176793:
  00092	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00095	8a 4a 15	 mov	 cl, BYTE PTR [edx+21]
  00098	84 c9		 test	 cl, cl
  0009a	74 04		 je	 SHORT $L176795

; 603  : 			_Fixnode = _Left(_Pnode);	// must stitch up left subtree

  0009c	8b f8		 mov	 edi, eax

; 604  : 		else

  0009e	eb 0b		 jmp	 SHORT $L186040
$L176795:

; 605  : 			{	// two subtrees, must lift successor node to replace erased
; 606  : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 607  : 			_Fixnode = _Right(_Pnode);	// _Fixnode is its only subtree

  000a0	8b 4c 24 6c	 mov	 ecx, DWORD PTR __Where$[esp+96]

; 608  : 			}
; 609  : 
; 610  : 		if (_Pnode == _Erasednode)

  000a4	3b cb		 cmp	 ecx, ebx
  000a6	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  000a9	75 6e		 jne	 SHORT $L176797
$L186040:

; 611  : 			{	// at most one subtree, relink it
; 612  : 			_Fixnodeparent = _Parent(_Erasednode);
; 613  : 			if (!_Isnil(_Fixnode))

  000ab	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  000ae	84 c0		 test	 al, al
  000b0	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  000b3	75 03		 jne	 SHORT $L176798

; 614  : 				_Parent(_Fixnode) = _Fixnodeparent;	// link up

  000b5	89 77 04	 mov	 DWORD PTR [edi+4], esi
$L176798:

; 615  : 
; 616  : 			if (_Root() == _Erasednode)

  000b8	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  000bb	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  000be	75 05		 jne	 SHORT $L176799

; 617  : 				_Root() = _Fixnode;	// link down from root

  000c0	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 618  : 			else if (_Left(_Fixnodeparent) == _Erasednode)

  000c3	eb 0b		 jmp	 SHORT $L176802
$L176799:
  000c5	39 1e		 cmp	 DWORD PTR [esi], ebx
  000c7	75 04		 jne	 SHORT $L176801

; 619  : 				_Left(_Fixnodeparent) = _Fixnode;	// link down to left

  000c9	89 3e		 mov	 DWORD PTR [esi], edi

; 620  : 			else

  000cb	eb 03		 jmp	 SHORT $L176802
$L176801:

; 621  : 				_Right(_Fixnodeparent) = _Fixnode;	// link down to right

  000cd	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$L176802:

; 622  : 
; 623  : 			if (_Lmost() == _Erasednode)

  000d0	8b 5d 04	 mov	 ebx, DWORD PTR [ebp+4]
  000d3	8b 03		 mov	 eax, DWORD PTR [ebx]
  000d5	3b 44 24 10	 cmp	 eax, DWORD PTR __Erasednode$[esp+100]
  000d9	75 16		 jne	 SHORT $L176803

; 624  : 				_Lmost() = _Isnil(_Fixnode)
; 625  : 					? _Fixnodeparent	// smallest is parent of erased node
; 626  : 					: _Min(_Fixnode);	// smallest in relinked subtree

  000db	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  000de	84 c0		 test	 al, al
  000e0	74 04		 je	 SHORT $L185556
  000e2	8b c6		 mov	 eax, esi
  000e4	eb 09		 jmp	 SHORT $L185557
$L185556:
  000e6	57		 push	 edi
  000e7	e8 00 00 00 00	 call	 ?_Min@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Min
  000ec	83 c4 04	 add	 esp, 4
$L185557:
  000ef	89 03		 mov	 DWORD PTR [ebx], eax
$L176803:

; 627  : 
; 628  : 			if (_Rmost() == _Erasednode)

  000f1	8b 5d 04	 mov	 ebx, DWORD PTR [ebp+4]
  000f4	8b 4c 24 10	 mov	 ecx, DWORD PTR __Erasednode$[esp+100]
  000f8	39 4b 08	 cmp	 DWORD PTR [ebx+8], ecx
  000fb	75 74		 jne	 SHORT $L185874

; 629  : 				_Rmost() = _Isnil(_Fixnode)
; 630  : 					? _Fixnodeparent	// largest is parent of erased node
; 631  : 					: _Max(_Fixnode);	// largest in relinked subtree

  000fd	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  00100	84 c0		 test	 al, al
  00102	74 07		 je	 SHORT $L185558
  00104	8b c6		 mov	 eax, esi
  00106	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 632  : 			}
; 633  : 		else

  00109	eb 66		 jmp	 SHORT $L185874
$L185558:

; 629  : 				_Rmost() = _Isnil(_Fixnode)
; 630  : 					? _Fixnodeparent	// largest is parent of erased node
; 631  : 					: _Max(_Fixnode);	// largest in relinked subtree

  0010b	57		 push	 edi
  0010c	e8 00 00 00 00	 call	 ?_Max@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Max
  00111	83 c4 04	 add	 esp, 4
  00114	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 632  : 			}
; 633  : 		else

  00117	eb 58		 jmp	 SHORT $L185874
$L176797:

; 634  : 			{	// erased has two subtrees, _Pnode is successor to erased
; 635  : 			_Parent(_Left(_Erasednode)) = _Pnode;	// link left up

  00119	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 636  : 			_Left(_Pnode) = _Left(_Erasednode);	// link successor down

  0011c	8b 13		 mov	 edx, DWORD PTR [ebx]
  0011e	89 11		 mov	 DWORD PTR [ecx], edx

; 637  : 
; 638  : 			if (_Pnode == _Right(_Erasednode))

  00120	3b 4b 08	 cmp	 ecx, DWORD PTR [ebx+8]
  00123	75 04		 jne	 SHORT $L176806

; 639  : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  00125	8b f1		 mov	 esi, ecx

; 640  : 			else

  00127	eb 1b		 jmp	 SHORT $L176807
$L176806:

; 641  : 				{	// successor further down, link in place of erased
; 642  : 				_Fixnodeparent = _Parent(_Pnode);	// parent is successor's
; 643  : 				if (!_Isnil(_Fixnode))

  00129	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  0012c	84 c0		 test	 al, al
  0012e	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00131	75 03		 jne	 SHORT $L176808

; 644  : 					_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

  00133	89 77 04	 mov	 DWORD PTR [edi+4], esi
$L176808:

; 645  : 				_Left(_Fixnodeparent) = _Fixnode;	// link fix down

  00136	89 3e		 mov	 DWORD PTR [esi], edi

; 646  : 				_Right(_Pnode) = _Right(_Erasednode);	// link successor down

  00138	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0013b	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 647  : 				_Parent(_Right(_Erasednode)) = _Pnode;	// link right up

  0013e	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00141	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$L176807:

; 648  : 				}
; 649  : 
; 650  : 			if (_Root() == _Erasednode)

  00144	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00147	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  0014a	75 05		 jne	 SHORT $L176809

; 651  : 				_Root() = _Pnode;	// link down from root

  0014c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 652  : 			else if (_Left(_Parent(_Erasednode)) == _Erasednode)

  0014f	eb 0e		 jmp	 SHORT $L176812
$L176809:
  00151	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00154	39 18		 cmp	 DWORD PTR [eax], ebx
  00156	75 04		 jne	 SHORT $L176811

; 653  : 				_Left(_Parent(_Erasednode)) = _Pnode;	// link down to left

  00158	89 08		 mov	 DWORD PTR [eax], ecx

; 654  : 			else

  0015a	eb 03		 jmp	 SHORT $L176812
$L176811:

; 655  : 				_Right(_Parent(_Erasednode)) = _Pnode;	// link down to right

  0015c	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$L176812:

; 656  : 
; 657  : 			_Parent(_Pnode) = _Parent(_Erasednode);	// link successor up

  0015f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00162	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 658  : 			std::swap(_Color(_Pnode), _Color(_Erasednode));	// recolor it

  00165	8a 53 14	 mov	 dl, BYTE PTR [ebx+20]
  00168	8a 41 14	 mov	 al, BYTE PTR [ecx+20]
  0016b	88 51 14	 mov	 BYTE PTR [ecx+20], dl
  0016e	88 43 14	 mov	 BYTE PTR [ebx+20], al
$L185874:

; 659  : 			}
; 660  : 
; 661  : 		if (_Color(_Erasednode) == _Black)

  00171	8b 44 24 10	 mov	 eax, DWORD PTR __Erasednode$[esp+100]
  00175	8a 48 14	 mov	 cl, BYTE PTR [eax+20]
  00178	b3 01		 mov	 bl, 1
  0017a	3a cb		 cmp	 cl, bl
  0017c	0f 85 ff 00 00
	00		 jne	 $L176813

; 662  : 			{	// erasing black link, must recolor/rebalance tree
; 663  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 664  : 				_Fixnodeparent = _Parent(_Fixnode))

  00182	8b 4d 04	 mov	 ecx, DWORD PTR [ebp+4]
  00185	3b 79 04	 cmp	 edi, DWORD PTR [ecx+4]
  00188	0f 84 f0 00 00
	00		 je	 $L176816
  0018e	8b ff		 npad	 2
$L176814:
  00190	38 5f 14	 cmp	 BYTE PTR [edi+20], bl
  00193	0f 85 e5 00 00
	00		 jne	 $L176816

; 665  : 				if (_Fixnode == _Left(_Fixnodeparent))

  00199	8b 06		 mov	 eax, DWORD PTR [esi]
  0019b	3b f8		 cmp	 edi, eax
  0019d	75 67		 jne	 SHORT $L176817

; 666  : 					{	// fixup left subtree
; 667  : 					_Pnode = _Right(_Fixnodeparent);

  0019f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 668  : 					if (_Color(_Pnode) == _Red)

  001a2	8a 48 14	 mov	 cl, BYTE PTR [eax+20]
  001a5	84 c9		 test	 cl, cl
  001a7	75 12		 jne	 SHORT $L176818

; 669  : 						{	// rotate red up from right subtree
; 670  : 						_Color(_Pnode) = _Black;

  001a9	88 58 14	 mov	 BYTE PTR [eax+20], bl

; 671  : 						_Color(_Fixnodeparent) = _Red;
; 672  : 						_Lrotate(_Fixnodeparent);

  001ac	56		 push	 esi
  001ad	8b cd		 mov	 ecx, ebp
  001af	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0
  001b3	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Lrotate

; 673  : 						_Pnode = _Right(_Fixnodeparent);

  001b8	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
$L176818:

; 674  : 						}
; 675  : 
; 676  : 					if (_Isnil(_Pnode))

  001bb	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  001be	84 c9		 test	 cl, cl

; 677  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 678  : 					else if (_Color(_Left(_Pnode)) == _Black

  001c0	75 76		 jne	 SHORT $L186043

; 679  : 						&& _Color(_Right(_Pnode)) == _Black)

  001c2	8b 10		 mov	 edx, DWORD PTR [eax]
  001c4	38 5a 14	 cmp	 BYTE PTR [edx+20], bl
  001c7	75 08		 jne	 SHORT $L176821
  001c9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001cc	38 59 14	 cmp	 BYTE PTR [ecx+20], bl
  001cf	74 63		 je	 SHORT $L186044
$L176821:

; 680  : 						{	// redden right subtree with black children
; 681  : 						_Color(_Pnode) = _Red;
; 682  : 						_Fixnode = _Fixnodeparent;
; 683  : 						}
; 684  : 					else
; 685  : 						{	// must rearrange right subtree
; 686  : 						if (_Color(_Right(_Pnode)) == _Black)

  001d1	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001d4	38 59 14	 cmp	 BYTE PTR [ecx+20], bl
  001d7	75 14		 jne	 SHORT $L176823

; 687  : 							{	// rotate red up from left sub-subtree
; 688  : 							_Color(_Left(_Pnode)) = _Black;

  001d9	8b 10		 mov	 edx, DWORD PTR [eax]
  001db	88 5a 14	 mov	 BYTE PTR [edx+20], bl

; 689  : 							_Color(_Pnode) = _Red;
; 690  : 							_Rrotate(_Pnode);

  001de	50		 push	 eax
  001df	8b cd		 mov	 ecx, ebp
  001e1	c6 40 14 00	 mov	 BYTE PTR [eax+20], 0
  001e5	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Rrotate

; 691  : 							_Pnode = _Right(_Fixnodeparent);

  001ea	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
$L176823:

; 692  : 							}
; 693  : 
; 694  : 						_Color(_Pnode) = _Color(_Fixnodeparent);

  001ed	8a 4e 14	 mov	 cl, BYTE PTR [esi+20]
  001f0	88 48 14	 mov	 BYTE PTR [eax+20], cl

; 695  : 						_Color(_Fixnodeparent) = _Black;

  001f3	88 5e 14	 mov	 BYTE PTR [esi+20], bl

; 696  : 						_Color(_Right(_Pnode)) = _Black;

  001f6	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 697  : 						_Lrotate(_Fixnodeparent);

  001f9	56		 push	 esi
  001fa	8b cd		 mov	 ecx, ebp
  001fc	88 5a 14	 mov	 BYTE PTR [edx+20], bl
  001ff	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Lrotate

; 698  : 						break;	// tree now recolored/rebalanced

  00204	eb 78		 jmp	 SHORT $L176816
$L176817:

; 699  : 						}
; 700  : 					}
; 701  : 				else
; 702  : 					{	// fixup right subtree
; 703  : 					_Pnode = _Left(_Fixnodeparent);
; 704  : 					if (_Color(_Pnode) == _Red)

  00206	8a 48 14	 mov	 cl, BYTE PTR [eax+20]
  00209	84 c9		 test	 cl, cl
  0020b	75 11		 jne	 SHORT $L176825

; 705  : 						{	// rotate red up from left subtree
; 706  : 						_Color(_Pnode) = _Black;

  0020d	88 58 14	 mov	 BYTE PTR [eax+20], bl

; 707  : 						_Color(_Fixnodeparent) = _Red;
; 708  : 						_Rrotate(_Fixnodeparent);

  00210	56		 push	 esi
  00211	8b cd		 mov	 ecx, ebp
  00213	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0
  00217	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Rrotate

; 709  : 						_Pnode = _Left(_Fixnodeparent);

  0021c	8b 06		 mov	 eax, DWORD PTR [esi]
$L176825:

; 710  : 						}
; 711  : 					if (_Isnil(_Pnode))

  0021e	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  00221	84 c9		 test	 cl, cl

; 712  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 713  : 					else if (_Color(_Right(_Pnode)) == _Black

  00223	75 13		 jne	 SHORT $L186043

; 714  : 						&& _Color(_Left(_Pnode)) == _Black)

  00225	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00228	38 5a 14	 cmp	 BYTE PTR [edx+20], bl
  0022b	75 20		 jne	 SHORT $L176828
  0022d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0022f	38 59 14	 cmp	 BYTE PTR [ecx+20], bl
  00232	75 19		 jne	 SHORT $L176828
$L186044:

; 715  : 						{	// redden left subtree with black children
; 716  : 						_Color(_Pnode) = _Red;

  00234	c6 40 14 00	 mov	 BYTE PTR [eax+20], 0
$L186043:

; 662  : 			{	// erasing black link, must recolor/rebalance tree
; 663  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 664  : 				_Fixnodeparent = _Parent(_Fixnode))

  00238	8b 55 04	 mov	 edx, DWORD PTR [ebp+4]
  0023b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 717  : 						_Fixnode = _Fixnodeparent;

  0023e	8b fe		 mov	 edi, esi
  00240	3b f8		 cmp	 edi, eax
  00242	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00245	0f 85 45 ff ff
	ff		 jne	 $L176814

; 662  : 			{	// erasing black link, must recolor/rebalance tree
; 663  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 664  : 				_Fixnodeparent = _Parent(_Fixnode))

  0024b	eb 31		 jmp	 SHORT $L176816
$L176828:

; 718  : 						}
; 719  : 					else
; 720  : 						{	// must rearrange left subtree
; 721  : 						if (_Color(_Left(_Pnode)) == _Black)

  0024d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0024f	38 59 14	 cmp	 BYTE PTR [ecx+20], bl
  00252	75 14		 jne	 SHORT $L176830

; 722  : 							{	// rotate red up from right sub-subtree
; 723  : 							_Color(_Right(_Pnode)) = _Black;

  00254	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00257	88 5a 14	 mov	 BYTE PTR [edx+20], bl

; 724  : 							_Color(_Pnode) = _Red;
; 725  : 							_Lrotate(_Pnode);

  0025a	50		 push	 eax
  0025b	8b cd		 mov	 ecx, ebp
  0025d	c6 40 14 00	 mov	 BYTE PTR [eax+20], 0
  00261	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Lrotate

; 726  : 							_Pnode = _Left(_Fixnodeparent);

  00266	8b 06		 mov	 eax, DWORD PTR [esi]
$L176830:

; 727  : 							}
; 728  : 
; 729  : 						_Color(_Pnode) = _Color(_Fixnodeparent);

  00268	8a 4e 14	 mov	 cl, BYTE PTR [esi+20]
  0026b	88 48 14	 mov	 BYTE PTR [eax+20], cl

; 730  : 						_Color(_Fixnodeparent) = _Black;

  0026e	88 5e 14	 mov	 BYTE PTR [esi+20], bl

; 731  : 						_Color(_Left(_Pnode)) = _Black;

  00271	8b 10		 mov	 edx, DWORD PTR [eax]

; 732  : 						_Rrotate(_Fixnodeparent);

  00273	56		 push	 esi
  00274	8b cd		 mov	 ecx, ebp
  00276	88 5a 14	 mov	 BYTE PTR [edx+20], bl
  00279	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Rrotate
$L176816:

; 733  : 						break;	// tree now recolored/rebalanced
; 734  : 						}
; 735  : 					}
; 736  : 
; 737  : 			_Color(_Fixnode) = _Black;	// ensure stopping node is black

  0027e	88 5f 14	 mov	 BYTE PTR [edi+20], bl
$L176813:

; 738  : 			}
; 739  : 
; 740  : 		this->_Alnod.destroy(_Erasednode);	// destroy, free erased node
; 741  : 		this->_Alnod.deallocate(_Erasednode, 1);

  00281	8b 44 24 10	 mov	 eax, DWORD PTR __Erasednode$[esp+100]
  00285	50		 push	 eax
  00286	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 742  : 
; 743  : 		if (0 < _Mysize)

  0028b	8b 45 08	 mov	 eax, DWORD PTR [ebp+8]
  0028e	83 c4 04	 add	 esp, 4
  00291	85 c0		 test	 eax, eax
  00293	5f		 pop	 edi
  00294	5b		 pop	 ebx
  00295	76 04		 jbe	 SHORT $L176831

; 744  : 			--_Mysize;

  00297	48		 dec	 eax
  00298	89 45 08	 mov	 DWORD PTR [ebp+8], eax
$L176831:

; 745  : 
; 746  : 		return (_Where);	// return successor iterator

  0029b	8b 4c 24 64	 mov	 ecx, DWORD PTR __Where$[esp+88]
  0029f	8b 44 24 60	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+88]
  002a3	89 08		 mov	 DWORD PTR [eax], ecx

; 747  : 		}

  002a5	8b 4c 24 50	 mov	 ecx, DWORD PTR __$EHRec$[esp+92]
  002a9	5e		 pop	 esi
  002aa	5d		 pop	 ebp
  002ab	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  002b2	83 c4 54	 add	 esp, 84			; 00000054H
  002b5	c2 08 00	 ret	 8
$L186042:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L185560:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T185555[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T186037
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::erase
PUBLIC	?insert@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBEPAUtagTMAGIC@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::insert
; Function compile flags: /Ogty
;	COMDAT ?insert@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBEPAUtagTMAGIC@@@2@@Z
_TEXT	SEGMENT
__Addleft$ = -4						; size = 1
___$ReturnUdt$ = 8					; size = 4
$T186060 = 12						; size = 4
$T186058 = 12						; size = 4
__Where$175971 = 12					; size = 4
__Val$ = 12						; size = 4
?insert@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBEPAUtagTMAGIC@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::insert, COMDAT
; _this$ = ecx

; 477  : 		{	// try to insert node with value _Val

  00000	51		 push	 ecx
  00001	55		 push	 ebp

; 478  : 		_Nodeptr _Trynode = _Root();
; 479  : 		_Nodeptr _Wherenode = _Myhead;
; 480  : 		bool _Addleft = true;	// add to left of head if tree empty
; 481  : 		while (!_Isnil(_Trynode))

  00002	8b 6c 24 10	 mov	 ebp, DWORD PTR __Val$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0000d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00010	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00013	84 d2		 test	 dl, dl
  00015	b1 01		 mov	 cl, 1
  00017	88 4c 24 0c	 mov	 BYTE PTR __Addleft$[esp+16], cl
  0001b	75 20		 jne	 SHORT $L175961
  0001d	8a 55 00	 mov	 dl, BYTE PTR [ebp]
$L175960:

; 482  : 			{	// look for leaf to insert before (_Addleft) or after
; 483  : 			_Wherenode = _Trynode;
; 484  : 			_Addleft = this->comp(this->_Kfn(_Val), _Key(_Trynode));

  00020	3a 50 0c	 cmp	 dl, BYTE PTR [eax+12]
  00023	0f 92 c1	 setb	 cl

; 485  : 			_Trynode = _Addleft ? _Left(_Trynode) : _Right(_Trynode);

  00026	84 c9		 test	 cl, cl
  00028	8b f0		 mov	 esi, eax
  0002a	88 4c 24 0c	 mov	 BYTE PTR __Addleft$[esp+16], cl
  0002e	74 04		 je	 SHORT $L186052
  00030	8b 00		 mov	 eax, DWORD PTR [eax]
  00032	eb 03		 jmp	 SHORT $L186053
$L186052:
  00034	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
$L186053:

; 478  : 		_Nodeptr _Trynode = _Root();
; 479  : 		_Nodeptr _Wherenode = _Myhead;
; 480  : 		bool _Addleft = true;	// add to left of head if tree empty
; 481  : 		while (!_Isnil(_Trynode))

  00037	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0003b	74 e3		 je	 SHORT $L175960
$L175961:

; 486  : 			}
; 487  : 
; 488  : 		if (this->_Multi)
; 489  : 			return (_Pairib(_Insert(_Addleft, _Wherenode, _Val), true));
; 490  : 		else
; 491  : 			{	// insert only if unique
; 492  : 			iterator _Where = _TREE_ITERATOR(_Wherenode);
; 493  : 			if (!_Addleft)

  0003d	84 c9		 test	 cl, cl
  0003f	8b d6		 mov	 edx, esi
  00041	89 54 24 18	 mov	 DWORD PTR __Where$175971[esp+12], edx
  00045	74 33		 je	 SHORT $L186152

; 494  : 				;	// need to test if insert after is okay
; 495  : 			else if (_Where == begin())

  00047	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004a	3b 30		 cmp	 esi, DWORD PTR [eax]

; 496  : 				return (_Pairib(_Insert(true, _Wherenode, _Val), true));

  0004c	8d 4c 24 18	 lea	 ecx, DWORD PTR $T186058[esp+12]
  00050	75 1f		 jne	 SHORT $L175976
  00052	55		 push	 ebp
  00053	56		 push	 esi
  00054	6a 01		 push	 1
  00056	51		 push	 ecx
  00057	8b cf		 mov	 ecx, edi
  00059	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBEPAUtagTMAGIC@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Insert
  0005e	8b 10		 mov	 edx, DWORD PTR [eax]
  00060	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 502  : 			else
; 503  : 				return (_Pairib(_Where, false));

  0006a	89 10		 mov	 DWORD PTR [eax], edx
  0006c	5d		 pop	 ebp

; 504  : 			}
; 505  : 		}

  0006d	59		 pop	 ecx
  0006e	c2 08 00	 ret	 8
$L175976:

; 497  : 			else
; 498  : 				--_Where;	// need to test if insert before is okay

  00071	e8 00 00 00 00	 call	 ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::_Dec
  00076	8b 54 24 18	 mov	 edx, DWORD PTR __Where$175971[esp+12]
$L186152:

; 499  : 
; 500  : 			if (this->comp(_Key(_Where._Mynode()), this->_Kfn(_Val)))

  0007a	8a 42 0c	 mov	 al, BYTE PTR [edx+12]
  0007d	3a 45 00	 cmp	 al, BYTE PTR [ebp]
  00080	73 26		 jae	 SHORT $L175981

; 501  : 				return (_Pairib(_Insert(_Addleft, _Wherenode, _Val), true));

  00082	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Addleft$[esp+16]
  00086	55		 push	 ebp
  00087	56		 push	 esi
  00088	51		 push	 ecx
  00089	8d 54 24 24	 lea	 edx, DWORD PTR $T186060[esp+24]
  0008d	52		 push	 edx
  0008e	8b cf		 mov	 ecx, edi
  00090	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@ABU?$pair@$$CBEPAUtagTMAGIC@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Insert
  00095	8b 08		 mov	 ecx, DWORD PTR [eax]
  00097	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	89 08		 mov	 DWORD PTR [eax], ecx
  0009f	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  000a3	5d		 pop	 ebp

; 504  : 			}
; 505  : 		}

  000a4	59		 pop	 ecx
  000a5	c2 08 00	 ret	 8
$L175981:

; 502  : 			else
; 503  : 				return (_Pairib(_Where, false));

  000a8	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi
  000ae	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
  000b2	89 10		 mov	 DWORD PTR [eax], edx
  000b4	5d		 pop	 ebp

; 504  : 			}
; 505  : 		}

  000b5	59		 pop	 ecx
  000b6	c2 08 00	 ret	 8
?insert@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBEPAUtagTMAGIC@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::insert
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAE_NI@Z ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Buy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?_Buy@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAE_NI@Z PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Buy, COMDAT
; _this$ = ecx

; 771  : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;
; 772  : 		if (_Capacity == 0)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Capacity$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	33 c9		 xor	 ecx, ecx
  00009	3b c1		 cmp	 eax, ecx
  0000b	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0000e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00011	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00014	75 06		 jne	 SHORT $L176385

; 773  : 			return (false);

  00016	32 c0		 xor	 al, al
  00018	5e		 pop	 esi

; 783  : 		}

  00019	c2 04 00	 ret	 4
$L176385:

; 774  : 		else if (max_size() < _Capacity)

  0001c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00021	76 07		 jbe	 SHORT $L176387

; 775  : 			_Xlen();	// result too long

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Xlen@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IBEXXZ ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Xlen
$L186214:
$L176387:
  0002a	57		 push	 edi

; 776  : 		else
; 777  : 			{	// nonempty array, allocate storage
; 778  : 			_Myfirst = this->_Alval.allocate(_Capacity);

  0002b	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  00032	57		 push	 edi
  00033	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 779  : 			_Mylast = _Myfirst;
; 780  : 			_Myend = _Myfirst + _Capacity;

  00038	03 f8		 add	 edi, eax
  0003a	83 c4 04	 add	 esp, 4
  0003d	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  00040	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00043	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00046	5f		 pop	 edi

; 781  : 			}
; 782  : 		return (true);

  00047	b0 01		 mov	 al, 1
  00049	5e		 pop	 esi

; 783  : 		}

  0004a	c2 04 00	 ret	 4
$L186213:
?_Buy@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Buy
_TEXT	ENDS
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::erase
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
$T186221 = 12						; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::erase, COMDAT
; _this$ = ecx

; 750  : 		{	// erase [_First, _Last)

  00000	53		 push	 ebx

; 751  : 		if (_First == begin() && _Last == end())

  00001	8b 5c 24 10	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00010	3b 30		 cmp	 esi, DWORD PTR [eax]
  00012	75 38		 jne	 SHORT $L186553
  00014	3b d8		 cmp	 ebx, eax
  00016	75 34		 jne	 SHORT $L186553

; 752  : 			{	// erase all
; 753  : 			clear();

  00018	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001b	50		 push	 eax
  0001c	8b cf		 mov	 ecx, edi
  0001e	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Erase
  00023	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00029	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0002c	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00033	89 00		 mov	 DWORD PTR [eax], eax
  00035	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00038	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 754  : 			return (begin());

  0003b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	89 10		 mov	 DWORD PTR [eax], edx
  00048	5b		 pop	 ebx

; 761  : 			}
; 762  : 		}

  00049	c2 0c 00	 ret	 12			; 0000000cH
$L186553:

; 755  : 			}
; 756  : 		else
; 757  : 			{	// partial erase, one at a time
; 758  : 			while (_First != _Last)

  0004c	3b f3		 cmp	 esi, ebx
  0004e	74 5b		 je	 SHORT $L176513
$L176512:

; 759  : 				erase(_First++);

  00050	8a 46 15	 mov	 al, BYTE PTR [esi+21]
  00053	84 c0		 test	 al, al
  00055	8b ce		 mov	 ecx, esi
  00057	75 41		 jne	 SHORT $L186540
  00059	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0005c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0005f	84 d2		 test	 dl, dl
  00061	75 1a		 jne	 SHORT $L186555
  00063	8b f0		 mov	 esi, eax
  00065	8b 06		 mov	 eax, DWORD PTR [esi]
  00067	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0006a	84 d2		 test	 dl, dl
  0006c	75 2c		 jne	 SHORT $L186540
  0006e	8b ff		 npad	 2
$L186528:
  00070	8b f0		 mov	 esi, eax
  00072	8b 06		 mov	 eax, DWORD PTR [esi]
  00074	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00077	84 d2		 test	 dl, dl
  00079	74 f5		 je	 SHORT $L186528
  0007b	eb 1d		 jmp	 SHORT $L186540
$L186555:
  0007d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00080	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00083	84 d2		 test	 dl, dl
  00085	75 11		 jne	 SHORT $L186543
$L186542:
  00087	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0008a	75 0c		 jne	 SHORT $L186543
  0008c	8b f0		 mov	 esi, eax
  0008e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00091	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00094	84 d2		 test	 dl, dl
  00096	74 ef		 je	 SHORT $L186542
$L186543:
  00098	8b f0		 mov	 esi, eax
$L186540:
  0009a	51		 push	 ecx
  0009b	8d 44 24 18	 lea	 eax, DWORD PTR $T186221[esp+12]
  0009f	50		 push	 eax
  000a0	8b cf		 mov	 ecx, edi
  000a2	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::erase
  000a7	3b f3		 cmp	 esi, ebx
  000a9	75 a5		 jne	 SHORT $L176512
$L176513:

; 760  : 			return (_First);

  000ab	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  000af	5f		 pop	 edi
  000b0	89 30		 mov	 DWORD PTR [eax], esi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx

; 761  : 			}
; 762  : 		}

  000b4	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::erase
_TEXT	ENDS
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::erase
; Function compile flags: /Ogty
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
$T186565 = 12						; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::erase, COMDAT
; _this$ = ecx

; 750  : 		{	// erase [_First, _Last)

  00000	53		 push	 ebx

; 751  : 		if (_First == begin() && _Last == end())

  00001	8b 5c 24 10	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00010	3b 30		 cmp	 esi, DWORD PTR [eax]
  00012	75 38		 jne	 SHORT $L186897
  00014	3b d8		 cmp	 ebx, eax
  00016	75 34		 jne	 SHORT $L186897

; 752  : 			{	// erase all
; 753  : 			clear();

  00018	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001b	50		 push	 eax
  0001c	8b cf		 mov	 ecx, edi
  0001e	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Erase
  00023	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00029	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0002c	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00033	89 00		 mov	 DWORD PTR [eax], eax
  00035	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00038	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 754  : 			return (begin());

  0003b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	89 10		 mov	 DWORD PTR [eax], edx
  00048	5b		 pop	 ebx

; 761  : 			}
; 762  : 		}

  00049	c2 0c 00	 ret	 12			; 0000000cH
$L186897:

; 755  : 			}
; 756  : 		else
; 757  : 			{	// partial erase, one at a time
; 758  : 			while (_First != _Last)

  0004c	3b f3		 cmp	 esi, ebx
  0004e	74 5b		 je	 SHORT $L176555
$L176554:

; 759  : 				erase(_First++);

  00050	8a 46 15	 mov	 al, BYTE PTR [esi+21]
  00053	84 c0		 test	 al, al
  00055	8b ce		 mov	 ecx, esi
  00057	75 41		 jne	 SHORT $L186890
  00059	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0005c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0005f	84 d2		 test	 dl, dl
  00061	75 1a		 jne	 SHORT $L186899
  00063	8b f0		 mov	 esi, eax
  00065	8b 06		 mov	 eax, DWORD PTR [esi]
  00067	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0006a	84 d2		 test	 dl, dl
  0006c	75 2c		 jne	 SHORT $L186890
  0006e	8b ff		 npad	 2
$L186878:
  00070	8b f0		 mov	 esi, eax
  00072	8b 06		 mov	 eax, DWORD PTR [esi]
  00074	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00077	84 d2		 test	 dl, dl
  00079	74 f5		 je	 SHORT $L186878
  0007b	eb 1d		 jmp	 SHORT $L186890
$L186899:
  0007d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00080	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00083	84 d2		 test	 dl, dl
  00085	75 11		 jne	 SHORT $L186893
$L186892:
  00087	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0008a	75 0c		 jne	 SHORT $L186893
  0008c	8b f0		 mov	 esi, eax
  0008e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00091	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00094	84 d2		 test	 dl, dl
  00096	74 ef		 je	 SHORT $L186892
$L186893:
  00098	8b f0		 mov	 esi, eax
$L186890:
  0009a	51		 push	 ecx
  0009b	8d 44 24 18	 lea	 eax, DWORD PTR $T186565[esp+12]
  0009f	50		 push	 eax
  000a0	8b cf		 mov	 ecx, edi
  000a2	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::erase
  000a7	3b f3		 cmp	 esi, ebx
  000a9	75 a5		 jne	 SHORT $L176554
$L176555:

; 760  : 			return (_First);

  000ab	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  000af	5f		 pop	 edi
  000b0	89 30		 mov	 DWORD PTR [eax], esi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx

; 761  : 			}
; 762  : 		}

  000b4	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::erase
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEXViterator@12@IABQAUtagITEMMAGIC@@@Z ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Insert_n
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?_Insert_n@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEXViterator@12@IABQAUtagITEMMAGIC@@@Z
_TEXT	SEGMENT
__Newvec$176644 = -4					; size = 4
tv393 = 8						; size = 4
__Where$ = 8						; size = 4
tv382 = 12						; size = 4
__Count$ = 12						; size = 4
__Tmp$ = 16						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEXViterator@12@IABQAUtagITEMMAGIC@@@Z PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Insert_n, COMDAT
; _this$ = ecx

; 809  : 		{	// insert _Count * _Val at _Where

  00000	51		 push	 ecx

; 810  : 		_Ty _Tmp = _Val;	// in case _Val is in sequence

  00001	8b 44 24 10	 mov	 eax, DWORD PTR __Val$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 811  : 		size_type _Capacity = capacity();

  00008	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000b	85 d2		 test	 edx, edx
  0000d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000f	57		 push	 edi
  00010	89 4c 24 18	 mov	 DWORD PTR __Tmp$[esp+8], ecx
  00014	75 04		 jne	 SHORT $L186917
  00016	33 c0		 xor	 eax, eax
  00018	eb 08		 jmp	 SHORT $L186918
$L186917:
  0001a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0001d	2b c2		 sub	 eax, edx
  0001f	c1 f8 02	 sar	 eax, 2
$L186918:

; 812  : 
; 813  : 		if (_Count == 0)

  00022	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  00026	85 ff		 test	 edi, edi
  00028	0f 84 ac 01 00
	00		 je	 $L176664

; 814  : 			;
; 815  : 		else if (max_size() - size() < _Count)

  0002e	85 d2		 test	 edx, edx
  00030	75 04		 jne	 SHORT $L186939
  00032	33 c9		 xor	 ecx, ecx
  00034	eb 08		 jmp	 SHORT $L186940
$L186939:
  00036	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00039	2b ca		 sub	 ecx, edx
  0003b	c1 f9 02	 sar	 ecx, 2
$L186940:
  0003e	53		 push	 ebx
  0003f	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH
  00044	2b d9		 sub	 ebx, ecx
  00046	3b df		 cmp	 ebx, edi
  00048	73 07		 jae	 SHORT $L176640

; 816  : 			_Xlen();	// result too long

  0004a	8b ce		 mov	 ecx, esi
  0004c	e8 00 00 00 00	 call	 ?_Xlen@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IBEXXZ ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Xlen
$L187071:
$L176640:

; 817  : 		else if (_Capacity < size() + _Count)

  00051	85 d2		 test	 edx, edx
  00053	75 04		 jne	 SHORT $L186946
  00055	33 c9		 xor	 ecx, ecx
  00057	eb 08		 jmp	 SHORT $L186947
$L186946:
  00059	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0005c	2b ca		 sub	 ecx, edx
  0005e	c1 f9 02	 sar	 ecx, 2
$L186947:
  00061	03 cf		 add	 ecx, edi
  00063	3b c1		 cmp	 eax, ecx
  00065	55		 push	 ebp
  00066	0f 83 d6 00 00
	00		 jae	 $L176642

; 818  : 			{	// not enough room, reallocate
; 819  : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 820  : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0006c	8b c8		 mov	 ecx, eax
  0006e	d1 e9		 shr	 ecx, 1
  00070	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH
  00075	2b d9		 sub	 ebx, ecx
  00077	3b d8		 cmp	 ebx, eax
  00079	73 04		 jae	 SHORT $L186906
  0007b	33 c0		 xor	 eax, eax
  0007d	eb 02		 jmp	 SHORT $L186907
$L186906:
  0007f	03 c1		 add	 eax, ecx
$L186907:

; 821  : 			if (_Capacity < size() + _Count)

  00081	85 d2		 test	 edx, edx
  00083	75 04		 jne	 SHORT $L186969
  00085	33 c9		 xor	 ecx, ecx
  00087	eb 08		 jmp	 SHORT $L186970
$L186969:
  00089	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0008c	2b ca		 sub	 ecx, edx
  0008e	c1 f9 02	 sar	 ecx, 2
$L186970:
  00091	03 cf		 add	 ecx, edi
  00093	3b c1		 cmp	 eax, ecx
  00095	73 12		 jae	 SHORT $L176643

; 822  : 				_Capacity = size() + _Count;

  00097	85 d2		 test	 edx, edx
  00099	75 04		 jne	 SHORT $L186976
  0009b	33 c0		 xor	 eax, eax
  0009d	eb 08		 jmp	 SHORT $L186977
$L186976:
  0009f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000a2	2b c2		 sub	 eax, edx
  000a4	c1 f8 02	 sar	 eax, 2
$L186977:
  000a7	03 c7		 add	 eax, edi
$L176643:

; 823  : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

  000a9	c1 e0 02	 shl	 eax, 2
  000ac	50		 push	 eax
  000ad	89 44 24 20	 mov	 DWORD PTR tv382[esp+20], eax
  000b1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 824  : 			pointer _Ptr = _Newvec;
; 825  : 
; 826  : 			_TRY_BEGIN
; 827  : 			_Ptr = _Ucopy(_Myfirst, _ITER_BASE(_Where),
; 828  : 				_Newvec);	// copy prefix

  000b6	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000b9	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Where$[esp+20]
  000bd	8b d0		 mov	 edx, eax
  000bf	8b c3		 mov	 eax, ebx
  000c1	2b c1		 sub	 eax, ecx
  000c3	c1 f8 02	 sar	 eax, 2
  000c6	8d 2c 85 00 00
	00 00		 lea	 ebp, DWORD PTR [eax*4]
  000cd	55		 push	 ebp
  000ce	51		 push	 ecx
  000cf	52		 push	 edx
  000d0	89 54 24 20	 mov	 DWORD PTR __Newvec$176644[esp+36], edx
  000d4	e8 00 00 00 00	 call	 _memmove
  000d9	83 c4 10	 add	 esp, 16			; 00000010H

; 829  : 			_Ptr = _Ufill(_Ptr, _Count, _Tmp);	// add new stuff

  000dc	8d 54 24 20	 lea	 edx, DWORD PTR __Tmp$[esp+16]
  000e0	52		 push	 edx
  000e1	03 c5		 add	 eax, ebp
  000e3	57		 push	 edi
  000e4	50		 push	 eax
  000e5	8b ce		 mov	 ecx, esi
  000e7	e8 00 00 00 00	 call	 ?_Ufill@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEPAPAUtagITEMMAGIC@@PAPAU3@IABQAU3@@Z ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Ufill

; 830  : 			_Ucopy(_ITER_BASE(_Where), _Mylast, _Ptr);	// copy suffix

  000ec	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000ef	2b cb		 sub	 ecx, ebx
  000f1	c1 f9 02	 sar	 ecx, 2
  000f4	c1 e1 02	 shl	 ecx, 2
  000f7	51		 push	 ecx
  000f8	53		 push	 ebx
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 _memmove

; 831  : 			_CATCH_ALL
; 832  : 			_Destroy(_Newvec, _Ptr);
; 833  : 			this->_Alval.deallocate(_Newvec, _Capacity);
; 834  : 			_RERAISE;
; 835  : 			_CATCH_END
; 836  : 
; 837  : 			_Count += size();

  000ff	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00102	83 c4 0c	 add	 esp, 12			; 0000000cH
  00105	85 c0		 test	 eax, eax
  00107	75 04		 jne	 SHORT $L187058
  00109	33 c9		 xor	 ecx, ecx
  0010b	eb 08		 jmp	 SHORT $L187059
$L187058:
  0010d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00110	2b c8		 sub	 ecx, eax
  00112	c1 f9 02	 sar	 ecx, 2
$L187059:
  00115	03 f9		 add	 edi, ecx

; 838  : 			if (_Myfirst != 0)

  00117	85 c0		 test	 eax, eax
  00119	74 09		 je	 SHORT $L187062

; 839  : 				{	// destroy and deallocate old array
; 840  : 				_Destroy(_Myfirst, _Mylast);
; 841  : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00121	83 c4 04	 add	 esp, 4
$L187062:

; 842  : 				}
; 843  : 			_Myend = _Newvec + _Capacity;

  00124	8b 44 24 10	 mov	 eax, DWORD PTR __Newvec$176644[esp+20]
  00128	8b 54 24 1c	 mov	 edx, DWORD PTR tv382[esp+16]
  0012c	5d		 pop	 ebp
  0012d	5b		 pop	 ebx

; 844  : 			_Mylast = _Newvec + _Count;

  0012e	8d 0c b8	 lea	 ecx, DWORD PTR [eax+edi*4]
  00131	03 d0		 add	 edx, eax
  00133	5f		 pop	 edi
  00134	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  00137	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 845  : 			_Myfirst = _Newvec;

  0013a	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0013d	5e		 pop	 esi

; 873  : 			}
; 874  : 		}

  0013e	59		 pop	 ecx
  0013f	c2 0c 00	 ret	 12			; 0000000cH
$L176642:

; 846  : 			}
; 847  : 		else if ((size_type)(_Mylast - _ITER_BASE(_Where)) < _Count)

  00142	8b 6e 08	 mov	 ebp, DWORD PTR [esi+8]
  00145	8b 5c 24 18	 mov	 ebx, DWORD PTR __Where$[esp+16]
  00149	8b d5		 mov	 edx, ebp
  0014b	2b d3		 sub	 edx, ebx
  0014d	c1 fa 02	 sar	 edx, 2
  00150	3b d7		 cmp	 edx, edi

; 848  : 			{	// new stuff spills off end
; 849  : 			_Ucopy(_ITER_BASE(_Where), _Mylast,
; 850  : 				_ITER_BASE(_Where) + _Count);	// copy suffix

  00152	8d 04 bd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*4]
  00159	8b ce		 mov	 ecx, esi
  0015b	89 44 24 18	 mov	 DWORD PTR tv393[esp+16], eax
  0015f	73 4b		 jae	 SHORT $L176655
  00161	03 c3		 add	 eax, ebx
  00163	50		 push	 eax
  00164	55		 push	 ebp
  00165	53		 push	 ebx
  00166	e8 00 00 00 00	 call	 ??$_Ucopy@PAPAUtagITEMMAGIC@@@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEPAPAUtagITEMMAGIC@@PAPAU2@00@Z ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Ucopy<tagITEMMAGIC * *>

; 851  : 
; 852  : 			_TRY_BEGIN
; 853  : 			_Ufill(_Mylast, _Count - (_Mylast - _ITER_BASE(_Where)),
; 854  : 				_Tmp);	// insert new stuff off end

  0016b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0016e	8b d0		 mov	 edx, eax
  00170	2b d3		 sub	 edx, ebx
  00172	8d 4c 24 20	 lea	 ecx, DWORD PTR __Tmp$[esp+16]
  00176	51		 push	 ecx
  00177	c1 fa 02	 sar	 edx, 2
  0017a	2b fa		 sub	 edi, edx
  0017c	57		 push	 edi
  0017d	50		 push	 eax
  0017e	8b ce		 mov	 ecx, esi
  00180	e8 00 00 00 00	 call	 ?_Ufill@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEPAPAUtagITEMMAGIC@@PAPAU3@IABQAU3@@Z ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Ufill

; 855  : 			_CATCH_ALL
; 856  : 			_Destroy(_ITER_BASE(_Where) + _Count, _Mylast + _Count);
; 857  : 			_RERAISE;
; 858  : 			_CATCH_END
; 859  : 
; 860  : 			_Mylast += _Count;

  00185	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00188	8b 44 24 18	 mov	 eax, DWORD PTR tv393[esp+16]
  0018c	03 c8		 add	 ecx, eax
  0018e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00191	8b f1		 mov	 esi, ecx

; 861  : 			fill(_ITER_BASE(_Where), _Mylast - _Count,
; 862  : 				_Tmp);	// insert up to old end

  00193	8d 4c 24 20	 lea	 ecx, DWORD PTR __Tmp$[esp+16]
  00197	51		 push	 ecx
  00198	2b f0		 sub	 esi, eax
  0019a	56		 push	 esi
  0019b	53		 push	 ebx
  0019c	e8 00 00 00 00	 call	 ??$fill@PAPAUtagITEMMAGIC@@PAU1@@std@@YAXPAPAUtagITEMMAGIC@@0ABQAU1@@Z ; std::fill<tagITEMMAGIC * *,tagITEMMAGIC *>
  001a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a4	5d		 pop	 ebp
  001a5	5b		 pop	 ebx
  001a6	5f		 pop	 edi
  001a7	5e		 pop	 esi

; 873  : 			}
; 874  : 		}

  001a8	59		 pop	 ecx
  001a9	c2 0c 00	 ret	 12			; 0000000cH
$L176655:

; 863  : 			}
; 864  : 		else
; 865  : 			{	// new stuff can all be assigned
; 866  : 			pointer _Oldend = _Mylast;
; 867  : 			_Mylast = _Ucopy(_Oldend - _Count, _Oldend,
; 868  : 				_Mylast);	// copy suffix

  001ac	55		 push	 ebp
  001ad	8b fd		 mov	 edi, ebp
  001af	2b f8		 sub	 edi, eax
  001b1	55		 push	 ebp
  001b2	57		 push	 edi
  001b3	e8 00 00 00 00	 call	 ??$_Ucopy@PAPAUtagITEMMAGIC@@@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEPAPAUtagITEMMAGIC@@PAPAU2@00@Z ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Ucopy<tagITEMMAGIC * *>

; 869  : 			copy_backward(_ITER_BASE(_Where), _Oldend - _Count,
; 870  : 				_Oldend);	// copy hole

  001b8	55		 push	 ebp
  001b9	57		 push	 edi
  001ba	53		 push	 ebx
  001bb	89 46 08	 mov	 DWORD PTR [esi+8], eax
  001be	e8 00 00 00 00	 call	 ??$copy_backward@PAPAUtagITEMMAGIC@@PAPAU1@@std@@YAPAPAUtagITEMMAGIC@@PAPAU1@00@Z ; std::copy_backward<tagITEMMAGIC * *,tagITEMMAGIC * *>

; 871  : 			fill(_ITER_BASE(_Where), _ITER_BASE(_Where) + _Count,
; 872  : 				_Tmp);	// insert into hole

  001c3	8b 44 24 24	 mov	 eax, DWORD PTR tv393[esp+28]
  001c7	8d 54 24 2c	 lea	 edx, DWORD PTR __Tmp$[esp+28]
  001cb	52		 push	 edx
  001cc	03 c3		 add	 eax, ebx
  001ce	50		 push	 eax
  001cf	53		 push	 ebx
  001d0	e8 00 00 00 00	 call	 ??$fill@PAPAUtagITEMMAGIC@@PAU1@@std@@YAXPAPAUtagITEMMAGIC@@0ABQAU1@@Z ; std::fill<tagITEMMAGIC * *,tagITEMMAGIC *>
  001d5	83 c4 18	 add	 esp, 24			; 00000018H
  001d8	5d		 pop	 ebp
  001d9	5b		 pop	 ebx
$L176664:
  001da	5f		 pop	 edi
  001db	5e		 pop	 esi

; 873  : 			}
; 874  : 		}

  001dc	59		 pop	 ecx
  001dd	c2 0c 00	 ret	 12			; 0000000cH
$L187070:
?_Insert_n@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEXViterator@12@IABQAUtagITEMMAGIC@@@Z ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Insert_n
_TEXT	ENDS
PUBLIC	?Copy@CTItem@@QAEXPAV1@E@Z			; CTItem::Copy
EXTRN	?GenItemID@CTMapSvrModule@@QAE_JXZ:NEAR		; CTMapSvrModule::GenItemID
EXTRN	?SetItemAttr@CTMapSvrModule@@QAEXPAVCTItem@@E@Z:NEAR ; CTMapSvrModule::SetItemAttr
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\titem.cpp
;	COMDAT ?Copy@CTItem@@QAEXPAV1@E@Z
_TEXT	SEGMENT
$T187086 = -16						; size = 8
$T187087 = -8						; size = 8
_itTMAGIC$ = 8						; size = 4
_pItem$ = 8						; size = 4
_bGenID$ = 12						; size = 1
?Copy@CTItem@@QAEXPAV1@E@Z PROC NEAR			; CTItem::Copy, COMDAT
; _this$ = ecx

; 84   : {

  00000	83 ec 10	 sub	 esp, 16			; 00000010H
  00003	53		 push	 ebx
  00004	55		 push	 ebp

; 85   : 	if(!pItem)

  00005	8b 6c 24 1c	 mov	 ebp, DWORD PTR _pItem$[esp+20]
  00009	85 ed		 test	 ebp, ebp
  0000b	8b d9		 mov	 ebx, ecx
  0000d	0f 84 cc 01 00
	00		 je	 $L175359

; 86   : 		return;
; 87   : 
; 88   : 	MAPTMAGIC::iterator itTMAGIC;
; 89   : 
; 90   : 	for( itTMAGIC = m_mapTMAGIC.begin(); itTMAGIC != m_mapTMAGIC.end(); itTMAGIC++)

  00013	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00016	8b 01		 mov	 eax, DWORD PTR [ecx]
  00018	3b c1		 cmp	 eax, ecx
  0001a	89 44 24 1c	 mov	 DWORD PTR _itTMAGIC$[esp+20], eax
  0001e	74 1e		 je	 SHORT $L175367
$L187139:

; 91   : 		delete (*itTMAGIC).second;

  00020	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00023	50		 push	 eax
  00024	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00029	83 c4 04	 add	 esp, 4
  0002c	8d 4c 24 1c	 lea	 ecx, DWORD PTR _itTMAGIC$[esp+20]
  00030	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::_Inc
  00035	8b 44 24 1c	 mov	 eax, DWORD PTR _itTMAGIC$[esp+20]
  00039	3b 43 0c	 cmp	 eax, DWORD PTR [ebx+12]
  0003c	75 e2		 jne	 SHORT $L187139
$L175367:

; 92   : 	m_mapTMAGIC.clear();

  0003e	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00041	56		 push	 esi
  00042	57		 push	 edi
  00043	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00046	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  00049	84 c0		 test	 al, al
  0004b	8b f7		 mov	 esi, edi
  0004d	75 21		 jne	 SHORT $L187251
  0004f	90		 npad	 1
$L187249:
  00050	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00053	52		 push	 edx
  00054	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  00057	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Erase
  0005c	8b 36		 mov	 esi, DWORD PTR [esi]
  0005e	57		 push	 edi
  0005f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00064	8a 46 15	 mov	 al, BYTE PTR [esi+21]
  00067	83 c4 04	 add	 esp, 4
  0006a	84 c0		 test	 al, al
  0006c	8b fe		 mov	 edi, esi
  0006e	74 e0		 je	 SHORT $L187249
$L187251:
  00070	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00073	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00076	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00079	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0
  00080	89 00		 mov	 DWORD PTR [eax], eax
  00082	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00085	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 93   : 
; 94   : 	if(bGenID)

  00088	8a 44 24 28	 mov	 al, BYTE PTR _bGenID$[esp+28]
  0008c	84 c0		 test	 al, al
  0008e	74 12		 je	 SHORT $L175369

; 95   : 		m_dlID = _AtlModule.GenItemID();

  00090	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?_AtlModule@@3VCTMapSvrModule@@A
  00095	e8 00 00 00 00	 call	 ?GenItemID@CTMapSvrModule@@QAE_JXZ ; CTMapSvrModule::GenItemID
  0009a	89 43 20	 mov	 DWORD PTR [ebx+32], eax
  0009d	89 53 24	 mov	 DWORD PTR [ebx+36], edx

; 96   : 	else

  000a0	eb 0c		 jmp	 SHORT $L175370
$L175369:

; 97   : 		m_dlID = pItem->m_dlID;

  000a2	8b 45 20	 mov	 eax, DWORD PTR [ebp+32]
  000a5	89 43 20	 mov	 DWORD PTR [ebx+32], eax
  000a8	8b 4d 24	 mov	 ecx, DWORD PTR [ebp+36]
  000ab	89 4b 24	 mov	 DWORD PTR [ebx+36], ecx
$L175370:

; 98   : 
; 99   : 	m_bItemID = pItem->m_bItemID;

  000ae	8a 55 28	 mov	 dl, BYTE PTR [ebp+40]
  000b1	88 53 28	 mov	 BYTE PTR [ebx+40], dl

; 100  : 	m_wItemID = pItem->m_wItemID;

  000b4	66 8b 45 30	 mov	 ax, WORD PTR [ebp+48]
  000b8	66 89 43 30	 mov	 WORD PTR [ebx+48], ax

; 101  : 	m_bLevel = pItem->m_bLevel;

  000bc	8a 4d 29	 mov	 cl, BYTE PTR [ebp+41]
  000bf	88 4b 29	 mov	 BYTE PTR [ebx+41], cl

; 102  : 	m_pTITEM = pItem->m_pTITEM;

  000c2	8b 55 14	 mov	 edx, DWORD PTR [ebp+20]
  000c5	89 53 14	 mov	 DWORD PTR [ebx+20], edx

; 103  : 
; 104  : 	m_bCount = pItem->m_bCount;

  000c8	8a 45 32	 mov	 al, BYTE PTR [ebp+50]
  000cb	88 43 32	 mov	 BYTE PTR [ebx+50], al

; 105  : 	m_bGLevel = pItem->m_bGLevel;

  000ce	8a 4d 33	 mov	 cl, BYTE PTR [ebp+51]
  000d1	88 4b 33	 mov	 BYTE PTR [ebx+51], cl

; 106  : 	m_dwDuraMax = pItem->m_dwDuraMax;

  000d4	8b 55 34	 mov	 edx, DWORD PTR [ebp+52]
  000d7	89 53 34	 mov	 DWORD PTR [ebx+52], edx

; 107  : 	m_dwDuraCur = pItem->m_dwDuraCur;

  000da	8b 45 38	 mov	 eax, DWORD PTR [ebp+56]
  000dd	89 43 38	 mov	 DWORD PTR [ebx+56], eax

; 108  : 	m_bRefineCur = pItem->m_bRefineCur;

  000e0	8a 4d 3c	 mov	 cl, BYTE PTR [ebp+60]
  000e3	88 4b 3c	 mov	 BYTE PTR [ebx+60], cl

; 109  : 	m_dEndTime = pItem->m_dEndTime;

  000e6	8b 55 40	 mov	 edx, DWORD PTR [ebp+64]
  000e9	89 53 40	 mov	 DWORD PTR [ebx+64], edx
  000ec	8b 45 44	 mov	 eax, DWORD PTR [ebp+68]
  000ef	89 43 44	 mov	 DWORD PTR [ebx+68], eax

; 110  : 	m_bGradeEffect = pItem->m_bGradeEffect;

  000f2	8a 4d 68	 mov	 cl, BYTE PTR [ebp+104]
  000f5	88 4b 68	 mov	 BYTE PTR [ebx+104], cl

; 111  : 	memcpy(m_dwExtValue, pItem->m_dwExtValue, sizeof(DWORD)*TMAGIC_MAX);

  000f8	8d 55 6c	 lea	 edx, DWORD PTR [ebp+108]
  000fb	8b 0a		 mov	 ecx, DWORD PTR [edx]
  000fd	8d 43 6c	 lea	 eax, DWORD PTR [ebx+108]
  00100	89 08		 mov	 DWORD PTR [eax], ecx
  00102	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00105	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00108	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  0010b	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0010e	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  00111	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00114	8b 4a 10	 mov	 ecx, DWORD PTR [edx+16]
  00117	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0011a	8b 52 14	 mov	 edx, DWORD PTR [edx+20]
  0011d	89 50 14	 mov	 DWORD PTR [eax+20], edx

; 112  : 
; 113  : 	for( itTMAGIC = pItem->m_mapTMAGIC.begin(); itTMAGIC != pItem->m_mapTMAGIC.end(); itTMAGIC++)

  00120	8b 45 0c	 mov	 eax, DWORD PTR [ebp+12]
  00123	8b 30		 mov	 esi, DWORD PTR [eax]
  00125	3b f0		 cmp	 esi, eax
  00127	0f 84 9f 00 00
	00		 je	 $L175378
  0012d	8d 49 00	 npad	 3
$L187493:

; 114  : 	{
; 115  : 		LPTMAGIC pTMAGIC = new TMAGIC();

  00130	6a 08		 push	 8
  00132	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00137	83 c4 04	 add	 esp, 4
  0013a	85 c0		 test	 eax, eax
  0013c	74 0b		 je	 SHORT $L187084
  0013e	33 c9		 xor	 ecx, ecx
  00140	8b d0		 mov	 edx, eax
  00142	89 0a		 mov	 DWORD PTR [edx], ecx
  00144	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00147	eb 02		 jmp	 SHORT $L187085
$L187084:
  00149	33 c0		 xor	 eax, eax
$L187085:

; 116  : 
; 117  : 		pTMAGIC->m_wValue = (*itTMAGIC).second->m_wValue;

  0014b	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  0014e	66 8b 11	 mov	 dx, WORD PTR [ecx]
  00151	66 89 10	 mov	 WORD PTR [eax], dx

; 118  : 		pTMAGIC->m_pMagic = (*itTMAGIC).second->m_pMagic;

  00154	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00157	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0015a	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 119  : 		m_mapTMAGIC.insert( MAPTMAGIC::value_type( (*itTMAGIC).first, pTMAGIC));

  0015d	8a 4e 0c	 mov	 cl, BYTE PTR [esi+12]
  00160	8d 54 24 10	 lea	 edx, DWORD PTR $T187086[esp+32]
  00164	89 44 24 14	 mov	 DWORD PTR $T187086[esp+36], eax
  00168	52		 push	 edx
  00169	8d 44 24 1c	 lea	 eax, DWORD PTR $T187087[esp+36]
  0016d	88 4c 24 14	 mov	 BYTE PTR $T187086[esp+36], cl
  00171	50		 push	 eax
  00172	8d 4b 08	 lea	 ecx, DWORD PTR [ebx+8]
  00175	e8 00 00 00 00	 call	 ?insert@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBEPAUtagTMAGIC@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::insert
  0017a	8a 46 15	 mov	 al, BYTE PTR [esi+21]
  0017d	84 c0		 test	 al, al
  0017f	75 42		 jne	 SHORT $L187489
  00181	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00184	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  00187	84 c9		 test	 cl, cl
  00189	75 18		 jne	 SHORT $L187572
  0018b	8b f0		 mov	 esi, eax
  0018d	8b 06		 mov	 eax, DWORD PTR [esi]
  0018f	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  00192	84 c9		 test	 cl, cl
  00194	75 2d		 jne	 SHORT $L187489

; 112  : 
; 113  : 	for( itTMAGIC = pItem->m_mapTMAGIC.begin(); itTMAGIC != pItem->m_mapTMAGIC.end(); itTMAGIC++)

$L187466:
  00196	8b f0		 mov	 esi, eax
  00198	8b 06		 mov	 eax, DWORD PTR [esi]
  0019a	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  0019d	84 c9		 test	 cl, cl
  0019f	74 f5		 je	 SHORT $L187466
  001a1	eb 20		 jmp	 SHORT $L187489
$L187572:
  001a3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  001a6	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  001a9	84 c9		 test	 cl, cl
  001ab	75 14		 jne	 SHORT $L187455
  001ad	8d 49 00	 npad	 3
$L187491:
  001b0	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  001b3	75 0c		 jne	 SHORT $L187455
  001b5	8b f0		 mov	 esi, eax
  001b7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001ba	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  001bd	84 c9		 test	 cl, cl
  001bf	74 ef		 je	 SHORT $L187491
$L187455:
  001c1	8b f0		 mov	 esi, eax
$L187489:
  001c3	3b 75 0c	 cmp	 esi, DWORD PTR [ebp+12]
  001c6	0f 85 64 ff ff
	ff		 jne	 $L187493
$L175378:

; 120  : 	}
; 121  : 
; 122  : 	_AtlModule.SetItemAttr(this, m_bLevel);

  001cc	33 c9		 xor	 ecx, ecx
  001ce	8a 4b 29	 mov	 cl, BYTE PTR [ebx+41]
  001d1	51		 push	 ecx
  001d2	53		 push	 ebx
  001d3	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?_AtlModule@@3VCTMapSvrModule@@A
  001d8	e8 00 00 00 00	 call	 ?SetItemAttr@CTMapSvrModule@@QAEXPAVCTItem@@E@Z ; CTMapSvrModule::SetItemAttr
  001dd	5f		 pop	 edi
  001de	5e		 pop	 esi
$L175359:
  001df	5d		 pop	 ebp
  001e0	5b		 pop	 ebx

; 123  : }

  001e1	83 c4 10	 add	 esp, 16			; 00000010H
  001e4	c2 08 00	 ret	 8
?Copy@CTItem@@QAEXPAV1@E@Z ENDP				; CTItem::Copy
_TEXT	ENDS
PUBLIC	??0?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE@XZ ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE@XZ PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >, COMDAT
; _this$ = ecx

; 299  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx

; 300  : 		_Buy(0);

  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00007	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 301  : 		}

  0000d	c3		 ret	 0
??0?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE@XZ ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Tidy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T187642 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 1142 : 		{	// free all storage

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 1143 : 		erase(begin(), end());

  00004	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	50		 push	 eax
  0000a	51		 push	 ecx
  0000b	8d 44 24 0c	 lea	 eax, DWORD PTR $T187642[esp+16]
  0000f	50		 push	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::erase

; 1144 : 		this->_Alptr.destroy(&_Left(_Myhead));
; 1145 : 		this->_Alptr.destroy(&_Parent(_Myhead));
; 1146 : 		this->_Alptr.destroy(&_Right(_Myhead));
; 1147 : 		this->_Alnod.deallocate(_Myhead, 1);

  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 04	 add	 esp, 4

; 1148 : 		_Myhead = 0, _Mysize = 0;

  00023	33 c0		 xor	 eax, eax
  00025	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00028	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0002b	5e		 pop	 esi

; 1149 : 		}

  0002c	59		 pop	 ecx
  0002d	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Tidy
; Function compile flags: /Ogty
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T187707 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 1142 : 		{	// free all storage

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 1143 : 		erase(begin(), end());

  00004	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	50		 push	 eax
  0000a	51		 push	 ecx
  0000b	8d 44 24 0c	 lea	 eax, DWORD PTR $T187707[esp+16]
  0000f	50		 push	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::erase

; 1144 : 		this->_Alptr.destroy(&_Left(_Myhead));
; 1145 : 		this->_Alptr.destroy(&_Parent(_Myhead));
; 1146 : 		this->_Alptr.destroy(&_Right(_Myhead));
; 1147 : 		this->_Alnod.deallocate(_Myhead, 1);

  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 04	 add	 esp, 4

; 1148 : 		_Myhead = 0, _Mysize = 0;

  00023	33 c0		 xor	 eax, eax
  00025	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00028	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0002b	5e		 pop	 esi

; 1149 : 		}

  0002c	59		 pop	 ecx
  0002d	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Tidy
_TEXT	ENDS
PUBLIC	?insert@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE?AViterator@12@V312@ABQAUtagITEMMAGIC@@@Z ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::insert
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?insert@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE?AViterator@12@V312@ABQAUtagITEMMAGIC@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE?AViterator@12@V312@ABQAUtagITEMMAGIC@@@Z PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::insert, COMDAT
; _this$ = ecx

; 621  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Where$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 0c		 je	 SHORT $L187832
  0000f	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00012	2b c1		 sub	 eax, ecx
  00014	c1 f8 02	 sar	 eax, 2
  00017	85 c0		 test	 eax, eax
  00019	75 04		 jne	 SHORT $L187771
$L187832:
  0001b	33 f6		 xor	 esi, esi
  0001d	eb 07		 jmp	 SHORT $L187772
$L187771:
  0001f	8b f2		 mov	 esi, edx
  00021	2b f1		 sub	 esi, ecx
  00023	c1 fe 02	 sar	 esi, 2
$L187772:

; 622  : 		_Insert_n(_Where, (size_type)1, _Val);

  00026	8b 44 24 14	 mov	 eax, DWORD PTR __Val$[esp+4]
  0002a	50		 push	 eax
  0002b	6a 01		 push	 1
  0002d	52		 push	 edx
  0002e	8b cf		 mov	 ecx, edi
  00030	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEXViterator@12@IABQAUtagITEMMAGIC@@@Z ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Insert_n

; 623  : 		return (begin() + _Off);

  00035	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00038	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  0003c	8d 14 b1	 lea	 edx, DWORD PTR [ecx+esi*4]
  0003f	5f		 pop	 edi
  00040	89 10		 mov	 DWORD PTR [eax], edx
  00042	5e		 pop	 esi

; 624  : 		}

  00043	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE?AViterator@12@V312@ABQAUtagITEMMAGIC@@@Z ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::insert
_TEXT	ENDS
PUBLIC	??1?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T187903 = -4						; size = 4
??1?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >, COMDAT
; _this$ = ecx

; 391  : 		{	// destroy tree

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 392  : 		_Tidy();

  00004	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	50		 push	 eax
  0000a	51		 push	 ecx
  0000b	8d 44 24 0c	 lea	 eax, DWORD PTR $T187903[esp+16]
  0000f	50		 push	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::erase
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 04	 add	 esp, 4
  00023	33 c0		 xor	 eax, eax
  00025	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00028	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0002b	5e		 pop	 esi

; 393  : 		}

  0002c	59		 pop	 ecx
  0002d	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >
_TEXT	ENDS
PUBLIC	??1?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::~_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >
; Function compile flags: /Ogty
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T187998 = -4						; size = 4
??1?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::~_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >, COMDAT
; _this$ = ecx

; 391  : 		{	// destroy tree

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 392  : 		_Tidy();

  00004	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	50		 push	 eax
  0000a	51		 push	 ecx
  0000b	8d 44 24 0c	 lea	 eax, DWORD PTR $T187998[esp+16]
  0000f	50		 push	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::erase
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 04	 add	 esp, 4
  00023	33 c0		 xor	 eax, eax
  00025	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00028	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0002b	5e		 pop	 esi

; 393  : 		}

  0002c	59		 pop	 ecx
  0002d	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::~_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >
_TEXT	ENDS
PUBLIC	?push_back@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAEXABQAUtagITEMMAGIC@@@Z ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::push_back
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?push_back@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAEXABQAUtagITEMMAGIC@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAEXABQAUtagITEMMAGIC@@@Z PROC NEAR ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::push_back, COMDAT
; _this$ = ecx

; 579  : 		{	// insert element at end

  00000	56		 push	 esi

; 580  : 		if (size() < capacity())

  00001	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00004	85 f6		 test	 esi, esi
  00006	75 04		 jne	 SHORT $L188032
  00008	33 d2		 xor	 edx, edx
  0000a	eb 08		 jmp	 SHORT $L188033
$L188032:
  0000c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0000f	2b d6		 sub	 edx, esi
  00011	c1 fa 02	 sar	 edx, 2
$L188033:
  00014	85 f6		 test	 esi, esi
  00016	74 21		 je	 SHORT $L176099
  00018	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0001b	2b c6		 sub	 eax, esi
  0001d	c1 f8 02	 sar	 eax, 2
  00020	3b d0		 cmp	 edx, eax
  00022	73 15		 jae	 SHORT $L176099

; 581  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

  00024	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00027	8b 54 24 08	 mov	 edx, DWORD PTR __Val$[esp]
  0002b	8b 12		 mov	 edx, DWORD PTR [edx]
  0002d	89 10		 mov	 DWORD PTR [eax], edx
  0002f	83 c0 04	 add	 eax, 4
  00032	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00035	5e		 pop	 esi

; 584  : 		}

  00036	c2 04 00	 ret	 4
$L176099:

; 582  : 		else
; 583  : 			insert(end(), _Val);

  00039	8b 54 24 08	 mov	 edx, DWORD PTR __Val$[esp]
  0003d	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00040	52		 push	 edx
  00041	6a 01		 push	 1
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEXViterator@12@IABQAUtagITEMMAGIC@@@Z ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Insert_n
  00049	5e		 pop	 esi

; 584  : 		}

  0004a	c2 04 00	 ret	 4
?push_back@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAEXABQAUtagITEMMAGIC@@@Z ENDP ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::push_back
_TEXT	ENDS
PUBLIC	??1?$map@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@@std@@QAE@XZ ; std::map<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> > >::~map<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> > >
; Function compile flags: /Ogty
;	COMDAT ??1?$map@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
$T188312 = -4						; size = 4
??1?$map@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@@std@@QAE@XZ PROC NEAR ; std::map<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> > >::~map<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> > >, COMDAT
; _this$ = ecx
  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	50		 push	 eax
  0000a	51		 push	 ecx
  0000b	8d 44 24 0c	 lea	 eax, DWORD PTR $T188312[esp+16]
  0000f	50		 push	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::erase
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 04	 add	 esp, 4
  00023	33 c0		 xor	 eax, eax
  00025	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00028	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0002b	5e		 pop	 esi
  0002c	59		 pop	 ecx
  0002d	c3		 ret	 0
??1?$map@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> > >::~map<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> > >
_TEXT	ENDS
PUBLIC	??1?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ ; std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::~map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >
; Function compile flags: /Ogty
;	COMDAT ??1?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T188458 = -4						; size = 4
??1?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ PROC NEAR ; std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::~map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >, COMDAT
; _this$ = ecx
  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	50		 push	 eax
  0000a	51		 push	 ecx
  0000b	8d 44 24 0c	 lea	 eax, DWORD PTR $T188458[esp+16]
  0000f	50		 push	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::erase
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 04	 add	 esp, 4
  00023	33 c0		 xor	 eax, eax
  00025	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00028	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0002b	5e		 pop	 esi
  0002c	59		 pop	 ecx
  0002d	c3		 ret	 0
??1?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ ENDP ; std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::~map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >
_TEXT	ENDS
PUBLIC	??1CTItem@@UAE@XZ				; CTItem::~CTItem
PUBLIC	??_7CTItem@@6B@					; CTItem::`vftable'
PUBLIC	??_GCTItem@@UAEPAXI@Z				; CTItem::`scalar deleting destructor'
EXTRN	??_ECTItem@@UAEPAXI@Z:NEAR			; CTItem::`vector deleting destructor'
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
xdata$x	SEGMENT
$T188988 DD	0ffffffffH
	DD	FLAT:$L188472
	DD	00H
	DD	FLAT:$L188473
$T188982 DD	019930520H
	DD	02H
	DD	FLAT:$T188988
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_7CTItem@@6B@
CONST	SEGMENT
??_7CTItem@@6B@ DD FLAT:??_ECTItem@@UAEPAXI@Z		; CTItem::`vftable'
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\titem.cpp
CONST	ENDS
;	COMDAT ??1CTItem@@UAE@XZ
_TEXT	SEGMENT
$T188794 = -20						; size = 4
$T188602 = -20						; size = 4
_itTMAGIC$ = -20					; size = 4
$T188954 = -16						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CTItem@@UAE@XZ PROC NEAR				; CTItem::~CTItem, COMDAT
; _this$ = ecx

; 36   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1CTItem@@UAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 08	 sub	 esp, 8
  00018	53		 push	 ebx
  00019	55		 push	 ebp
  0001a	8b e9		 mov	 ebp, ecx
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	89 6c 24 14	 mov	 DWORD PTR _this$[esp+36], ebp
  00022	c7 45 00 00 00
	00 00		 mov	 DWORD PTR [ebp], OFFSET FLAT:??_7CTItem@@6B@

; 37   : 	MAPTMAGIC::iterator itTMAGIC;
; 38   : 
; 39   : 	for( itTMAGIC = m_mapTMAGIC.begin(); itTMAGIC != m_mapTMAGIC.end(); itTMAGIC++)

  00029	8b 4d 0c	 mov	 ecx, DWORD PTR [ebp+12]
  0002c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0002e	3b c1		 cmp	 eax, ecx
  00030	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+44], 1
  00038	89 44 24 10	 mov	 DWORD PTR _itTMAGIC$[esp+36], eax
  0003c	74 22		 je	 SHORT $L175307
  0003e	8b ff		 npad	 2
$L188525:

; 40   : 		delete (*itTMAGIC).second;

  00040	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00049	83 c4 04	 add	 esp, 4
  0004c	8d 4c 24 10	 lea	 ecx, DWORD PTR _itTMAGIC$[esp+36]
  00050	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::const_iterator::_Inc
  00055	8b 4d 0c	 mov	 ecx, DWORD PTR [ebp+12]
  00058	8b 44 24 10	 mov	 eax, DWORD PTR _itTMAGIC$[esp+36]
  0005c	3b c1		 cmp	 eax, ecx
  0005e	75 e0		 jne	 SHORT $L188525
$L175307:

; 41   : 
; 42   : 	m_mapTMAGIC.clear();

  00060	8b 45 0c	 mov	 eax, DWORD PTR [ebp+12]
  00063	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  00066	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  00069	8d 75 08	 lea	 esi, DWORD PTR [ebp+8]
  0006c	33 db		 xor	 ebx, ebx
  0006e	3a c3		 cmp	 al, bl
  00070	89 7c 24 10	 mov	 DWORD PTR $T188602[esp+36], edi
  00074	75 25		 jne	 SHORT $L188646
$L188644:
  00076	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00079	51		 push	 ecx
  0007a	8b ce		 mov	 ecx, esi
  0007c	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Erase
  00081	8b 54 24 10	 mov	 edx, DWORD PTR $T188602[esp+36]
  00085	8b 3f		 mov	 edi, DWORD PTR [edi]
  00087	52		 push	 edx
  00088	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0008d	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  00090	83 c4 04	 add	 esp, 4
  00093	3a c3		 cmp	 al, bl
  00095	89 7c 24 10	 mov	 DWORD PTR $T188602[esp+36], edi
  00099	74 db		 je	 SHORT $L188644
$L188646:
  0009b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009e	89 40 04	 mov	 DWORD PTR [eax+4], eax
  000a1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000a4	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  000a7	89 00		 mov	 DWORD PTR [eax], eax
  000a9	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000ac	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 43   : }

  000af	8b 45 60	 mov	 eax, DWORD PTR [ebp+96]
  000b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b4	8d 7d 5c	 lea	 edi, DWORD PTR [ebp+92]
  000b7	50		 push	 eax
  000b8	51		 push	 ecx
  000b9	8d 44 24 18	 lea	 eax, DWORD PTR $T188794[esp+44]
  000bd	50		 push	 eax
  000be	8b cf		 mov	 ecx, edi
  000c0	88 5c 24 2c	 mov	 BYTE PTR __$EHRec$[esp+56], bl
  000c4	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::erase
  000c9	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d2	83 c4 04	 add	 esp, 4
  000d5	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  000d8	89 5f 08	 mov	 DWORD PTR [edi+8], ebx
  000db	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000de	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e0	50		 push	 eax
  000e1	51		 push	 ecx
  000e2	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T188954[esp+44]
  000e6	51		 push	 ecx
  000e7	8b ce		 mov	 ecx, esi
  000e9	c7 44 24 2c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+56], -1
  000f1	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::erase
  000f6	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000f9	52		 push	 edx
  000fa	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000ff	8b 4c 24 1c	 mov	 ecx, DWORD PTR __$EHRec$[esp+40]
  00103	83 c4 04	 add	 esp, 4
  00106	5f		 pop	 edi
  00107	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  0010a	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0010d	5e		 pop	 esi
  0010e	5d		 pop	 ebp
  0010f	5b		 pop	 ebx
  00110	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00117	83 c4 14	 add	 esp, 20			; 00000014H
  0011a	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L188472:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1?$map@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@@std@@QAE@XZ
$L188473:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 5c	 add	 ecx, 92			; 0000005cH
  00011	e9 00 00 00 00	 jmp	 ??1?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ
__ehhandler$??1CTItem@@UAE@XZ:
  00016	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T188982
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CTItem@@UAE@XZ ENDP					; CTItem::~CTItem
PUBLIC	?Catalyzer@CTItem@@QAEXPAVCTPlayer@@@Z		; CTItem::Catalyzer
EXTRN	?MakeItemMagicValue@CTObjBase@@QAEGHG@Z:NEAR	; CTObjBase::MakeItemMagicValue
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
xdata$x	SEGMENT
$T189641 DD	0ffffffffH
	DD	FLAT:$L189007
$T189629 DD	019930520H
	DD	01H
	DD	FLAT:$T189641
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ?opprob@?1??Catalyzer@CTItem@@QAEXPAVCTPlayer@@@Z@4PAHA
_DATA	SEGMENT
?opprob@?1??Catalyzer@CTItem@@QAEXPAVCTPlayer@@@Z@4PAHA DD 064H ; `CTItem::Catalyzer'::`2'::opprob
	DD	032H
	DD	014H
	DD	0aH
	DD	05H
	DD	01H
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\titem.cpp
_DATA	ENDS
;	COMDAT ?Catalyzer@CTItem@@QAEXPAVCTPlayer@@@Z
_TEXT	SEGMENT
_bSelect$175771 = -53					; size = 1
tv551 = -52						; size = 4
_it$ = -52						; size = 4
_this$ = -48						; size = 4
$T189001 = -44						; size = 8
$T189002 = -36						; size = 8
_vMagic$ = -28						; size = 16
__$EHRec$ = -12						; size = 12
_pPlayer$ = 8						; size = 4
?Catalyzer@CTItem@@QAEXPAVCTPlayer@@@Z PROC NEAR	; CTItem::Catalyzer, COMDAT
; _this$ = ecx

; 649  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?Catalyzer@CTItem@@QAEXPAVCTPlayer@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00018	53		 push	 ebx
  00019	55		 push	 ebp
  0001a	56		 push	 esi
  0001b	89 4c 24 14	 mov	 DWORD PTR _this$[esp+68], ecx

; 650  : 	static int opprob[6] = { 100, 50, 20, 10, 5, 1};
; 651  : 
; 652  : 	MAPTITEMMAGIC::iterator it;
; 653  : 
; 654  : 	VTITEMMAGIC vMagic;
; 655  : 	vMagic.clear();
; 656  : 
; 657  : 	for(it=_AtlModule.m_mapTItemMagic.begin(); it!=_AtlModule.m_mapTItemMagic.end(); it++)

  0001f	8b 0d d4 07 00
	00		 mov	 ecx, DWORD PTR ?_AtlModule@@3VCTMapSvrModule@@A+2004
  00025	8b 01		 mov	 eax, DWORD PTR [ecx]
  00027	33 f6		 xor	 esi, esi
  00029	33 db		 xor	 ebx, ebx
  0002b	33 ed		 xor	 ebp, ebp
  0002d	3b c1		 cmp	 eax, ecx
  0002f	89 74 24 40	 mov	 DWORD PTR __$EHRec$[esp+76], esi
  00033	89 5c 24 2c	 mov	 DWORD PTR _vMagic$[esp+72], ebx
  00037	89 6c 24 30	 mov	 DWORD PTR _vMagic$[esp+76], ebp
  0003b	89 74 24 34	 mov	 DWORD PTR _vMagic$[esp+80], esi
  0003f	89 44 24 10	 mov	 DWORD PTR _it$[esp+68], eax
  00043	74 63		 je	 SHORT $L175746
$L189638:

; 658  : 	{
; 659  : 		if((*it).first && (*it).second->m_bRefine)

  00045	8a 48 0c	 mov	 cl, BYTE PTR [eax+12]
  00048	84 c9		 test	 cl, cl
  0004a	74 47		 je	 SHORT $L175745
  0004c	8d 50 10	 lea	 edx, DWORD PTR [eax+16]
  0004f	8b 02		 mov	 eax, DWORD PTR [edx]
  00051	8a 48 14	 mov	 cl, BYTE PTR [eax+20]
  00054	84 c9		 test	 cl, cl
  00056	74 3b		 je	 SHORT $L175745

; 660  : 			vMagic.push_back((*it).second);

  00058	3b de		 cmp	 ebx, esi
  0005a	74 22		 je	 SHORT $L189479
  0005c	8b 4c 24 34	 mov	 ecx, DWORD PTR _vMagic$[esp+80]
  00060	8b c5		 mov	 eax, ebp
  00062	2b c3		 sub	 eax, ebx
  00064	2b cb		 sub	 ecx, ebx
  00066	c1 f8 02	 sar	 eax, 2
  00069	c1 f9 02	 sar	 ecx, 2
  0006c	3b c1		 cmp	 eax, ecx
  0006e	73 0e		 jae	 SHORT $L189479
  00070	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00072	89 4d 00	 mov	 DWORD PTR [ebp], ecx
  00075	83 c5 04	 add	 ebp, 4
  00078	89 6c 24 30	 mov	 DWORD PTR _vMagic$[esp+76], ebp
  0007c	eb 15		 jmp	 SHORT $L175745
$L189479:
  0007e	52		 push	 edx
  0007f	6a 01		 push	 1
  00081	55		 push	 ebp
  00082	8d 4c 24 34	 lea	 ecx, DWORD PTR _vMagic$[esp+80]
  00086	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@IAEXViterator@12@IABQAUtagITEMMAGIC@@@Z ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::_Insert_n
  0008b	8b 6c 24 30	 mov	 ebp, DWORD PTR _vMagic$[esp+76]
  0008f	8b 5c 24 2c	 mov	 ebx, DWORD PTR _vMagic$[esp+72]
$L175745:
  00093	8d 4c 24 10	 lea	 ecx, DWORD PTR _it$[esp+68]
  00097	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagITEMMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagITEMMAGIC@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagITEMMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagITEMMAGIC *> >,0> >::const_iterator::_Inc
  0009c	8b 44 24 10	 mov	 eax, DWORD PTR _it$[esp+68]
  000a0	3b 05 d4 07 00
	00		 cmp	 eax, DWORD PTR ?_AtlModule@@3VCTMapSvrModule@@A+2004
  000a6	75 9d		 jne	 SHORT $L189638
$L175746:

; 661  : 	}
; 662  : 
; 663  : 	for( int i=0; i<6; i++)

  000a8	be 00 00 00 00	 mov	 esi, OFFSET FLAT:?opprob@?1??Catalyzer@CTItem@@QAEXPAVCTPlayer@@@Z@4PAHA
  000ad	89 74 24 10	 mov	 DWORD PTR tv551[esp+68], esi
  000b1	57		 push	 edi
$L189639:

; 664  : 	{
; 665  : 		if( rand() % 100 < opprob[i] )

  000b2	e8 00 00 00 00	 call	 _rand
  000b7	99		 cdq
  000b8	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  000bd	f7 f9		 idiv	 ecx
  000bf	3b 16		 cmp	 edx, DWORD PTR [esi]
  000c1	0f 8d b2 00 00
	00		 jge	 $L175768

; 666  : 		{
; 667  : 			BYTE bSelect = BYTE(rand() % vMagic.size());

  000c7	85 db		 test	 ebx, ebx
  000c9	75 04		 jne	 SHORT $L189488
  000cb	33 f6		 xor	 esi, esi
  000cd	eb 07		 jmp	 SHORT $L189489
$L189488:
  000cf	8b f5		 mov	 esi, ebp
  000d1	2b f3		 sub	 esi, ebx
  000d3	c1 fe 02	 sar	 esi, 2
$L189489:
  000d6	e8 00 00 00 00	 call	 _rand
  000db	33 d2		 xor	 edx, edx
  000dd	f7 f6		 div	 esi

; 668  : 			LPTMAGIC pTMAGIC = new TMAGIC();

  000df	6a 08		 push	 8
  000e1	88 54 24 17	 mov	 BYTE PTR _bSelect$175771[esp+76], dl
  000e5	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ea	83 c4 04	 add	 esp, 4
  000ed	85 c0		 test	 eax, eax
  000ef	74 0d		 je	 SHORT $L188999
  000f1	33 d2		 xor	 edx, edx
  000f3	8b c8		 mov	 ecx, eax
  000f5	89 11		 mov	 DWORD PTR [ecx], edx
  000f7	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  000fa	8b f0		 mov	 esi, eax
  000fc	eb 02		 jmp	 SHORT $L189000
$L188999:
  000fe	33 f6		 xor	 esi, esi
$L189000:

; 669  : 			pTMAGIC->m_pMagic = vMagic[bSelect];

  00100	0f b6 54 24 13	 movzx	 edx, BYTE PTR _bSelect$175771[esp+72]
  00105	8b 04 93	 mov	 eax, DWORD PTR [ebx+edx*4]

; 670  : 			pTMAGIC->m_wValue = pPlayer->MakeItemMagicValue(ITEMAGIC_BASELEVEL, pTMAGIC->m_pMagic->m_wRareBound);

  00108	8b 4c 24 4c	 mov	 ecx, DWORD PTR _pPlayer$[esp+68]
  0010c	8d 3c 93	 lea	 edi, DWORD PTR [ebx+edx*4]
  0010f	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00112	0f b7 40 18	 movzx	 eax, WORD PTR [eax+24]
  00116	50		 push	 eax
  00117	6a 46		 push	 70			; 00000046H
  00119	81 c1 00 01 01
	00		 add	 ecx, 65792		; 00010100H
  0011f	e8 00 00 00 00	 call	 ?MakeItemMagicValue@CTObjBase@@QAEGHG@Z ; CTObjBase::MakeItemMagicValue

; 671  : 
; 672  : 			if(pTMAGIC->m_wValue)

  00124	66 85 c0	 test	 ax, ax
  00127	66 89 06	 mov	 WORD PTR [esi], ax
  0012a	74 44		 je	 SHORT $L175776

; 673  : 			{
; 674  : 				m_mapTMAGIC.insert(MAPTMAGIC::value_type(pTMAGIC->m_pMagic->m_bMagic, pTMAGIC));

  0012c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0012f	8a 11		 mov	 dl, BYTE PTR [ecx]
  00131	8d 44 24 1c	 lea	 eax, DWORD PTR $T189001[esp+72]
  00135	50		 push	 eax
  00136	8d 4c 24 28	 lea	 ecx, DWORD PTR $T189002[esp+76]
  0013a	51		 push	 ecx
  0013b	8b 4c 24 20	 mov	 ecx, DWORD PTR _this$[esp+80]
  0013f	83 c1 08	 add	 ecx, 8
  00142	88 54 24 24	 mov	 BYTE PTR $T189001[esp+80], dl
  00146	89 74 24 28	 mov	 DWORD PTR $T189001[esp+84], esi
  0014a	e8 00 00 00 00	 call	 ?insert@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBEPAUtagTMAGIC@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::insert

; 675  : 				vMagic.erase(vMagic.begin() + bSelect);

  0014f	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  00152	8b d5		 mov	 edx, ebp
  00154	2b d0		 sub	 edx, eax
  00156	c1 fa 02	 sar	 edx, 2
  00159	c1 e2 02	 shl	 edx, 2
  0015c	52		 push	 edx
  0015d	50		 push	 eax
  0015e	57		 push	 edi
  0015f	e8 00 00 00 00	 call	 _memmove
  00164	83 c4 0c	 add	 esp, 12			; 0000000cH
  00167	83 ed 04	 sub	 ebp, 4
  0016a	89 6c 24 34	 mov	 DWORD PTR _vMagic$[esp+80], ebp

; 676  : 			}
; 677  : 			else

  0016e	eb 09		 jmp	 SHORT $L175768
$L175776:

; 678  : 				delete pTMAGIC;

  00170	56		 push	 esi
  00171	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00176	83 c4 04	 add	 esp, 4
$L175768:
  00179	8b 74 24 14	 mov	 esi, DWORD PTR tv551[esp+72]
  0017d	83 c6 04	 add	 esi, 4
  00180	81 fe 18 00 00
	00		 cmp	 esi, OFFSET FLAT:?opprob@?1??Catalyzer@CTItem@@QAEXPAVCTPlayer@@@Z@4PAHA+24
  00186	89 74 24 14	 mov	 DWORD PTR tv551[esp+72], esi
  0018a	0f 8c 22 ff ff
	ff		 jl	 $L189639

; 679  : 		}
; 680  : 	}
; 681  : }

  00190	85 db		 test	 ebx, ebx
  00192	5f		 pop	 edi
  00193	74 09		 je	 SHORT $L189624
  00195	53		 push	 ebx
  00196	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0019b	83 c4 04	 add	 esp, 4
$L189624:
  0019e	8b 4c 24 38	 mov	 ecx, DWORD PTR __$EHRec$[esp+68]
  001a2	5e		 pop	 esi
  001a3	5d		 pop	 ebp
  001a4	5b		 pop	 ebx
  001a5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001ac	83 c4 38	 add	 esp, 56			; 00000038H
  001af	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L189007:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR _vMagic$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@PAUtagITEMMAGIC@@V?$allocator@PAUtagITEMMAGIC@@@std@@@std@@QAE@XZ ; std::vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >::~vector<tagITEMMAGIC *,std::allocator<tagITEMMAGIC *> >
__ehhandler$?Catalyzer@CTItem@@QAEXPAVCTPlayer@@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T189629
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Catalyzer@CTItem@@QAEXPAVCTPlayer@@@Z ENDP		; CTItem::Catalyzer
PUBLIC	??0?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ ; std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\map
;	COMDAT ??0?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ PROC NEAR ; std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >, COMDAT
; _this$ = ecx

; 102  : 		{	// construct empty map from defaults

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Buynode
  00008	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000b	c6 40 15 01	 mov	 BYTE PTR [eax+21], 1
  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00012	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00015	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00018	89 00		 mov	 DWORD PTR [eax], eax
  0001a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001d	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00020	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 103  : 		}

  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	c3		 ret	 0
??0?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ ENDP ; std::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >::map<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> > >
_TEXT	ENDS
PUBLIC	??0?$map@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@@std@@QAE@XZ ; std::map<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> > >::map<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> > >
; Function compile flags: /Ogty
;	COMDAT ??0?$map@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$map@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@@std@@QAE@XZ PROC NEAR ; std::map<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> > >::map<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> > >, COMDAT
; _this$ = ecx

; 102  : 		{	// construct empty map from defaults

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Buynode
  00008	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000b	c6 40 15 01	 mov	 BYTE PTR [eax+21], 1
  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00012	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00015	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00018	89 00		 mov	 DWORD PTR [eax], eax
  0001a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001d	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00020	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 103  : 		}

  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	c3		 ret	 0
??0?$map@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> > >::map<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> > >
_TEXT	ENDS
PUBLIC	??0CTItem@@QAE@XZ				; CTItem::CTItem
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
xdata$x	SEGMENT
$T190510 DD	0ffffffffH
	DD	FLAT:$L189977
	DD	00H
	DD	FLAT:$L189978
$T190508 DD	019930520H
	DD	02H
	DD	FLAT:$T190510
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\titem.cpp
xdata$x	ENDS
;	COMDAT ??0CTItem@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CTItem@@QAE@XZ PROC NEAR				; CTItem::CTItem, COMDAT
; _this$ = ecx

; 6    : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0CTItem@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	53		 push	 ebx
  00017	55		 push	 ebp
  00018	56		 push	 esi
  00019	8b f1		 mov	 esi, ecx
  0001b	57		 push	 edi
  0001c	8d 7e 08	 lea	 edi, DWORD PTR [esi+8]
  0001f	8b cf		 mov	 ecx, edi
  00021	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CTItem@@6B@
  0002b	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Buynode
  00030	89 47 04	 mov	 DWORD PTR [edi+4], eax
  00033	c6 40 15 01	 mov	 BYTE PTR [eax+21], 1
  00037	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0003a	89 40 04	 mov	 DWORD PTR [eax+4], eax
  0003d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00040	89 00		 mov	 DWORD PTR [eax], eax
  00042	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00045	33 db		 xor	 ebx, ebx
  00047	89 40 08	 mov	 DWORD PTR [eax+8], eax
  0004a	89 5f 08	 mov	 DWORD PTR [edi+8], ebx
  0004d	8d 6e 5c	 lea	 ebp, DWORD PTR [esi+92]
  00050	8b cd		 mov	 ecx, ebp
  00052	89 5c 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], ebx
  00056	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Buynode
  0005b	89 45 04	 mov	 DWORD PTR [ebp+4], eax
  0005e	c6 40 15 01	 mov	 BYTE PTR [eax+21], 1
  00062	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00065	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00068	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  0006b	89 00		 mov	 DWORD PTR [eax], eax
  0006d	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00070	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00073	89 5d 08	 mov	 DWORD PTR [ebp+8], ebx

; 7    : 	m_mapTMAGIC.clear();

  00076	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00079	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0007c	51		 push	 ecx
  0007d	8b cf		 mov	 ecx, edi
  0007f	c6 44 24 20 01	 mov	 BYTE PTR __$EHRec$[esp+44], 1
  00084	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagTMAGIC *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagTMAGIC *> >,0> >::_Erase
  00089	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0008c	89 40 04	 mov	 DWORD PTR [eax+4], eax
  0008f	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00092	89 5f 08	 mov	 DWORD PTR [edi+8], ebx
  00095	89 00		 mov	 DWORD PTR [eax], eax
  00097	8b 7f 04	 mov	 edi, DWORD PTR [edi+4]
  0009a	89 7f 08	 mov	 DWORD PTR [edi+8], edi

; 8    : 	m_pTITEM = NULL;

  0009d	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 9    : 	m_pTITEMATTR = NULL;

  000a0	89 5e 18	 mov	 DWORD PTR [esi+24], ebx

; 10   : 
; 11   : 	m_bInven = INVEN_NULL;

  000a3	c6 46 2a fc	 mov	 BYTE PTR [esi+42], 252	; 000000fcH

; 12   : 	m_dlID = 0;

  000a7	89 5e 20	 mov	 DWORD PTR [esi+32], ebx
  000aa	89 5e 24	 mov	 DWORD PTR [esi+36], ebx

; 13   : 	m_bItemID = 0;

  000ad	88 5e 28	 mov	 BYTE PTR [esi+40], bl

; 14   : 	m_wItemID = 0;

  000b0	66 89 5e 30	 mov	 WORD PTR [esi+48], bx

; 15   : 	m_bLevel = 0;

  000b4	88 5e 29	 mov	 BYTE PTR [esi+41], bl

; 16   : 	m_bCount = 0;

  000b7	88 5e 32	 mov	 BYTE PTR [esi+50], bl

; 17   : 	m_bGLevel = 0;

  000ba	88 5e 33	 mov	 BYTE PTR [esi+51], bl

; 18   : 	m_dwDuraMax = 0;

  000bd	89 5e 34	 mov	 DWORD PTR [esi+52], ebx

; 19   : 	m_dwDuraCur = 0;

  000c0	89 5e 38	 mov	 DWORD PTR [esi+56], ebx

; 20   : 	m_bRefineCur = 0;

  000c3	88 5e 3c	 mov	 BYTE PTR [esi+60], bl

; 21   : 	m_dEndTime = 0;

  000c6	89 5e 40	 mov	 DWORD PTR [esi+64], ebx
  000c9	89 5e 44	 mov	 DWORD PTR [esi+68], ebx

; 22   : 	m_dAlarmTime = 0;

  000cc	89 5e 48	 mov	 DWORD PTR [esi+72], ebx
  000cf	89 5e 4c	 mov	 DWORD PTR [esi+76], ebx

; 23   : 	m_bGradeEffect = 0;

  000d2	88 5e 68	 mov	 BYTE PTR [esi+104], bl

; 24   : 	m_bMagicDropLevel = 0;

  000d5	88 5e 69	 mov	 BYTE PTR [esi+105], bl

; 25   : 	m_bStType = STORAGE_INVEN;

  000d8	88 5e 50	 mov	 BYTE PTR [esi+80], bl

; 26   : 	m_dwStItemID = 0;

  000db	89 5e 54	 mov	 DWORD PTR [esi+84], ebx

; 27   : 	m_dwOwnerID = 0;

  000de	89 5e 2c	 mov	 DWORD PTR [esi+44], ebx

; 28   : 	m_dwMoney = 0;

  000e1	89 9e 84 00 00
	00		 mov	 DWORD PTR [esi+132], ebx

; 29   : 
; 30   : 	m_bMaxRouting = 0;

  000e7	88 5e 58	 mov	 BYTE PTR [esi+88], bl

; 31   : 	m_mapRoutingJoiner.clear();

  000ea	8b 55 04	 mov	 edx, DWORD PTR [ebp+4]
  000ed	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  000f0	50		 push	 eax
  000f1	8b cd		 mov	 ecx, ebp
  000f3	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,unsigned long,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,unsigned long> >,0> >::_Erase
  000f8	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  000fb	89 40 04	 mov	 DWORD PTR [eax+4], eax
  000fe	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00101	89 5d 08	 mov	 DWORD PTR [ebp+8], ebx
  00104	89 00		 mov	 DWORD PTR [eax], eax
  00106	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]
  00109	89 6d 08	 mov	 DWORD PTR [ebp+8], ebp

; 32   : 	memset(m_dwExtValue, 0, sizeof(DWORD)*TMAGIC_MAX);

  0010c	33 c9		 xor	 ecx, ecx
  0010e	8d 56 6c	 lea	 edx, DWORD PTR [esi+108]
  00111	89 0a		 mov	 DWORD PTR [edx], ecx
  00113	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  00116	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  00119	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  0011c	5f		 pop	 edi
  0011d	89 4a 10	 mov	 DWORD PTR [edx+16], ecx

; 33   : }

  00120	8b c6		 mov	 eax, esi
  00122	5e		 pop	 esi
  00123	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
  00126	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0012a	5d		 pop	 ebp
  0012b	5b		 pop	 ebx
  0012c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00133	83 c4 10	 add	 esp, 16			; 00000010H
  00136	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L189977:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1?$map@EPAUtagTMAGIC@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagTMAGIC@@@std@@@3@@std@@QAE@XZ
$L189978:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 5c	 add	 ecx, 92			; 0000005cH
  00011	e9 00 00 00 00	 jmp	 ??1?$map@KKU?$less@K@std@@V?$allocator@U?$pair@$$CBKK@std@@@2@@std@@QAE@XZ
__ehhandler$??0CTItem@@QAE@XZ:
  00016	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T190508
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CTItem@@QAE@XZ ENDP					; CTItem::CTItem
; Function compile flags: /Ogty
;	COMDAT ??_GCTItem@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCTItem@@UAEPAXI@Z PROC NEAR				; CTItem::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1CTItem@@UAE@XZ	; CTItem::~CTItem
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L190516
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L190516:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GCTItem@@UAEPAXI@Z ENDP				; CTItem::`scalar deleting destructor'
_TEXT	ENDS
END
