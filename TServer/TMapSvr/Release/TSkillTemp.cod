; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\TSkillTemp.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??0CTSkillTemp@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$map@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CTSkillTemp@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsPositive@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsNegative@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HaveSkillData@CTSkillTemp@@QAEEPAUtagTSKILLDATA@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CalcValue@CTSkillTemp@@QAEHEEEK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetValue@CTSkillTemp@@QAEHPAUtagTSKILLDATA@@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Calculate@CTSkillTemp@@QAEHEKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsMirrorType@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsDamageType@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsRemainType@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsPassiveType@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsPosture@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAttackType@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsLongAttack@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CanEquip@CTSkillTemp@@QAEEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetID@CTSkillTemp@@QAEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsMaintainType@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsSilence@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsBuffType@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsDotType@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsRevivalType@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsBlockType@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsHideBuff@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsCancelMine@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsTrans@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsItemDelTarget@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsItemDelUser@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsDie@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsMultiAttack@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTransHPMPType@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckCountry@CTSkillTemp@@QAEEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPrice@CTSkillTemp@@QAEKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNeedSkillPoint@CTSkillTemp@@QAEEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNeedKindPoint@CTSkillTemp@@QAEEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckParentSkill@CTSkillTemp@@QAEEEE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAggro@CTSkillTemp@@QAEKE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetItemProbBuff@CTSkillTemp@@QAEGE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsRandomTrans@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsAfterMath@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsRandomBuff@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CanDefendAtDie@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsMonRecall@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsRecall@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsLuckyPotion@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsExpPotion@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAutoExp@CTSkillTemp@@QAEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?empty@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEAAPAUtagTSKILLDATA@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?back@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEAAPAUtagTSKILLDATA@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop_back@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$map@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBEPAUtagSKILLPOINT@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$less@E@std@@QBE_NABE0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buy@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IAEXPAPAUtagTSKILLDATA@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Vector_val@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IAE@V?$allocator@PAUtagTSKILLDATA@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAUtagTSKILLDATA@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAABEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@E@1@ABV?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBEPAUtagSKILLPOINT@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@3@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBEAAPAUtagTSKILLDATA@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Giterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xlen@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAUtagTSKILLDATA@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAUtagTSKILLDATA@@@std@@QAEXPAPAUtagTSKILLDATA@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@PAUtagTSKILLDATA@@@std@@QAEPAPAUtagTSKILLDATA@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myval@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBEPAUtagSKILLPOINT@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Init@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lbound@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@ABE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree_val@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Kfn@?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@SAABEABU?$pair@$$CBEPAUtagSKILLPOINT@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE@PAPAUtagTSKILLDATA@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Ziterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBEABQAUtagTSKILLDATA@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAUtagTSKILLDATA@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree_ptr@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE@PAPAUtagTSKILLDATA@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Color@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Max@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@QAE@U?$less@E@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@GIG@std@@YAXPAGIABGAAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagTAICONDITION@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTAICONDITION@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagTAICONDITION@@V?$allocator@PAUtagTAICONDITION@@@std@@@std@@YAXPAPAUtagTAICONDITION@@0AAV?$allocator@PAUtagTAICONDITION@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagTMONITEM@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTMONITEM@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagTMONITEM@@V?$allocator@PAUtagTMONITEM@@@std@@@std@@YAXPAPAUtagTMONITEM@@0AAV?$allocator@PAUtagTMONITEM@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagTMAPMON@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTMAPMON@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagTMAPMON@@V?$allocator@PAUtagTMAPMON@@@std@@@std@@YAXPAPAUtagTMAPMON@@0AAV?$allocator@PAUtagTMAPMON@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagPATHPOINT@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagPATHPOINT@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagPATHPOINT@@V?$allocator@PAUtagPATHPOINT@@@std@@@std@@YAXPAPAUtagPATHPOINT@@0AAV?$allocator@PAUtagPATHPOINT@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagQUESTCONDITION@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagQUESTCONDITION@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagQUESTCONDITION@@V?$allocator@PAUtagQUESTCONDITION@@@std@@@std@@YAXPAPAUtagQUESTCONDITION@@0AAV?$allocator@PAUtagQUESTCONDITION@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagQUESTREWARD@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagQUESTREWARD@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagQUESTREWARD@@V?$allocator@PAUtagQUESTREWARD@@@std@@@std@@YAXPAPAUtagQUESTREWARD@@0AAV?$allocator@PAUtagQUESTREWARD@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagQUESTTERM@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagQUESTTERM@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagQUESTTERM@@V?$allocator@PAUtagQUESTTERM@@@std@@@std@@YAXPAPAUtagQUESTTERM@@0AAV?$allocator@PAUtagQUESTTERM@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagTCASHITMSALE@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagTCASHITMSALE@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagTCASHITMSALE@@IU1@V?$allocator@UtagTCASHITMSALE@@@std@@@std@@YAXPAUtagTCASHITMSALE@@IABU1@AAV?$allocator@UtagTCASHITMSALE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagMONREGEN@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagMONREGEN@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagMONREGEN@@IU1@V?$allocator@UtagMONREGEN@@@std@@@std@@YAXPAUtagMONREGEN@@IABU1@AAV?$allocator@UtagMONREGEN@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagLOTTERY@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagLOTTERY@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagLOTTERY@@IU1@V?$allocator@UtagLOTTERY@@@std@@@std@@YAXPAUtagLOTTERY@@IABU1@AAV?$allocator@UtagLOTTERY@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@GV?$allocator@G@std@@@std@@YAXPAG0AAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAGPAGV?$allocator@G@std@@@std@@YAPAGPAG00AAV?$allocator@G@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAGPAG@std@@YAPAGPAG00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@VCTPlayer@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCTPlayer@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAVCTPlayer@@V?$allocator@PAVCTPlayer@@@std@@@std@@YAXPAPAVCTPlayer@@0AAV?$allocator@PAVCTPlayer@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagTCASHITMSALE@@V?$allocator@UtagTCASHITMSALE@@@std@@@std@@YAXPAUtagTCASHITMSALE@@0AAV?$allocator@UtagTCASHITMSALE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAUtagTCASHITMSALE@@PAU1@V?$allocator@UtagTCASHITMSALE@@@std@@@std@@YAPAUtagTCASHITMSALE@@PAU1@00AAV?$allocator@UtagTCASHITMSALE@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUtagTCASHITMSALE@@PAU1@@std@@YAPAUtagTCASHITMSALE@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@YAXPAUtagMONREGEN@@0AAV?$allocator@UtagMONREGEN@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAUtagMONREGEN@@PAU1@V?$allocator@UtagMONREGEN@@@std@@@std@@YAPAUtagMONREGEN@@PAU1@00AAV?$allocator@UtagMONREGEN@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUtagMONREGEN@@PAU1@@std@@YAPAUtagMONREGEN@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@YAXPAUtagLOTTERY@@0AAV?$allocator@UtagLOTTERY@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAUtagLOTTERY@@PAU1@V?$allocator@UtagLOTTERY@@@std@@@std@@YAPAUtagLOTTERY@@PAU1@00AAV?$allocator@UtagLOTTERY@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUtagLOTTERY@@PAU1@@std@@YAPAUtagLOTTERY@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@YAXPAPAUtagTSKILLDATA@@0AAV?$allocator@PAUtagTSKILLDATA@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAUtagTSKILLDATA@@@std@@YAPAPAUtagTSKILLDATA@@IPAPAU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@UtagTCASHITMSALE@@@std@@QAEXPAUtagTCASHITMSALE@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagTCASHITMSALE@@@std@@QAEXPAUtagTCASHITMSALE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@UtagMONREGEN@@@std@@QAEXPAUtagMONREGEN@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagMONREGEN@@@std@@QAEXPAUtagMONREGEN@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@UtagLOTTERY@@@std@@QAEXPAUtagLOTTERY@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagLOTTERY@@@std@@QAEXPAUtagLOTTERY@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill_n@PAGIG@std@@YAXPAGIABG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@GG@std@@YAPAGPAG00AAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagTCASHITMSALE@@PAU1@V?$allocator@UtagTCASHITMSALE@@@std@@@std@@YAPAUtagTCASHITMSALE@@PAU1@00AAV?$allocator@UtagTCASHITMSALE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagMONREGEN@@PAU1@V?$allocator@UtagMONREGEN@@@std@@@std@@YAPAUtagMONREGEN@@PAU1@00AAV?$allocator@UtagMONREGEN@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagLOTTERY@@PAU1@V?$allocator@UtagLOTTERY@@@std@@@std@@YAPAUtagLOTTERY@@PAU1@00AAV?$allocator@UtagLOTTERY@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagTSKILLDATA@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTSKILLDATA@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@YAXPAPAUtagTSKILLDATA@@0AAV?$allocator@PAUtagTSKILLDATA@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@UtagTCASHITMSALE@@U1@@std@@YAXPAUtagTCASHITMSALE@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagTCASHITMSALE@@@std@@YAXPAUtagTCASHITMSALE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@UtagMONREGEN@@U1@@std@@YAXPAUtagMONREGEN@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagMONREGEN@@@std@@YAXPAUtagMONREGEN@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@UtagLOTTERY@@U1@@std@@YAXPAUtagLOTTERY@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagLOTTERY@@@std@@YAXPAUtagLOTTERY@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@G@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pow@@YAMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?IsPositive@CTSkillTemp@@QAEEXZ			; CTSkillTemp::IsPositive
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\tskilltemp.cpp
;	COMDAT ?IsPositive@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsPositive@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::IsPositive, COMDAT
; _this$ = ecx

; 28   : 	return m_bPositive == SPT_POSITIVE;

  00000	80 79 02 01	 cmp	 BYTE PTR [ecx+2], 1
  00004	0f 94 c0	 sete	 al

; 29   : }

  00007	c3		 ret	 0
?IsPositive@CTSkillTemp@@QAEEXZ ENDP			; CTSkillTemp::IsPositive
_TEXT	ENDS
PUBLIC	?IsNegative@CTSkillTemp@@QAEEXZ			; CTSkillTemp::IsNegative
; Function compile flags: /Ogty
;	COMDAT ?IsNegative@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsNegative@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::IsNegative, COMDAT
; _this$ = ecx

; 33   : 	return !(m_bPositive % 2);

  00000	0f b6 41 02	 movzx	 eax, BYTE PTR [ecx+2]
  00004	25 01 00 00 80	 and	 eax, -2147483647	; 80000001H
  00009	79 05		 jns	 SHORT $L153920
  0000b	48		 dec	 eax
  0000c	83 c8 fe	 or	 eax, -2			; fffffffeH
  0000f	40		 inc	 eax
$L153920:
  00010	f7 d8		 neg	 eax
  00012	1a c0		 sbb	 al, al
  00014	fe c0		 inc	 al

; 34   : }

  00016	c3		 ret	 0
?IsNegative@CTSkillTemp@@QAEEXZ ENDP			; CTSkillTemp::IsNegative
_TEXT	ENDS
PUBLIC	?GetID@CTSkillTemp@@QAEGXZ			; CTSkillTemp::GetID
; Function compile flags: /Ogty
;	COMDAT ?GetID@CTSkillTemp@@QAEGXZ
_TEXT	SEGMENT
?GetID@CTSkillTemp@@QAEGXZ PROC NEAR			; CTSkillTemp::GetID, COMDAT
; _this$ = ecx

; 224  : 	return m_wID;

  00000	66 8b 01	 mov	 ax, WORD PTR [ecx]

; 225  : }

  00003	c3		 ret	 0
?GetID@CTSkillTemp@@QAEGXZ ENDP				; CTSkillTemp::GetID
_TEXT	ENDS
PUBLIC	?IsHideBuff@CTSkillTemp@@QAEEXZ			; CTSkillTemp::IsHideBuff
; Function compile flags: /Ogty
;	COMDAT ?IsHideBuff@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsHideBuff@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::IsHideBuff, COMDAT
; _this$ = ecx

; 297  : 	return m_bIsHideSkill;

  00000	8a 41 72	 mov	 al, BYTE PTR [ecx+114]

; 298  : }

  00003	c3		 ret	 0
?IsHideBuff@CTSkillTemp@@QAEEXZ ENDP			; CTSkillTemp::IsHideBuff
_TEXT	ENDS
PUBLIC	__real@4f800000
PUBLIC	?GetPrice@CTSkillTemp@@QAEKK@Z			; CTSkillTemp::GetPrice
EXTRN	__ftol2:NEAR
EXTRN	__fltused:NEAR
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+009
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ?GetPrice@CTSkillTemp@@QAEKK@Z
_TEXT	SEGMENT
tv131 = 8						; size = 4
_dwMoney$ = 8						; size = 4
?GetPrice@CTSkillTemp@@QAEKK@Z PROC NEAR		; CTSkillTemp::GetPrice, COMDAT
; _this$ = ecx

; 402  : 	return DWORD(dwMoney * m_fPrice);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _dwMoney$[esp-4]
  00004	db 44 24 04	 fild	 DWORD PTR _dwMoney$[esp-4]
  00008	85 c0		 test	 eax, eax
  0000a	7d 06		 jge	 SHORT $L153931
  0000c	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$L153931:
  00012	d8 49 60	 fmul	 DWORD PTR [ecx+96]
  00015	e8 00 00 00 00	 call	 __ftol2

; 403  : }

  0001a	c2 04 00	 ret	 4
?GetPrice@CTSkillTemp@@QAEKK@Z ENDP			; CTSkillTemp::GetPrice
_TEXT	ENDS
PUBLIC	?size@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBEIXZ ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?size@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::size, COMDAT
; _this$ = ecx

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L153938
  00007	33 c0		 xor	 eax, eax

; 517  : 		}

  00009	c3		 ret	 0
$L153938:

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  0000a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2

; 517  : 		}

  00012	c3		 ret	 0
?size@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::size
_TEXT	ENDS
PUBLIC	?empty@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBE_NXZ ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::empty
; Function compile flags: /Ogty
;	COMDAT ?empty@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBE_NXZ PROC NEAR ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::empty, COMDAT
; _this$ = ecx

; 526  : 		return (size() == 0);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 0c		 jne	 SHORT $L153948
  00007	33 c0		 xor	 eax, eax
  00009	33 c9		 xor	 ecx, ecx
  0000b	85 c0		 test	 eax, eax
  0000d	0f 94 c1	 sete	 cl
  00010	8a c1		 mov	 al, cl

; 527  : 		}

  00012	c3		 ret	 0

; 526  : 		return (size() == 0);

$L153948:
  00013	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00016	2b c2		 sub	 eax, edx
  00018	c1 f8 02	 sar	 eax, 2
  0001b	33 c9		 xor	 ecx, ecx
  0001d	85 c0		 test	 eax, eax
  0001f	0f 94 c1	 sete	 cl
  00022	8a c1		 mov	 al, cl

; 527  : 		}

  00024	c3		 ret	 0
?empty@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBE_NXZ ENDP ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::empty
_TEXT	ENDS
PUBLIC	??R?$less@E@std@@QBE_NABE0@Z			; std::less<unsigned char>::operator()
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\functional
;	COMDAT ??R?$less@E@std@@QBE_NABE0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@E@std@@QBE_NABE0@Z PROC NEAR			; std::less<unsigned char>::operator(), COMDAT
; _this$ = ecx

; 139  : 		return (_Left < _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000a	33 c0		 xor	 eax, eax
  0000c	3a 0a		 cmp	 cl, BYTE PTR [edx]
  0000e	1b c0		 sbb	 eax, eax
  00010	f7 d8		 neg	 eax

; 140  : 		}

  00012	c2 08 00	 ret	 8
??R?$less@E@std@@QBE_NABE0@Z ENDP			; std::less<unsigned char>::operator()
_TEXT	ENDS
PUBLIC	??0?$allocator@PAUtagTSKILLDATA@@@std@@QAE@XZ	; std::allocator<tagTSKILLDATA *>::allocator<tagTSKILLDATA *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@PAUtagTSKILLDATA@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAUtagTSKILLDATA@@@std@@QAE@XZ PROC NEAR	; std::allocator<tagTSKILLDATA *>::allocator<tagTSKILLDATA *>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@PAUtagTSKILLDATA@@@std@@QAE@XZ ENDP	; std::allocator<tagTSKILLDATA *>::allocator<tagTSKILLDATA *>
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@std@@QAE@XZ ; std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >
; Function compile flags: /Ogty
;	COMDAT ??0?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@std@@QAE@XZ PROC NEAR ; std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@std@@QAE@XZ ENDP ; std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >
_TEXT	ENDS
PUBLIC	??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::const_iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 193  : 			{	// construct with null node pointer

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 194  : 			}

  00008	c3		 ret	 0
??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??8const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::operator==
; Function compile flags: /Ogty
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::operator==, COMDAT
; _this$ = ecx

; 241  : 			return (_Ptr == _Right._Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	f7 d8		 neg	 eax
  0000a	1b c0		 sbb	 eax, eax
  0000c	40		 inc	 eax

; 242  : 			}

  0000d	c2 04 00	 ret	 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::operator==
_TEXT	ENDS
PUBLIC	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::_Mynode
; Function compile flags: /Ogty
;	COMDAT ?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@3@XZ
_TEXT	SEGMENT
?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@3@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::_Mynode, COMDAT
; _this$ = ecx

; 284  : 			return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 285  : 			}

  00002	c3		 ret	 0
?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@3@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::_Mynode
_TEXT	ENDS
PUBLIC	??0?$allocator@PAUtagTSKILLDATA@@@std@@QAE@ABV01@@Z ; std::allocator<tagTSKILLDATA *>::allocator<tagTSKILLDATA *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@PAUtagTSKILLDATA@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PAUtagTSKILLDATA@@@std@@QAE@ABV01@@Z PROC NEAR ; std::allocator<tagTSKILLDATA *>::allocator<tagTSKILLDATA *>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@PAUtagTSKILLDATA@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<tagTSKILLDATA *>::allocator<tagTSKILLDATA *>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAUtagTSKILLDATA@@@std@@QAEXPAPAUtagTSKILLDATA@@I@Z ; std::allocator<tagTSKILLDATA *>::deallocate
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Ogty
;	COMDAT ?deallocate@?$allocator@PAUtagTSKILLDATA@@@std@@QAEXPAPAUtagTSKILLDATA@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAUtagTSKILLDATA@@@std@@QAEXPAPAUtagTSKILLDATA@@I@Z PROC NEAR ; std::allocator<tagTSKILLDATA *>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@PAUtagTSKILLDATA@@@std@@QAEXPAPAUtagTSKILLDATA@@I@Z ENDP ; std::allocator<tagTSKILLDATA *>::deallocate
_TEXT	ENDS
PUBLIC	?_Isnil@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Isnil
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Isnil, COMDAT

; 137  : 		return ((_Charref)(*_Pnode)._Isnil);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 15	 add	 eax, 21			; 00000015H

; 138  : 		}

  00007	c3		 ret	 0
?_Isnil@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Isnil
_TEXT	ENDS
PUBLIC	?_Left@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Left
; Function compile flags: /Ogty
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Left, COMDAT

; 147  : 		return ((_Nodepref)(*_Pnode)._Left);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 148  : 		}

  00004	c3		 ret	 0
?_Left@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Left
_TEXT	ENDS
PUBLIC	?_Parent@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Parent
; Function compile flags: /Ogty
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Parent, COMDAT

; 152  : 		return ((_Nodepref)(*_Pnode)._Parent);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 153  : 		}

  00007	c3		 ret	 0
?_Parent@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Parent
_TEXT	ENDS
PUBLIC	?_Right@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Right
; Function compile flags: /Ogty
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Right, COMDAT

; 157  : 		return ((_Nodepref)(*_Pnode)._Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 08	 add	 eax, 8

; 158  : 		}

  00007	c3		 ret	 0
?_Right@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Right
_TEXT	ENDS
PUBLIC	?_Myval@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBEPAUtagSKILLPOINT@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Myval
; Function compile flags: /Ogty
;	COMDAT ?_Myval@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBEPAUtagSKILLPOINT@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBEPAUtagSKILLPOINT@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Myval, COMDAT

; 162  : 		return ((_Vref)(*_Pnode)._Myval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 0c	 add	 eax, 12			; 0000000cH

; 163  : 		}

  00007	c3		 ret	 0
?_Myval@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBEPAUtagSKILLPOINT@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Myval
_TEXT	ENDS
PUBLIC	?_Kfn@?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@SAABEABU?$pair@$$CBEPAUtagSKILLPOINT@@@2@@Z ; std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0>::_Kfn
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\map
;	COMDAT ?_Kfn@?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@SAABEABU?$pair@$$CBEPAUtagSKILLPOINT@@@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@SAABEABU?$pair@$$CBEPAUtagSKILLPOINT@@@2@@Z PROC NEAR ; std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0>::_Kfn, COMDAT

; 64   : 		return (_Val.first);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val$[esp-4]

; 65   : 		}

  00004	c3		 ret	 0
?_Kfn@?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@SAABEABU?$pair@$$CBEPAUtagSKILLPOINT@@@2@@Z ENDP ; std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0>::_Kfn
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@std@@QAE@ABV01@@Z PROC NEAR ; std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node>::deallocate
; Function compile flags: /Ogty
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@I@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::const_iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 200  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 201  : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??Yiterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEAAV012@H@Z ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::iterator::operator+=
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Yiterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Yiterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::iterator::operator+=, COMDAT
; _this$ = ecx

; 255  : 			{	// increment by integer

  00000	8b c1		 mov	 eax, ecx

; 256  : 			this->_Myptr += _Off;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  0000d	01 10		 add	 DWORD PTR [eax], edx

; 257  : 			return (*this);
; 258  : 			}

  0000f	c2 04 00	 ret	 4
??Yiterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::iterator::operator+=
_TEXT	ENDS
PUBLIC	??Ziterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEAAV012@H@Z ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::iterator::operator-=
; Function compile flags: /Ogty
;	COMDAT ??Ziterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Ziterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::iterator::operator-=, COMDAT
; _this$ = ecx

; 267  : 			{	// decrement by integer

  00000	8b c1		 mov	 eax, ecx

; 268  : 			return (*this += -_Off);

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8b 10		 mov	 edx, DWORD PTR [eax]
  00008	f7 d9		 neg	 ecx
  0000a	c1 e1 02	 shl	 ecx, 2
  0000d	03 d1		 add	 edx, ecx
  0000f	89 10		 mov	 DWORD PTR [eax], edx

; 269  : 			}

  00011	c2 04 00	 ret	 4
??Ziterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::iterator::operator-=
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBEABQAUtagTSKILLDATA@@XZ ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBEABQAUtagTSKILLDATA@@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBEABQAUtagTSKILLDATA@@XZ PROC NEAR ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 80   : 
; 81   : 
; 82   : 			return (*_Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 83   : 			}

  00002	c3		 ret	 0
??Dconst_iterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBEABQAUtagTSKILLDATA@@XZ ENDP ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAUtagTSKILLDATA@@@std@@QBEIXZ ; std::allocator<tagTSKILLDATA *>::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?max_size@?$allocator@PAUtagTSKILLDATA@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAUtagTSKILLDATA@@@std@@QBEIXZ PROC NEAR ; std::allocator<tagTSKILLDATA *>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 159  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PAUtagTSKILLDATA@@@std@@QBEIXZ ENDP ; std::allocator<tagTSKILLDATA *>::max_size
_TEXT	ENDS
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Root
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Root, COMDAT
; _this$ = ecx

; 1064 : 		return (_Parent(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 04	 add	 eax, 4

; 1065 : 		}

  00006	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Root
_TEXT	ENDS
PUBLIC	??0const_iterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE@PAPAUtagTSKILLDATA@@@Z ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::const_iterator::const_iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0const_iterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE@PAPAUtagTSKILLDATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0const_iterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE@PAPAUtagTSKILLDATA@@@Z PROC NEAR ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 73   : 		const_iterator(_Tptr _Ptr)

  00000	8b c1		 mov	 eax, ecx

; 74   : 			{	// construct with pointer _Ptr
; 75   : 			_Myptr = _Ptr;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 76   : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE@PAPAUtagTSKILLDATA@@@Z ENDP ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	?_Color@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Color
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Color@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Color, COMDAT

; 132  : 		return ((_Charref)(*_Pnode)._Color);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 14	 add	 eax, 20			; 00000014H

; 133  : 		}

  00007	c3		 ret	 0
?_Color@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Color
_TEXT	ENDS
PUBLIC	?_Max@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Max
; Function compile flags: /Ogty
;	COMDAT ?_Max@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Max, COMDAT

; 1035 : 		while (!_Isnil(_Right(_Pnode)))

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00007	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  0000a	84 d2		 test	 dl, dl
  0000c	75 0e		 jne	 SHORT $L153192
  0000e	8b ff		 npad	 2
$L153191:

; 1036 : 			_Pnode = _Right(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00015	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00018	84 d2		 test	 dl, dl
  0001a	74 f4		 je	 SHORT $L153191
$L153192:

; 1037 : 		return (_Pnode);
; 1038 : 		}

  0001c	c3		 ret	 0
?_Max@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Max
_TEXT	ENDS
PUBLIC	?_Min@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Min
; Function compile flags: /Ogty
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Min, COMDAT

; 1042 : 		while (!_Isnil(_Left(_Pnode)))

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	8b 08		 mov	 ecx, DWORD PTR [eax]
  00006	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00009	84 d2		 test	 dl, dl
  0000b	75 0e		 jne	 SHORT $L153196
  0000d	8d 49 00	 npad	 3
$L153195:

; 1043 : 			_Pnode = _Left(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00017	84 d2		 test	 dl, dl
  00019	74 f5		 je	 SHORT $L153195
$L153196:

; 1044 : 		return (_Pnode);
; 1045 : 		}

  0001b	c3		 ret	 0
?_Min@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Min
_TEXT	ENDS
PUBLIC	??0?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@QAE@U?$less@E@1@@Z ; std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0>::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\map
;	COMDAT ??0?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@QAE@U?$less@E@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 1
??0?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@QAE@U?$less@E@1@@Z PROC NEAR ; std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0>::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0>, COMDAT
; _this$ = ecx

; 38   : 		{	// construct with specified comparator

  00000	8b c1		 mov	 eax, ecx

; 39   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@QAE@U?$less@E@1@@Z ENDP ; std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0>::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0>
_TEXT	ENDS
PUBLIC	??$_Allocate@PAUtagTSKILLDATA@@@std@@YAPAPAUtagTSKILLDATA@@IPAPAU1@@Z ; std::_Allocate<tagTSKILLDATA *>
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Allocate@PAUtagTSKILLDATA@@@std@@YAPAPAUtagTSKILLDATA@@IPAPAU1@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAUtagTSKILLDATA@@@std@@YAPAPAUtagTSKILLDATA@@IPAPAU1@@Z PROC NEAR ; std::_Allocate<tagTSKILLDATA *>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 35   : 	}

  00014	c3		 ret	 0
??$_Allocate@PAUtagTSKILLDATA@@@std@@YAPAPAUtagTSKILLDATA@@IPAPAU1@@Z ENDP ; std::_Allocate<tagTSKILLDATA *>
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@0@@Z ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node>
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@0@@Z PROC NEAR ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@0@@Z ENDP ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@0@@Z ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node *>
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@0@@Z PROC NEAR ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node *>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@0@@Z ENDP ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node *>
_TEXT	ENDS
PUBLIC	??$?0U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node *><std::pair<unsigned char const ,tagSKILLPOINT *> >
; Function compile flags: /Ogty
;	COMDAT ??$?0U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node *><std::pair<unsigned char const ,tagSKILLPOINT *> >, COMDAT
; _this$ = ecx

; 120  : 		allocator(const allocator<_Other>&)

  00000	8b c1		 mov	 eax, ecx

; 121  : 		{	// construct from a related allocator (do nothing)
; 122  : 		}

  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node *><std::pair<unsigned char const ,tagSKILLPOINT *> >
_TEXT	ENDS
PUBLIC	??$?0U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node><std::pair<unsigned char const ,tagSKILLPOINT *> >
; Function compile flags: /Ogty
;	COMDAT ??$?0U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node><std::pair<unsigned char const ,tagSKILLPOINT *> >, COMDAT
; _this$ = ecx

; 120  : 		allocator(const allocator<_Other>&)

  00000	8b c1		 mov	 eax, ecx

; 121  : 		{	// construct from a related allocator (do nothing)
; 122  : 		}

  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node><std::pair<unsigned char const ,tagSKILLPOINT *> >
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node>
; Function compile flags: /Ogty
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@0@IPAU120@@Z PROC NEAR ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00007	c1 e0 03	 shl	 eax, 3
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	83 c4 04	 add	 esp, 4

; 35   : 	}

  00013	c3		 ret	 0
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UtagTSKILLDATA@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTSKILLDATA@@0@Z ; std::_Ptr_cat<tagTSKILLDATA>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$_Ptr_cat@UtagTSKILLDATA@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTSKILLDATA@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UtagTSKILLDATA@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTSKILLDATA@@0@Z PROC NEAR ; std::_Ptr_cat<tagTSKILLDATA>, COMDAT

; 218  : 	{	// return pointer category from pointer to pointer arguments

  00000	51		 push	 ecx

; 219  : 	_Scalar_ptr_iterator_tag _Cat;
; 220  : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 221  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@UtagTSKILLDATA@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTSKILLDATA@@0@Z ENDP ; std::_Ptr_cat<tagTSKILLDATA>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@YAXPAPAUtagTSKILLDATA@@0AAV?$allocator@PAUtagTSKILLDATA@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy_range@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@YAXPAPAUtagTSKILLDATA@@0AAV?$allocator@PAUtagTSKILLDATA@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@YAXPAPAUtagTSKILLDATA@@0AAV?$allocator@PAUtagTSKILLDATA@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Destroy_range<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >, COMDAT

; 234  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@YAXPAPAUtagTSKILLDATA@@0AAV?$allocator@PAUtagTSKILLDATA@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__P$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC NEAR				; operator new, COMDAT

; 109  :         {return (_P); }

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __P$[esp-4]
  00004	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC NEAR	; std::char_traits<char>::assign, COMDAT

; 331  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 332  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogty
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC NEAR		; std::char_traits<char>::length, COMDAT

; 352  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$L154096:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $L154096
  0000e	2b c2		 sub	 eax, edx

; 353  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
; Function compile flags: /Ogty
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::copy, COMDAT

; 358  : 		return ((_Elem *)::memcpy(_First1, _First2, _Count));

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR __First2$[esp]
  00009	57		 push	 edi
  0000a	8b 7c 24 0c	 mov	 edi, DWORD PTR __First1$[esp+4]
  0000e	8b c1		 mov	 eax, ecx
  00010	8b d7		 mov	 edx, edi
  00012	c1 e9 02	 shr	 ecx, 2
  00015	f3 a5		 rep movsd
  00017	8b c8		 mov	 ecx, eax
  00019	83 e1 03	 and	 ecx, 3
  0001c	f3 a4		 rep movsb
  0001e	5f		 pop	 edi
  0001f	8b c2		 mov	 eax, edx
  00021	5e		 pop	 esi

; 359  : 		}

  00022	c3		 ret	 0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	_memmove:NEAR
; Function compile flags: /Ogty
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::move, COMDAT

; 370  : 		return ((_Elem *)::memmove(_First1, _First2, _Count));

  00000	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1109 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1110 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L154110
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  00009	c3		 ret	 0
$L154110:

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC NEAR		; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L154118
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  00009	c3		 ret	 0
$L154118:

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC NEAR	; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1494 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi

; 1495 : 		if (_Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00001	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  00004	83 fe 10	 cmp	 esi, 16			; 00000010H
  00007	57		 push	 edi
  00008	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0000b	72 04		 jb	 SHORT $L154131
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	eb 02		 jmp	 SHORT $L154132
$L154131:
  00011	8b d0		 mov	 edx, eax
$L154132:
  00013	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00017	3b fa		 cmp	 edi, edx
  00019	72 17		 jb	 SHORT $L150517
  0001b	83 fe 10	 cmp	 esi, 16			; 00000010H
  0001e	72 02		 jb	 SHORT $L154139
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
$L154139:
  00022	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00025	03 c8		 add	 ecx, eax
  00027	3b cf		 cmp	 ecx, edi
  00029	76 07		 jbe	 SHORT $L150517
  0002b	5f		 pop	 edi

; 1497 : 		else
; 1498 : 			return (true);

  0002c	b0 01		 mov	 al, 1
  0002e	5e		 pop	 esi

; 1499 : 		}

  0002f	c2 04 00	 ret	 4
$L150517:
  00032	5f		 pop	 edi

; 1496 : 			return (false);	// don't ask

  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 1499 : 		}

  00036	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC NEAR			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC NEAR		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 159  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	??$_Pow_int@M@@YAMMH@Z				; _Pow_int<float>
;	COMDAT __real@3f800000
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\math.h
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??$_Pow_int@M@@YAMMH@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
??$_Pow_int@M@@YAMMH@Z PROC NEAR			; _Pow_int<float>, COMDAT

; 518  :         if (_Y >= 0)

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Y$[esp-4]
  00004	85 c9		 test	 ecx, ecx

; 519  :                 _N = _Y;

  00006	8b c1		 mov	 eax, ecx

; 520  :         else

  00008	7d 02		 jge	 SHORT $L151183

; 521  :                 _N = -_Y;

  0000a	f7 d8		 neg	 eax
$L151183:

; 522  :         for (_Ty _Z = _Ty(1); ; _X *= _X)

  0000c	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@3f800000
  00012	d9 44 24 04	 fld	 DWORD PTR __X$[esp-4]
$L151185:

; 523  :                 {if ((_N & 1) != 0)

  00016	a8 01		 test	 al, 1
  00018	74 06		 je	 SHORT $L151188

; 524  :                         _Z *= _X;

  0001a	d9 c9		 fxch	 ST(1)
  0001c	d8 c9		 fmul	 ST(0), ST(1)
  0001e	d9 c9		 fxch	 ST(1)
$L151188:

; 525  :                 if ((_N >>= 1) == 0)

  00020	d1 e8		 shr	 eax, 1
  00022	85 c0		 test	 eax, eax
  00024	74 06		 je	 SHORT $L154155
  00026	d9 c0		 fld	 ST(0)
  00028	de c9		 fmulp	 ST(1), ST(0)
  0002a	eb ea		 jmp	 SHORT $L151185
$L154155:

; 526  :                         return (_Y < 0 ? _Ty(1) / _Z : _Z); }}

  0002c	85 c9		 test	 ecx, ecx
  0002e	dd d8		 fstp	 ST(0)
  00030	7d 06		 jge	 SHORT $L154152
  00032	d8 3d 00 00 00
	00		 fdivr	 DWORD PTR __real@3f800000
$L154152:
  00038	c3		 ret	 0
??$_Pow_int@M@@YAMMH@Z ENDP				; _Pow_int<float>
_TEXT	ENDS
PUBLIC	??$swap@D@std@@YAXAAD0@Z			; std::swap<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\utility
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@D@std@@YAXAAD0@Z PROC NEAR			; std::swap<char>, COMDAT

; 15   : 	_Ty _Tmp = _Left;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	56		 push	 esi

; 16   : 	_Left = _Right, _Right = _Tmp;

  00007	8b 74 24 0c	 mov	 esi, DWORD PTR __Right$[esp]
  0000b	8a 16		 mov	 dl, BYTE PTR [esi]
  0000d	88 10		 mov	 BYTE PTR [eax], dl
  0000f	88 0e		 mov	 BYTE PTR [esi], cl
  00011	5e		 pop	 esi

; 17   : 	}

  00012	c3		 ret	 0
??$swap@D@std@@YAXAAD0@Z ENDP				; std::swap<char>
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC NEAR		; std::_Allocate<char>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 35   : 	}

  0000d	c3		 ret	 0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
PUBLIC	??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::iterator::iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::iterator::iterator, COMDAT
; _this$ = ecx

; 304  : 		iterator()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 305  : 			{	// construct with null node pointer
; 306  : 			}

  00008	c3		 ret	 0
??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??9const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::operator!=
; Function compile flags: /Ogty
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::operator!=, COMDAT
; _this$ = ecx

; 246  : 			return (!(*this == _Right));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Right$[esp-4]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]
  00009	33 c9		 xor	 ecx, ecx
  0000b	3b c6		 cmp	 eax, esi
  0000d	0f 95 c1	 setne	 cl
  00010	8a c1		 mov	 al, cl
  00012	5e		 pop	 esi

; 247  : 			}

  00013	c2 04 00	 ret	 4
??9const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IAE@V?$allocator@PAUtagTSKILLDATA@@@1@@Z ; std::_Vector_val<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::_Vector_val<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0?$_Vector_val@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IAE@V?$allocator@PAUtagTSKILLDATA@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IAE@V?$allocator@PAUtagTSKILLDATA@@@1@@Z PROC NEAR ; std::_Vector_val<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::_Vector_val<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >, COMDAT
; _this$ = ecx

; 21   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 22   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Vector_val@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IAE@V?$allocator@PAUtagTSKILLDATA@@@1@@Z ENDP ; std::_Vector_val<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::_Vector_val<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >
_TEXT	ENDS
PUBLIC	?_Key@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAABEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Key
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAABEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAABEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Key, COMDAT

; 142  : 		return (_Mybase::_Kfn(_Myval(_Pnode)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 0c	 add	 eax, 12			; 0000000cH

; 143  : 		}

  00007	c3		 ret	 0
?_Key@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAABEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Key
_TEXT	ENDS
PUBLIC	?_Lmost@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Lmost
; Function compile flags: /Ogty
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 1005 : 		return (_Left(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1006 : 		}

  00003	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Lmost
_TEXT	ENDS
PUBLIC	?_Rmost@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Rmost
; Function compile flags: /Ogty
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 1049 : 		return (_Right(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 08	 add	 eax, 8

; 1050 : 		}

  00006	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Rmost
_TEXT	ENDS
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Root
; Function compile flags: /Ogty
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Root, COMDAT
; _this$ = ecx

; 1059 : 		return (_Parent(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 04	 add	 eax, 4

; 1060 : 		}

  00006	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Root
_TEXT	ENDS
PUBLIC	??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::iterator::iterator
; Function compile flags: /Ogty
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::iterator::iterator, COMDAT
; _this$ = ecx

; 312  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 313  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBEPAUtagSKILLPOINT@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBEPAUtagSKILLPOINT@@@2@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBEPAUtagSKILLPOINT@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 205  : 			return (_Myval(_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 206  : 			}

  00005	c3		 ret	 0
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBEPAUtagSKILLPOINT@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	??Diterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBEAAPAUtagTSKILLDATA@@XZ ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::iterator::operator*
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Diterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBEAAPAUtagTSKILLDATA@@XZ
_TEXT	SEGMENT
??Diterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBEAAPAUtagTSKILLDATA@@XZ PROC NEAR ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::iterator::operator*, COMDAT
; _this$ = ecx

; 220  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 221  : 			}

  00002	c3		 ret	 0
??Diterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBEAAPAUtagTSKILLDATA@@XZ ENDP ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::iterator::operator*
_TEXT	ENDS
PUBLIC	??Hiterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBE?AV012@H@Z ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::iterator::operator+
; Function compile flags: /Ogty
;	COMDAT ??Hiterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Hiterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::iterator::operator+, COMDAT
; _this$ = ecx

; 262  : 			iterator _Tmp = *this;
; 263  : 			return (_Tmp += _Off);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 08	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00009	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000d	89 10		 mov	 DWORD PTR [eax], edx

; 264  : 			}

  0000f	c2 08 00	 ret	 8
??Hiterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBE?AV012@H@Z ENDP ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::iterator::operator+
_TEXT	ENDS
PUBLIC	??Giterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBE?AV012@H@Z ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::iterator::operator-
; Function compile flags: /Ogty
;	COMDAT ??Giterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Giterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::iterator::operator-, COMDAT
; _this$ = ecx

; 273  : 			iterator _Tmp = *this;
; 274  : 			return (_Tmp -= _Off);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Off$[esp-4]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	8d 14 85 00 00
	00 00		 lea	 edx, DWORD PTR [eax*4]
  0000d	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00011	2b ca		 sub	 ecx, edx
  00013	89 08		 mov	 DWORD PTR [eax], ecx

; 275  : 			}

  00015	c2 08 00	 ret	 8
??Giterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBE?AV012@H@Z ENDP ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::iterator::operator-
_TEXT	ENDS
PUBLIC	?max_size@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBEIXZ ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::max_size, COMDAT
; _this$ = ecx

; 521  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 522  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAUtagTSKILLDATA@@@std@@QAEPAPAUtagTSKILLDATA@@I@Z ; std::allocator<tagTSKILLDATA *>::allocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@PAUtagTSKILLDATA@@@std@@QAEPAPAUtagTSKILLDATA@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAUtagTSKILLDATA@@@std@@QAEPAPAUtagTSKILLDATA@@I@Z PROC NEAR ; std::allocator<tagTSKILLDATA *>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 138  : 		}

  00014	c2 04 00	 ret	 4
?allocate@?$allocator@PAUtagTSKILLDATA@@@std@@QAEPAPAUtagTSKILLDATA@@I@Z ENDP ; std::allocator<tagTSKILLDATA *>::allocate
_TEXT	ENDS
PUBLIC	?_Lbound@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Lbound
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Lbound@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@ABE@Z
_TEXT	SEGMENT
__Keyval$ = 8						; size = 4
?_Lbound@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@ABE@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Lbound, COMDAT
; _this$ = ecx

; 988  : 		_Nodeptr _Pnode = _Root();

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 989  : 		_Nodeptr _Wherenode = _Myhead;	// end() if search fails
; 990  : 
; 991  : 		while (!_Isnil(_Pnode))

  00006	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00009	84 d2		 test	 dl, dl
  0000b	75 1d		 jne	 SHORT $L153059
  0000d	8b 54 24 04	 mov	 edx, DWORD PTR __Keyval$[esp-4]
  00011	8a 12		 mov	 dl, BYTE PTR [edx]
  00013	53		 push	 ebx
$L153058:

; 992  : 			if (this->comp(_Key(_Pnode), _Keyval))

  00014	38 51 0c	 cmp	 BYTE PTR [ecx+12], dl
  00017	73 05		 jae	 SHORT $L153060

; 993  : 				_Pnode = _Right(_Pnode);	// descend right subtree

  00019	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]

; 994  : 			else

  0001c	eb 04		 jmp	 SHORT $L153061
$L153060:

; 995  : 				{	// _Pnode not less than _Keyval, remember it
; 996  : 				_Wherenode = _Pnode;

  0001e	8b c1		 mov	 eax, ecx

; 997  : 				_Pnode = _Left(_Pnode);	// descend left subtree

  00020	8b 09		 mov	 ecx, DWORD PTR [ecx]
$L153061:
  00022	8a 59 15	 mov	 bl, BYTE PTR [ecx+21]
  00025	84 db		 test	 bl, bl
  00027	74 eb		 je	 SHORT $L153058
  00029	5b		 pop	 ebx
$L153059:

; 998  : 				}
; 999  : 
; 1000 : 		return (_Wherenode);	// return best remembered candidate
; 1001 : 		}

  0002a	c2 04 00	 ret	 4
?_Lbound@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@ABE@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Lbound
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node>::destroy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node *>::destroy
; Function compile flags: /Ogty
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node *>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node *>::destroy
_TEXT	ENDS
PUBLIC	??0iterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE@PAPAUtagTSKILLDATA@@@Z ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::iterator::iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0iterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE@PAPAUtagTSKILLDATA@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0iterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE@PAPAUtagTSKILLDATA@@@Z PROC NEAR ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::iterator::iterator, COMDAT
; _this$ = ecx

; 215  : 			{	// construct with pointer _Ptr

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 216  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE@PAPAUtagTSKILLDATA@@@Z ENDP ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::iterator::iterator
_TEXT	ENDS
PUBLIC	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::_Inc
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::_Inc, COMDAT
; _this$ = ecx

; 268  : 			if (_Isnil(_Ptr))

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00005	84 d2		 test	 dl, dl
  00007	75 4d		 jne	 SHORT $L153172

; 269  : 				;	// end() shouldn't be incremented, don't move
; 270  : 			else if (!_Isnil(_Right(_Ptr)))

  00009	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0000c	53		 push	 ebx
  0000d	8a 5a 15	 mov	 bl, BYTE PTR [edx+21]
  00010	84 db		 test	 bl, bl
  00012	75 1b		 jne	 SHORT $L154365

; 271  : 				_Ptr = _Min(_Right(_Ptr));	// ==> smallest of right subtree

  00014	8b 02		 mov	 eax, DWORD PTR [edx]
  00016	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  00019	84 db		 test	 bl, bl
  0001b	75 0e		 jne	 SHORT $L154346
  0001d	8d 49 00	 npad	 3
$L154345:
  00020	8b d0		 mov	 edx, eax
  00022	8b 02		 mov	 eax, DWORD PTR [edx]
  00024	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  00027	84 db		 test	 bl, bl
  00029	74 f5		 je	 SHORT $L154345
$L154346:
  0002b	89 11		 mov	 DWORD PTR [ecx], edx
  0002d	5b		 pop	 ebx

; 279  : 				}
; 280  : 			}

  0002e	c3		 ret	 0
$L154365:

; 272  : 			else
; 273  : 				{	// climb looking for right subtree
; 274  : 				_Nodeptr _Pnode;
; 275  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 276  : 					&& _Ptr == _Right(_Pnode))

  0002f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00032	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00035	84 d2		 test	 dl, dl
  00037	75 1a		 jne	 SHORT $L153176
  00039	8d a4 24 00 00
	00 00		 npad	 7
$L153175:
  00040	8b 11		 mov	 edx, DWORD PTR [ecx]
  00042	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00045	75 0c		 jne	 SHORT $L153176

; 277  : 					_Ptr = _Pnode;	// ==> parent while right subtree

  00047	89 01		 mov	 DWORD PTR [ecx], eax
  00049	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0004f	84 d2		 test	 dl, dl
  00051	74 ed		 je	 SHORT $L153175
$L153176:

; 278  : 				_Ptr = _Pnode;	// ==> parent (head if end())

  00053	89 01		 mov	 DWORD PTR [ecx], eax
  00055	5b		 pop	 ebx
$L153172:

; 279  : 				}
; 280  : 			}

  00056	c3		 ret	 0
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::_Inc
_TEXT	ENDS
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Lrotate
; Function compile flags: /Ogty
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 1015 : 		_Nodeptr _Pnode = _Right(_Wherenode);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Wherenode$[esp-4]
  00004	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00007	53		 push	 ebx
  00008	56		 push	 esi

; 1016 : 		_Right(_Wherenode) = _Left(_Pnode);

  00009	8b 30		 mov	 esi, DWORD PTR [eax]
  0000b	89 72 08	 mov	 DWORD PTR [edx+8], esi

; 1017 : 
; 1018 : 		if (!_Isnil(_Left(_Pnode)))

  0000e	8b 30		 mov	 esi, DWORD PTR [eax]
  00010	8a 5e 15	 mov	 bl, BYTE PTR [esi+21]
  00013	84 db		 test	 bl, bl
  00015	75 03		 jne	 SHORT $L153184

; 1019 : 			_Parent(_Left(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$L153184:

; 1020 : 		_Parent(_Pnode) = _Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1021 : 
; 1022 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00026	75 0d		 jne	 SHORT $L153185

; 1023 : 			_Root() = _Pnode;

  00028	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0002b	5e		 pop	 esi

; 1028 : 
; 1029 : 		_Left(_Pnode) = _Wherenode;

  0002c	89 10		 mov	 DWORD PTR [eax], edx

; 1030 : 		_Parent(_Wherenode) = _Pnode;

  0002e	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00031	5b		 pop	 ebx

; 1031 : 		}

  00032	c2 04 00	 ret	 4
$L153185:

; 1024 : 		else if (_Wherenode == _Left(_Parent(_Wherenode)))

  00035	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00038	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0003a	75 0c		 jne	 SHORT $L153187

; 1025 : 			_Left(_Parent(_Wherenode)) = _Pnode;

  0003c	89 01		 mov	 DWORD PTR [ecx], eax
  0003e	5e		 pop	 esi

; 1028 : 
; 1029 : 		_Left(_Pnode) = _Wherenode;

  0003f	89 10		 mov	 DWORD PTR [eax], edx

; 1030 : 		_Parent(_Wherenode) = _Pnode;

  00041	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00044	5b		 pop	 ebx

; 1031 : 		}

  00045	c2 04 00	 ret	 4
$L153187:

; 1026 : 		else
; 1027 : 			_Right(_Parent(_Wherenode)) = _Pnode;

  00048	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0004b	5e		 pop	 esi

; 1028 : 
; 1029 : 		_Left(_Pnode) = _Wherenode;

  0004c	89 10		 mov	 DWORD PTR [eax], edx

; 1030 : 		_Parent(_Wherenode) = _Pnode;

  0004e	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00051	5b		 pop	 ebx

; 1031 : 		}

  00052	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Lrotate
_TEXT	ENDS
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Rrotate
; Function compile flags: /Ogty
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 1069 : 		_Nodeptr _Pnode = _Left(_Wherenode);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Wherenode$[esp-4]
  00004	8b 02		 mov	 eax, DWORD PTR [edx]
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 1070 : 		_Left(_Wherenode) = _Right(_Pnode);

  00008	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0000b	89 32		 mov	 DWORD PTR [edx], esi

; 1071 : 
; 1072 : 		if (!_Isnil(_Right(_Pnode)))

  0000d	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00010	8a 5e 15	 mov	 bl, BYTE PTR [esi+21]
  00013	84 db		 test	 bl, bl
  00015	75 03		 jne	 SHORT $L153200

; 1073 : 			_Parent(_Right(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$L153200:

; 1074 : 		_Parent(_Pnode) = _Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1075 : 
; 1076 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00026	75 0e		 jne	 SHORT $L153201

; 1077 : 			_Root() = _Pnode;

  00028	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0002b	5e		 pop	 esi

; 1082 : 
; 1083 : 		_Right(_Pnode) = _Wherenode;

  0002c	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1084 : 		_Parent(_Wherenode) = _Pnode;

  0002f	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00032	5b		 pop	 ebx

; 1085 : 		}

  00033	c2 04 00	 ret	 4
$L153201:

; 1078 : 		else if (_Wherenode == _Right(_Parent(_Wherenode)))

  00036	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00039	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003c	75 0e		 jne	 SHORT $L153203

; 1079 : 			_Right(_Parent(_Wherenode)) = _Pnode;

  0003e	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00041	5e		 pop	 esi

; 1082 : 
; 1083 : 		_Right(_Pnode) = _Wherenode;

  00042	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1084 : 		_Parent(_Wherenode) = _Pnode;

  00045	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00048	5b		 pop	 ebx

; 1085 : 		}

  00049	c2 04 00	 ret	 4
$L153203:

; 1080 : 		else
; 1081 : 			_Left(_Parent(_Wherenode)) = _Pnode;

  0004c	89 01		 mov	 DWORD PTR [ecx], eax
  0004e	5e		 pop	 esi

; 1082 : 
; 1083 : 		_Right(_Pnode) = _Wherenode;

  0004f	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1084 : 		_Parent(_Wherenode) = _Pnode;

  00052	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00055	5b		 pop	 ebx

; 1085 : 		}

  00056	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Rrotate
_TEXT	ENDS
PUBLIC	??0?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z ; std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >
; Function compile flags: /Ogty
;	COMDAT ??0?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z PROC NEAR ; std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >, COMDAT
; _this$ = ecx

; 54   : 		{	// construct traits from _Parg and allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 55   : 		}

  00002	c2 08 00	 ret	 8
??0?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node>::allocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@I@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00007	c1 e0 03	 shl	 eax, 3
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	83 c4 04	 add	 esp, 4

; 138  : 		}

  00013	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	??$_Destroy_range@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@YAXPAPAUtagTSKILLDATA@@0AAV?$allocator@PAUtagTSKILLDATA@@@0@@Z ; std::_Destroy_range<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy_range@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@YAXPAPAUtagTSKILLDATA@@0AAV?$allocator@PAUtagTSKILLDATA@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@YAXPAPAUtagTSKILLDATA@@0AAV?$allocator@PAUtagTSKILLDATA@@@0@@Z PROC NEAR ; std::_Destroy_range<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >, COMDAT

; 217  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 218  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@YAXPAPAUtagTSKILLDATA@@0AAV?$allocator@PAUtagTSKILLDATA@@@0@@Z ENDP ; std::_Destroy_range<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >
_TEXT	ENDS
PUBLIC	??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@0@ABQAU120@@Z ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node *>
; Function compile flags: /Ogty
;	COMDAT ??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@0@ABQAU120@@Z PROC NEAR ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node *>, COMDAT

; 42   : 	new ((void _FARQ *)_Ptr) _T1(_Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $L154544
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$L154544:

; 43   : 	}

  00010	c3		 ret	 0
??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@0@ABQAU120@@Z ENDP ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node *>
_TEXT	ENDS
PUBLIC	?pow@@YAMMH@Z					; pow
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\math.h
;	COMDAT ?pow@@YAMMH@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
?pow@@YAMMH@Z PROC NEAR					; pow, COMDAT

; 573  :         {return (_Pow_int(_X, _Y)); }

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Y$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __X$[esp-4]
  00008	50		 push	 eax
  00009	51		 push	 ecx
  0000a	e8 00 00 00 00	 call	 ??$_Pow_int@M@@YAMMH@Z	; _Pow_int<float>
  0000f	83 c4 08	 add	 esp, 8
  00012	c3		 ret	 0
?pow@@YAMMH@Z ENDP					; pow
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC NEAR ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 34   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 35   : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogty
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $L154567
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1476 : 		}

  00014	c2 04 00	 ret	 4

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$L154567:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 1476 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1114 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1115 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1116 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC NEAR	; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 138  : 		}

  0000d	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	?GetValue@CTSkillTemp@@QAEHPAUtagTSKILLDATA@@E@Z ; CTSkillTemp::GetValue
PUBLIC	__real@3c23d70a
;	COMDAT __real@3c23d70a
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\math.h
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\tskilltemp.cpp
CONST	ENDS
;	COMDAT ?GetValue@CTSkillTemp@@QAEHPAUtagTSKILLDATA@@E@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
tv227 = 12						; size = 4
_bLevel$ = 12						; size = 1
?GetValue@CTSkillTemp@@QAEHPAUtagTSKILLDATA@@E@Z PROC NEAR ; CTSkillTemp::GetValue, COMDAT
; _this$ = ecx

; 63   : {

  00000	56		 push	 esi

; 64   : 	switch(pData->m_bCalc)

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _pData$[esp]
  00005	0f b6 46 0a	 movzx	 eax, BYTE PTR [esi+10]
  00009	83 f8 03	 cmp	 eax, 3
  0000c	77 78		 ja	 SHORT $L152376
  0000e	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L154600[eax*4]
$L152379:

; 65   : 	{
; 66   : 	case 0:
; 67   : 		return pData->m_wValue;

  00015	0f b7 46 06	 movzx	 eax, WORD PTR [esi+6]
  00019	5e		 pop	 esi

; 76   : }

  0001a	c2 08 00	 ret	 8
$L152380:

; 68   : 	case 1:
; 69   :         return pData->m_wValue + (bLevel-1) * pData->m_wValueInc;

  0001d	0f b6 4c 24 0c	 movzx	 ecx, BYTE PTR _bLevel$[esp]
  00022	0f b7 46 08	 movzx	 eax, WORD PTR [esi+8]
  00026	0f b7 56 06	 movzx	 edx, WORD PTR [esi+6]
  0002a	49		 dec	 ecx
  0002b	0f af c1	 imul	 eax, ecx
  0002e	03 c2		 add	 eax, edx
  00030	5e		 pop	 esi

; 76   : }

  00031	c2 08 00	 ret	 8
$L152381:

; 70   : 	case 2:
; 71   : 		return int((pData->m_wValue * pow(m_f1stRateX, m_bStartLevel+(bLevel-1)*m_bNextLevel))/100);

  00034	0f b6 54 24 0c	 movzx	 edx, BYTE PTR _bLevel$[esp]
  00039	0f b6 41 56	 movzx	 eax, BYTE PTR [ecx+86]
  0003d	4a		 dec	 edx
  0003e	0f af c2	 imul	 eax, edx
  00041	0f b6 51 54	 movzx	 edx, BYTE PTR [ecx+84]
  00045	03 c2		 add	 eax, edx
  00047	50		 push	 eax
  00048	8b 41 7c	 mov	 eax, DWORD PTR [ecx+124]
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ??$_Pow_int@M@@YAMMH@Z	; _Pow_int<float>
  00051	0f b7 4e 06	 movzx	 ecx, WORD PTR [esi+6]
  00055	89 4c 24 14	 mov	 DWORD PTR tv227[esp+8], ecx
  00059	83 c4 08	 add	 esp, 8
  0005c	da 4c 24 0c	 fimul	 DWORD PTR tv227[esp]
  00060	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3c23d70a
  00066	e8 00 00 00 00	 call	 __ftol2
  0006b	5e		 pop	 esi

; 76   : }

  0006c	c2 08 00	 ret	 8
$L152382:

; 72   : 	case 3:
; 73   : 		return INT(pData->m_wValue) - (INT(bLevel)-1) * INT(pData->m_wValueInc);

  0006f	0f b6 44 24 0c	 movzx	 eax, BYTE PTR _bLevel$[esp]
  00074	0f b7 56 08	 movzx	 edx, WORD PTR [esi+8]
  00078	48		 dec	 eax
  00079	0f af d0	 imul	 edx, eax
  0007c	0f b7 46 06	 movzx	 eax, WORD PTR [esi+6]
  00080	2b c2		 sub	 eax, edx
  00082	5e		 pop	 esi

; 76   : }

  00083	c2 08 00	 ret	 8
$L152376:

; 74   : 	}
; 75   : 	return 0;

  00086	33 c0		 xor	 eax, eax
  00088	5e		 pop	 esi

; 76   : }

  00089	c2 08 00	 ret	 8
$L154600:
  0008c	00 00 00 00	 DD	 $L152379
  00090	00 00 00 00	 DD	 $L152380
  00094	00 00 00 00	 DD	 $L152381
  00098	00 00 00 00	 DD	 $L152382
?GetValue@CTSkillTemp@@QAEHPAUtagTSKILLDATA@@E@Z ENDP	; CTSkillTemp::GetValue
_TEXT	ENDS
PUBLIC	?GetAggro@CTSkillTemp@@QAEKE@Z			; CTSkillTemp::GetAggro
; Function compile flags: /Ogty
;	COMDAT ?GetAggro@CTSkillTemp@@QAEKE@Z
_TEXT	SEGMENT
tv178 = 8						; size = 4
_bLevel$ = 8						; size = 1
?GetAggro@CTSkillTemp@@QAEKE@Z PROC NEAR		; CTSkillTemp::GetAggro, COMDAT
; _this$ = ecx

; 433  : {

  00000	56		 push	 esi

; 434  : 	if(!m_dwAggro)

  00001	8b 71 4c	 mov	 esi, DWORD PTR [ecx+76]
  00004	85 f6		 test	 esi, esi
  00006	75 06		 jne	 SHORT $L152642

; 435  : 		return 0;

  00008	33 c0		 xor	 eax, eax
  0000a	5e		 pop	 esi

; 439  : }

  0000b	c2 04 00	 ret	 4
$L152642:

; 438  : 	return dwAggro;

  0000e	0f b6 54 24 08	 movzx	 edx, BYTE PTR _bLevel$[esp]
  00013	0f b6 41 56	 movzx	 eax, BYTE PTR [ecx+86]
  00017	4a		 dec	 edx
  00018	0f af c2	 imul	 eax, edx
  0001b	0f b6 51 54	 movzx	 edx, BYTE PTR [ecx+84]
  0001f	03 c2		 add	 eax, edx
  00021	50		 push	 eax
  00022	8b 41 7c	 mov	 eax, DWORD PTR [ecx+124]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??$_Pow_int@M@@YAMMH@Z	; _Pow_int<float>
  0002b	83 c4 08	 add	 esp, 8
  0002e	85 f6		 test	 esi, esi
  00030	89 74 24 08	 mov	 DWORD PTR tv178[esp], esi
  00034	db 44 24 08	 fild	 DWORD PTR tv178[esp]
  00038	7d 06		 jge	 SHORT $L154608
  0003a	d8 05 00 00 00
	00		 fadd	 DWORD PTR __real@4f800000
$L154608:

; 436  : 
; 437  : 	DWORD dwAggro = DWORD(m_dwAggro * pow(m_f1stRateX, m_bStartLevel+(bLevel-1)*m_bNextLevel)) / 100;

  00040	de c9		 fmulp	 ST(1), ST(0)

; 438  : 	return dwAggro;

  00042	e8 00 00 00 00	 call	 __ftol2
  00047	8b c8		 mov	 ecx, eax
  00049	b8 1f 85 eb 51	 mov	 eax, 1374389535		; 51eb851fH
  0004e	f7 e1		 mul	 ecx
  00050	8b c2		 mov	 eax, edx
  00052	c1 e8 05	 shr	 eax, 5
  00055	5e		 pop	 esi

; 439  : }

  00056	c2 04 00	 ret	 4
?GetAggro@CTSkillTemp@@QAEKE@Z ENDP			; CTSkillTemp::GetAggro
_TEXT	ENDS
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::begin
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::begin, COMDAT
; _this$ = ecx

; 408  : 		return (_TREE_ITERATOR(_Lmost()));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 08		 mov	 ecx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 409  : 		}

  0000b	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::begin
_TEXT	ENDS
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::end
; Function compile flags: /Ogty
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::end, COMDAT
; _this$ = ecx

; 418  : 		return (_TREE_ITERATOR(_Myhead));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 419  : 		}

  00009	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::end
_TEXT	ENDS
PUBLIC	??Diterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBEPAUtagSKILLPOINT@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Diterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBEPAUtagSKILLPOINT@@@2@XZ
_TEXT	SEGMENT
??Diterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBEPAUtagSKILLPOINT@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::iterator::operator*, COMDAT
; _this$ = ecx

; 317  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 318  : 			}

  00005	c3		 ret	 0
??Diterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBEPAUtagSKILLPOINT@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::iterator::operator*
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::begin
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?begin@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::begin, COMDAT
; _this$ = ecx

; 463  : 		return (iterator(_Myfirst));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 464  : 		}

  00009	c2 04 00	 ret	 4
?begin@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::end
; Function compile flags: /Ogty
;	COMDAT ?end@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::end, COMDAT
; _this$ = ecx

; 473  : 		return (iterator(_Mylast));

  00000	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 474  : 		}

  00009	c2 04 00	 ret	 4
?end@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::end
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IAEXPAPAUtagTSKILLDATA@@0@Z ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::_Destroy
; Function compile flags: /Ogty
;	COMDAT ?_Destroy@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IAEXPAPAUtagTSKILLDATA@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IAEXPAPAUtagTSKILLDATA@@0@Z PROC NEAR ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::_Destroy, COMDAT
; _this$ = ecx

; 787  : 		_Destroy_range(_First, _Last, this->_Alval);
; 788  : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IAEXPAPAUtagTSKILLDATA@@0@Z ENDP ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IAEXXZ ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::_Tidy
; Function compile flags: /Ogty
;	COMDAT ?_Tidy@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IAEXXZ PROC NEAR ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::_Tidy, COMDAT
; _this$ = ecx

; 791  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 792  : 		if (_Myfirst != 0)

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L154685

; 793  : 			{	// something to free, destroy and deallocate it
; 794  : 			_Destroy(_Myfirst, _Mylast);
; 795  : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L154685:

; 796  : 			}
; 797  : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 798  : 		}

  00029	c3		 ret	 0
?_Tidy@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IAEXXZ ENDP ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::_Tidy
_TEXT	ENDS
PUBLIC	?lower_bound@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::lower_bound
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 810  : 		return (_TREE_ITERATOR(_Lbound(_Keyval)));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00006	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00009	84 d2		 test	 dl, dl
  0000b	75 1d		 jne	 SHORT $L154760
  0000d	8b 54 24 08	 mov	 edx, DWORD PTR __Keyval$[esp-4]
  00011	8a 12		 mov	 dl, BYTE PTR [edx]
  00013	53		 push	 ebx
$L154747:
  00014	38 50 0c	 cmp	 BYTE PTR [eax+12], dl
  00017	73 05		 jae	 SHORT $L154749
  00019	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0001c	eb 04		 jmp	 SHORT $L154750
$L154749:
  0001e	8b c8		 mov	 ecx, eax
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
$L154750:
  00022	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  00025	84 db		 test	 bl, bl
  00027	74 eb		 je	 SHORT $L154747
  00029	5b		 pop	 ebx
$L154760:
  0002a	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0002e	89 08		 mov	 DWORD PTR [eax], ecx

; 811  : 		}

  00030	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::lower_bound
_TEXT	ENDS
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Erase
; Function compile flags: /Ogty
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 890  : 		{	// free entire subtree, recursively

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 891  : 		for (_Nodeptr _Pnode = _Rootnode; !_Isnil(_Pnode); _Rootnode = _Pnode)

  00003	8b 7c 24 10	 mov	 edi, DWORD PTR __Rootnode$[esp+8]
  00007	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  0000a	84 c0		 test	 al, al
  0000c	8b d9		 mov	 ebx, ecx
  0000e	8b f7		 mov	 esi, edi
  00010	75 1f		 jne	 SHORT $L152955
$L152953:

; 892  : 			{	// free subtrees, then node
; 893  : 			_Erase(_Right(_Pnode));

  00012	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00015	50		 push	 eax
  00016	8b cb		 mov	 ecx, ebx
  00018	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Erase

; 894  : 			_Pnode = _Left(_Pnode);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]

; 895  : 			this->_Alnod.destroy(_Rootnode);	// destroy, free erased node
; 896  : 			this->_Alnod.deallocate(_Rootnode, 1);

  0001f	57		 push	 edi
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	8a 46 15	 mov	 al, BYTE PTR [esi+21]
  00028	83 c4 04	 add	 esp, 4
  0002b	84 c0		 test	 al, al
  0002d	8b fe		 mov	 edi, esi
  0002f	74 e1		 je	 SHORT $L152953
$L152955:
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx

; 897  : 			}
; 898  : 		}

  00034	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Erase
_TEXT	ENDS
PUBLIC	??Econst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::operator++
; Function compile flags: /Ogty
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Econst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::operator++, COMDAT
; _this$ = ecx

; 214  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 215  : 			_Inc();

  00003	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::_Inc

; 216  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 217  : 			}

  0000b	c3		 ret	 0
??Econst_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::operator++
_TEXT	ENDS
PUBLIC	??0?$_Tree_ptr@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z ; std::_Tree_ptr<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Tree_ptr<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >
; Function compile flags: /Ogty
;	COMDAT ??0?$_Tree_ptr@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_ptr@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z PROC NEAR ; std::_Tree_ptr<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Tree_ptr<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >, COMDAT
; _this$ = ecx

; 76   : 		{	// construct base, and allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 77   : 		}

  00002	c2 08 00	 ret	 8
??0?$_Tree_ptr@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z ENDP ; std::_Tree_ptr<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Tree_ptr<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@ABQAU342@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node *>::construct
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@ABQAU342@@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node *>::construct, COMDAT
; _this$ = ecx

; 147  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $L154817
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$L154817:

; 148  : 		}

  00010	c2 08 00	 ret	 8
?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@ABQAU342@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Node *>::construct
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1510 : 		if (!_Built)

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Built$[esp-4]
  00004	84 c0		 test	 al, al
  00006	53		 push	 ebx
  00007	55		 push	 ebp
  00008	8b 6c 24 10	 mov	 ebp, DWORD PTR __Newsize$[esp+4]
  0000c	8b d9		 mov	 ebx, ecx
  0000e	74 2f		 je	 SHORT $L154830

; 1511 : 			;
; 1512 : 		else if (_BUF_SIZE <= _Myres)

  00010	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  00014	72 29		 jb	 SHORT $L154830

; 1513 : 			{	// copy any leftovers to small buffer and deallocate
; 1514 : 			_Elem *_Ptr = _Bx._Ptr;
; 1515 : 			if (0 < _Newsize)

  00016	85 ed		 test	 ebp, ebp
  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	57		 push	 edi
  0001c	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  0001f	76 14		 jbe	 SHORT $L154827
  00021	56		 push	 esi

; 1516 : 				_Traits::copy(_Bx._Buf, _Ptr, _Newsize);

  00022	8b cd		 mov	 ecx, ebp
  00024	8b d1		 mov	 edx, ecx
  00026	c1 e9 02	 shr	 ecx, 2
  00029	8b f0		 mov	 esi, eax
  0002b	f3 a5		 rep movsd
  0002d	8b ca		 mov	 ecx, edx
  0002f	83 e1 03	 and	 ecx, 3
  00032	f3 a4		 rep movsb
  00034	5e		 pop	 esi
$L154827:

; 1517 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4
  0003e	5f		 pop	 edi
$L154830:

; 1518 : 			}
; 1519 : 		_Myres = _BUF_SIZE - 1;
; 1520 : 		_Eos(_Newsize);

  0003f	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00042	c7 43 18 0f 00
	00 00		 mov	 DWORD PTR [ebx+24], 15	; 0000000fH
  00049	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0004e	5d		 pop	 ebp
  0004f	5b		 pop	 ebx

; 1521 : 		}

  00050	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
EXTRN	?_Xran@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xran
; Function compile flags: /Ogty
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 792  : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp

; 793  : 		if (_Mysize < _Off)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	39 6e 14	 cmp	 DWORD PTR [esi+20], ebp
  0000b	57		 push	 edi
  0000c	73 05		 jae	 SHORT $L149765

; 794  : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L149765:

; 795  : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c5		 sub	 eax, ebp
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $L149766

; 796  : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$L149766:

; 797  : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 47		 jbe	 SHORT $L154895

; 798  : 			{	// move elements down
; 799  : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 800  : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0002c	53		 push	 ebx
  0002d	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  00030	72 04		 jb	 SHORT $L154860
  00032	8b 13		 mov	 edx, DWORD PTR [ebx]
  00034	eb 02		 jmp	 SHORT $L154861
$L154860:
  00036	8b d3		 mov	 edx, ebx
$L154861:
  00038	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0003b	72 04		 jb	 SHORT $L154867
  0003d	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0003f	eb 02		 jmp	 SHORT $L154868
$L154867:
  00041	8b cb		 mov	 ecx, ebx
$L154868:
  00043	2b c7		 sub	 eax, edi

; 803  : 			}
; 804  : 		return (*this);

  00045	03 d5		 add	 edx, ebp
  00047	50		 push	 eax
  00048	03 d7		 add	 edx, edi
  0004a	52		 push	 edx
  0004b	03 cd		 add	 ecx, ebp
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 _memmove
  00053	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00056	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00059	2b c7		 sub	 eax, edi
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005e	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00061	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00064	72 02		 jb	 SHORT $L154890

; 801  : 			size_type _Newsize = _Mysize - _Count;
; 802  : 			_Eos(_Newsize);

  00066	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$L154890:
  00068	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0
  0006c	5b		 pop	 ebx
$L154895:
  0006d	5f		 pop	 edi

; 803  : 			}
; 804  : 		return (*this);

  0006e	8b c6		 mov	 eax, esi
  00070	5e		 pop	 esi
  00071	5d		 pop	 ebp

; 805  : 		}

  00072	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	__CxxThrowException@8:NEAR
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T155103 DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
$T155105 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L154903
$T155106 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L154901
$T155104 DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T155105
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:$T155106
$T155097 DD	019930520H
	DD	04H
	DD	FLAT:$T155103
	DD	02H
	DD	FLAT:$T155104
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1444 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1445 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	8b d8		 mov	 ebx, eax
  00022	83 cb 0f	 or	 ebx, 15			; 0000000fH

; 1446 : 		if (max_size() < _Newres)

  00025	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00028	57		 push	 edi
  00029	8b f1		 mov	 esi, ecx
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00031	76 04		 jbe	 SHORT $L150507

; 1447 : 			_Newres = _Newsize;	// undo roundup if too big

  00033	8b d8		 mov	 ebx, eax

; 1448 : 		else if (_Newres / 3 < _Myres / 2

  00035	eb 22		 jmp	 SHORT $L150509
$L150507:

; 1449 : 			&& _Myres <= max_size() - _Myres / 2)

  00037	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  0003a	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0003f	f7 e3		 mul	 ebx
  00041	8b cf		 mov	 ecx, edi
  00043	d1 e9		 shr	 ecx, 1
  00045	d1 ea		 shr	 edx, 1
  00047	3b d1		 cmp	 edx, ecx
  00049	73 0e		 jae	 SHORT $L150509
  0004b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00050	2b c1		 sub	 eax, ecx
  00052	3b f8		 cmp	 edi, eax
  00054	77 03		 ja	 SHORT $L150509

; 1450 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00056	8d 1c 39	 lea	 ebx, DWORD PTR [ecx+edi]
$L150509:

; 1451 : 		_Elem *_Ptr;
; 1452 : 
; 1453 : 		_TRY_BEGIN
; 1454 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00059	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  0005c	51		 push	 ecx
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00064	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00069	8b d0		 mov	 edx, eax
  0006b	83 c4 04	 add	 esp, 4
  0006e	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
  00071	eb 29		 jmp	 SHORT $L150511
$L154901:

; 1455 : 		_CATCH_ALL
; 1456 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  00073	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00076	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 1457 : 			_TRY_BEGIN
; 1458 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00079	40		 inc	 eax
  0007a	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0007d	50		 push	 eax
  0007e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00082	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00087	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0008a	83 c4 04	 add	 esp, 4

; 1462 : 			_CATCH_END
; 1463 : 		_CATCH_END

  0008d	b8 00 00 00 00	 mov	 eax, $L155098
  00092	c3		 ret	 0
$L155098:
  00093	8b 5d e8	 mov	 ebx, DWORD PTR __Newres$[ebp]
  00096	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00099	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$L150511:

; 1464 : 
; 1465 : 		if (0 < _Oldlen)

  0009c	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  0009f	85 c9		 test	 ecx, ecx
  000a1	76 24		 jbe	 SHORT $L155021

; 1466 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  000a3	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000a7	72 05		 jb	 SHORT $L155017
  000a9	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000ac	eb 03		 jmp	 SHORT $L155018
$L155017:
  000ae	83 c6 04	 add	 esi, 4
$L155018:
  000b1	8b c1		 mov	 eax, ecx
  000b3	c1 e9 02	 shr	 ecx, 2
  000b6	8b fa		 mov	 edi, edx
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb
  000c1	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000c4	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
$L155021:

; 1467 : 		_Tidy(true);

  000c7	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000cb	72 12		 jb	 SHORT $L155056
  000cd	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000d0	51		 push	 ecx
  000d1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d6	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000d9	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000dc	83 c4 04	 add	 esp, 4
$L155056:

; 1468 : 		_Bx._Ptr = _Ptr;
; 1469 : 		_Myres = _Newres;
; 1470 : 		_Eos(_Oldlen);

  000df	83 fb 10	 cmp	 ebx, 16			; 00000010H
  000e2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000e5	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e8	89 10		 mov	 DWORD PTR [eax], edx
  000ea	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  000ed	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  000f0	72 02		 jb	 SHORT $L155091
  000f2	8b c2		 mov	 eax, edx
$L155091:

; 1471 : 		}

  000f4	5f		 pop	 edi
  000f5	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  000f9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fc	5e		 pop	 esi
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00104	5b		 pop	 ebx
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c2 08 00	 ret	 8
$L154903:

; 1459 : 			_CATCH_ALL
; 1460 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010b	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0010e	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00112	72 0c		 jb	 SHORT $L154995
  00114	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00117	52		 push	 edx
  00118	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0011d	83 c4 04	 add	 esp, 4
$L154995:

; 1461 : 			_RERAISE;

  00120	6a 00		 push	 0
  00122	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00129	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00130	6a 00		 push	 0
  00132	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00136	e8 00 00 00 00	 call	 __CxxThrowException@8
$L155108:
$L155102:
  0013b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T155097
  00005	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	??1?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE@XZ ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::~vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??1?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE@XZ PROC NEAR ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::~vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >, COMDAT
; _this$ = ecx

; 387  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 388  : 		_Tidy();

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L155122
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L155122:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 389  : 		}

  00029	c3		 ret	 0
??1?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::~vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >
_TEXT	ENDS
PUBLIC	??A?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEAAPAUtagTSKILLDATA@@I@Z ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::operator[]
; Function compile flags: /Ogty
;	COMDAT ??A?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEAAPAUtagTSKILLDATA@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEAAPAUtagTSKILLDATA@@I@Z PROC NEAR ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::operator[], COMDAT
; _this$ = ecx

; 555  : 		return (*(begin() + _Pos));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pos$[esp-4]
  00007	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 556  : 		}

  0000a	c2 04 00	 ret	 4
??A?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEAAPAUtagTSKILLDATA@@I@Z ENDP ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::operator[]
_TEXT	ENDS
PUBLIC	?back@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEAAPAUtagTSKILLDATA@@XZ ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::back
; Function compile flags: /Ogty
;	COMDAT ?back@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEAAPAUtagTSKILLDATA@@XZ
_TEXT	SEGMENT
?back@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEAAPAUtagTSKILLDATA@@XZ PROC NEAR ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::back, COMDAT
; _this$ = ecx

; 570  : 		return (*(end() - 1));

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	83 e8 04	 sub	 eax, 4

; 571  : 		}

  00006	c3		 ret	 0
?back@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEAAPAUtagTSKILLDATA@@XZ ENDP ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::back
_TEXT	ENDS
PUBLIC	?pop_back@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEXXZ ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::pop_back
; Function compile flags: /Ogty
;	COMDAT ?pop_back@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?pop_back@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEXXZ PROC NEAR ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::pop_back, COMDAT
; _this$ = ecx

; 587  : 		{	// erase element at end

  00000	56		 push	 esi

; 588  : 		if (!empty())

  00001	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00004	85 f6		 test	 esi, esi
  00006	74 14		 je	 SHORT $L152868
  00008	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0000b	8b c2		 mov	 eax, edx
  0000d	2b c6		 sub	 eax, esi
  0000f	c1 f8 02	 sar	 eax, 2
  00012	85 c0		 test	 eax, eax
  00014	74 06		 je	 SHORT $L152868

; 589  : 			{	// erase last element
; 590  : 			_Destroy(_Mylast - 1, _Mylast);
; 591  : 			--_Mylast;

  00016	83 c2 fc	 add	 edx, -4			; fffffffcH
  00019	89 51 08	 mov	 DWORD PTR [ecx+8], edx
$L152868:
  0001c	5e		 pop	 esi

; 592  : 			}
; 593  : 		}

  0001d	c3		 ret	 0
?pop_back@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEXXZ ENDP ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::pop_back
_TEXT	ENDS
PUBLIC	?clear@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEXXZ ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::clear
; Function compile flags: /Ogty
;	COMDAT ?clear@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEXXZ PROC NEAR ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::clear, COMDAT
; _this$ = ecx

; 743  : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 744  : 		_Tidy();

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L155236
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L155236:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 745  : 		}

  00029	c3		 ret	 0
?clear@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAEXXZ ENDP ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::clear
_TEXT	ENDS
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::clear
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::clear, COMDAT
; _this$ = ecx

; 780  : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 781  : 		_Erase(_Root());

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00009	51		 push	 ecx
  0000a	8b ce		 mov	 ecx, esi
  0000c	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Erase

; 782  : 		_Root() = _Myhead, _Mysize = 0;

  00011	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00014	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 783  : 		_Lmost() = _Myhead, _Rmost() = _Myhead;

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	89 00		 mov	 DWORD PTR [eax], eax
  00023	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00026	89 76 08	 mov	 DWORD PTR [esi+8], esi
  00029	5e		 pop	 esi

; 784  : 		}

  0002a	c3		 ret	 0
?clear@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::clear
_TEXT	ENDS
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::find
; Function compile flags: /Ogty
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z
_TEXT	SEGMENT
$T155280 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::find, COMDAT
; _this$ = ecx

; 787  : 		{	// find an element in mutable sequence that matches _Keyval

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	56		 push	 esi
  00003	8b f1		 mov	 esi, ecx

; 788  : 		iterator _Where = lower_bound(_Keyval);

  00005	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00008	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0000b	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  0000e	84 c9		 test	 cl, cl
  00010	57		 push	 edi
  00011	8b 7c 24 18	 mov	 edi, DWORD PTR __Keyval$[esp+12]
  00015	75 1e		 jne	 SHORT $L155357
  00017	8a 0f		 mov	 cl, BYTE PTR [edi]
  00019	8d a4 24 00 00
	00 00		 npad	 7
$L155356:
  00020	38 48 0c	 cmp	 BYTE PTR [eax+12], cl
  00023	73 05		 jae	 SHORT $L155358
  00025	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00028	eb 04		 jmp	 SHORT $L155359
$L155358:
  0002a	8b d0		 mov	 edx, eax
  0002c	8b 00		 mov	 eax, DWORD PTR [eax]
$L155359:
  0002e	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  00031	84 db		 test	 bl, bl
  00033	74 eb		 je	 SHORT $L155356
$L155357:

; 789  : 		return (_Where == end() || this->comp(_Keyval, _Key(_Where._Mynode()))
; 790  : 			? end() : _Where);

  00035	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00038	3b d0		 cmp	 edx, eax
  0003a	89 54 24 18	 mov	 DWORD PTR __Where$[esp+12], edx
  0003e	74 1a		 je	 SHORT $L155279
  00040	8a 0f		 mov	 cl, BYTE PTR [edi]
  00042	3a 4a 0c	 cmp	 cl, BYTE PTR [edx+12]
  00045	72 13		 jb	 SHORT $L155279
  00047	8d 44 24 18	 lea	 eax, DWORD PTR __Where$[esp+12]
  0004b	8b 10		 mov	 edx, DWORD PTR [eax]
  0004d	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	89 10		 mov	 DWORD PTR [eax], edx
  00055	5b		 pop	 ebx

; 791  : 		}

  00056	59		 pop	 ecx
  00057	c2 08 00	 ret	 8
$L155279:

; 789  : 		return (_Where == end() || this->comp(_Keyval, _Key(_Where._Mynode()))
; 790  : 			? end() : _Where);

  0005a	89 44 24 0c	 mov	 DWORD PTR $T155280[esp+16], eax
  0005e	8d 44 24 0c	 lea	 eax, DWORD PTR $T155280[esp+16]
  00062	8b 10		 mov	 edx, DWORD PTR [eax]
  00064	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	89 10		 mov	 DWORD PTR [eax], edx
  0006c	5b		 pop	 ebx

; 791  : 		}

  0006d	59		 pop	 ecx
  0006e	c2 08 00	 ret	 8
?find@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::find
_TEXT	ENDS
PUBLIC	??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::iterator::operator++
; Function compile flags: /Ogty
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::iterator::operator++, COMDAT
; _this$ = ecx

; 326  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 327  : 			++(*(const_iterator *)this);

  00003	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::_Inc

; 328  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 329  : 			}

  0000b	c3		 ret	 0
??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::iterator::operator++
_TEXT	ENDS
PUBLIC	??0?$_Tree_val@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Tree_val<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >
; Function compile flags: /Ogty
;	COMDAT ??0?$_Tree_val@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_val@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z PROC NEAR ; std::_Tree_val<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Tree_val<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >, COMDAT
; _this$ = ecx

; 95   : 		{	// construct base, and allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 96   : 		}

  00002	c2 08 00	 ret	 8
??0?$_Tree_val@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Tree_val<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Buynode
; Function compile flags: /Ogty
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Buynode@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 1106 : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

  00000	6a 18		 push	 24			; 00000018H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 1107 : 		int _Linkcnt = 0;
; 1108 : 
; 1109 : 		_TRY_BEGIN
; 1110 : 		this->_Alptr.construct(&_Left(_Wherenode), 0);

  0000a	85 c0		 test	 eax, eax
  0000c	74 06		 je	 SHORT $L155528
  0000e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$L155528:

; 1111 : 		++_Linkcnt;
; 1112 : 		this->_Alptr.construct(&_Parent(_Wherenode), 0);

  00014	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00017	85 c9		 test	 ecx, ecx
  00019	74 06		 je	 SHORT $L155555
  0001b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$L155555:

; 1113 : 		++_Linkcnt;
; 1114 : 		this->_Alptr.construct(&_Right(_Wherenode), 0);

  00021	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
  00024	85 c9		 test	 ecx, ecx
  00026	74 06		 je	 SHORT $L155582
  00028	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$L155582:

; 1115 : 		_CATCH_ALL
; 1116 : 		if (1 < _Linkcnt)
; 1117 : 			this->_Alptr.destroy(&_Parent(_Wherenode));
; 1118 : 		if (0 < _Linkcnt)
; 1119 : 			this->_Alptr.destroy(&_Left(_Wherenode));
; 1120 : 		this->_Alnod.deallocate(_Wherenode, 1);
; 1121 : 		_RERAISE;
; 1122 : 		_CATCH_END
; 1123 : 		_Color(_Wherenode) = _Black;

  0002e	c6 40 14 01	 mov	 BYTE PTR [eax+20], 1

; 1124 : 		_Isnil(_Wherenode) = false;

  00032	c6 40 15 00	 mov	 BYTE PTR [eax+21], 0

; 1125 : 		return (_Wherenode);
; 1126 : 		}

  00036	c3		 ret	 0
?_Buynode@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Buynode
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 456  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 457  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $L155646
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$L155646:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 458  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xlen
; Function compile flags: /Ogty
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1480 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	56		 push	 esi

; 1481 : 		if (max_size() < _Newsize)

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR __Newsize$[esp+4]
  00006	83 fe fe	 cmp	 esi, -2			; fffffffeH
  00009	8b e9		 mov	 ebp, ecx
  0000b	76 05		 jbe	 SHORT $L149774

; 1482 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L149774:

; 1483 : 		if (_Myres < _Newsize)

  00012	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00015	3b c6		 cmp	 eax, esi
  00017	73 19		 jae	 SHORT $L149775

; 1484 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0001c	50		 push	 eax
  0001d	56		 push	 esi
  0001e	8b cd		 mov	 ecx, ebp
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c0		 xor	 eax, eax
  00027	3b c6		 cmp	 eax, esi
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5d		 pop	 ebp

; 1491 : 		}

  0002f	c2 08 00	 ret	 8
$L149775:

; 1485 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	8a 4c 24 10	 mov	 cl, BYTE PTR __Trim$[esp+4]
  00036	84 c9		 test	 cl, cl
  00038	74 5c		 je	 SHORT $L149777
  0003a	83 fe 10	 cmp	 esi, 16			; 00000010H
  0003d	73 57		 jae	 SHORT $L149777
  0003f	53		 push	 ebx

; 1486 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1487 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  00040	8b 5d 14	 mov	 ebx, DWORD PTR [ebp+20]
  00043	3b f3		 cmp	 esi, ebx
  00045	73 02		 jae	 SHORT $L155661
  00047	8b de		 mov	 ebx, esi
$L155661:
  00049	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004c	72 2b		 jb	 SHORT $L155716
  0004e	85 db		 test	 ebx, ebx
  00050	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00053	57		 push	 edi
  00054	8d 7d 04	 lea	 edi, DWORD PTR [ebp+4]
  00057	76 16		 jbe	 SHORT $L155714
  00059	8b cb		 mov	 ecx, ebx
  0005b	8b d1		 mov	 edx, ecx
  0005d	c1 e9 02	 shr	 ecx, 2
  00060	8b f0		 mov	 esi, eax
  00062	f3 a5		 rep movsd
  00064	8b ca		 mov	 ecx, edx
  00066	83 e1 03	 and	 ecx, 3
  00069	f3 a4		 rep movsb
  0006b	8b 74 24 14	 mov	 esi, DWORD PTR __Newsize$[esp+12]
$L155714:
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00075	83 c4 04	 add	 esp, 4
  00078	5f		 pop	 edi
$L155716:
  00079	89 5d 14	 mov	 DWORD PTR [ebp+20], ebx

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  0007c	33 c0		 xor	 eax, eax
  0007e	c7 45 18 0f 00
	00 00		 mov	 DWORD PTR [ebp+24], 15	; 0000000fH
  00085	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0008a	3b c6		 cmp	 eax, esi
  0008c	5b		 pop	 ebx
  0008d	1b c0		 sbb	 eax, eax
  0008f	5e		 pop	 esi
  00090	f7 d8		 neg	 eax
  00092	5d		 pop	 ebp

; 1491 : 		}

  00093	c2 08 00	 ret	 8
$L149777:

; 1488 : 		else if (_Newsize == 0)

  00096	85 f6		 test	 esi, esi
  00098	75 23		 jne	 SHORT $L155752

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

  0009a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0009d	89 75 14	 mov	 DWORD PTR [ebp+20], esi
  000a0	72 14		 jb	 SHORT $L155748
  000a2	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000a5	33 c0		 xor	 eax, eax
  000a7	3b c6		 cmp	 eax, esi
  000a9	1b c0		 sbb	 eax, eax
  000ab	5e		 pop	 esi
  000ac	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
  000b0	f7 d8		 neg	 eax
  000b2	5d		 pop	 ebp

; 1491 : 		}

  000b3	c2 08 00	 ret	 8

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

$L155748:
  000b6	83 c5 04	 add	 ebp, 4
  000b9	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
$L155752:

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000bd	33 c0		 xor	 eax, eax
  000bf	3b c6		 cmp	 eax, esi
  000c1	1b c0		 sbb	 eax, eax
  000c3	5e		 pop	 esi
  000c4	f7 d8		 neg	 eax
  000c6	5d		 pop	 ebp

; 1491 : 		}

  000c7	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?HaveSkillData@CTSkillTemp@@QAEEPAUtagTSKILLDATA@@@Z ; CTSkillTemp::HaveSkillData
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\tskilltemp.cpp
;	COMDAT ?HaveSkillData@CTSkillTemp@@QAEEPAUtagTSKILLDATA@@@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
?HaveSkillData@CTSkillTemp@@QAEEPAUtagTSKILLDATA@@@Z PROC NEAR ; CTSkillTemp::HaveSkillData, COMDAT
; _this$ = ecx

; 37   : {

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	8b a9 84 00 00
	00		 mov	 ebp, DWORD PTR [ecx+132]
  00008	56		 push	 esi
  00009	57		 push	 edi

; 38   : 	for(DWORD i=0; i<m_vData.size(); i++)

  0000a	8b 7c 24 14	 mov	 edi, DWORD PTR _pData$[esp+12]
  0000e	33 f6		 xor	 esi, esi
$L152353:
  00010	85 ed		 test	 ebp, ebp
  00012	74 4c		 je	 SHORT $L152355
  00014	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  0001a	2b c5		 sub	 eax, ebp
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	3b f0		 cmp	 esi, eax
  00021	73 3d		 jae	 SHORT $L152355
  00023	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]

; 39   : 	{
; 40   : 		if(m_vData[i]->m_bType == pData->m_bType &&
; 41   : 			m_vData[i]->m_bAttr == pData->m_bAttr &&
; 42   : 			m_vData[i]->m_bExec &&
; 43   : 			m_vData[i]->m_bExec == pData->m_bExec)

  00029	8b 14 b0	 mov	 edx, DWORD PTR [eax+esi*4]
  0002c	8a 52 01	 mov	 dl, BYTE PTR [edx+1]
  0002f	3a 57 01	 cmp	 dl, BYTE PTR [edi+1]
  00032	8d 04 b0	 lea	 eax, DWORD PTR [eax+esi*4]
  00035	75 1d		 jne	 SHORT $L152354
  00037	8b 10		 mov	 edx, DWORD PTR [eax]
  00039	8a 52 02	 mov	 dl, BYTE PTR [edx+2]
  0003c	3a 57 02	 cmp	 dl, BYTE PTR [edi+2]
  0003f	75 13		 jne	 SHORT $L152354
  00041	8b 10		 mov	 edx, DWORD PTR [eax]
  00043	8a 5a 03	 mov	 bl, BYTE PTR [edx+3]
  00046	84 db		 test	 bl, bl
  00048	74 0a		 je	 SHORT $L152354
  0004a	8b c2		 mov	 eax, edx
  0004c	8a 50 03	 mov	 dl, BYTE PTR [eax+3]
  0004f	3a 57 03	 cmp	 dl, BYTE PTR [edi+3]
  00052	74 03		 je	 SHORT $L155987
$L152354:

; 38   : 	for(DWORD i=0; i<m_vData.size(); i++)

  00054	46		 inc	 esi
  00055	eb b9		 jmp	 SHORT $L152353
$L155987:
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5d		 pop	 ebp

; 44   : 			return TRUE;

  0005a	b0 01		 mov	 al, 1
  0005c	5b		 pop	 ebx

; 48   : }

  0005d	c2 04 00	 ret	 4
$L152355:
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi
  00062	5d		 pop	 ebp

; 45   : 	}
; 46   : 
; 47   : 	return FALSE;

  00063	32 c0		 xor	 al, al
  00065	5b		 pop	 ebx

; 48   : }

  00066	c2 04 00	 ret	 4
?HaveSkillData@CTSkillTemp@@QAEEPAUtagTSKILLDATA@@@Z ENDP ; CTSkillTemp::HaveSkillData
_TEXT	ENDS
PUBLIC	__real@bf847ae147ae147b
PUBLIC	__real@41f0000000000000
PUBLIC	?Calculate@CTSkillTemp@@QAEHEKK@Z		; CTSkillTemp::Calculate
;	COMDAT __real@41f0000000000000
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
CONST	SEGMENT
__real@41f0000000000000 DQ 041f0000000000000r	; 4.29497e+009
CONST	ENDS
;	COMDAT __real@bf847ae147ae147b
CONST	SEGMENT
__real@bf847ae147ae147b DQ 0bf847ae147ae147br	; -0.01
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\tskilltemp.cpp
CONST	ENDS
;	COMDAT ?Calculate@CTSkillTemp@@QAEHEKK@Z
_TEXT	SEGMENT
_bLevel$ = 8						; size = 1
_index$ = 12						; size = 4
tv232 = 16						; size = 4
_dwValue$ = 16						; size = 4
?Calculate@CTSkillTemp@@QAEHEKK@Z PROC NEAR		; CTSkillTemp::Calculate, COMDAT
; _this$ = ecx

; 79   : 	int nCalcValue = GetValue(m_vData[index], bLevel);

  00000	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]
  00006	8b 54 24 08	 mov	 edx, DWORD PTR _index$[esp-4]
  0000a	56		 push	 esi
  0000b	8d 34 90	 lea	 esi, DWORD PTR [eax+edx*4]
  0000e	8b 44 24 08	 mov	 eax, DWORD PTR _bLevel$[esp]
  00012	8b 16		 mov	 edx, DWORD PTR [esi]
  00014	50		 push	 eax
  00015	52		 push	 edx
  00016	e8 00 00 00 00	 call	 ?GetValue@CTSkillTemp@@QAEHPAUtagTSKILLDATA@@E@Z ; CTSkillTemp::GetValue

; 80   : 	int nValue = 0;
; 81   : 
; 82   : 	switch(m_vData[index]->m_bInc)

  0001b	8b 16		 mov	 edx, DWORD PTR [esi]
  0001d	0f b6 52 04	 movzx	 edx, BYTE PTR [edx+4]
  00021	8b c8		 mov	 ecx, eax
  00023	33 c0		 xor	 eax, eax
  00025	4a		 dec	 edx
  00026	83 fa 04	 cmp	 edx, 4
  00029	77 5e		 ja	 SHORT $L152401
  0002b	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L156107[edx*4]
$L152396:

; 83   : 	{
; 84   : 	case SVI_INCREASE:
; 85   : 		nValue = nCalcValue;
; 86   : 		break;
; 87   : 	case SVI_DECREASE:
; 88   : 		nValue = -nCalcValue;

  00032	f7 d9		 neg	 ecx
$L152395:
  00034	8b c1		 mov	 eax, ecx
  00036	5e		 pop	 esi

; 99   : 		break;
; 100  : 	default:
; 101  : 		break;
; 102  : 	}
; 103  : 
; 104  : 	return nValue;
; 105  : }

  00037	c2 0c 00	 ret	 12			; 0000000cH
$L152397:

; 89   : 		break;
; 90   : 	case SVI_MULTIPLY:
; 91   : 		nValue = dwValue * nCalcValue - dwValue;

  0003a	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  0003d	0f af 44 24 10	 imul	 eax, DWORD PTR _dwValue$[esp]
  00042	5e		 pop	 esi

; 99   : 		break;
; 100  : 	default:
; 101  : 		break;
; 102  : 	}
; 103  : 
; 104  : 	return nValue;
; 105  : }

  00043	c2 0c 00	 ret	 12			; 0000000cH
$L152398:

; 92   : 		break;
; 93   : 	case SVI_DIVIDE:
; 94   : 		if(nCalcValue <= 0) nCalcValue = 1;

  00046	85 c9		 test	 ecx, ecx
  00048	7f 05		 jg	 SHORT $L152399
  0004a	b9 01 00 00 00	 mov	 ecx, 1
$L152399:

; 95   : 		nValue = dwValue / nCalcValue - dwValue;

  0004f	8b 74 24 10	 mov	 esi, DWORD PTR _dwValue$[esp]
  00053	8b c6		 mov	 eax, esi
  00055	33 d2		 xor	 edx, edx
  00057	f7 f1		 div	 ecx
  00059	2b c6		 sub	 eax, esi
  0005b	5e		 pop	 esi

; 99   : 		break;
; 100  : 	default:
; 101  : 		break;
; 102  : 	}
; 103  : 
; 104  : 	return nValue;
; 105  : }

  0005c	c2 0c 00	 ret	 12			; 0000000cH
$L152400:

; 96   : 		break;
; 97   : 	case SVI_PRECENT:
; 98   : 		nValue = int(dwValue * nCalcValue / 100.0) - dwValue;

  0005f	8b 74 24 10	 mov	 esi, DWORD PTR _dwValue$[esp]
  00063	0f af ce	 imul	 ecx, esi
  00066	85 c9		 test	 ecx, ecx
  00068	89 4c 24 10	 mov	 DWORD PTR tv232[esp], ecx
  0006c	db 44 24 10	 fild	 DWORD PTR tv232[esp]
  00070	7d 06		 jge	 SHORT $L156104
  00072	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@41f0000000000000
$L156104:
  00078	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@bf847ae147ae147b
  0007e	e8 00 00 00 00	 call	 __ftol2
  00083	f7 de		 neg	 esi
  00085	2b f0		 sub	 esi, eax
  00087	8b c6		 mov	 eax, esi
$L152401:
  00089	5e		 pop	 esi

; 99   : 		break;
; 100  : 	default:
; 101  : 		break;
; 102  : 	}
; 103  : 
; 104  : 	return nValue;
; 105  : }

  0008a	c2 0c 00	 ret	 12			; 0000000cH
  0008d	8d 49 00	 npad	 3
$L156107:
  00090	00 00 00 00	 DD	 $L152395
  00094	00 00 00 00	 DD	 $L152396
  00098	00 00 00 00	 DD	 $L152397
  0009c	00 00 00 00	 DD	 $L152398
  000a0	00 00 00 00	 DD	 $L152400
?Calculate@CTSkillTemp@@QAEHEKK@Z ENDP			; CTSkillTemp::Calculate
_TEXT	ENDS
PUBLIC	?IsMirrorType@CTSkillTemp@@QAEEXZ		; CTSkillTemp::IsMirrorType
; Function compile flags: /Ogty
;	COMDAT ?IsMirrorType@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsMirrorType@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::IsMirrorType, COMDAT
; _this$ = ecx

; 107  : {

  00000	56		 push	 esi
  00001	8b b1 84 00 00
	00		 mov	 esi, DWORD PTR [ecx+132]
  00007	57		 push	 edi

; 108  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00008	33 d2		 xor	 edx, edx
  0000a	8d 9b 00 00 00
	00		 npad	 6
$L152406:
  00010	85 f6		 test	 esi, esi
  00012	74 31		 je	 SHORT $L152408
  00014	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  0001a	2b c6		 sub	 eax, esi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	3b d0		 cmp	 edx, eax
  00021	73 22		 jae	 SHORT $L152408
  00023	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]

; 109  : 	{
; 110  : 		if(m_vData[i]->m_bType == SDT_STATUS &&
; 111  : 			m_vData[i]->m_bExec == SDT_STATUS_MAGICMIRROR)

  00029	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]
  0002c	80 7f 01 06	 cmp	 BYTE PTR [edi+1], 6
  00030	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00033	75 08		 jne	 SHORT $L152407
  00035	8b c7		 mov	 eax, edi
  00037	80 78 03 11	 cmp	 BYTE PTR [eax+3], 17	; 00000011H
  0003b	74 03		 je	 SHORT $L156230
$L152407:

; 108  : 	for(DWORD i=0; i<m_vData.size(); i++)

  0003d	42		 inc	 edx
  0003e	eb d0		 jmp	 SHORT $L152406
$L156230:
  00040	5f		 pop	 edi

; 112  : 			return TRUE;

  00041	b0 01		 mov	 al, 1
  00043	5e		 pop	 esi

; 116  : }

  00044	c3		 ret	 0
$L152408:
  00045	5f		 pop	 edi

; 113  : 	}
; 114  : 
; 115  : 	return FALSE;

  00046	32 c0		 xor	 al, al
  00048	5e		 pop	 esi

; 116  : }

  00049	c3		 ret	 0
?IsMirrorType@CTSkillTemp@@QAEEXZ ENDP			; CTSkillTemp::IsMirrorType
_TEXT	ENDS
PUBLIC	?IsDamageType@CTSkillTemp@@QAEEXZ		; CTSkillTemp::IsDamageType
; Function compile flags: /Ogty
;	COMDAT ?IsDamageType@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsDamageType@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::IsDamageType, COMDAT
; _this$ = ecx

; 119  : {

  00000	55		 push	 ebp
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b b9 84 00 00
	00		 mov	 edi, DWORD PTR [ecx+132]

; 120  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00009	33 f6		 xor	 esi, esi
  0000b	b0 01		 mov	 al, 1
  0000d	8d 49 00	 npad	 3
$L152414:
  00010	85 ff		 test	 edi, edi
  00012	74 43		 je	 SHORT $L152416
  00014	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  0001a	2b d7		 sub	 edx, edi
  0001c	c1 fa 02	 sar	 edx, 2
  0001f	3b f2		 cmp	 esi, edx
  00021	73 34		 jae	 SHORT $L152416
  00023	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]

; 121  : 	{
; 122  : 		if(m_vData[i]->m_bType == SDT_ABILITY &&
; 123  : 			m_vData[i]->m_bAttr &&
; 124  : 		   (m_vData[i]->m_bExec == MTYPE_DAMAGE ||
; 125  : 			m_vData[i]->m_bExec == MTYPE_MDAMAGE ||
; 126  : 		    m_vData[i]->m_bExec == MTYPE_HP ||
; 127  : 			m_vData[i]->m_bExec == MTYPE_MP ))

  00029	8b 2c b2	 mov	 ebp, DWORD PTR [edx+esi*4]
  0002c	38 45 01	 cmp	 BYTE PTR [ebp+1], al
  0002f	8d 14 b2	 lea	 edx, DWORD PTR [edx+esi*4]
  00032	75 20		 jne	 SHORT $L152415
  00034	80 7d 02 00	 cmp	 BYTE PTR [ebp+2], 0
  00038	74 1a		 je	 SHORT $L152415
  0003a	80 7d 03 1e	 cmp	 BYTE PTR [ebp+3], 30	; 0000001eH
  0003e	74 19		 je	 SHORT $L152412
  00040	80 7d 03 58	 cmp	 BYTE PTR [ebp+3], 88	; 00000058H
  00044	74 13		 je	 SHORT $L152412
  00046	80 7d 03 0e	 cmp	 BYTE PTR [ebp+3], 14	; 0000000eH
  0004a	74 0d		 je	 SHORT $L152412
  0004c	8b d5		 mov	 edx, ebp
  0004e	80 7a 03 16	 cmp	 BYTE PTR [edx+3], 22	; 00000016H
  00052	74 05		 je	 SHORT $L152412
$L152415:

; 120  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00054	46		 inc	 esi
  00055	eb b9		 jmp	 SHORT $L152414
$L152416:

; 128  : 		  return TRUE;
; 129  : 	}
; 130  : 
; 131  : 	return FALSE;

  00057	32 c0		 xor	 al, al
$L152412:
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5d		 pop	 ebp

; 132  : }

  0005c	c3		 ret	 0
?IsDamageType@CTSkillTemp@@QAEEXZ ENDP			; CTSkillTemp::IsDamageType
_TEXT	ENDS
PUBLIC	?IsRemainType@CTSkillTemp@@QAEEXZ		; CTSkillTemp::IsRemainType
; Function compile flags: /Ogty
;	COMDAT ?IsRemainType@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsRemainType@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::IsRemainType, COMDAT
; _this$ = ecx

; 135  : {

  00000	56		 push	 esi
  00001	8b b1 84 00 00
	00		 mov	 esi, DWORD PTR [ecx+132]

; 136  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00007	33 d2		 xor	 edx, edx
  00009	8d a4 24 00 00
	00 00		 npad	 7
$L152423:
  00010	85 f6		 test	 esi, esi
  00012	74 26		 je	 SHORT $L152425
  00014	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  0001a	2b c6		 sub	 eax, esi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	3b d0		 cmp	 edx, eax
  00021	73 17		 jae	 SHORT $L152425
  00023	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]
  00029	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]

; 137  : 	{
; 138  : 		if(m_vData[i]->m_bAction == SA_CONTINUE)

  0002c	8b 00		 mov	 eax, DWORD PTR [eax]
  0002e	80 38 01	 cmp	 BYTE PTR [eax], 1
  00031	74 03		 je	 SHORT $L156642

; 136  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00033	42		 inc	 edx
  00034	eb da		 jmp	 SHORT $L152423
$L156642:
  00036	5e		 pop	 esi

; 139  : 			return TRUE;

  00037	b0 01		 mov	 al, 1

; 143  : }

  00039	c3		 ret	 0
$L152425:
  0003a	5e		 pop	 esi

; 140  : 	}
; 141  : 
; 142  : 	return FALSE;

  0003b	32 c0		 xor	 al, al

; 143  : }

  0003d	c3		 ret	 0
?IsRemainType@CTSkillTemp@@QAEEXZ ENDP			; CTSkillTemp::IsRemainType
_TEXT	ENDS
PUBLIC	?IsPassiveType@CTSkillTemp@@QAEEXZ		; CTSkillTemp::IsPassiveType
; Function compile flags: /Ogty
;	COMDAT ?IsPassiveType@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsPassiveType@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::IsPassiveType, COMDAT
; _this$ = ecx

; 146  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b b9 84 00 00
	00		 mov	 edi, DWORD PTR [ecx+132]

; 147  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00009	33 f6		 xor	 esi, esi
  0000b	b0 01		 mov	 al, 1
  0000d	8d 49 00	 npad	 3
$L152431:
  00010	85 ff		 test	 edi, edi
  00012	74 2a		 je	 SHORT $L152433
  00014	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  0001a	2b d7		 sub	 edx, edi
  0001c	c1 fa 02	 sar	 edx, 2
  0001f	3b f2		 cmp	 esi, edx
  00021	73 1b		 jae	 SHORT $L152433
  00023	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]

; 148  : 	{
; 149  : 		if(m_vData[i]->m_bAction == SA_PASSIVE &&
; 150  : 			m_vData[i]->m_bType == SDT_ABILITY)

  00029	8b 1c b2	 mov	 ebx, DWORD PTR [edx+esi*4]
  0002c	80 3b 04	 cmp	 BYTE PTR [ebx], 4
  0002f	8d 14 b2	 lea	 edx, DWORD PTR [edx+esi*4]
  00032	75 07		 jne	 SHORT $L152432
  00034	8b d3		 mov	 edx, ebx
  00036	38 42 01	 cmp	 BYTE PTR [edx+1], al
  00039	74 05		 je	 SHORT $L152429
$L152432:

; 147  : 	for(DWORD i=0; i<m_vData.size(); i++)

  0003b	46		 inc	 esi
  0003c	eb d2		 jmp	 SHORT $L152431
$L152433:

; 151  : 			return TRUE;
; 152  : 	}
; 153  : 
; 154  : 	return FALSE;

  0003e	32 c0		 xor	 al, al
$L152429:
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx

; 155  : }

  00043	c3		 ret	 0
?IsPassiveType@CTSkillTemp@@QAEEXZ ENDP			; CTSkillTemp::IsPassiveType
_TEXT	ENDS
PUBLIC	?IsPosture@CTSkillTemp@@QAEEXZ			; CTSkillTemp::IsPosture
; Function compile flags: /Ogty
;	COMDAT ?IsPosture@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsPosture@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::IsPosture, COMDAT
; _this$ = ecx

; 158  : {

  00000	56		 push	 esi
  00001	8b b1 84 00 00
	00		 mov	 esi, DWORD PTR [ecx+132]
  00007	57		 push	 edi

; 159  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00008	33 d2		 xor	 edx, edx
  0000a	8d 9b 00 00 00
	00		 npad	 6
$L152439:
  00010	85 f6		 test	 esi, esi
  00012	74 3d		 je	 SHORT $L152441
  00014	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  0001a	2b c6		 sub	 eax, esi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	3b d0		 cmp	 edx, eax
  00021	73 2e		 jae	 SHORT $L152441
  00023	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]

; 160  : 	{
; 161  : 		if(m_vData[i]->m_bType == SDT_STATUS &&
; 162  : 			(m_vData[i]->m_bExec == SDT_STATUS_CRAZEMODE ||
; 163  : 			 m_vData[i]->m_bExec == SDT_STATUS_DEFENDMODE ||
; 164  : 			 m_vData[i]->m_bExec == SDT_STATUS_ATKMODE))

  00029	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]
  0002c	80 7f 01 06	 cmp	 BYTE PTR [edi+1], 6
  00030	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00033	75 14		 jne	 SHORT $L152440
  00035	80 7f 03 1a	 cmp	 BYTE PTR [edi+3], 26	; 0000001aH
  00039	74 11		 je	 SHORT $L152443
  0003b	80 7f 03 1b	 cmp	 BYTE PTR [edi+3], 27	; 0000001bH
  0003f	74 0b		 je	 SHORT $L152443
  00041	8b c7		 mov	 eax, edi
  00043	80 78 03 07	 cmp	 BYTE PTR [eax+3], 7
  00047	74 03		 je	 SHORT $L152443
$L152440:

; 159  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00049	42		 inc	 edx
  0004a	eb c4		 jmp	 SHORT $L152439
$L152443:
  0004c	5f		 pop	 edi

; 165  : 
; 166  : 			return TRUE;

  0004d	b0 01		 mov	 al, 1
  0004f	5e		 pop	 esi

; 170  : }

  00050	c3		 ret	 0
$L152441:
  00051	5f		 pop	 edi

; 167  : 	}
; 168  : 
; 169  : 	return FALSE;

  00052	32 c0		 xor	 al, al
  00054	5e		 pop	 esi

; 170  : }

  00055	c3		 ret	 0
?IsPosture@CTSkillTemp@@QAEEXZ ENDP			; CTSkillTemp::IsPosture
_TEXT	ENDS
PUBLIC	?GetAttackType@CTSkillTemp@@QAEEXZ		; CTSkillTemp::GetAttackType
; Function compile flags: /Ogty
;	COMDAT ?GetAttackType@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?GetAttackType@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::GetAttackType, COMDAT
; _this$ = ecx

; 173  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b b9 84 00 00
	00		 mov	 edi, DWORD PTR [ecx+132]

; 174  : 	BYTE bType = SAT_NONE;

  00008	32 c0		 xor	 al, al

; 175  : 	for(DWORD i=0; i<m_vData.size(); i++)

  0000a	33 f6		 xor	 esi, esi
  0000c	8d 64 24 00	 npad	 4
$L152449:
  00010	85 ff		 test	 edi, edi
  00012	74 3e		 je	 SHORT $L152446
  00014	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  0001a	2b d7		 sub	 edx, edi
  0001c	c1 fa 02	 sar	 edx, 2
  0001f	3b f2		 cmp	 esi, edx
  00021	73 2f		 jae	 SHORT $L152446
  00023	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]
  00029	8d 14 b2	 lea	 edx, DWORD PTR [edx+esi*4]

; 176  : 	{
; 177  : 		switch(m_vData[i]->m_bAttr)

  0002c	8b 12		 mov	 edx, DWORD PTR [edx]
  0002e	0f b6 52 02	 movzx	 edx, BYTE PTR [edx+2]
  00032	4a		 dec	 edx
  00033	83 fa 08	 cmp	 edx, 8
  00036	77 10		 ja	 SHORT $L152450
  00038	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR $L157069[edx]
  0003f	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L157070[edx*4]
$L152458:

; 184  : 		case SATT_MAGICSR:
; 185  : 		case SATT_MAGICDR:
; 186  : 		case SATT_MAGICER:
; 187  : 		case SATT_MAGICFR:
; 188  : 		case SATT_MAGICPR:
; 189  : 		case SATT_MAGICIR:
; 190  : 			bType = SAT_MAGIC;

  00046	b0 03		 mov	 al, 3
$L152450:

; 175  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00048	46		 inc	 esi
  00049	eb c5		 jmp	 SHORT $L152449
$L152456:
  0004b	5f		 pop	 edi

; 178  : 		{
; 179  : 		case SATT_PHYSIC:
; 180  : 		case SATT_LONG:
; 181  : 			return SAT_PHYSIC;

  0004c	b0 01		 mov	 al, 1
  0004e	5e		 pop	 esi

; 191  : 			break;
; 192  : 		}
; 193  : 	}
; 194  : 
; 195  : 	return bType;
; 196  : }

  0004f	c3		 ret	 0
$L152457:

; 182  : 		case SATT_MAGICNO:
; 183  : 			return SAT_MAGIC;

  00050	b0 03		 mov	 al, 3
$L152446:
  00052	5f		 pop	 edi
  00053	5e		 pop	 esi

; 191  : 			break;
; 192  : 		}
; 193  : 	}
; 194  : 
; 195  : 	return bType;
; 196  : }

  00054	c3		 ret	 0
  00055	8d 49 00	 npad	 3
$L157070:
  00058	00 00 00 00	 DD	 $L152456
  0005c	00 00 00 00	 DD	 $L152457
  00060	00 00 00 00	 DD	 $L152458
$L157069:
  00064	00		 DB	 0
  00065	00		 DB	 0
  00066	01		 DB	 1
  00067	02		 DB	 2
  00068	02		 DB	 2
  00069	02		 DB	 2
  0006a	02		 DB	 2
  0006b	02		 DB	 2
  0006c	02		 DB	 2
?GetAttackType@CTSkillTemp@@QAEEXZ ENDP			; CTSkillTemp::GetAttackType
_TEXT	ENDS
PUBLIC	?IsLongAttack@CTSkillTemp@@QAEEXZ		; CTSkillTemp::IsLongAttack
; Function compile flags: /Ogty
;	COMDAT ?IsLongAttack@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsLongAttack@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::IsLongAttack, COMDAT
; _this$ = ecx

; 198  : {

  00000	55		 push	 ebp
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b b9 84 00 00
	00		 mov	 edi, DWORD PTR [ecx+132]

; 199  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00009	33 f6		 xor	 esi, esi
  0000b	b0 01		 mov	 al, 1
  0000d	8d 49 00	 npad	 3
$L152463:
  00010	85 ff		 test	 edi, edi
  00012	74 31		 je	 SHORT $L152465
  00014	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  0001a	2b d7		 sub	 edx, edi
  0001c	c1 fa 02	 sar	 edx, 2
  0001f	3b f2		 cmp	 esi, edx
  00021	73 22		 jae	 SHORT $L152465
  00023	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]

; 200  : 	{
; 201  : 		if(m_vData[i]->m_bType == SDT_ABILITY &&
; 202  : 			(m_vData[i]->m_bExec == MTYPE_LAP ||
; 203  : 			 m_vData[i]->m_bAttr == SATT_LONG))

  00029	8b 2c b2	 mov	 ebp, DWORD PTR [edx+esi*4]
  0002c	38 45 01	 cmp	 BYTE PTR [ebp+1], al
  0002f	8d 14 b2	 lea	 edx, DWORD PTR [edx+esi*4]
  00032	75 0e		 jne	 SHORT $L152464
  00034	80 7d 03 09	 cmp	 BYTE PTR [ebp+3], 9
  00038	74 0d		 je	 SHORT $L152461
  0003a	8b d5		 mov	 edx, ebp
  0003c	80 7a 02 02	 cmp	 BYTE PTR [edx+2], 2
  00040	74 05		 je	 SHORT $L152461
$L152464:

; 199  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00042	46		 inc	 esi
  00043	eb cb		 jmp	 SHORT $L152463
$L152465:

; 204  : 			return TRUE;
; 205  : 	}
; 206  : 
; 207  : 	return FALSE;

  00045	32 c0		 xor	 al, al
$L152461:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5d		 pop	 ebp

; 208  : }

  0004a	c3		 ret	 0
?IsLongAttack@CTSkillTemp@@QAEEXZ ENDP			; CTSkillTemp::IsLongAttack
_TEXT	ENDS
PUBLIC	?CanEquip@CTSkillTemp@@QAEEE@Z			; CTSkillTemp::CanEquip
; Function compile flags: /Ogty
;	COMDAT ?CanEquip@CTSkillTemp@@QAEEE@Z
_TEXT	SEGMENT
_bKind$ = 8						; size = 1
?CanEquip@CTSkillTemp@@QAEEE@Z PROC NEAR		; CTSkillTemp::CanEquip, COMDAT
; _this$ = ecx

; 211  : {

  00000	53		 push	 ebx

; 212  : 	for(DWORD i=0; i<(DWORD)m_vData.size(); i++)

  00001	8a 5c 24 08	 mov	 bl, BYTE PTR _bKind$[esp]
  00005	56		 push	 esi
  00006	8b b1 84 00 00
	00		 mov	 esi, DWORD PTR [ecx+132]
  0000c	57		 push	 edi
  0000d	33 d2		 xor	 edx, edx
  0000f	90		 npad	 1
$L152474:
  00010	85 f6		 test	 esi, esi
  00012	74 33		 je	 SHORT $L152476
  00014	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  0001a	2b c6		 sub	 eax, esi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	3b d0		 cmp	 edx, eax
  00021	73 24		 jae	 SHORT $L152476
  00023	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]

; 213  : 	{
; 214  : 		BYTE bType = m_vData[i]->m_bType;
; 215  : 		BYTE bExec = m_vData[i]->m_bExec;
; 216  : 		if(bType == SDT_EQUIP && bExec == bKind)

  00029	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]
  0002c	80 7f 01 00	 cmp	 BYTE PTR [edi+1], 0
  00030	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00033	75 07		 jne	 SHORT $L152475
  00035	8b c7		 mov	 eax, edi
  00037	38 58 03	 cmp	 BYTE PTR [eax+3], bl
  0003a	74 03		 je	 SHORT $L157371
$L152475:

; 212  : 	for(DWORD i=0; i<(DWORD)m_vData.size(); i++)

  0003c	42		 inc	 edx
  0003d	eb d1		 jmp	 SHORT $L152474
$L157371:
  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi

; 217  : 			return TRUE;

  00041	b0 01		 mov	 al, 1
  00043	5b		 pop	 ebx

; 221  : }

  00044	c2 04 00	 ret	 4
$L152476:
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 218  : 	}
; 219  : 
; 220  : 	return FALSE;

  00049	32 c0		 xor	 al, al
  0004b	5b		 pop	 ebx

; 221  : }

  0004c	c2 04 00	 ret	 4
?CanEquip@CTSkillTemp@@QAEEE@Z ENDP			; CTSkillTemp::CanEquip
_TEXT	ENDS
PUBLIC	?IsMaintainType@CTSkillTemp@@QAEEXZ		; CTSkillTemp::IsMaintainType
; Function compile flags: /Ogty
;	COMDAT ?IsMaintainType@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsMaintainType@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::IsMaintainType, COMDAT
; _this$ = ecx

; 227  : {

  00000	56		 push	 esi
  00001	8b b1 84 00 00
	00		 mov	 esi, DWORD PTR [ecx+132]

; 228  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00007	33 d2		 xor	 edx, edx
  00009	8d a4 24 00 00
	00 00		 npad	 7
$L152487:
  00010	85 f6		 test	 esi, esi
  00012	74 26		 je	 SHORT $L152489
  00014	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  0001a	2b c6		 sub	 eax, esi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	3b d0		 cmp	 edx, eax
  00021	73 17		 jae	 SHORT $L152489
  00023	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]
  00029	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]

; 229  : 	{
; 230  : 		if(m_vData[i]->m_bAction == SA_BUFF)

  0002c	8b 00		 mov	 eax, DWORD PTR [eax]
  0002e	80 38 03	 cmp	 BYTE PTR [eax], 3
  00031	74 03		 je	 SHORT $L157440

; 228  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00033	42		 inc	 edx
  00034	eb da		 jmp	 SHORT $L152487
$L157440:
  00036	5e		 pop	 esi

; 231  : 			return TRUE;

  00037	b0 01		 mov	 al, 1

; 235  : }

  00039	c3		 ret	 0
$L152489:
  0003a	5e		 pop	 esi

; 232  : 	}
; 233  : 
; 234  : 	return FALSE;

  0003b	32 c0		 xor	 al, al

; 235  : }

  0003d	c3		 ret	 0
?IsMaintainType@CTSkillTemp@@QAEEXZ ENDP		; CTSkillTemp::IsMaintainType
_TEXT	ENDS
PUBLIC	?IsSilence@CTSkillTemp@@QAEEXZ			; CTSkillTemp::IsSilence
; Function compile flags: /Ogty
;	COMDAT ?IsSilence@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsSilence@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::IsSilence, COMDAT
; _this$ = ecx

; 237  : {

  00000	56		 push	 esi
  00001	8b b1 84 00 00
	00		 mov	 esi, DWORD PTR [ecx+132]
  00007	57		 push	 edi

; 238  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00008	33 d2		 xor	 edx, edx
  0000a	8d 9b 00 00 00
	00		 npad	 6
$L152495:
  00010	85 f6		 test	 esi, esi
  00012	74 31		 je	 SHORT $L152497
  00014	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  0001a	2b c6		 sub	 eax, esi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	3b d0		 cmp	 edx, eax
  00021	73 22		 jae	 SHORT $L152497
  00023	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]

; 239  : 	{
; 240  : 		if(m_vData[i]->m_bType == SDT_STATUS &&
; 241  : 			m_vData[i]->m_bExec == SDT_STATUS_SILENCE)

  00029	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]
  0002c	80 7f 01 06	 cmp	 BYTE PTR [edi+1], 6
  00030	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00033	75 08		 jne	 SHORT $L152496
  00035	8b c7		 mov	 eax, edi
  00037	80 78 03 02	 cmp	 BYTE PTR [eax+3], 2
  0003b	74 03		 je	 SHORT $L157564
$L152496:

; 238  : 	for(DWORD i=0; i<m_vData.size(); i++)

  0003d	42		 inc	 edx
  0003e	eb d0		 jmp	 SHORT $L152495
$L157564:
  00040	5f		 pop	 edi

; 242  : 			return TRUE;

  00041	b0 01		 mov	 al, 1
  00043	5e		 pop	 esi

; 246  : }

  00044	c3		 ret	 0
$L152497:
  00045	5f		 pop	 edi

; 243  : 	}
; 244  : 
; 245  : 	return FALSE;

  00046	32 c0		 xor	 al, al
  00048	5e		 pop	 esi

; 246  : }

  00049	c3		 ret	 0
?IsSilence@CTSkillTemp@@QAEEXZ ENDP			; CTSkillTemp::IsSilence
_TEXT	ENDS
PUBLIC	?IsBuffType@CTSkillTemp@@QAEEXZ			; CTSkillTemp::IsBuffType
; Function compile flags: /Ogty
;	COMDAT ?IsBuffType@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsBuffType@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::IsBuffType, COMDAT
; _this$ = ecx

; 248  : {

  00000	56		 push	 esi
  00001	8b b1 84 00 00
	00		 mov	 esi, DWORD PTR [ecx+132]

; 249  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00007	33 d2		 xor	 edx, edx
  00009	8d a4 24 00 00
	00 00		 npad	 7
$L152503:
  00010	85 f6		 test	 esi, esi
  00012	74 26		 je	 SHORT $L152505
  00014	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  0001a	2b c6		 sub	 eax, esi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	3b d0		 cmp	 edx, eax
  00021	73 17		 jae	 SHORT $L152505
  00023	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]
  00029	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]

; 250  : 	{
; 251  : 		if(m_vData[i]->m_bAction == SA_BUFF)

  0002c	8b 00		 mov	 eax, DWORD PTR [eax]
  0002e	80 38 03	 cmp	 BYTE PTR [eax], 3
  00031	74 03		 je	 SHORT $L157633

; 249  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00033	42		 inc	 edx
  00034	eb da		 jmp	 SHORT $L152503
$L157633:
  00036	5e		 pop	 esi

; 252  : 			return TRUE;

  00037	b0 01		 mov	 al, 1

; 256  : }

  00039	c3		 ret	 0
$L152505:
  0003a	5e		 pop	 esi

; 253  : 	}
; 254  : 
; 255  : 	return FALSE;

  0003b	32 c0		 xor	 al, al

; 256  : }

  0003d	c3		 ret	 0
?IsBuffType@CTSkillTemp@@QAEEXZ ENDP			; CTSkillTemp::IsBuffType
_TEXT	ENDS
PUBLIC	?IsDotType@CTSkillTemp@@QAEEXZ			; CTSkillTemp::IsDotType
; Function compile flags: /Ogty
;	COMDAT ?IsDotType@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsDotType@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::IsDotType, COMDAT
; _this$ = ecx

; 259  : {

  00000	56		 push	 esi
  00001	8b b1 84 00 00
	00		 mov	 esi, DWORD PTR [ecx+132]

; 260  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00007	33 d2		 xor	 edx, edx
  00009	8d a4 24 00 00
	00 00		 npad	 7
$L152511:
  00010	85 f6		 test	 esi, esi
  00012	74 26		 je	 SHORT $L152513
  00014	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  0001a	2b c6		 sub	 eax, esi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	3b d0		 cmp	 edx, eax
  00021	73 17		 jae	 SHORT $L152513
  00023	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]
  00029	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]

; 261  : 	{
; 262  : 		if(m_vData[i]->m_bAction == SA_DOT)

  0002c	8b 00		 mov	 eax, DWORD PTR [eax]
  0002e	80 38 02	 cmp	 BYTE PTR [eax], 2
  00031	74 03		 je	 SHORT $L157702

; 260  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00033	42		 inc	 edx
  00034	eb da		 jmp	 SHORT $L152511
$L157702:
  00036	5e		 pop	 esi

; 263  : 			return TRUE;

  00037	b0 01		 mov	 al, 1

; 267  : }

  00039	c3		 ret	 0
$L152513:
  0003a	5e		 pop	 esi

; 264  : 	}
; 265  : 
; 266  : 	return FALSE;

  0003b	32 c0		 xor	 al, al

; 267  : }

  0003d	c3		 ret	 0
?IsDotType@CTSkillTemp@@QAEEXZ ENDP			; CTSkillTemp::IsDotType
_TEXT	ENDS
PUBLIC	?IsRevivalType@CTSkillTemp@@QAEEXZ		; CTSkillTemp::IsRevivalType
; Function compile flags: /Ogty
;	COMDAT ?IsRevivalType@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsRevivalType@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::IsRevivalType, COMDAT
; _this$ = ecx

; 270  : {

  00000	55		 push	 ebp
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b b9 84 00 00
	00		 mov	 edi, DWORD PTR [ecx+132]

; 271  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00009	33 f6		 xor	 esi, esi
  0000b	b0 01		 mov	 al, 1
  0000d	8d 49 00	 npad	 3
$L152519:
  00010	85 ff		 test	 edi, edi
  00012	74 2b		 je	 SHORT $L152521
  00014	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  0001a	2b d7		 sub	 edx, edi
  0001c	c1 fa 02	 sar	 edx, 2
  0001f	3b f2		 cmp	 esi, edx
  00021	73 1c		 jae	 SHORT $L152521
  00023	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]

; 272  : 	{
; 273  : 		if(m_vData[i]->m_bType == SDT_CURE &&
; 274  : 			m_vData[i]->m_bExec == SCT_REVIVAL)

  00029	8b 2c b2	 mov	 ebp, DWORD PTR [edx+esi*4]
  0002c	80 7d 01 05	 cmp	 BYTE PTR [ebp+1], 5
  00030	8d 14 b2	 lea	 edx, DWORD PTR [edx+esi*4]
  00033	75 07		 jne	 SHORT $L152520
  00035	8b d5		 mov	 edx, ebp
  00037	38 42 03	 cmp	 BYTE PTR [edx+3], al
  0003a	74 05		 je	 SHORT $L152517
$L152520:

; 271  : 	for(DWORD i=0; i<m_vData.size(); i++)

  0003c	46		 inc	 esi
  0003d	eb d1		 jmp	 SHORT $L152519
$L152521:

; 275  : 			return TRUE;
; 276  : 	}
; 277  : 
; 278  : 	return FALSE;

  0003f	32 c0		 xor	 al, al
$L152517:
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp

; 279  : }

  00044	c3		 ret	 0
?IsRevivalType@CTSkillTemp@@QAEEXZ ENDP			; CTSkillTemp::IsRevivalType
_TEXT	ENDS
PUBLIC	?IsBlockType@CTSkillTemp@@QAEEXZ		; CTSkillTemp::IsBlockType
; Function compile flags: /Ogty
;	COMDAT ?IsBlockType@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsBlockType@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::IsBlockType, COMDAT
; _this$ = ecx

; 282  : {

  00000	56		 push	 esi
  00001	8b b1 84 00 00
	00		 mov	 esi, DWORD PTR [ecx+132]
  00007	57		 push	 edi

; 283  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00008	33 d2		 xor	 edx, edx
  0000a	8d 9b 00 00 00
	00		 npad	 6
$L152527:
  00010	85 f6		 test	 esi, esi
  00012	74 3d		 je	 SHORT $L152529
  00014	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  0001a	2b c6		 sub	 eax, esi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	3b d0		 cmp	 edx, eax
  00021	73 2e		 jae	 SHORT $L152529
  00023	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]

; 284  : 	{
; 285  : 		if(m_vData[i]->m_bType == SDT_STATUS &&
; 286  : 			( m_vData[i]->m_bExec == SDT_STATUS_BLOCK ||
; 287  : 			  m_vData[i]->m_bExec == SDT_STATUS_HOLD ||
; 288  : 			  m_vData[i]->m_bExec == SDT_STATUS_HYPNOSIS))

  00029	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]
  0002c	80 7f 01 06	 cmp	 BYTE PTR [edi+1], 6
  00030	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00033	75 14		 jne	 SHORT $L152528
  00035	80 7f 03 03	 cmp	 BYTE PTR [edi+3], 3
  00039	74 11		 je	 SHORT $L152531
  0003b	80 7f 03 08	 cmp	 BYTE PTR [edi+3], 8
  0003f	74 0b		 je	 SHORT $L152531
  00041	8b c7		 mov	 eax, edi
  00043	80 78 03 35	 cmp	 BYTE PTR [eax+3], 53	; 00000035H
  00047	74 03		 je	 SHORT $L152531
$L152528:

; 283  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00049	42		 inc	 edx
  0004a	eb c4		 jmp	 SHORT $L152527
$L152531:
  0004c	5f		 pop	 edi

; 289  : 			return TRUE;

  0004d	b0 01		 mov	 al, 1
  0004f	5e		 pop	 esi

; 293  : }

  00050	c3		 ret	 0
$L152529:
  00051	5f		 pop	 edi

; 290  : 	}
; 291  : 
; 292  : 	return FALSE;

  00052	32 c0		 xor	 al, al
  00054	5e		 pop	 esi

; 293  : }

  00055	c3		 ret	 0
?IsBlockType@CTSkillTemp@@QAEEXZ ENDP			; CTSkillTemp::IsBlockType
_TEXT	ENDS
PUBLIC	?IsCancelMine@CTSkillTemp@@QAEEXZ		; CTSkillTemp::IsCancelMine
; Function compile flags: /Ogty
;	COMDAT ?IsCancelMine@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsCancelMine@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::IsCancelMine, COMDAT
; _this$ = ecx

; 301  : {

  00000	56		 push	 esi
  00001	8b b1 84 00 00
	00		 mov	 esi, DWORD PTR [ecx+132]
  00007	57		 push	 edi

; 302  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00008	33 d2		 xor	 edx, edx
  0000a	8d 9b 00 00 00
	00		 npad	 6
$L152539:
  00010	85 f6		 test	 esi, esi
  00012	74 31		 je	 SHORT $L152541
  00014	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  0001a	2b c6		 sub	 eax, esi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	3b d0		 cmp	 edx, eax
  00021	73 22		 jae	 SHORT $L152541
  00023	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]

; 303  : 	{
; 304  : 		if(m_vData[i]->m_bType == SDT_STATUS &&
; 305  : 			m_vData[i]->m_bExec == SDT_STATUS_CANCELMINE)

  00029	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]
  0002c	80 7f 01 06	 cmp	 BYTE PTR [edi+1], 6
  00030	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00033	75 08		 jne	 SHORT $L152540
  00035	8b c7		 mov	 eax, edi
  00037	80 78 03 0f	 cmp	 BYTE PTR [eax+3], 15	; 0000000fH
  0003b	74 03		 je	 SHORT $L158183
$L152540:

; 302  : 	for(DWORD i=0; i<m_vData.size(); i++)

  0003d	42		 inc	 edx
  0003e	eb d0		 jmp	 SHORT $L152539
$L158183:
  00040	5f		 pop	 edi

; 306  : 			return TRUE;

  00041	b0 01		 mov	 al, 1
  00043	5e		 pop	 esi

; 310  : }

  00044	c3		 ret	 0
$L152541:
  00045	5f		 pop	 edi

; 307  : 	}
; 308  : 
; 309  : 	return FALSE;

  00046	32 c0		 xor	 al, al
  00048	5e		 pop	 esi

; 310  : }

  00049	c3		 ret	 0
?IsCancelMine@CTSkillTemp@@QAEEXZ ENDP			; CTSkillTemp::IsCancelMine
_TEXT	ENDS
PUBLIC	?IsTrans@CTSkillTemp@@QAEEXZ			; CTSkillTemp::IsTrans
; Function compile flags: /Ogty
;	COMDAT ?IsTrans@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsTrans@CTSkillTemp@@QAEEXZ PROC NEAR			; CTSkillTemp::IsTrans, COMDAT
; _this$ = ecx

; 313  : {

  00000	56		 push	 esi
  00001	8b b1 84 00 00
	00		 mov	 esi, DWORD PTR [ecx+132]

; 314  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00007	33 d2		 xor	 edx, edx
  00009	8d a4 24 00 00
	00 00		 npad	 7
$L152547:
  00010	85 f6		 test	 esi, esi
  00012	74 27		 je	 SHORT $L152549
  00014	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  0001a	2b c6		 sub	 eax, esi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	3b d0		 cmp	 edx, eax
  00021	73 18		 jae	 SHORT $L152549
  00023	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]
  00029	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]

; 315  : 	{
; 316  : 		if(m_vData[i]->m_bType == SDT_TRANS)

  0002c	8b 00		 mov	 eax, DWORD PTR [eax]
  0002e	80 78 01 03	 cmp	 BYTE PTR [eax+1], 3
  00032	74 03		 je	 SHORT $L158252

; 314  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00034	42		 inc	 edx
  00035	eb d9		 jmp	 SHORT $L152547
$L158252:

; 317  : 			return TRUE;

  00037	b0 01		 mov	 al, 1
  00039	5e		 pop	 esi

; 321  : }

  0003a	c3		 ret	 0
$L152549:

; 318  : 	}
; 319  : 
; 320  : 	return FALSE;

  0003b	32 c0		 xor	 al, al
  0003d	5e		 pop	 esi

; 321  : }

  0003e	c3		 ret	 0
?IsTrans@CTSkillTemp@@QAEEXZ ENDP			; CTSkillTemp::IsTrans
_TEXT	ENDS
PUBLIC	?IsItemDelTarget@CTSkillTemp@@QAEEXZ		; CTSkillTemp::IsItemDelTarget
; Function compile flags: /Ogty
;	COMDAT ?IsItemDelTarget@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsItemDelTarget@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::IsItemDelTarget, COMDAT
; _this$ = ecx

; 324  : {

  00000	56		 push	 esi
  00001	8b b1 84 00 00
	00		 mov	 esi, DWORD PTR [ecx+132]
  00007	57		 push	 edi

; 325  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00008	33 d2		 xor	 edx, edx
  0000a	8d 9b 00 00 00
	00		 npad	 6
$L152555:
  00010	85 f6		 test	 esi, esi
  00012	74 31		 je	 SHORT $L152557
  00014	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  0001a	2b c6		 sub	 eax, esi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	3b d0		 cmp	 edx, eax
  00021	73 22		 jae	 SHORT $L152557
  00023	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]

; 326  : 	{
; 327  : 		if(m_vData[i]->m_bType == SDT_ITEM &&
; 328  : 			m_vData[i]->m_bExec == SDT_ITEM_DELTARGET)

  00029	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]
  0002c	80 7f 01 08	 cmp	 BYTE PTR [edi+1], 8
  00030	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00033	75 08		 jne	 SHORT $L152556
  00035	8b c7		 mov	 eax, edi
  00037	80 78 03 02	 cmp	 BYTE PTR [eax+3], 2
  0003b	74 03		 je	 SHORT $L158376
$L152556:

; 325  : 	for(DWORD i=0; i<m_vData.size(); i++)

  0003d	42		 inc	 edx
  0003e	eb d0		 jmp	 SHORT $L152555
$L158376:
  00040	5f		 pop	 edi

; 329  : 			return TRUE;

  00041	b0 01		 mov	 al, 1
  00043	5e		 pop	 esi

; 333  : }

  00044	c3		 ret	 0
$L152557:
  00045	5f		 pop	 edi

; 330  : 	}
; 331  : 
; 332  : 	return FALSE;

  00046	32 c0		 xor	 al, al
  00048	5e		 pop	 esi

; 333  : }

  00049	c3		 ret	 0
?IsItemDelTarget@CTSkillTemp@@QAEEXZ ENDP		; CTSkillTemp::IsItemDelTarget
_TEXT	ENDS
PUBLIC	?IsItemDelUser@CTSkillTemp@@QAEEXZ		; CTSkillTemp::IsItemDelUser
; Function compile flags: /Ogty
;	COMDAT ?IsItemDelUser@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsItemDelUser@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::IsItemDelUser, COMDAT
; _this$ = ecx

; 336  : {

  00000	55		 push	 ebp
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b b9 84 00 00
	00		 mov	 edi, DWORD PTR [ecx+132]

; 337  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00009	33 f6		 xor	 esi, esi
  0000b	b0 01		 mov	 al, 1
  0000d	8d 49 00	 npad	 3
$L152563:
  00010	85 ff		 test	 edi, edi
  00012	74 2b		 je	 SHORT $L152565
  00014	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  0001a	2b d7		 sub	 edx, edi
  0001c	c1 fa 02	 sar	 edx, 2
  0001f	3b f2		 cmp	 esi, edx
  00021	73 1c		 jae	 SHORT $L152565
  00023	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]

; 338  : 	{
; 339  : 		if(m_vData[i]->m_bType == SDT_ITEM &&
; 340  : 			m_vData[i]->m_bExec == SDT_ITEM_DELUSER)

  00029	8b 2c b2	 mov	 ebp, DWORD PTR [edx+esi*4]
  0002c	80 7d 01 08	 cmp	 BYTE PTR [ebp+1], 8
  00030	8d 14 b2	 lea	 edx, DWORD PTR [edx+esi*4]
  00033	75 07		 jne	 SHORT $L152564
  00035	8b d5		 mov	 edx, ebp
  00037	38 42 03	 cmp	 BYTE PTR [edx+3], al
  0003a	74 05		 je	 SHORT $L152561
$L152564:

; 337  : 	for(DWORD i=0; i<m_vData.size(); i++)

  0003c	46		 inc	 esi
  0003d	eb d1		 jmp	 SHORT $L152563
$L152565:

; 341  : 			return TRUE;
; 342  : 	}
; 343  : 
; 344  : 	return FALSE;

  0003f	32 c0		 xor	 al, al
$L152561:
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp

; 345  : }

  00044	c3		 ret	 0
?IsItemDelUser@CTSkillTemp@@QAEEXZ ENDP			; CTSkillTemp::IsItemDelUser
_TEXT	ENDS
PUBLIC	?IsDie@CTSkillTemp@@QAEEXZ			; CTSkillTemp::IsDie
; Function compile flags: /Ogty
;	COMDAT ?IsDie@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsDie@CTSkillTemp@@QAEEXZ PROC NEAR			; CTSkillTemp::IsDie, COMDAT
; _this$ = ecx

; 348  : {

  00000	56		 push	 esi
  00001	8b b1 84 00 00
	00		 mov	 esi, DWORD PTR [ecx+132]
  00007	57		 push	 edi

; 349  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00008	33 d2		 xor	 edx, edx
  0000a	8d 9b 00 00 00
	00		 npad	 6
$L152571:
  00010	85 f6		 test	 esi, esi
  00012	74 31		 je	 SHORT $L152573
  00014	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  0001a	2b c6		 sub	 eax, esi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	3b d0		 cmp	 edx, eax
  00021	73 22		 jae	 SHORT $L152573
  00023	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]

; 350  : 	{
; 351  : 		if(m_vData[i]->m_bType == SDT_STATUS &&
; 352  : 			m_vData[i]->m_bExec == SDT_STATUS_DIE)

  00029	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]
  0002c	80 7f 01 06	 cmp	 BYTE PTR [edi+1], 6
  00030	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00033	75 08		 jne	 SHORT $L152572
  00035	8b c7		 mov	 eax, edi
  00037	80 78 03 31	 cmp	 BYTE PTR [eax+3], 49	; 00000031H
  0003b	74 03		 je	 SHORT $L158624
$L152572:

; 349  : 	for(DWORD i=0; i<m_vData.size(); i++)

  0003d	42		 inc	 edx
  0003e	eb d0		 jmp	 SHORT $L152571
$L158624:
  00040	5f		 pop	 edi

; 353  : 			return TRUE;

  00041	b0 01		 mov	 al, 1
  00043	5e		 pop	 esi

; 357  : }

  00044	c3		 ret	 0
$L152573:
  00045	5f		 pop	 edi

; 354  : 	}
; 355  : 
; 356  : 	return FALSE;

  00046	32 c0		 xor	 al, al
  00048	5e		 pop	 esi

; 357  : }

  00049	c3		 ret	 0
?IsDie@CTSkillTemp@@QAEEXZ ENDP				; CTSkillTemp::IsDie
_TEXT	ENDS
PUBLIC	?IsMultiAttack@CTSkillTemp@@QAEEXZ		; CTSkillTemp::IsMultiAttack
; Function compile flags: /Ogty
;	COMDAT ?IsMultiAttack@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsMultiAttack@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::IsMultiAttack, COMDAT
; _this$ = ecx

; 360  : {

  00000	55		 push	 ebp
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b b9 84 00 00
	00		 mov	 edi, DWORD PTR [ecx+132]

; 361  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00009	33 f6		 xor	 esi, esi
  0000b	b0 01		 mov	 al, 1
  0000d	8d 49 00	 npad	 3
$L152579:
  00010	85 ff		 test	 edi, edi
  00012	74 2b		 je	 SHORT $L152581
  00014	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  0001a	2b d7		 sub	 edx, edi
  0001c	c1 fa 02	 sar	 edx, 2
  0001f	3b f2		 cmp	 esi, edx
  00021	73 1c		 jae	 SHORT $L152581
  00023	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]

; 362  : 	{
; 363  : 		if(m_vData[i]->m_bType == SDT_ABILITY &&
; 364  : 			m_vData[i]->m_bExec == MTYPE_EFC)

  00029	8b 2c b2	 mov	 ebp, DWORD PTR [edx+esi*4]
  0002c	38 45 01	 cmp	 BYTE PTR [ebp+1], al
  0002f	8d 14 b2	 lea	 edx, DWORD PTR [edx+esi*4]
  00032	75 08		 jne	 SHORT $L152580
  00034	8b d5		 mov	 edx, ebp
  00036	80 7a 03 24	 cmp	 BYTE PTR [edx+3], 36	; 00000024H
  0003a	74 05		 je	 SHORT $L152577
$L152580:

; 361  : 	for(DWORD i=0; i<m_vData.size(); i++)

  0003c	46		 inc	 esi
  0003d	eb d1		 jmp	 SHORT $L152579
$L152581:

; 365  : 			return TRUE;
; 366  : 	}
; 367  : 
; 368  : 	return FALSE;

  0003f	32 c0		 xor	 al, al
$L152577:
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp

; 369  : }

  00044	c3		 ret	 0
?IsMultiAttack@CTSkillTemp@@QAEEXZ ENDP			; CTSkillTemp::IsMultiAttack
_TEXT	ENDS
PUBLIC	?GetTransHPMPType@CTSkillTemp@@QAEEXZ		; CTSkillTemp::GetTransHPMPType
; Function compile flags: /Ogty
;	COMDAT ?GetTransHPMPType@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?GetTransHPMPType@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::GetTransHPMPType, COMDAT
; _this$ = ecx

; 372  : {

  00000	55		 push	 ebp
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b b9 84 00 00
	00		 mov	 edi, DWORD PTR [ecx+132]

; 373  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00009	33 f6		 xor	 esi, esi
  0000b	b0 10		 mov	 al, 16			; 00000010H
  0000d	8d 49 00	 npad	 3
$L152587:
  00010	85 ff		 test	 edi, edi
  00012	74 37		 je	 SHORT $L152589
  00014	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  0001a	2b d7		 sub	 edx, edi
  0001c	c1 fa 02	 sar	 edx, 2
  0001f	3b f2		 cmp	 esi, edx
  00021	73 28		 jae	 SHORT $L152589
  00023	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]

; 374  : 	{
; 375  : 		if(m_vData[i]->m_bType == SDT_CURE)

  00029	8b 2c b2	 mov	 ebp, DWORD PTR [edx+esi*4]
  0002c	80 7d 01 05	 cmp	 BYTE PTR [ebp+1], 5
  00030	8d 14 b2	 lea	 edx, DWORD PTR [edx+esi*4]
  00033	75 0d		 jne	 SHORT $L152588

; 376  : 		{
; 377  : 			if(m_vData[i]->m_bExec == SCT_HPTRANS)

  00035	80 7d 03 0f	 cmp	 BYTE PTR [ebp+3], 15	; 0000000fH
  00039	74 0a		 je	 SHORT $L158927

; 379  : 			else if(m_vData[i]->m_bExec == SCT_MPTRANS)

  0003b	8b d5		 mov	 edx, ebp
  0003d	38 42 03	 cmp	 BYTE PTR [edx+3], al
  00040	74 0b		 je	 SHORT $L152585
$L152588:

; 373  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00042	46		 inc	 esi
  00043	eb cb		 jmp	 SHORT $L152587
$L158927:
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 378  : 				return SCT_HPTRANS;

  00047	b0 0f		 mov	 al, 15			; 0000000fH
  00049	5d		 pop	 ebp

; 385  : }

  0004a	c3		 ret	 0
$L152589:

; 380  : 				return SCT_MPTRANS;
; 381  : 		}
; 382  : 	}
; 383  : 
; 384  : 	return 0;

  0004b	32 c0		 xor	 al, al
$L152585:
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5d		 pop	 ebp

; 385  : }

  00050	c3		 ret	 0
?GetTransHPMPType@CTSkillTemp@@QAEEXZ ENDP		; CTSkillTemp::GetTransHPMPType
_TEXT	ENDS
PUBLIC	?CheckCountry@CTSkillTemp@@QAEEE@Z		; CTSkillTemp::CheckCountry
; Function compile flags: /Ogty
;	COMDAT ?CheckCountry@CTSkillTemp@@QAEEE@Z
_TEXT	SEGMENT
_bCountry$ = 8						; size = 1
?CheckCountry@CTSkillTemp@@QAEEE@Z PROC NEAR		; CTSkillTemp::CheckCountry, COMDAT
; _this$ = ecx

; 388  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00000	8a 54 24 04	 mov	 dl, BYTE PTR _bCountry$[esp-4]
  00004	55		 push	 ebp
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b b9 84 00 00
	00		 mov	 edi, DWORD PTR [ecx+132]
  0000d	33 f6		 xor	 esi, esi
  0000f	90		 npad	 1
$L152599:
  00010	85 ff		 test	 edi, edi
  00012	74 50		 je	 SHORT $L152601
  00014	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  0001a	2b c7		 sub	 eax, edi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	3b f0		 cmp	 esi, eax
  00021	73 41		 jae	 SHORT $L152601
  00023	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]

; 389  : 	{
; 390  : 		if(m_vData[i]->m_bType == SDT_TRANS &&
; 391  : 			((m_vData[i]->m_bExec == SDT_TRANS_DISGUISE_D && bCountry == TCONTRY_D) ||
; 392  : 			(m_vData[i]->m_bExec == SDT_TRANS_DISGUISE_C && bCountry == TCONTRY_C) ||
; 393  : 			(m_vData[i]->m_bExec == SDT_TRANS_DISGUISE_B && bCountry == TCONTRY_B)))

  00029	8b 2c b0	 mov	 ebp, DWORD PTR [eax+esi*4]
  0002c	80 7d 01 03	 cmp	 BYTE PTR [ebp+1], 3
  00030	8d 04 b0	 lea	 eax, DWORD PTR [eax+esi*4]
  00033	75 24		 jne	 SHORT $L152600
  00035	80 7d 03 04	 cmp	 BYTE PTR [ebp+3], 4
  00039	75 04		 jne	 SHORT $L152604
  0003b	84 d2		 test	 dl, dl
  0003d	74 1d		 je	 SHORT $L152603
$L152604:
  0003f	8b 28		 mov	 ebp, DWORD PTR [eax]
  00041	80 7d 03 05	 cmp	 BYTE PTR [ebp+3], 5
  00045	75 05		 jne	 SHORT $L152605
  00047	80 fa 01	 cmp	 dl, 1
  0004a	74 10		 je	 SHORT $L152603
$L152605:
  0004c	8b 00		 mov	 eax, DWORD PTR [eax]
  0004e	80 78 03 06	 cmp	 BYTE PTR [eax+3], 6
  00052	75 05		 jne	 SHORT $L152600
  00054	80 fa 02	 cmp	 dl, 2
  00057	74 03		 je	 SHORT $L152603
$L152600:

; 388  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00059	46		 inc	 esi
  0005a	eb b4		 jmp	 SHORT $L152599
$L152603:
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi

; 394  : 			return FALSE;

  0005e	32 c0		 xor	 al, al
  00060	5d		 pop	 ebp

; 398  : }

  00061	c2 04 00	 ret	 4
$L152601:
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi

; 395  : 	}
; 396  : 
; 397  : 	return TRUE;

  00066	b0 01		 mov	 al, 1
  00068	5d		 pop	 ebp

; 398  : }

  00069	c2 04 00	 ret	 4
?CheckCountry@CTSkillTemp@@QAEEE@Z ENDP			; CTSkillTemp::CheckCountry
_TEXT	ENDS
PUBLIC	?GetNeedSkillPoint@CTSkillTemp@@QAEEE@Z		; CTSkillTemp::GetNeedSkillPoint
; Function compile flags: /Ogty
;	COMDAT ?GetNeedSkillPoint@CTSkillTemp@@QAEEE@Z
_TEXT	SEGMENT
_it$ = -4						; size = 4
_bLevel$ = 8						; size = 1
?GetNeedSkillPoint@CTSkillTemp@@QAEEE@Z PROC NEAR	; CTSkillTemp::GetNeedSkillPoint, COMDAT
; _this$ = ecx

; 406  : {

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 407  : 	MAPTSKILLPOINT::iterator it = m_mapTSkillPoint.find(bLevel);

  00004	8d 44 24 0c	 lea	 eax, DWORD PTR _bLevel$[esp+4]
  00008	50		 push	 eax
  00009	8d 4c 24 08	 lea	 ecx, DWORD PTR _it$[esp+12]
  0000d	51		 push	 ecx
  0000e	8d 8e 90 00 00
	00		 lea	 ecx, DWORD PTR [esi+144]
  00014	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::find

; 408  : 	if(it != m_mapTSkillPoint.end())

  00019	8b 8e 94 00 00
	00		 mov	 ecx, DWORD PTR [esi+148]
  0001f	8b 44 24 04	 mov	 eax, DWORD PTR _it$[esp+8]
  00023	3b c1		 cmp	 eax, ecx
  00025	5e		 pop	 esi
  00026	74 0a		 je	 SHORT $L152617

; 409  : 		return (*it).second->m_bSkillPoint;

  00028	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0002b	8a 42 03	 mov	 al, BYTE PTR [edx+3]

; 412  : }

  0002e	59		 pop	 ecx
  0002f	c2 04 00	 ret	 4
$L152617:

; 410  : 	else
; 411  : 		return 0;

  00032	32 c0		 xor	 al, al

; 412  : }

  00034	59		 pop	 ecx
  00035	c2 04 00	 ret	 4
?GetNeedSkillPoint@CTSkillTemp@@QAEEE@Z ENDP		; CTSkillTemp::GetNeedSkillPoint
_TEXT	ENDS
PUBLIC	?GetNeedKindPoint@CTSkillTemp@@QAEEE@Z		; CTSkillTemp::GetNeedKindPoint
; Function compile flags: /Ogty
;	COMDAT ?GetNeedKindPoint@CTSkillTemp@@QAEEE@Z
_TEXT	SEGMENT
_it$ = -4						; size = 4
_bLevel$ = 8						; size = 1
?GetNeedKindPoint@CTSkillTemp@@QAEEE@Z PROC NEAR	; CTSkillTemp::GetNeedKindPoint, COMDAT
; _this$ = ecx

; 415  : {

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 416  : 	MAPTSKILLPOINT::iterator it = m_mapTSkillPoint.find(bLevel);

  00004	8d 44 24 0c	 lea	 eax, DWORD PTR _bLevel$[esp+4]
  00008	50		 push	 eax
  00009	8d 4c 24 08	 lea	 ecx, DWORD PTR _it$[esp+12]
  0000d	51		 push	 ecx
  0000e	8d 8e 90 00 00
	00		 lea	 ecx, DWORD PTR [esi+144]
  00014	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::find

; 417  : 	if(it != m_mapTSkillPoint.end())

  00019	8b 8e 94 00 00
	00		 mov	 ecx, DWORD PTR [esi+148]
  0001f	8b 44 24 04	 mov	 eax, DWORD PTR _it$[esp+8]
  00023	3b c1		 cmp	 eax, ecx
  00025	5e		 pop	 esi
  00026	74 0a		 je	 SHORT $L152626

; 418  : 		return (*it).second->m_bGroupPoint;

  00028	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0002b	8a 42 04	 mov	 al, BYTE PTR [edx+4]

; 421  : }

  0002e	59		 pop	 ecx
  0002f	c2 04 00	 ret	 4
$L152626:

; 419  : 	else
; 420  : 		return 0;

  00032	32 c0		 xor	 al, al

; 421  : }

  00034	59		 pop	 ecx
  00035	c2 04 00	 ret	 4
?GetNeedKindPoint@CTSkillTemp@@QAEEE@Z ENDP		; CTSkillTemp::GetNeedKindPoint
_TEXT	ENDS
PUBLIC	?CheckParentSkill@CTSkillTemp@@QAEEEE@Z		; CTSkillTemp::CheckParentSkill
; Function compile flags: /Ogty
;	COMDAT ?CheckParentSkill@CTSkillTemp@@QAEEEE@Z
_TEXT	SEGMENT
_it$ = -4						; size = 4
_bLearnLevel$ = 8					; size = 1
_bParentLevel$ = 12					; size = 1
?CheckParentSkill@CTSkillTemp@@QAEEEE@Z PROC NEAR	; CTSkillTemp::CheckParentSkill, COMDAT
; _this$ = ecx

; 424  : {

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 425  : 	MAPTSKILLPOINT::iterator it = m_mapTSkillPoint.find(bLearnLevel);

  00004	8d 44 24 0c	 lea	 eax, DWORD PTR _bLearnLevel$[esp+4]
  00008	50		 push	 eax
  00009	8d 4c 24 08	 lea	 ecx, DWORD PTR _it$[esp+12]
  0000d	51		 push	 ecx
  0000e	8d 8e 90 00 00
	00		 lea	 ecx, DWORD PTR [esi+144]
  00014	e8 00 00 00 00	 call	 ?find@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@ABE@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::find

; 426  : 	if(it != m_mapTSkillPoint.end() &&	(*it).second->m_bParentLevel <= bParentLevel)

  00019	8b 8e 94 00 00
	00		 mov	 ecx, DWORD PTR [esi+148]
  0001f	8b 44 24 04	 mov	 eax, DWORD PTR _it$[esp+8]
  00023	3b c1		 cmp	 eax, ecx
  00025	5e		 pop	 esi
  00026	74 12		 je	 SHORT $L152636
  00028	8b 50 10	 mov	 edx, DWORD PTR [eax+16]
  0002b	8a 42 05	 mov	 al, BYTE PTR [edx+5]
  0002e	3a 44 24 0c	 cmp	 al, BYTE PTR _bParentLevel$[esp]
  00032	77 06		 ja	 SHORT $L152636

; 427  : 		return TRUE;

  00034	b0 01		 mov	 al, 1

; 430  : }

  00036	59		 pop	 ecx
  00037	c2 08 00	 ret	 8
$L152636:

; 428  : 	else
; 429  : 		return FALSE;

  0003a	32 c0		 xor	 al, al

; 430  : }

  0003c	59		 pop	 ecx
  0003d	c2 08 00	 ret	 8
?CheckParentSkill@CTSkillTemp@@QAEEEE@Z ENDP		; CTSkillTemp::CheckParentSkill
_TEXT	ENDS
PUBLIC	?GetItemProbBuff@CTSkillTemp@@QAEGE@Z		; CTSkillTemp::GetItemProbBuff
; Function compile flags: /Ogty
;	COMDAT ?GetItemProbBuff@CTSkillTemp@@QAEGE@Z
_TEXT	SEGMENT
tv205 = -4						; size = 4
_bType$ = 8						; size = 1
?GetItemProbBuff@CTSkillTemp@@QAEGE@Z PROC NEAR		; CTSkillTemp::GetItemProbBuff, COMDAT
; _this$ = ecx

; 442  : {

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b b1 84 00 00
	00		 mov	 esi, DWORD PTR [ecx+132]
  00008	57		 push	 edi

; 443  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00009	33 d2		 xor	 edx, edx
  0000b	eb 03 8d 49 00	 npad	 5
$L152649:
  00010	85 f6		 test	 esi, esi
  00012	74 4c		 je	 SHORT $L152651
  00014	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  0001a	2b c6		 sub	 eax, esi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	3b d0		 cmp	 edx, eax
  00021	73 3d		 jae	 SHORT $L152651
  00023	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]

; 444  : 	{
; 445  : 		if( m_vData[i]->m_bType == SDT_STATUS &&
; 446  : 			m_vData[i]->m_bExec == bType)

  00029	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]
  0002c	80 7f 01 06	 cmp	 BYTE PTR [edi+1], 6
  00030	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00033	75 13		 jne	 SHORT $L152650
  00035	89 4c 24 08	 mov	 DWORD PTR tv205[esp+12], ecx
  00039	8a 4c 24 10	 mov	 cl, BYTE PTR _bType$[esp+8]
  0003d	8b c7		 mov	 eax, edi
  0003f	38 48 03	 cmp	 BYTE PTR [eax+3], cl
  00042	8b 4c 24 08	 mov	 ecx, DWORD PTR tv205[esp+12]
  00046	74 03		 je	 SHORT $L159469
$L152650:

; 443  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00048	42		 inc	 edx
  00049	eb c5		 jmp	 SHORT $L152649
$L159469:

; 447  : 			return m_vData[i]->m_wValue;

  0004b	8b 89 84 00 00
	00		 mov	 ecx, DWORD PTR [ecx+132]
  00051	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  00054	8b 10		 mov	 edx, DWORD PTR [eax]
  00056	66 8b 42 06	 mov	 ax, WORD PTR [edx+6]
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi

; 451  : }

  0005c	59		 pop	 ecx
  0005d	c2 04 00	 ret	 4
$L152651:
  00060	5f		 pop	 edi

; 448  : 	}
; 449  : 	
; 450  : 	return 0;

  00061	66 33 c0	 xor	 ax, ax
  00064	5e		 pop	 esi

; 451  : }

  00065	59		 pop	 ecx
  00066	c2 04 00	 ret	 4
?GetItemProbBuff@CTSkillTemp@@QAEGE@Z ENDP		; CTSkillTemp::GetItemProbBuff
_TEXT	ENDS
PUBLIC	?IsRandomTrans@CTSkillTemp@@QAEEXZ		; CTSkillTemp::IsRandomTrans
; Function compile flags: /Ogty
;	COMDAT ?IsRandomTrans@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsRandomTrans@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::IsRandomTrans, COMDAT
; _this$ = ecx

; 454  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b b1 84 00 00
	00		 mov	 esi, DWORD PTR [ecx+132]
  00008	57		 push	 edi

; 455  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00009	33 d2		 xor	 edx, edx
  0000b	b3 03		 mov	 bl, 3
  0000d	8d 49 00	 npad	 3
$L152657:
  00010	85 f6		 test	 esi, esi
  00012	74 30		 je	 SHORT $L152659
  00014	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  0001a	2b c6		 sub	 eax, esi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	3b d0		 cmp	 edx, eax
  00021	73 21		 jae	 SHORT $L152659
  00023	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]

; 456  : 	{
; 457  : 		if(	m_vData[i]->m_bType == SDT_TRANS &&
; 458  : 			m_vData[i]->m_bExec == SDT_TRANS_RANDOM)

  00029	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]
  0002c	38 5f 01	 cmp	 BYTE PTR [edi+1], bl
  0002f	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00032	75 07		 jne	 SHORT $L152658
  00034	8b c7		 mov	 eax, edi
  00036	38 58 03	 cmp	 BYTE PTR [eax+3], bl
  00039	74 03		 je	 SHORT $L159593
$L152658:

; 455  : 	for(DWORD i=0; i<m_vData.size(); i++)

  0003b	42		 inc	 edx
  0003c	eb d2		 jmp	 SHORT $L152657
$L159593:
  0003e	5f		 pop	 edi
  0003f	5e		 pop	 esi

; 459  : 			return TRUE;

  00040	b0 01		 mov	 al, 1
  00042	5b		 pop	 ebx

; 463  : }

  00043	c3		 ret	 0
$L152659:
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 460  : 	}
; 461  : 
; 462  : 	return FALSE;

  00046	32 c0		 xor	 al, al
  00048	5b		 pop	 ebx

; 463  : }

  00049	c3		 ret	 0
?IsRandomTrans@CTSkillTemp@@QAEEXZ ENDP			; CTSkillTemp::IsRandomTrans
_TEXT	ENDS
PUBLIC	?IsAfterMath@CTSkillTemp@@QAEEXZ		; CTSkillTemp::IsAfterMath
; Function compile flags: /Ogty
;	COMDAT ?IsAfterMath@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsAfterMath@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::IsAfterMath, COMDAT
; _this$ = ecx

; 466  : {

  00000	56		 push	 esi
  00001	8b b1 84 00 00
	00		 mov	 esi, DWORD PTR [ecx+132]
  00007	57		 push	 edi

; 467  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00008	33 d2		 xor	 edx, edx
  0000a	8d 9b 00 00 00
	00		 npad	 6
$L152665:
  00010	85 f6		 test	 esi, esi
  00012	74 31		 je	 SHORT $L152667
  00014	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  0001a	2b c6		 sub	 eax, esi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	3b d0		 cmp	 edx, eax
  00021	73 22		 jae	 SHORT $L152667
  00023	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]

; 468  : 	{
; 469  : 		if(	m_vData[i]->m_bType == SDT_CURE &&
; 470  : 			m_vData[i]->m_bExec == SCT_AFTERMATH)

  00029	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]
  0002c	80 7f 01 05	 cmp	 BYTE PTR [edi+1], 5
  00030	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00033	75 08		 jne	 SHORT $L152666
  00035	8b c7		 mov	 eax, edi
  00037	80 78 03 0d	 cmp	 BYTE PTR [eax+3], 13	; 0000000dH
  0003b	74 03		 je	 SHORT $L159717
$L152666:

; 467  : 	for(DWORD i=0; i<m_vData.size(); i++)

  0003d	42		 inc	 edx
  0003e	eb d0		 jmp	 SHORT $L152665
$L159717:
  00040	5f		 pop	 edi

; 471  : 			return TRUE;

  00041	b0 01		 mov	 al, 1
  00043	5e		 pop	 esi

; 475  : }

  00044	c3		 ret	 0
$L152667:
  00045	5f		 pop	 edi

; 472  : 	}
; 473  : 
; 474  : 	return FALSE;

  00046	32 c0		 xor	 al, al
  00048	5e		 pop	 esi

; 475  : }

  00049	c3		 ret	 0
?IsAfterMath@CTSkillTemp@@QAEEXZ ENDP			; CTSkillTemp::IsAfterMath
_TEXT	ENDS
PUBLIC	?IsRandomBuff@CTSkillTemp@@QAEEXZ		; CTSkillTemp::IsRandomBuff
; Function compile flags: /Ogty
;	COMDAT ?IsRandomBuff@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsRandomBuff@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::IsRandomBuff, COMDAT
; _this$ = ecx

; 478  : {

  00000	56		 push	 esi
  00001	8b b1 84 00 00
	00		 mov	 esi, DWORD PTR [ecx+132]
  00007	57		 push	 edi

; 479  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00008	33 d2		 xor	 edx, edx
  0000a	8d 9b 00 00 00
	00		 npad	 6
$L152673:
  00010	85 f6		 test	 esi, esi
  00012	74 31		 je	 SHORT $L152675
  00014	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  0001a	2b c6		 sub	 eax, esi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	3b d0		 cmp	 edx, eax
  00021	73 22		 jae	 SHORT $L152675
  00023	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]

; 480  : 	{
; 481  : 		if(	m_vData[i]->m_bType == SDT_STATUS &&
; 482  : 			m_vData[i]->m_bExec == SDT_STATUS_RANDOM)

  00029	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]
  0002c	80 7f 01 06	 cmp	 BYTE PTR [edi+1], 6
  00030	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00033	75 08		 jne	 SHORT $L152674
  00035	8b c7		 mov	 eax, edi
  00037	80 78 03 3d	 cmp	 BYTE PTR [eax+3], 61	; 0000003dH
  0003b	74 03		 je	 SHORT $L159841
$L152674:

; 479  : 	for(DWORD i=0; i<m_vData.size(); i++)

  0003d	42		 inc	 edx
  0003e	eb d0		 jmp	 SHORT $L152673
$L159841:
  00040	5f		 pop	 edi

; 483  : 			return TRUE;

  00041	b0 01		 mov	 al, 1
  00043	5e		 pop	 esi

; 487  : }

  00044	c3		 ret	 0
$L152675:
  00045	5f		 pop	 edi

; 484  : 	}
; 485  : 
; 486  : 	return FALSE;

  00046	32 c0		 xor	 al, al
  00048	5e		 pop	 esi

; 487  : }

  00049	c3		 ret	 0
?IsRandomBuff@CTSkillTemp@@QAEEXZ ENDP			; CTSkillTemp::IsRandomBuff
_TEXT	ENDS
PUBLIC	?CanDefendAtDie@CTSkillTemp@@QAEEXZ		; CTSkillTemp::CanDefendAtDie
; Function compile flags: /Ogty
;	COMDAT ?CanDefendAtDie@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?CanDefendAtDie@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::CanDefendAtDie, COMDAT
; _this$ = ecx

; 490  : {

  00000	55		 push	 ebp
  00001	56		 push	 esi
  00002	57		 push	 edi
  00003	8b b9 84 00 00
	00		 mov	 edi, DWORD PTR [ecx+132]

; 491  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00009	33 f6		 xor	 esi, esi
  0000b	b0 04		 mov	 al, 4
  0000d	8d 49 00	 npad	 3
$L152681:
  00010	85 ff		 test	 edi, edi
  00012	74 3f		 je	 SHORT $L152683
  00014	8b 91 88 00 00
	00		 mov	 edx, DWORD PTR [ecx+136]
  0001a	2b d7		 sub	 edx, edi
  0001c	c1 fa 02	 sar	 edx, 2
  0001f	3b f2		 cmp	 esi, edx
  00021	73 30		 jae	 SHORT $L152683
  00023	8b 91 84 00 00
	00		 mov	 edx, DWORD PTR [ecx+132]

; 492  : 	{
; 493  : 		if((m_vData[i]->m_bType == SDT_CURE &&
; 494  : 			m_vData[i]->m_bExec == SCT_REVIVAL) ||
; 495  : 			(m_vData[i]->m_bType == SDT_AI &&
; 496  : 			 m_vData[i]->m_bExec == SDT_TEMPT))

  00029	8b 2c b2	 mov	 ebp, DWORD PTR [edx+esi*4]
  0002c	80 7d 01 05	 cmp	 BYTE PTR [ebp+1], 5
  00030	8d 14 b2	 lea	 edx, DWORD PTR [edx+esi*4]
  00033	75 06		 jne	 SHORT $L152686
  00035	80 7d 03 01	 cmp	 BYTE PTR [ebp+3], 1
  00039	74 12		 je	 SHORT $L152685
$L152686:
  0003b	8b 2a		 mov	 ebp, DWORD PTR [edx]
  0003d	80 7d 01 07	 cmp	 BYTE PTR [ebp+1], 7
  00041	75 07		 jne	 SHORT $L152682
  00043	8b d5		 mov	 edx, ebp
  00045	38 42 03	 cmp	 BYTE PTR [edx+3], al
  00048	74 03		 je	 SHORT $L152685
$L152682:

; 491  : 	for(DWORD i=0; i<m_vData.size(); i++)

  0004a	46		 inc	 esi
  0004b	eb c3		 jmp	 SHORT $L152681
$L152685:
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi

; 497  : 			return TRUE;

  0004f	b0 01		 mov	 al, 1
  00051	5d		 pop	 ebp

; 501  : }

  00052	c3		 ret	 0
$L152683:
  00053	5f		 pop	 edi
  00054	5e		 pop	 esi

; 498  : 	}
; 499  : 
; 500  : 	return FALSE;

  00055	32 c0		 xor	 al, al
  00057	5d		 pop	 ebp

; 501  : }

  00058	c3		 ret	 0
?CanDefendAtDie@CTSkillTemp@@QAEEXZ ENDP		; CTSkillTemp::CanDefendAtDie
_TEXT	ENDS
PUBLIC	?IsMonRecall@CTSkillTemp@@QAEEXZ		; CTSkillTemp::IsMonRecall
; Function compile flags: /Ogty
;	COMDAT ?IsMonRecall@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsMonRecall@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::IsMonRecall, COMDAT
; _this$ = ecx

; 504  : {

  00000	56		 push	 esi
  00001	8b b1 84 00 00
	00		 mov	 esi, DWORD PTR [ecx+132]
  00007	57		 push	 edi

; 505  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00008	33 d2		 xor	 edx, edx
  0000a	8d 9b 00 00 00
	00		 npad	 6
$L152691:
  00010	85 f6		 test	 esi, esi
  00012	74 31		 je	 SHORT $L152693
  00014	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  0001a	2b c6		 sub	 eax, esi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	3b d0		 cmp	 edx, eax
  00021	73 22		 jae	 SHORT $L152693
  00023	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]

; 506  : 	{
; 507  : 		if(m_vData[i]->m_bType == SDT_RECALL &&
; 508  : 			m_vData[i]->m_bExec == SER_MONSTER)

  00029	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]
  0002c	80 7f 01 02	 cmp	 BYTE PTR [edi+1], 2
  00030	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00033	75 08		 jne	 SHORT $L152692
  00035	8b c7		 mov	 eax, edi
  00037	80 78 03 07	 cmp	 BYTE PTR [eax+3], 7
  0003b	74 03		 je	 SHORT $L160198
$L152692:

; 505  : 	for(DWORD i=0; i<m_vData.size(); i++)

  0003d	42		 inc	 edx
  0003e	eb d0		 jmp	 SHORT $L152691
$L160198:
  00040	5f		 pop	 edi

; 509  : 			return TRUE;

  00041	b0 01		 mov	 al, 1
  00043	5e		 pop	 esi

; 513  : }

  00044	c3		 ret	 0
$L152693:
  00045	5f		 pop	 edi

; 510  : 	}
; 511  : 
; 512  : 	return FALSE;

  00046	32 c0		 xor	 al, al
  00048	5e		 pop	 esi

; 513  : }

  00049	c3		 ret	 0
?IsMonRecall@CTSkillTemp@@QAEEXZ ENDP			; CTSkillTemp::IsMonRecall
_TEXT	ENDS
PUBLIC	?IsRecall@CTSkillTemp@@QAEEXZ			; CTSkillTemp::IsRecall
; Function compile flags: /Ogty
;	COMDAT ?IsRecall@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsRecall@CTSkillTemp@@QAEEXZ PROC NEAR			; CTSkillTemp::IsRecall, COMDAT
; _this$ = ecx

; 516  : {

  00000	56		 push	 esi
  00001	8b b1 84 00 00
	00		 mov	 esi, DWORD PTR [ecx+132]
  00007	57		 push	 edi

; 517  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00008	33 d2		 xor	 edx, edx
  0000a	8d 9b 00 00 00
	00		 npad	 6
$L152699:
  00010	85 f6		 test	 esi, esi
  00012	74 31		 je	 SHORT $L152701
  00014	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  0001a	2b c6		 sub	 eax, esi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	3b d0		 cmp	 edx, eax
  00021	73 22		 jae	 SHORT $L152701
  00023	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]

; 518  : 	{
; 519  : 		if(m_vData[i]->m_bType == SDT_RECALL &&
; 520  : 			m_vData[i]->m_bExec != SER_SKILL)

  00029	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]
  0002c	80 7f 01 02	 cmp	 BYTE PTR [edi+1], 2
  00030	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00033	75 08		 jne	 SHORT $L152700
  00035	8b c7		 mov	 eax, edi
  00037	80 78 03 0c	 cmp	 BYTE PTR [eax+3], 12	; 0000000cH
  0003b	75 03		 jne	 SHORT $L160322
$L152700:

; 517  : 	for(DWORD i=0; i<m_vData.size(); i++)

  0003d	42		 inc	 edx
  0003e	eb d0		 jmp	 SHORT $L152699
$L160322:
  00040	5f		 pop	 edi

; 521  : 			return TRUE;

  00041	b0 01		 mov	 al, 1
  00043	5e		 pop	 esi

; 525  : }

  00044	c3		 ret	 0
$L152701:
  00045	5f		 pop	 edi

; 522  : 	}
; 523  : 
; 524  : 	return FALSE;

  00046	32 c0		 xor	 al, al
  00048	5e		 pop	 esi

; 525  : }

  00049	c3		 ret	 0
?IsRecall@CTSkillTemp@@QAEEXZ ENDP			; CTSkillTemp::IsRecall
_TEXT	ENDS
PUBLIC	?IsLuckyPotion@CTSkillTemp@@QAEEXZ		; CTSkillTemp::IsLuckyPotion
; Function compile flags: /Ogty
;	COMDAT ?IsLuckyPotion@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsLuckyPotion@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::IsLuckyPotion, COMDAT
; _this$ = ecx

; 528  : {

  00000	56		 push	 esi
  00001	8b b1 84 00 00
	00		 mov	 esi, DWORD PTR [ecx+132]
  00007	57		 push	 edi

; 529  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00008	33 d2		 xor	 edx, edx
  0000a	8d 9b 00 00 00
	00		 npad	 6
$L152707:
  00010	85 f6		 test	 esi, esi
  00012	74 31		 je	 SHORT $L152709
  00014	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  0001a	2b c6		 sub	 eax, esi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	3b d0		 cmp	 edx, eax
  00021	73 22		 jae	 SHORT $L152709
  00023	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]

; 530  : 	{
; 531  : 		if(m_vData[i]->m_bType == SDT_STATUS &&
; 532  : 			m_vData[i]->m_bExec == SDT_STATUS_ITEMUPGRADE)

  00029	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]
  0002c	80 7f 01 06	 cmp	 BYTE PTR [edi+1], 6
  00030	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00033	75 08		 jne	 SHORT $L152708
  00035	8b c7		 mov	 eax, edi
  00037	80 78 03 2a	 cmp	 BYTE PTR [eax+3], 42	; 0000002aH
  0003b	74 03		 je	 SHORT $L160446
$L152708:

; 529  : 	for(DWORD i=0; i<m_vData.size(); i++)

  0003d	42		 inc	 edx
  0003e	eb d0		 jmp	 SHORT $L152707
$L160446:
  00040	5f		 pop	 edi

; 533  : 			return TRUE;

  00041	b0 01		 mov	 al, 1
  00043	5e		 pop	 esi

; 537  : }

  00044	c3		 ret	 0
$L152709:
  00045	5f		 pop	 edi

; 534  : 	}
; 535  : 
; 536  : 	return FALSE;

  00046	32 c0		 xor	 al, al
  00048	5e		 pop	 esi

; 537  : }

  00049	c3		 ret	 0
?IsLuckyPotion@CTSkillTemp@@QAEEXZ ENDP			; CTSkillTemp::IsLuckyPotion
_TEXT	ENDS
PUBLIC	?IsExpPotion@CTSkillTemp@@QAEEXZ		; CTSkillTemp::IsExpPotion
; Function compile flags: /Ogty
;	COMDAT ?IsExpPotion@CTSkillTemp@@QAEEXZ
_TEXT	SEGMENT
?IsExpPotion@CTSkillTemp@@QAEEXZ PROC NEAR		; CTSkillTemp::IsExpPotion, COMDAT
; _this$ = ecx

; 540  : {

  00000	56		 push	 esi
  00001	8b b1 84 00 00
	00		 mov	 esi, DWORD PTR [ecx+132]
  00007	57		 push	 edi

; 541  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00008	33 d2		 xor	 edx, edx
  0000a	8d 9b 00 00 00
	00		 npad	 6
$L152715:
  00010	85 f6		 test	 esi, esi
  00012	74 31		 je	 SHORT $L152717
  00014	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  0001a	2b c6		 sub	 eax, esi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	3b d0		 cmp	 edx, eax
  00021	73 22		 jae	 SHORT $L152717
  00023	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]

; 542  : 	{
; 543  : 		if(m_vData[i]->m_bType == SDT_STATUS &&
; 544  : 			m_vData[i]->m_bExec == SDT_STATUS_AUTOEXP)

  00029	8b 3c 90	 mov	 edi, DWORD PTR [eax+edx*4]
  0002c	80 7f 01 06	 cmp	 BYTE PTR [edi+1], 6
  00030	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00033	75 08		 jne	 SHORT $L152716
  00035	8b c7		 mov	 eax, edi
  00037	80 78 03 43	 cmp	 BYTE PTR [eax+3], 67	; 00000043H
  0003b	74 03		 je	 SHORT $L160570
$L152716:

; 541  : 	for(DWORD i=0; i<m_vData.size(); i++)

  0003d	42		 inc	 edx
  0003e	eb d0		 jmp	 SHORT $L152715
$L160570:
  00040	5f		 pop	 edi

; 545  : 			return TRUE;

  00041	b0 01		 mov	 al, 1
  00043	5e		 pop	 esi

; 549  : }

  00044	c3		 ret	 0
$L152717:
  00045	5f		 pop	 edi

; 546  : 	}
; 547  : 
; 548  : 	return FALSE;

  00046	32 c0		 xor	 al, al
  00048	5e		 pop	 esi

; 549  : }

  00049	c3		 ret	 0
?IsExpPotion@CTSkillTemp@@QAEEXZ ENDP			; CTSkillTemp::IsExpPotion
_TEXT	ENDS
PUBLIC	?GetAutoExp@CTSkillTemp@@QAEGXZ			; CTSkillTemp::GetAutoExp
; Function compile flags: /Ogty
;	COMDAT ?GetAutoExp@CTSkillTemp@@QAEGXZ
_TEXT	SEGMENT
?GetAutoExp@CTSkillTemp@@QAEGXZ PROC NEAR		; CTSkillTemp::GetAutoExp, COMDAT
; _this$ = ecx

; 552  : {

  00000	56		 push	 esi
  00001	8b b1 84 00 00
	00		 mov	 esi, DWORD PTR [ecx+132]

; 553  : 	for(DWORD i=0; i<m_vData.size(); i++)

  00007	33 d2		 xor	 edx, edx
  00009	8d a4 24 00 00
	00 00		 npad	 7
$L152723:
  00010	85 f6		 test	 esi, esi
  00012	74 2f		 je	 SHORT $L152725
  00014	8b 81 88 00 00
	00		 mov	 eax, DWORD PTR [ecx+136]
  0001a	2b c6		 sub	 eax, esi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	3b d0		 cmp	 edx, eax
  00021	73 20		 jae	 SHORT $L152725
  00023	8b 81 84 00 00
	00		 mov	 eax, DWORD PTR [ecx+132]
  00029	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]

; 554  : 	{
; 555  : 		LPTSKILLDATA pData = m_vData[i];

  0002c	8b 00		 mov	 eax, DWORD PTR [eax]

; 556  : 		if(pData->m_bType == SDT_STATUS &&
; 557  : 			pData->m_bExec == SDT_STATUS_AUTOEXP)

  0002e	80 78 01 06	 cmp	 BYTE PTR [eax+1], 6
  00032	75 06		 jne	 SHORT $L152724
  00034	80 78 03 43	 cmp	 BYTE PTR [eax+3], 67	; 00000043H
  00038	74 03		 je	 SHORT $L160639
$L152724:

; 553  : 	for(DWORD i=0; i<m_vData.size(); i++)

  0003a	42		 inc	 edx
  0003b	eb d3		 jmp	 SHORT $L152723
$L160639:

; 558  : 			return pData->m_wValue;

  0003d	66 8b 40 06	 mov	 ax, WORD PTR [eax+6]
  00041	5e		 pop	 esi

; 562  : }

  00042	c3		 ret	 0
$L152725:

; 559  : 	}
; 560  : 
; 561  : 	return 0;

  00043	66 33 c0	 xor	 ax, ax
  00046	5e		 pop	 esi

; 562  : }

  00047	c3		 ret	 0
?GetAutoExp@CTSkillTemp@@QAEGXZ ENDP			; CTSkillTemp::GetAutoExp
_TEXT	ENDS
PUBLIC	??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::iterator::operator++
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::iterator::operator++, COMDAT
; _this$ = ecx

; 332  : 			{	// postincrement

  00000	56		 push	 esi

; 333  : 			iterator _Tmp = *this;

  00001	8b 31		 mov	 esi, DWORD PTR [ecx]

; 334  : 			++*this;

  00003	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::_Inc

; 335  : 			return (_Tmp);

  00008	8b 44 24 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  0000c	89 30		 mov	 DWORD PTR [eax], esi
  0000e	5e		 pop	 esi

; 336  : 			}

  0000f	c2 08 00	 ret	 8
??Eiterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::iterator::operator++
_TEXT	ENDS
PUBLIC	?_Init@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Init
; Function compile flags: /Ogty
;	COMDAT ?_Init@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Init, COMDAT
; _this$ = ecx

; 901  : 		{	// create head/nil node and make tree empty

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 902  : 		_Myhead = _Buynode();

  00003	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Buynode
  00008	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 903  : 		_Isnil(_Myhead) = true;

  0000b	c6 40 15 01	 mov	 BYTE PTR [eax+21], 1

; 904  : 		_Root() = _Myhead;

  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00012	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 905  : 		_Lmost() = _Myhead, _Rmost() = _Myhead;

  00015	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00018	89 00		 mov	 DWORD PTR [eax], eax
  0001a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001d	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 906  : 		_Mysize = 0;

  00020	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00027	5e		 pop	 esi

; 907  : 		}

  00028	c3		 ret	 0
?_Init@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Init
_TEXT	ENDS
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:NEAR		; std::logic_error::`vector deleting destructor'
EXTRN	??1exception@@UAE@XZ:NEAR			; exception::~exception
;	COMDAT ??_7logic_error@std@@6B@
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
CONST	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC NEAR			; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 23   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L160750
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L160750:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC NEAR		; std::logic_error::what, COMDAT
; _this$ = ecx

; 27   : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L160774
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  00009	c3		 ret	 0

; 27   : 		return (_Str.c_str());

$L160774:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  0000d	c3		 ret	 0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC NEAR		; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1logic_error@std@@UAE@XZ ; std::logic_error::~logic_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L160784
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L160784:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 590  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 591  : 		if (_Right.size() < _Roff)

  00003	8b 74 24 14	 mov	 esi, DWORD PTR __Roff$[esp+8]
  00007	57		 push	 edi
  00008	8b 7c 24 14	 mov	 edi, DWORD PTR __Right$[esp+12]
  0000c	39 77 14	 cmp	 DWORD PTR [edi+20], esi
  0000f	8b d9		 mov	 ebx, ecx
  00011	73 05		 jae	 SHORT $L148837

; 592  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L148837:

; 593  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 6f 14	 mov	 ebp, DWORD PTR [edi+20]

; 594  : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b ee		 sub	 ebp, esi
  00021	3b c5		 cmp	 eax, ebp
  00023	73 02		 jae	 SHORT $L148839

; 595  : 			_Num = _Count;	// trim _Num to size

  00025	8b e8		 mov	 ebp, eax
$L148839:

; 596  : 
; 597  : 		if (this == &_Right)

  00027	3b df		 cmp	 ebx, edi
  00029	75 1f		 jne	 SHORT $L148840

; 598  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 ee		 add	 ebp, esi
  0002f	55		 push	 ebp
  00030	8b cb		 mov	 ecx, ebx
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	56		 push	 esi
  00038	6a 00		 push	 0
  0003a	8b cb		 mov	 ecx, ebx
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00044	8b c3		 mov	 eax, ebx
  00046	5b		 pop	 ebx

; 605  : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$L148840:

; 599  : 		else if (_Grow(_Num))

  0004a	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  0004d	76 07		 jbe	 SHORT $L160935
  0004f	8b cb		 mov	 ecx, ebx
  00051	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L160935:
  00056	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00059	3b c5		 cmp	 eax, ebp
  0005b	73 21		 jae	 SHORT $L160936
  0005d	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00060	50		 push	 eax
  00061	55		 push	 ebp
  00062	8b cb		 mov	 ecx, ebx
  00064	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00069	85 ed		 test	 ebp, ebp
$L160981:
  0006b	76 6d		 jbe	 SHORT $L160980

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  0006d	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00070	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00075	3b c8		 cmp	 ecx, eax
  00077	72 2f		 jb	 SHORT $L160945
  00079	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0007c	eb 2d		 jmp	 SHORT $L160946

; 599  : 		else if (_Grow(_Num))

$L160936:
  0007e	85 ed		 test	 ebp, ebp
  00080	75 e9		 jne	 SHORT $L160981
  00082	83 f8 10	 cmp	 eax, 16			; 00000010H
  00085	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00088	72 0f		 jb	 SHORT $L160928
  0008a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	c6 00 00	 mov	 BYTE PTR [eax], 0
  00092	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00093	8b c3		 mov	 eax, ebx
  00095	5b		 pop	 ebx

; 605  : 		}

  00096	c2 0c 00	 ret	 12			; 0000000cH

; 599  : 		else if (_Grow(_Num))

$L160928:
  00099	5f		 pop	 edi
  0009a	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  0009d	5e		 pop	 esi
  0009e	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a1	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000a2	8b c3		 mov	 eax, ebx
  000a4	5b		 pop	 ebx

; 605  : 		}

  000a5	c2 0c 00	 ret	 12			; 0000000cH

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

$L160945:
  000a8	8d 57 04	 lea	 edx, DWORD PTR [edi+4]
$L160946:
  000ab	39 43 18	 cmp	 DWORD PTR [ebx+24], eax
  000ae	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000b1	72 04		 jb	 SHORT $L160952
  000b3	8b 38		 mov	 edi, DWORD PTR [eax]
  000b5	eb 02		 jmp	 SHORT $L160953
$L160952:
  000b7	8b f8		 mov	 edi, eax
$L160953:
  000b9	03 f2		 add	 esi, edx
  000bb	8b cd		 mov	 ecx, ebp
  000bd	8b d1		 mov	 edx, ecx
  000bf	c1 e9 02	 shr	 ecx, 2
  000c2	f3 a5		 rep movsd
  000c4	8b ca		 mov	 ecx, edx
  000c6	83 e1 03	 and	 ecx, 3
  000c9	f3 a4		 rep movsb

; 602  : 			_Eos(_Num);

  000cb	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000cf	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000d2	72 02		 jb	 SHORT $L160975
  000d4	8b 00		 mov	 eax, DWORD PTR [eax]
$L160975:
  000d6	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L160980:
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000dd	8b c3		 mov	 eax, ebx
  000df	5b		 pop	 ebx

; 605  : 		}

  000e0	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Num$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 608  : 		{	// assign [_Ptr, _Ptr + _Num)

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 609  : 		if (_Inside(_Ptr))

  00003	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  00006	83 fa 10	 cmp	 edx, 16			; 00000010H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	72 05		 jb	 SHORT $L161002
  0000d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00010	eb 03		 jmp	 SHORT $L161003
$L161002:
  00012	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$L161003:
  00015	8b 74 24 10	 mov	 esi, DWORD PTR __Ptr$[esp+8]
  00019	3b f0		 cmp	 esi, eax
  0001b	72 34		 jb	 SHORT $L149761
  0001d	83 fa 10	 cmp	 edx, 16			; 00000010H
  00020	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00023	72 04		 jb	 SHORT $L161006
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	eb 02		 jmp	 SHORT $L161007
$L161006:
  00029	8b c8		 mov	 ecx, eax
$L161007:
  0002b	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  0002e	03 f9		 add	 edi, ecx
  00030	3b fe		 cmp	 edi, esi
  00032	76 1d		 jbe	 SHORT $L149761

; 610  : 			return (assign(*this, _Ptr - _Myptr(), _Num));	// substring

  00034	83 fa 10	 cmp	 edx, 16			; 00000010H
  00037	72 02		 jb	 SHORT $L161019
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$L161019:
  0003b	8b 4c 24 14	 mov	 ecx, DWORD PTR __Num$[esp+8]
  0003f	51		 push	 ecx
  00040	2b f0		 sub	 esi, eax
  00042	56		 push	 esi
  00043	53		 push	 ebx
  00044	8b cb		 mov	 ecx, ebx
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx

; 618  : 		}

  0004e	c2 08 00	 ret	 8
$L149761:
  00051	55		 push	 ebp

; 611  : 
; 612  : 		if (_Grow(_Num))

  00052	8b 6c 24 18	 mov	 ebp, DWORD PTR __Num$[esp+12]
  00056	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  00059	76 07		 jbe	 SHORT $L161125
  0005b	8b cb		 mov	 ecx, ebx
  0005d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L161125:
  00062	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00065	3b c5		 cmp	 eax, ebp
  00067	73 1b		 jae	 SHORT $L161127
  00069	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  0006c	52		 push	 edx
  0006d	55		 push	 ebp
  0006e	8b cb		 mov	 ecx, ebx
  00070	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00075	85 ed		 test	 ebp, ebp
$L161199:
  00077	76 68		 jbe	 SHORT $L161197

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

  00079	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0007d	72 2f		 jb	 SHORT $L161171
  0007f	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00082	eb 2d		 jmp	 SHORT $L161172

; 611  : 
; 612  : 		if (_Grow(_Num))

$L161127:
  00084	85 ed		 test	 ebp, ebp
  00086	75 ef		 jne	 SHORT $L161199
  00088	83 f8 10	 cmp	 eax, 16			; 00000010H
  0008b	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  0008e	72 0f		 jb	 SHORT $L161162
  00090	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00093	5d		 pop	 ebp
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0
  00098	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  00099	8b c3		 mov	 eax, ebx
  0009b	5b		 pop	 ebx

; 618  : 		}

  0009c	c2 08 00	 ret	 8

; 611  : 
; 612  : 		if (_Grow(_Num))

$L161162:
  0009f	5d		 pop	 ebp
  000a0	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000a3	5f		 pop	 edi
  000a4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a7	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000a8	8b c3		 mov	 eax, ebx
  000aa	5b		 pop	 ebx

; 618  : 		}

  000ab	c2 08 00	 ret	 8

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

$L161171:
  000ae	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
$L161172:
  000b1	8b cd		 mov	 ecx, ebp
  000b3	8b c1		 mov	 eax, ecx
  000b5	c1 e9 02	 shr	 ecx, 2
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb

; 615  : 			_Eos(_Num);

  000c1	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000c5	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000c8	72 10		 jb	 SHORT $L161194
  000ca	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000cd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  000d1	5d		 pop	 ebp
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000d4	8b c3		 mov	 eax, ebx
  000d6	5b		 pop	 ebx

; 618  : 		}

  000d7	c2 08 00	 ret	 8

; 615  : 			_Eos(_Num);

$L161194:
  000da	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000dd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L161197:
  000e1	5d		 pop	 ebp
  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000e4	8b c3		 mov	 eax, ebx
  000e6	5b		 pop	 ebx

; 618  : 		}

  000e7	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?CalcValue@CTSkillTemp@@QAEHEEEK@Z		; CTSkillTemp::CalcValue
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\tskilltemp.cpp
;	COMDAT ?CalcValue@CTSkillTemp@@QAEHEEEK@Z
_TEXT	SEGMENT
_bLevel$ = 8						; size = 1
_bType$ = 12						; size = 1
_bExec$ = 16						; size = 1
_dwValue$ = 20						; size = 4
?CalcValue@CTSkillTemp@@QAEHEEEK@Z PROC NEAR		; CTSkillTemp::CalcValue, COMDAT
; _this$ = ecx

; 50   : {

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi
  00003	8b f1		 mov	 esi, ecx
  00005	8b ae 84 00 00
	00		 mov	 ebp, DWORD PTR [esi+132]
  0000b	57		 push	 edi

; 51   : 	int nInc=0;

  0000c	33 db		 xor	 ebx, ebx

; 52   : 	for(DWORD i=0; i<m_vData.size(); i++)

  0000e	33 ff		 xor	 edi, edi
$L152366:
  00010	85 ed		 test	 ebp, ebp
  00012	74 46		 je	 SHORT $L161324
  00014	8b 86 88 00 00
	00		 mov	 eax, DWORD PTR [esi+136]
  0001a	2b c5		 sub	 eax, ebp
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	3b f8		 cmp	 edi, eax
  00021	73 37		 jae	 SHORT $L161324
  00023	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]

; 53   : 	{
; 54   : 		if(m_vData[i]->m_bType == bType &&
; 55   : 			m_vData[i]->m_bExec == bExec)

  00029	8b 0c b8	 mov	 ecx, DWORD PTR [eax+edi*4]
  0002c	8a 54 24 18	 mov	 dl, BYTE PTR _bType$[esp+12]
  00030	38 51 01	 cmp	 BYTE PTR [ecx+1], dl
  00033	8d 04 b8	 lea	 eax, DWORD PTR [eax+edi*4]
  00036	75 1f		 jne	 SHORT $L152367
  00038	8b c1		 mov	 eax, ecx
  0003a	8a 4c 24 1c	 mov	 cl, BYTE PTR _bExec$[esp+12]
  0003e	38 48 03	 cmp	 BYTE PTR [eax+3], cl
  00041	75 14		 jne	 SHORT $L152367

; 56   : 			nInc += Calculate(bLevel, i, dwValue);

  00043	8b 54 24 20	 mov	 edx, DWORD PTR _dwValue$[esp+12]
  00047	8b 44 24 14	 mov	 eax, DWORD PTR _bLevel$[esp+12]
  0004b	52		 push	 edx
  0004c	57		 push	 edi
  0004d	50		 push	 eax
  0004e	8b ce		 mov	 ecx, esi
  00050	e8 00 00 00 00	 call	 ?Calculate@CTSkillTemp@@QAEHEKK@Z ; CTSkillTemp::Calculate
  00055	03 d8		 add	 ebx, eax
$L152367:

; 52   : 	for(DWORD i=0; i<m_vData.size(); i++)

  00057	47		 inc	 edi
  00058	eb b6		 jmp	 SHORT $L152366
$L161324:
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5d		 pop	 ebp

; 57   : 	}
; 58   : 
; 59   : 	return nInc;

  0005d	8b c3		 mov	 eax, ebx
  0005f	5b		 pop	 ebx

; 60   : }

  00060	c2 10 00	 ret	 16			; 00000010H
?CalcValue@CTSkillTemp@@QAEHEEEK@Z ENDP			; CTSkillTemp::CalcValue
_TEXT	ENDS
PUBLIC	??0?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@E@1@ABV?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@E@1@ABV?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@E@1@ABV?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >, COMDAT
; _this$ = ecx

; 361  : 		{	// construct empty tree

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 362  : 		_Init();

  00003	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Buynode
  00008	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000b	c6 40 15 01	 mov	 BYTE PTR [eax+21], 1
  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00012	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00015	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00018	89 00		 mov	 DWORD PTR [eax], eax
  0001a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001d	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00020	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 363  : 		}

  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	c2 08 00	 ret	 8
??0?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@ABU?$less@E@1@ABV?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 323  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 324  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 325  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 326  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 621  : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 622  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$L161514:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $L161514
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 623  : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 361  : 		_Tidy();
; 362  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$L161589:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $L161589
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 363  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
EXTRN	??0exception@@QAE@XZ:NEAR			; exception::exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T161692 DD	0ffffffffH
	DD	FLAT:$L161593
$T161690 DD	019930520H
	DD	01H
	DD	FLAT:$T161692
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 19   : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	89 74 24 04	 mov	 DWORD PTR _this$[esp+20], esi
  0001d	e8 00 00 00 00	 call	 ??0exception@@QAE@XZ	; exception::exception
  00022	33 c0		 xor	 eax, eax
  00024	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  0002d	6a ff		 push	 -1
  0002f	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00032	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00039	50		 push	 eax
  0003a	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  0003e	88 41 04	 mov	 BYTE PTR [ecx+4], al
  00041	8b 44 24 20	 mov	 eax, DWORD PTR __Message$[esp+24]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 20   : 		}

  0004b	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  0004f	8b c6		 mov	 eax, esi
  00051	5e		 pop	 esi
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L161593:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T161690
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_Glength_error@std@@UAEPAXI@Z			; std::length_error::`scalar deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:NEAR		; std::length_error::`vector deleting destructor'
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 95   : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@

; 96   : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
; Function compile flags: /Ogty
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC NEAR		; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1length_error@std@@UAE@XZ ; std::length_error::~length_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L161702
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L161702:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC NEAR			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 99   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L161797
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L161797:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
_TEXT	ENDS
PUBLIC	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
PUBLIC	??_7out_of_range@std@@6B@			; std::out_of_range::`vftable'
PUBLIC	??_Gout_of_range@std@@UAEPAXI@Z			; std::out_of_range::`scalar deleting destructor'
EXTRN	??_Eout_of_range@std@@UAEPAXI@Z:NEAR		; std::out_of_range::`vector deleting destructor'
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT
??_7out_of_range@std@@6B@ DD FLAT:??_Eout_of_range@std@@UAEPAXI@Z ; std::out_of_range::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx

; 118  : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7out_of_range@std@@6B@

; 119  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::out_of_range::out_of_range
_TEXT	ENDS
PUBLIC	??1out_of_range@std@@UAE@XZ			; std::out_of_range::~out_of_range
; Function compile flags: /Ogty
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gout_of_range@std@@UAEPAXI@Z PROC NEAR		; std::out_of_range::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1out_of_range@std@@UAE@XZ ; std::out_of_range::~out_of_range
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L161816
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L161816:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Gout_of_range@std@@UAEPAXI@Z ENDP			; std::out_of_range::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT
??1out_of_range@std@@UAE@XZ PROC NEAR			; std::out_of_range::~out_of_range, COMDAT
; _this$ = ecx

; 122  : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L161904
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L161904:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1out_of_range@std@@UAE@XZ ENDP			; std::out_of_range::~out_of_range
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IBEXXZ ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::_Xlen
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVexception@@@8				; exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	??0exception@@QAE@ABV0@@Z:NEAR			; exception::exception
;	COMDAT xdata$x
xdata$x	SEGMENT
$T162042 DD	0ffffffffH
	DD	FLAT:$L161928
$T162039 DD	019930520H
	DD	01H
	DD	FLAT:$T162042
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT
??_R0?AVexception@@@8 DD FLAT:??_7type_info@@6B@	; exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@@', 00H
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
_DATA	ENDS
;	COMDAT ?_Xlen@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
$T161927 = -80						; size = 28
$T161926 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IBEXXZ PROC NEAR ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::_Xlen, COMDAT
; _this$ = ecx

; 883  : 		{	// report a length_error

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Xlen@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IBEXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 44	 sub	 esp, 68			; 00000044H

; 884  : 		_THROW(length_error, "vector<T> too long");

  00018	6a 12		 push	 18			; 00000012H
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001f	8d 4c 24 08	 lea	 ecx, DWORD PTR $T161927[esp+88]
  00023	c7 44 24 20 0f
	00 00 00	 mov	 DWORD PTR $T161927[esp+112], 15 ; 0000000fH
  0002b	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T161927[esp+108], 0
  00033	c6 44 24 0c 00	 mov	 BYTE PTR $T161927[esp+92], 0
  00038	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0003d	8d 04 24	 lea	 eax, DWORD PTR $T161927[esp+80]
  00040	50		 push	 eax
  00041	8d 4c 24 20	 lea	 ecx, DWORD PTR $T161926[esp+84]
  00045	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+92], 0
  0004d	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00052	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVlength_error@std@@
  00057	8d 4c 24 20	 lea	 ecx, DWORD PTR $T161926[esp+84]
  0005b	51		 push	 ecx
  0005c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T161926[esp+88], OFFSET FLAT:??_7length_error@std@@6B@
  00064	e8 00 00 00 00	 call	 __CxxThrowException@8
$L162043:
$L162041:
  00069	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L161928:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T161927[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xlen@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IBEXXZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T162039
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Xlen@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IBEXXZ ENDP ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::_Xlen
;	COMDAT xdata$x
xdata$x	SEGMENT
$T162148 DD	0ffffffffH
	DD	FLAT:$L162049
$T162146 DD	019930520H
	DD	01H
	DD	FLAT:$T162148
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC NEAR		; std::logic_error::logic_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 1c	 mov	 edi, DWORD PTR ___that$[esp+20]
  0001c	8b f1		 mov	 esi, ecx
  0001e	57		 push	 edi
  0001f	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00023	e8 00 00 00 00	 call	 ??0exception@@QAE@ABV0@@Z ; exception::exception
  00028	33 c0		 xor	 eax, eax
  0002a	6a ff		 push	 -1
  0002c	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00035	50		 push	 eax
  00036	83 c7 0c	 add	 edi, 12			; 0000000cH
  00039	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00040	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00043	57		 push	 edi
  00044	89 44 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], eax
  00048	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00050	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00054	5f		 pop	 edi
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L162049:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T162146
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Ogty
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC NEAR		; std::length_error::length_error, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
PUBLIC	??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ ; `string'
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::erase
PUBLIC	??0out_of_range@std@@QAE@ABV01@@Z		; std::out_of_range::out_of_range
PUBLIC	__TI3?AVout_of_range@std@@
PUBLIC	__CTA3?AVout_of_range@std@@
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
xdata$x	SEGMENT
$T162649 DD	0ffffffffH
	DD	FLAT:$L162164
$T162641 DD	019930520H
	DD	01H
	DD	FLAT:$T162649
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
CONST	SEGMENT
??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ DB 'invalid '
	DB	'map/set<T> iterator', 00H			; `string'
CONST	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT
__TI3?AVout_of_range@std@@ DD 00H
	DD	FLAT:??1out_of_range@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVout_of_range@std@@
xdata$x	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT
__CTA3?AVout_of_range@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
_DATA	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT
__Erasednode$ = -84					; size = 4
$T162159 = -80						; size = 28
$T162158 = -52						; size = 40
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::erase, COMDAT
; _this$ = ecx

; 590  : 		{	// erase element at _Where

  00000	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00006	6a ff		 push	 -1
  00008	68 00 00 00 00	 push	 __ehhandler$?erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z
  0000d	50		 push	 eax

; 591  : 		if (_Isnil(_Where._Mynode()))

  0000e	8b 44 24 14	 mov	 eax, DWORD PTR __Where$[esp+8]
  00012	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00019	83 ec 48	 sub	 esp, 72			; 00000048H
  0001c	55		 push	 ebp
  0001d	8b e9		 mov	 ebp, ecx
  0001f	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  00022	84 c9		 test	 cl, cl
  00024	56		 push	 esi
  00025	74 4c		 je	 SHORT $L153102

; 592  : 			_THROW(out_of_range, "invalid map/set<T> iterator");

  00027	6a 1b		 push	 27			; 0000001bH
  00029	33 f6		 xor	 esi, esi
  0002b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
  00030	8d 4c 24 14	 lea	 ecx, DWORD PTR $T162159[esp+100]
  00034	c7 44 24 2c 0f
	00 00 00	 mov	 DWORD PTR $T162159[esp+124], 15 ; 0000000fH
  0003c	89 74 24 28	 mov	 DWORD PTR $T162159[esp+120], esi
  00040	c6 44 24 18 00	 mov	 BYTE PTR $T162159[esp+104], 0
  00045	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004a	8d 44 24 0c	 lea	 eax, DWORD PTR $T162159[esp+92]
  0004e	50		 push	 eax
  0004f	8d 4c 24 2c	 lea	 ecx, DWORD PTR $T162158[esp+96]
  00053	89 74 24 5c	 mov	 DWORD PTR __$EHRec$[esp+104], esi
  00057	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0005c	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVout_of_range@std@@
  00061	8d 4c 24 2c	 lea	 ecx, DWORD PTR $T162158[esp+96]
  00065	51		 push	 ecx
  00066	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR $T162158[esp+100], OFFSET FLAT:??_7out_of_range@std@@6B@
  0006e	e8 00 00 00 00	 call	 __CxxThrowException@8
$L162650:
$L153102:
  00073	53		 push	 ebx

; 593  : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase

  00074	8b d8		 mov	 ebx, eax
  00076	57		 push	 edi

; 594  : 		++_Where;	// save successor iterator for return

  00077	8d 4c 24 6c	 lea	 ecx, DWORD PTR __Where$[esp+96]
  0007b	89 5c 24 10	 mov	 DWORD PTR __Erasednode$[esp+100], ebx
  0007f	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::_Inc

; 595  : 
; 596  : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 597  : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 598  : 		_Nodeptr _Pnode = _Erasednode;
; 599  : 
; 600  : 		if (_Isnil(_Left(_Pnode)))

  00084	8b 03		 mov	 eax, DWORD PTR [ebx]
  00086	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  00089	84 c9		 test	 cl, cl
  0008b	74 05		 je	 SHORT $L153110

; 601  : 			_Fixnode = _Right(_Pnode);	// must stitch up right subtree

  0008d	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]

; 602  : 		else if (_Isnil(_Right(_Pnode)))

  00090	eb 19		 jmp	 SHORT $L162644
$L153110:
  00092	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00095	8a 4a 15	 mov	 cl, BYTE PTR [edx+21]
  00098	84 c9		 test	 cl, cl
  0009a	74 04		 je	 SHORT $L153112

; 603  : 			_Fixnode = _Left(_Pnode);	// must stitch up left subtree

  0009c	8b f8		 mov	 edi, eax

; 604  : 		else

  0009e	eb 0b		 jmp	 SHORT $L162644
$L153112:

; 605  : 			{	// two subtrees, must lift successor node to replace erased
; 606  : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 607  : 			_Fixnode = _Right(_Pnode);	// _Fixnode is its only subtree

  000a0	8b 4c 24 6c	 mov	 ecx, DWORD PTR __Where$[esp+96]

; 608  : 			}
; 609  : 
; 610  : 		if (_Pnode == _Erasednode)

  000a4	3b cb		 cmp	 ecx, ebx
  000a6	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  000a9	75 6e		 jne	 SHORT $L153114
$L162644:

; 611  : 			{	// at most one subtree, relink it
; 612  : 			_Fixnodeparent = _Parent(_Erasednode);
; 613  : 			if (!_Isnil(_Fixnode))

  000ab	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  000ae	84 c0		 test	 al, al
  000b0	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  000b3	75 03		 jne	 SHORT $L153115

; 614  : 				_Parent(_Fixnode) = _Fixnodeparent;	// link up

  000b5	89 77 04	 mov	 DWORD PTR [edi+4], esi
$L153115:

; 615  : 
; 616  : 			if (_Root() == _Erasednode)

  000b8	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  000bb	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  000be	75 05		 jne	 SHORT $L153116

; 617  : 				_Root() = _Fixnode;	// link down from root

  000c0	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 618  : 			else if (_Left(_Fixnodeparent) == _Erasednode)

  000c3	eb 0b		 jmp	 SHORT $L153119
$L153116:
  000c5	39 1e		 cmp	 DWORD PTR [esi], ebx
  000c7	75 04		 jne	 SHORT $L153118

; 619  : 				_Left(_Fixnodeparent) = _Fixnode;	// link down to left

  000c9	89 3e		 mov	 DWORD PTR [esi], edi

; 620  : 			else

  000cb	eb 03		 jmp	 SHORT $L153119
$L153118:

; 621  : 				_Right(_Fixnodeparent) = _Fixnode;	// link down to right

  000cd	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$L153119:

; 622  : 
; 623  : 			if (_Lmost() == _Erasednode)

  000d0	8b 5d 04	 mov	 ebx, DWORD PTR [ebp+4]
  000d3	8b 03		 mov	 eax, DWORD PTR [ebx]
  000d5	3b 44 24 10	 cmp	 eax, DWORD PTR __Erasednode$[esp+100]
  000d9	75 16		 jne	 SHORT $L153120

; 624  : 				_Lmost() = _Isnil(_Fixnode)
; 625  : 					? _Fixnodeparent	// smallest is parent of erased node
; 626  : 					: _Min(_Fixnode);	// smallest in relinked subtree

  000db	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  000de	84 c0		 test	 al, al
  000e0	74 04		 je	 SHORT $L162160
  000e2	8b c6		 mov	 eax, esi
  000e4	eb 09		 jmp	 SHORT $L162161
$L162160:
  000e6	57		 push	 edi
  000e7	e8 00 00 00 00	 call	 ?_Min@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Min
  000ec	83 c4 04	 add	 esp, 4
$L162161:
  000ef	89 03		 mov	 DWORD PTR [ebx], eax
$L153120:

; 627  : 
; 628  : 			if (_Rmost() == _Erasednode)

  000f1	8b 5d 04	 mov	 ebx, DWORD PTR [ebp+4]
  000f4	8b 4c 24 10	 mov	 ecx, DWORD PTR __Erasednode$[esp+100]
  000f8	39 4b 08	 cmp	 DWORD PTR [ebx+8], ecx
  000fb	75 74		 jne	 SHORT $L162477

; 629  : 				_Rmost() = _Isnil(_Fixnode)
; 630  : 					? _Fixnodeparent	// largest is parent of erased node
; 631  : 					: _Max(_Fixnode);	// largest in relinked subtree

  000fd	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  00100	84 c0		 test	 al, al
  00102	74 07		 je	 SHORT $L162162
  00104	8b c6		 mov	 eax, esi
  00106	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 632  : 			}
; 633  : 		else

  00109	eb 66		 jmp	 SHORT $L162477
$L162162:

; 629  : 				_Rmost() = _Isnil(_Fixnode)
; 630  : 					? _Fixnodeparent	// largest is parent of erased node
; 631  : 					: _Max(_Fixnode);	// largest in relinked subtree

  0010b	57		 push	 edi
  0010c	e8 00 00 00 00	 call	 ?_Max@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Max
  00111	83 c4 04	 add	 esp, 4
  00114	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 632  : 			}
; 633  : 		else

  00117	eb 58		 jmp	 SHORT $L162477
$L153114:

; 634  : 			{	// erased has two subtrees, _Pnode is successor to erased
; 635  : 			_Parent(_Left(_Erasednode)) = _Pnode;	// link left up

  00119	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 636  : 			_Left(_Pnode) = _Left(_Erasednode);	// link successor down

  0011c	8b 13		 mov	 edx, DWORD PTR [ebx]
  0011e	89 11		 mov	 DWORD PTR [ecx], edx

; 637  : 
; 638  : 			if (_Pnode == _Right(_Erasednode))

  00120	3b 4b 08	 cmp	 ecx, DWORD PTR [ebx+8]
  00123	75 04		 jne	 SHORT $L153123

; 639  : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  00125	8b f1		 mov	 esi, ecx

; 640  : 			else

  00127	eb 1b		 jmp	 SHORT $L153124
$L153123:

; 641  : 				{	// successor further down, link in place of erased
; 642  : 				_Fixnodeparent = _Parent(_Pnode);	// parent is successor's
; 643  : 				if (!_Isnil(_Fixnode))

  00129	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  0012c	84 c0		 test	 al, al
  0012e	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00131	75 03		 jne	 SHORT $L153125

; 644  : 					_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

  00133	89 77 04	 mov	 DWORD PTR [edi+4], esi
$L153125:

; 645  : 				_Left(_Fixnodeparent) = _Fixnode;	// link fix down

  00136	89 3e		 mov	 DWORD PTR [esi], edi

; 646  : 				_Right(_Pnode) = _Right(_Erasednode);	// link successor down

  00138	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0013b	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 647  : 				_Parent(_Right(_Erasednode)) = _Pnode;	// link right up

  0013e	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00141	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$L153124:

; 648  : 				}
; 649  : 
; 650  : 			if (_Root() == _Erasednode)

  00144	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00147	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  0014a	75 05		 jne	 SHORT $L153126

; 651  : 				_Root() = _Pnode;	// link down from root

  0014c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 652  : 			else if (_Left(_Parent(_Erasednode)) == _Erasednode)

  0014f	eb 0e		 jmp	 SHORT $L153129
$L153126:
  00151	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00154	39 18		 cmp	 DWORD PTR [eax], ebx
  00156	75 04		 jne	 SHORT $L153128

; 653  : 				_Left(_Parent(_Erasednode)) = _Pnode;	// link down to left

  00158	89 08		 mov	 DWORD PTR [eax], ecx

; 654  : 			else

  0015a	eb 03		 jmp	 SHORT $L153129
$L153128:

; 655  : 				_Right(_Parent(_Erasednode)) = _Pnode;	// link down to right

  0015c	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$L153129:

; 656  : 
; 657  : 			_Parent(_Pnode) = _Parent(_Erasednode);	// link successor up

  0015f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00162	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 658  : 			std::swap(_Color(_Pnode), _Color(_Erasednode));	// recolor it

  00165	8a 53 14	 mov	 dl, BYTE PTR [ebx+20]
  00168	8a 41 14	 mov	 al, BYTE PTR [ecx+20]
  0016b	88 51 14	 mov	 BYTE PTR [ecx+20], dl
  0016e	88 43 14	 mov	 BYTE PTR [ebx+20], al
$L162477:

; 659  : 			}
; 660  : 
; 661  : 		if (_Color(_Erasednode) == _Black)

  00171	8b 44 24 10	 mov	 eax, DWORD PTR __Erasednode$[esp+100]
  00175	8a 48 14	 mov	 cl, BYTE PTR [eax+20]
  00178	b3 01		 mov	 bl, 1
  0017a	3a cb		 cmp	 cl, bl
  0017c	0f 85 ff 00 00
	00		 jne	 $L153130

; 662  : 			{	// erasing black link, must recolor/rebalance tree
; 663  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 664  : 				_Fixnodeparent = _Parent(_Fixnode))

  00182	8b 4d 04	 mov	 ecx, DWORD PTR [ebp+4]
  00185	3b 79 04	 cmp	 edi, DWORD PTR [ecx+4]
  00188	0f 84 f0 00 00
	00		 je	 $L153133
  0018e	8b ff		 npad	 2
$L153131:
  00190	38 5f 14	 cmp	 BYTE PTR [edi+20], bl
  00193	0f 85 e5 00 00
	00		 jne	 $L153133

; 665  : 				if (_Fixnode == _Left(_Fixnodeparent))

  00199	8b 06		 mov	 eax, DWORD PTR [esi]
  0019b	3b f8		 cmp	 edi, eax
  0019d	75 67		 jne	 SHORT $L153134

; 666  : 					{	// fixup left subtree
; 667  : 					_Pnode = _Right(_Fixnodeparent);

  0019f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 668  : 					if (_Color(_Pnode) == _Red)

  001a2	8a 48 14	 mov	 cl, BYTE PTR [eax+20]
  001a5	84 c9		 test	 cl, cl
  001a7	75 12		 jne	 SHORT $L153135

; 669  : 						{	// rotate red up from right subtree
; 670  : 						_Color(_Pnode) = _Black;

  001a9	88 58 14	 mov	 BYTE PTR [eax+20], bl

; 671  : 						_Color(_Fixnodeparent) = _Red;
; 672  : 						_Lrotate(_Fixnodeparent);

  001ac	56		 push	 esi
  001ad	8b cd		 mov	 ecx, ebp
  001af	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0
  001b3	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Lrotate

; 673  : 						_Pnode = _Right(_Fixnodeparent);

  001b8	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
$L153135:

; 674  : 						}
; 675  : 
; 676  : 					if (_Isnil(_Pnode))

  001bb	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  001be	84 c9		 test	 cl, cl

; 677  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 678  : 					else if (_Color(_Left(_Pnode)) == _Black

  001c0	75 76		 jne	 SHORT $L162647

; 679  : 						&& _Color(_Right(_Pnode)) == _Black)

  001c2	8b 10		 mov	 edx, DWORD PTR [eax]
  001c4	38 5a 14	 cmp	 BYTE PTR [edx+20], bl
  001c7	75 08		 jne	 SHORT $L153138
  001c9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001cc	38 59 14	 cmp	 BYTE PTR [ecx+20], bl
  001cf	74 63		 je	 SHORT $L162648
$L153138:

; 680  : 						{	// redden right subtree with black children
; 681  : 						_Color(_Pnode) = _Red;
; 682  : 						_Fixnode = _Fixnodeparent;
; 683  : 						}
; 684  : 					else
; 685  : 						{	// must rearrange right subtree
; 686  : 						if (_Color(_Right(_Pnode)) == _Black)

  001d1	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001d4	38 59 14	 cmp	 BYTE PTR [ecx+20], bl
  001d7	75 14		 jne	 SHORT $L153140

; 687  : 							{	// rotate red up from left sub-subtree
; 688  : 							_Color(_Left(_Pnode)) = _Black;

  001d9	8b 10		 mov	 edx, DWORD PTR [eax]
  001db	88 5a 14	 mov	 BYTE PTR [edx+20], bl

; 689  : 							_Color(_Pnode) = _Red;
; 690  : 							_Rrotate(_Pnode);

  001de	50		 push	 eax
  001df	8b cd		 mov	 ecx, ebp
  001e1	c6 40 14 00	 mov	 BYTE PTR [eax+20], 0
  001e5	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Rrotate

; 691  : 							_Pnode = _Right(_Fixnodeparent);

  001ea	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
$L153140:

; 692  : 							}
; 693  : 
; 694  : 						_Color(_Pnode) = _Color(_Fixnodeparent);

  001ed	8a 4e 14	 mov	 cl, BYTE PTR [esi+20]
  001f0	88 48 14	 mov	 BYTE PTR [eax+20], cl

; 695  : 						_Color(_Fixnodeparent) = _Black;

  001f3	88 5e 14	 mov	 BYTE PTR [esi+20], bl

; 696  : 						_Color(_Right(_Pnode)) = _Black;

  001f6	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 697  : 						_Lrotate(_Fixnodeparent);

  001f9	56		 push	 esi
  001fa	8b cd		 mov	 ecx, ebp
  001fc	88 5a 14	 mov	 BYTE PTR [edx+20], bl
  001ff	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Lrotate

; 698  : 						break;	// tree now recolored/rebalanced

  00204	eb 78		 jmp	 SHORT $L153133
$L153134:

; 699  : 						}
; 700  : 					}
; 701  : 				else
; 702  : 					{	// fixup right subtree
; 703  : 					_Pnode = _Left(_Fixnodeparent);
; 704  : 					if (_Color(_Pnode) == _Red)

  00206	8a 48 14	 mov	 cl, BYTE PTR [eax+20]
  00209	84 c9		 test	 cl, cl
  0020b	75 11		 jne	 SHORT $L153142

; 705  : 						{	// rotate red up from left subtree
; 706  : 						_Color(_Pnode) = _Black;

  0020d	88 58 14	 mov	 BYTE PTR [eax+20], bl

; 707  : 						_Color(_Fixnodeparent) = _Red;
; 708  : 						_Rrotate(_Fixnodeparent);

  00210	56		 push	 esi
  00211	8b cd		 mov	 ecx, ebp
  00213	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0
  00217	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Rrotate

; 709  : 						_Pnode = _Left(_Fixnodeparent);

  0021c	8b 06		 mov	 eax, DWORD PTR [esi]
$L153142:

; 710  : 						}
; 711  : 					if (_Isnil(_Pnode))

  0021e	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  00221	84 c9		 test	 cl, cl

; 712  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 713  : 					else if (_Color(_Right(_Pnode)) == _Black

  00223	75 13		 jne	 SHORT $L162647

; 714  : 						&& _Color(_Left(_Pnode)) == _Black)

  00225	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00228	38 5a 14	 cmp	 BYTE PTR [edx+20], bl
  0022b	75 20		 jne	 SHORT $L153145
  0022d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0022f	38 59 14	 cmp	 BYTE PTR [ecx+20], bl
  00232	75 19		 jne	 SHORT $L153145
$L162648:

; 715  : 						{	// redden left subtree with black children
; 716  : 						_Color(_Pnode) = _Red;

  00234	c6 40 14 00	 mov	 BYTE PTR [eax+20], 0
$L162647:

; 662  : 			{	// erasing black link, must recolor/rebalance tree
; 663  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 664  : 				_Fixnodeparent = _Parent(_Fixnode))

  00238	8b 55 04	 mov	 edx, DWORD PTR [ebp+4]
  0023b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 717  : 						_Fixnode = _Fixnodeparent;

  0023e	8b fe		 mov	 edi, esi
  00240	3b f8		 cmp	 edi, eax
  00242	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00245	0f 85 45 ff ff
	ff		 jne	 $L153131

; 662  : 			{	// erasing black link, must recolor/rebalance tree
; 663  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 664  : 				_Fixnodeparent = _Parent(_Fixnode))

  0024b	eb 31		 jmp	 SHORT $L153133
$L153145:

; 718  : 						}
; 719  : 					else
; 720  : 						{	// must rearrange left subtree
; 721  : 						if (_Color(_Left(_Pnode)) == _Black)

  0024d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0024f	38 59 14	 cmp	 BYTE PTR [ecx+20], bl
  00252	75 14		 jne	 SHORT $L153147

; 722  : 							{	// rotate red up from right sub-subtree
; 723  : 							_Color(_Right(_Pnode)) = _Black;

  00254	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00257	88 5a 14	 mov	 BYTE PTR [edx+20], bl

; 724  : 							_Color(_Pnode) = _Red;
; 725  : 							_Lrotate(_Pnode);

  0025a	50		 push	 eax
  0025b	8b cd		 mov	 ecx, ebp
  0025d	c6 40 14 00	 mov	 BYTE PTR [eax+20], 0
  00261	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Lrotate

; 726  : 							_Pnode = _Left(_Fixnodeparent);

  00266	8b 06		 mov	 eax, DWORD PTR [esi]
$L153147:

; 727  : 							}
; 728  : 
; 729  : 						_Color(_Pnode) = _Color(_Fixnodeparent);

  00268	8a 4e 14	 mov	 cl, BYTE PTR [esi+20]
  0026b	88 48 14	 mov	 BYTE PTR [eax+20], cl

; 730  : 						_Color(_Fixnodeparent) = _Black;

  0026e	88 5e 14	 mov	 BYTE PTR [esi+20], bl

; 731  : 						_Color(_Left(_Pnode)) = _Black;

  00271	8b 10		 mov	 edx, DWORD PTR [eax]

; 732  : 						_Rrotate(_Fixnodeparent);

  00273	56		 push	 esi
  00274	8b cd		 mov	 ecx, ebp
  00276	88 5a 14	 mov	 BYTE PTR [edx+20], bl
  00279	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Rrotate
$L153133:

; 733  : 						break;	// tree now recolored/rebalanced
; 734  : 						}
; 735  : 					}
; 736  : 
; 737  : 			_Color(_Fixnode) = _Black;	// ensure stopping node is black

  0027e	88 5f 14	 mov	 BYTE PTR [edi+20], bl
$L153130:

; 738  : 			}
; 739  : 
; 740  : 		this->_Alnod.destroy(_Erasednode);	// destroy, free erased node
; 741  : 		this->_Alnod.deallocate(_Erasednode, 1);

  00281	8b 44 24 10	 mov	 eax, DWORD PTR __Erasednode$[esp+100]
  00285	50		 push	 eax
  00286	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 742  : 
; 743  : 		if (0 < _Mysize)

  0028b	8b 45 08	 mov	 eax, DWORD PTR [ebp+8]
  0028e	83 c4 04	 add	 esp, 4
  00291	85 c0		 test	 eax, eax
  00293	5f		 pop	 edi
  00294	5b		 pop	 ebx
  00295	76 04		 jbe	 SHORT $L153148

; 744  : 			--_Mysize;

  00297	48		 dec	 eax
  00298	89 45 08	 mov	 DWORD PTR [ebp+8], eax
$L153148:

; 745  : 
; 746  : 		return (_Where);	// return successor iterator

  0029b	8b 4c 24 64	 mov	 ecx, DWORD PTR __Where$[esp+88]
  0029f	8b 44 24 60	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+88]
  002a3	89 08		 mov	 DWORD PTR [eax], ecx

; 747  : 		}

  002a5	8b 4c 24 50	 mov	 ecx, DWORD PTR __$EHRec$[esp+92]
  002a9	5e		 pop	 esi
  002aa	5d		 pop	 ebp
  002ab	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  002b2	83 c4 54	 add	 esp, 84			; 00000054H
  002b5	c2 08 00	 ret	 8
$L162646:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L162164:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T162159[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T162641
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::erase
; Function compile flags: /Ogty
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV01@@Z PROC NEAR		; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7out_of_range@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0out_of_range@std@@QAE@ABV01@@Z ENDP			; std::out_of_range::out_of_range
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IAE_NI@Z ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::_Buy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?_Buy@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IAE_NI@Z PROC NEAR ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::_Buy, COMDAT
; _this$ = ecx

; 771  : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;
; 772  : 		if (_Capacity == 0)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Capacity$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	33 c9		 xor	 ecx, ecx
  00009	3b c1		 cmp	 eax, ecx
  0000b	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0000e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00011	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00014	75 06		 jne	 SHORT $L152919

; 773  : 			return (false);

  00016	32 c0		 xor	 al, al
  00018	5e		 pop	 esi

; 783  : 		}

  00019	c2 04 00	 ret	 4
$L152919:

; 774  : 		else if (max_size() < _Capacity)

  0001c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00021	76 07		 jbe	 SHORT $L152921

; 775  : 			_Xlen();	// result too long

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Xlen@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IBEXXZ ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::_Xlen
$L162685:
$L152921:
  0002a	57		 push	 edi

; 776  : 		else
; 777  : 			{	// nonempty array, allocate storage
; 778  : 			_Myfirst = this->_Alval.allocate(_Capacity);

  0002b	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  00032	57		 push	 edi
  00033	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 779  : 			_Mylast = _Myfirst;
; 780  : 			_Myend = _Myfirst + _Capacity;

  00038	03 f8		 add	 edi, eax
  0003a	83 c4 04	 add	 esp, 4
  0003d	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  00040	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00043	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00046	5f		 pop	 edi

; 781  : 			}
; 782  : 		return (true);

  00047	b0 01		 mov	 al, 1
  00049	5e		 pop	 esi

; 783  : 		}

  0004a	c2 04 00	 ret	 4
$L162684:
?_Buy@?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::_Buy
_TEXT	ENDS
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::erase
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
$T162692 = 12						; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::erase, COMDAT
; _this$ = ecx

; 750  : 		{	// erase [_First, _Last)

  00000	53		 push	 ebx

; 751  : 		if (_First == begin() && _Last == end())

  00001	8b 5c 24 10	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00010	3b 30		 cmp	 esi, DWORD PTR [eax]
  00012	75 38		 jne	 SHORT $L163024
  00014	3b d8		 cmp	 ebx, eax
  00016	75 34		 jne	 SHORT $L163024

; 752  : 			{	// erase all
; 753  : 			clear();

  00018	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001b	50		 push	 eax
  0001c	8b cf		 mov	 ecx, edi
  0001e	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Erase
  00023	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00029	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0002c	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00033	89 00		 mov	 DWORD PTR [eax], eax
  00035	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00038	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 754  : 			return (begin());

  0003b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	89 10		 mov	 DWORD PTR [eax], edx
  00048	5b		 pop	 ebx

; 761  : 			}
; 762  : 		}

  00049	c2 0c 00	 ret	 12			; 0000000cH
$L163024:

; 755  : 			}
; 756  : 		else
; 757  : 			{	// partial erase, one at a time
; 758  : 			while (_First != _Last)

  0004c	3b f3		 cmp	 esi, ebx
  0004e	74 5b		 je	 SHORT $L153048
$L153047:

; 759  : 				erase(_First++);

  00050	8a 46 15	 mov	 al, BYTE PTR [esi+21]
  00053	84 c0		 test	 al, al
  00055	8b ce		 mov	 ecx, esi
  00057	75 41		 jne	 SHORT $L163016
  00059	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0005c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0005f	84 d2		 test	 dl, dl
  00061	75 1a		 jne	 SHORT $L163026
  00063	8b f0		 mov	 esi, eax
  00065	8b 06		 mov	 eax, DWORD PTR [esi]
  00067	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0006a	84 d2		 test	 dl, dl
  0006c	75 2c		 jne	 SHORT $L163016
  0006e	8b ff		 npad	 2
$L163004:
  00070	8b f0		 mov	 esi, eax
  00072	8b 06		 mov	 eax, DWORD PTR [esi]
  00074	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00077	84 d2		 test	 dl, dl
  00079	74 f5		 je	 SHORT $L163004
  0007b	eb 1d		 jmp	 SHORT $L163016
$L163026:
  0007d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00080	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00083	84 d2		 test	 dl, dl
  00085	75 11		 jne	 SHORT $L163019
$L163018:
  00087	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0008a	75 0c		 jne	 SHORT $L163019
  0008c	8b f0		 mov	 esi, eax
  0008e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00091	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00094	84 d2		 test	 dl, dl
  00096	74 ef		 je	 SHORT $L163018
$L163019:
  00098	8b f0		 mov	 esi, eax
$L163016:
  0009a	51		 push	 ecx
  0009b	8d 44 24 18	 lea	 eax, DWORD PTR $T162692[esp+12]
  0009f	50		 push	 eax
  000a0	8b cf		 mov	 ecx, edi
  000a2	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::erase
  000a7	3b f3		 cmp	 esi, ebx
  000a9	75 a5		 jne	 SHORT $L153047
$L153048:

; 760  : 			return (_First);

  000ab	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  000af	5f		 pop	 edi
  000b0	89 30		 mov	 DWORD PTR [eax], esi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx

; 761  : 			}
; 762  : 		}

  000b4	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::erase
_TEXT	ENDS
PUBLIC	??0?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE@XZ ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE@XZ PROC NEAR ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >, COMDAT
; _this$ = ecx

; 299  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx

; 300  : 		_Buy(0);

  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00007	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 301  : 		}

  0000d	c3		 ret	 0
??0?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE@XZ ENDP ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Tidy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T163094 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 1142 : 		{	// free all storage

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 1143 : 		erase(begin(), end());

  00004	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	50		 push	 eax
  0000a	51		 push	 ecx
  0000b	8d 44 24 0c	 lea	 eax, DWORD PTR $T163094[esp+16]
  0000f	50		 push	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::erase

; 1144 : 		this->_Alptr.destroy(&_Left(_Myhead));
; 1145 : 		this->_Alptr.destroy(&_Parent(_Myhead));
; 1146 : 		this->_Alptr.destroy(&_Right(_Myhead));
; 1147 : 		this->_Alnod.deallocate(_Myhead, 1);

  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 04	 add	 esp, 4

; 1148 : 		_Myhead = 0, _Mysize = 0;

  00023	33 c0		 xor	 eax, eax
  00025	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00028	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0002b	5e		 pop	 esi

; 1149 : 		}

  0002c	59		 pop	 ecx
  0002d	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Tidy
_TEXT	ENDS
PUBLIC	??1?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::~_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >
; Function compile flags: /Ogty
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T163223 = -4						; size = 4
??1?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::~_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >, COMDAT
; _this$ = ecx

; 391  : 		{	// destroy tree

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 392  : 		_Tidy();

  00004	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	50		 push	 eax
  0000a	51		 push	 ecx
  0000b	8d 44 24 0c	 lea	 eax, DWORD PTR $T163223[esp+16]
  0000f	50		 push	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::erase
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 04	 add	 esp, 4
  00023	33 c0		 xor	 eax, eax
  00025	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00028	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0002b	5e		 pop	 esi

; 393  : 		}

  0002c	59		 pop	 ecx
  0002d	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::~_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >
_TEXT	ENDS
PUBLIC	??1?$map@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@@std@@QAE@XZ ; std::map<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> > >::~map<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> > >
; Function compile flags: /Ogty
;	COMDAT ??1?$map@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
$T163352 = -4						; size = 4
??1?$map@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@@std@@QAE@XZ PROC NEAR ; std::map<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> > >::~map<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> > >, COMDAT
; _this$ = ecx
  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	50		 push	 eax
  0000a	51		 push	 ecx
  0000b	8d 44 24 0c	 lea	 eax, DWORD PTR $T163352[esp+16]
  0000f	50		 push	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::erase
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 04	 add	 esp, 4
  00023	33 c0		 xor	 eax, eax
  00025	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00028	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0002b	5e		 pop	 esi
  0002c	59		 pop	 ecx
  0002d	c3		 ret	 0
??1?$map@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> > >::~map<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> > >
_TEXT	ENDS
PUBLIC	??1CTSkillTemp@@QAE@XZ				; CTSkillTemp::~CTSkillTemp
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
xdata$x	SEGMENT
$T163887 DD	0ffffffffH
	DD	FLAT:$L163385
	DD	00H
	DD	FLAT:$L163386
$T163879 DD	019930520H
	DD	02H
	DD	FLAT:$T163887
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\tskilltemp.cpp
xdata$x	ENDS
;	COMDAT ??1CTSkillTemp@@QAE@XZ
_TEXT	SEGMENT
$T163832 = -20						; size = 4
_it$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CTSkillTemp@@QAE@XZ PROC NEAR			; CTSkillTemp::~CTSkillTemp, COMDAT
; _this$ = ecx

; 11   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1CTSkillTemp@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 08	 sub	 esp, 8
  00018	53		 push	 ebx
  00019	55		 push	 ebp
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	8b f9		 mov	 edi, ecx
  0001e	89 7c 24 14	 mov	 DWORD PTR _this$[esp+36], edi
  00022	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+44], 1
  0002a	8d 9b 00 00 00
	00		 npad	 6
$L152236:

; 12   : 	while(!m_vData.empty())

  00030	8b 8f 84 00 00
	00		 mov	 ecx, DWORD PTR [edi+132]
  00036	33 f6		 xor	 esi, esi
  00038	3b ce		 cmp	 ecx, esi
  0003a	74 49		 je	 SHORT $L163885
  0003c	8b 87 88 00 00
	00		 mov	 eax, DWORD PTR [edi+136]
  00042	2b c1		 sub	 eax, ecx
  00044	c1 f8 02	 sar	 eax, 2
  00047	3b c6		 cmp	 eax, esi
  00049	74 3a		 je	 SHORT $L163885

; 13   : 	{
; 14   : 		delete m_vData.back();

  0004b	8b 87 88 00 00
	00		 mov	 eax, DWORD PTR [edi+136]
  00051	83 e8 04	 sub	 eax, 4
  00054	8b 00		 mov	 eax, DWORD PTR [eax]
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 15   : 		m_vData.pop_back();

  0005c	8b 8f 84 00 00
	00		 mov	 ecx, DWORD PTR [edi+132]
  00062	83 c4 04	 add	 esp, 4
  00065	3b ce		 cmp	 ecx, esi
  00067	74 c7		 je	 SHORT $L152236
  00069	8b 97 88 00 00
	00		 mov	 edx, DWORD PTR [edi+136]
  0006f	8b c2		 mov	 eax, edx
  00071	2b c1		 sub	 eax, ecx
  00073	c1 f8 02	 sar	 eax, 2
  00076	3b c6		 cmp	 eax, esi
  00078	74 b6		 je	 SHORT $L152236
  0007a	83 c2 fc	 add	 edx, -4			; fffffffcH
  0007d	89 97 88 00 00
	00		 mov	 DWORD PTR [edi+136], edx

; 16   : 	}

  00083	eb ab		 jmp	 SHORT $L152236
$L163885:

; 17   : 
; 18   : 	m_vData.clear();

  00085	8b 87 84 00 00
	00		 mov	 eax, DWORD PTR [edi+132]
  0008b	3b c6		 cmp	 eax, esi
  0008d	74 09		 je	 SHORT $L163508
  0008f	50		 push	 eax
  00090	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00095	83 c4 04	 add	 esp, 4
$L163508:
  00098	89 b7 84 00 00
	00		 mov	 DWORD PTR [edi+132], esi
  0009e	89 b7 88 00 00
	00		 mov	 DWORD PTR [edi+136], esi
  000a4	89 b7 8c 00 00
	00		 mov	 DWORD PTR [edi+140], esi

; 19   : 
; 20   : 	MAPTSKILLPOINT::iterator it;
; 21   : 	for(it=m_mapTSkillPoint.begin(); it!=m_mapTSkillPoint.end(); it++)

  000aa	8b 8f 94 00 00
	00		 mov	 ecx, DWORD PTR [edi+148]
  000b0	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b2	3b c1		 cmp	 eax, ecx
  000b4	89 44 24 10	 mov	 DWORD PTR _it$[esp+36], eax
  000b8	74 29		 je	 SHORT $L152322
  000ba	8d 9b 00 00 00
	00		 npad	 6
$L163557:

; 22   : 		delete (*it).second;

  000c0	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  000c3	50		 push	 eax
  000c4	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000c9	83 c4 04	 add	 esp, 4
  000cc	8d 4c 24 10	 lea	 ecx, DWORD PTR _it$[esp+36]
  000d0	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::const_iterator::_Inc
  000d5	8b 8f 94 00 00
	00		 mov	 ecx, DWORD PTR [edi+148]
  000db	8b 44 24 10	 mov	 eax, DWORD PTR _it$[esp+36]
  000df	3b c1		 cmp	 eax, ecx
  000e1	75 dd		 jne	 SHORT $L163557
$L152322:

; 23   : 	m_mapTSkillPoint.clear();

  000e3	8b 8f 94 00 00
	00		 mov	 ecx, DWORD PTR [edi+148]
  000e9	8b 59 04	 mov	 ebx, DWORD PTR [ecx+4]
  000ec	8a 43 15	 mov	 al, BYTE PTR [ebx+21]
  000ef	84 c0		 test	 al, al
  000f1	8d b7 90 00 00
	00		 lea	 esi, DWORD PTR [edi+144]
  000f7	8b eb		 mov	 ebp, ebx
  000f9	75 25		 jne	 SHORT $L163675
  000fb	eb 03 8d 49 00	 npad	 5
$L163673:
  00100	8b 55 08	 mov	 edx, DWORD PTR [ebp+8]
  00103	52		 push	 edx
  00104	8b ce		 mov	 ecx, esi
  00106	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Erase
  0010b	8b 6d 00	 mov	 ebp, DWORD PTR [ebp]
  0010e	53		 push	 ebx
  0010f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00114	8a 45 15	 mov	 al, BYTE PTR [ebp+21]
  00117	83 c4 04	 add	 esp, 4
  0011a	84 c0		 test	 al, al
  0011c	8b dd		 mov	 ebx, ebp
  0011e	74 e0		 je	 SHORT $L163673
$L163675:
  00120	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00123	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00126	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00129	33 db		 xor	 ebx, ebx
  0012b	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0012e	89 00		 mov	 DWORD PTR [eax], eax
  00130	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00133	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 24   : }

  00136	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00139	8b 08		 mov	 ecx, DWORD PTR [eax]
  0013b	50		 push	 eax
  0013c	51		 push	 ecx
  0013d	8d 44 24 18	 lea	 eax, DWORD PTR $T163832[esp+44]
  00141	50		 push	 eax
  00142	8b ce		 mov	 ecx, esi
  00144	88 5c 24 2c	 mov	 BYTE PTR __$EHRec$[esp+56], bl
  00148	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::erase
  0014d	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00150	51		 push	 ecx
  00151	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00156	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  00159	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  0015c	8b 87 84 00 00
	00		 mov	 eax, DWORD PTR [edi+132]
  00162	83 c4 04	 add	 esp, 4
  00165	3b c3		 cmp	 eax, ebx
  00167	74 09		 je	 SHORT $L163873
  00169	50		 push	 eax
  0016a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0016f	83 c4 04	 add	 esp, 4
$L163873:
  00172	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  00176	89 9f 84 00 00
	00		 mov	 DWORD PTR [edi+132], ebx
  0017c	89 9f 88 00 00
	00		 mov	 DWORD PTR [edi+136], ebx
  00182	89 9f 8c 00 00
	00		 mov	 DWORD PTR [edi+140], ebx
  00188	5f		 pop	 edi
  00189	5e		 pop	 esi
  0018a	5d		 pop	 ebp
  0018b	5b		 pop	 ebx
  0018c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00193	83 c4 14	 add	 esp, 20			; 00000014H
  00196	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L163385:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00009	e9 00 00 00 00	 jmp	 ??1?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE@XZ ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::~vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >
$L163386:
  0000e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  00017	e9 00 00 00 00	 jmp	 ??1?$map@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@@std@@QAE@XZ
__ehhandler$??1CTSkillTemp@@QAE@XZ:
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T163879
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CTSkillTemp@@QAE@XZ ENDP				; CTSkillTemp::~CTSkillTemp
PUBLIC	??0?$map@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@@std@@QAE@XZ ; std::map<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> > >::map<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> > >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\map
;	COMDAT ??0?$map@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$map@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@@std@@QAE@XZ PROC NEAR ; std::map<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> > >::map<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> > >, COMDAT
; _this$ = ecx

; 102  : 		{	// construct empty map from defaults

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Buynode
  00008	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000b	c6 40 15 01	 mov	 BYTE PTR [eax+21], 1
  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00012	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00015	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00018	89 00		 mov	 DWORD PTR [eax], eax
  0001a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001d	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00020	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 103  : 		}

  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	c3		 ret	 0
??0?$map@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@@std@@QAE@XZ ENDP ; std::map<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> > >::map<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> > >
_TEXT	ENDS
PUBLIC	??0CTSkillTemp@@QAE@XZ				; CTSkillTemp::CTSkillTemp
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
xdata$x	SEGMENT
$T164432 DD	0ffffffffH
	DD	FLAT:$L164058
	DD	00H
	DD	FLAT:$L164059
$T164430 DD	019930520H
	DD	02H
	DD	FLAT:$T164432
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tmapsvr\tskilltemp.cpp
xdata$x	ENDS
;	COMDAT ??0CTSkillTemp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CTSkillTemp@@QAE@XZ PROC NEAR			; CTSkillTemp::CTSkillTemp, COMDAT
; _this$ = ecx

; 5    : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0CTSkillTemp@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	33 db		 xor	 ebx, ebx
  0001a	57		 push	 edi
  0001b	8b f9		 mov	 edi, ecx
  0001d	89 7c 24 0c	 mov	 DWORD PTR _this$[esp+28], edi
  00021	89 9f 84 00 00
	00		 mov	 DWORD PTR [edi+132], ebx
  00027	89 9f 88 00 00
	00		 mov	 DWORD PTR [edi+136], ebx
  0002d	89 9f 8c 00 00
	00		 mov	 DWORD PTR [edi+140], ebx
  00033	8d b7 90 00 00
	00		 lea	 esi, DWORD PTR [edi+144]
  00039	8b ce		 mov	 ecx, esi
  0003b	89 5c 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], ebx
  0003f	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Buynode
  00044	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00047	b1 01		 mov	 cl, 1
  00049	88 48 15	 mov	 BYTE PTR [eax+21], cl
  0004c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004f	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00052	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00055	89 00		 mov	 DWORD PTR [eax], eax
  00057	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005a	89 40 08	 mov	 DWORD PTR [eax+8], eax
  0005d	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 6    : 	m_vData.clear();

  00060	8b 87 84 00 00
	00		 mov	 eax, DWORD PTR [edi+132]
  00066	3b c3		 cmp	 eax, ebx
  00068	88 4c 24 18	 mov	 BYTE PTR __$EHRec$[esp+36], cl
  0006c	74 09		 je	 SHORT $L164373
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00074	83 c4 04	 add	 esp, 4
$L164373:
  00077	89 9f 84 00 00
	00		 mov	 DWORD PTR [edi+132], ebx
  0007d	89 9f 88 00 00
	00		 mov	 DWORD PTR [edi+136], ebx
  00083	89 9f 8c 00 00
	00		 mov	 DWORD PTR [edi+140], ebx

; 7    : 	m_mapTSkillPoint.clear();

  00089	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0008c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0008f	51		 push	 ecx
  00090	8b ce		 mov	 ecx, esi
  00092	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,tagSKILLPOINT *,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,tagSKILLPOINT *> >,0> >::_Erase
  00097	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 8    : }

  0009a	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  0009e	89 40 04	 mov	 DWORD PTR [eax+4], eax
  000a1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000a4	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  000a7	89 00		 mov	 DWORD PTR [eax], eax
  000a9	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000ac	8b c7		 mov	 eax, edi
  000ae	5f		 pop	 edi
  000af	89 76 08	 mov	 DWORD PTR [esi+8], esi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx
  000b4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000bb	83 c4 10	 add	 esp, 16			; 00000010H
  000be	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L164058:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 80 00 00
	00		 add	 ecx, 128		; 00000080H
  00009	e9 00 00 00 00	 jmp	 ??1?$vector@PAUtagTSKILLDATA@@V?$allocator@PAUtagTSKILLDATA@@@std@@@std@@QAE@XZ ; std::vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >::~vector<tagTSKILLDATA *,std::allocator<tagTSKILLDATA *> >
$L164059:
  0000e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	81 c1 90 00 00
	00		 add	 ecx, 144		; 00000090H
  00017	e9 00 00 00 00	 jmp	 ??1?$map@EPAUtagSKILLPOINT@@U?$less@E@std@@V?$allocator@U?$pair@$$CBEPAUtagSKILLPOINT@@@std@@@3@@std@@QAE@XZ
__ehhandler$??0CTSkillTemp@@QAE@XZ:
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T164430
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CTSkillTemp@@QAE@XZ ENDP				; CTSkillTemp::CTSkillTemp
END
