; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\Handler.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_1EO@FMKJBPHL@?$AA?$HL?$AAA?$AA9?$AAC?$AA0?$AAC?$AAF?$AA5?$AA3?$AA?9?$AA7?$AAD?$AA5?$AA4?$AA?9?$AA4?$AA3?$AAD?$AA7?$AA?9@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CH@PONHNPAA@?$HLA9C0CF53?97D54?943D7?9B01C?9D604FB9@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@OGFEPDED@LocalService?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_02CCDHMLDD@?9?1?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@MIGBKCMN@UnregServer?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09LJBJJPCG@RegServer?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07LMLHFMEG@Service?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07PNHNHBAB@Install?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09LAEJNBCE@UnInstall?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04FABLJDN@Name?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@DBFDLFJJ@?$CFs?5?9Name?5?$CFs?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BP@GECJKCAK@Could?5not?5open?5Service?5Manager?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06HCEGMCNE@RPCSS?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BI@HDJFCBEP@Could?5not?5start?5service?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@OFNNAIND@CTBLVersion?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@EIMIBPM@CSPMinBetaVer?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@PFMHOGAK@CTBLPreVersion?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@BIGOCFAD@CSPPreComplete?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@JMOCNDDL@Could?5not?5open?5service?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BH@GKJBBOLK@Could?5not?5stop?5service?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NMBIIKKI@Could?5not?5delete?5service?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?GetAppId@CTPatchSvrModule@@SAPBGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetAppIdT@CTPatchSvrModule@@SAPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UpdateRegistryAppId@CTPatchSvrModule@@SGJH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterAppId@CTPatchSvrModule@@QAEJ_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Install@CTPatchSvrModule@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnCT_SERVICEMONITOR_ACK@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnCT_SERVICEDATACLEAR_ACK@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnCT_PATCH_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0tagPATCHFILE@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1tagPATCHFILE@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnCT_NEWPATCH_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnCT_PREPATCH_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnCT_PATCHSTART_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnCT_CTRLSVR_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnCT_PREPATCHCOMPLETE_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Tokenize@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@PBDAAH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Format@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAAXPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnregisterAppId@?$CAtlServiceModuleT@VCTPatchSvrModule@@$0GE@@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsInstalled@?$CAtlServiceModuleT@VCTPatchSvrModule@@$0GE@@ATL@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Uninstall@?$CAtlServiceModuleT@VCTPatchSvrModule@@$0GE@@ATL@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CAtlExeModuleT@VCTPatchSvrModule@@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CAtlExeModuleT@VCTPatchSvrModule@@@ATL@@UAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterServer@?$CAtlModuleT@VCTPatchSvrModule@@@ATL@@QAEJHPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UnregisterServer@?$CAtlModuleT@VCTPatchSvrModule@@@ATL@@QAEJHPBU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddCommonRGSReplacements@?$CAtlModuleT@VCTPatchSvrModule@@@ATL@@UAEJPAUIRegistrarBase@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBKPAVCTPatchSession@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAEXABUtagPATCHFILE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G?$CAtlExeModuleT@VCTPatchSvrModule@@@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CAtlModuleT@VCTPatchSvrModule@@@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Mid@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FormatV@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEXPBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckImplicitLoad@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@AAE_NPBX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLength@?$CSimpleStringT@D$0A@@ATL@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetManager@?$CSimpleStringT@D$0A@@ATL@@QBEPAUIAtlStringMgr@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUIAtlStringMgr@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringSpanIncluding@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringSpanExcluding@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?UninitializeCom@?$CAtlExeModuleT@VCTPatchSvrModule@@@ATL@@SAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBKPAVCTPatchSession@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE?AViterator@12@V312@ABUtagPATCHFILE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buy@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEPAUtagPATCHFILE@@PAU3@IABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Vector_val@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAE@V?$allocator@UtagPATCHFILE@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@UtagPATCHFILE@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadStringA@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBuffer@?$CSimpleStringT@D$0A@@ATL@@QAEPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ReleaseBufferSetLength@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetFormattedLength@?$ChTraitsCRT@D@ATL@@SAHPBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Format@?$ChTraitsCRT@D@ATL@@SAHPADPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myval@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBKPAVCTPatchSession@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXPAUtagPATCHFILE@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Insert_n@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXViterator@12@IABUtagPATCHFILE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xlen@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@UtagPATCHFILE@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@UtagPATCHFILE@@@std@@QAEXPAUtagPATCHFILE@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@UtagPATCHFILE@@@std@@QAEPAUtagPATCHFILE@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE@PAUtagPATCHFILE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Giterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBEHABVconst_iterator@12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0tagPATCHFILE@@QAE@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?LoadStringA@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEHPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyChars@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyCharsOverlapped@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringLength@?$CSimpleStringT@D$0A@@ATL@@SAHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrepareWrite@?$CSimpleStringT@D$0A@@ATL@@AAEPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindStringResourceInstance@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UtagPATCHFILE@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE@PAUtagPATCHFILE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Gconst_iterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBEHABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetBaseTypeLength@?$ChTraitsCRT@D@ATL@@SAHPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ConvertToBaseType@?$ChTraitsCRT@D@ATL@@SAXPADHPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Fork@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reallocate@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_fill_n@PAUtagPATCHFILE@@IU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAXPAUtagPATCHFILE@@IABU1@AAV?$allocator@UtagPATCHFILE@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAXPAUtagPATCHFILE@@0AAV?$allocator@UtagPATCHFILE@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ucopy@PAUtagPATCHFILE@@@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEPAUtagPATCHFILE@@PAU2@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill@PAUtagPATCHFILE@@U1@@std@@YAXPAUtagPATCHFILE@@0ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$copy_backward@PAUtagPATCHFILE@@PAU1@@std@@YAPAUtagPATCHFILE@@PAU1@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@UtagPATCHFILE@@@std@@YAPAUtagPATCHFILE@@IPAU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4tagPATCHFILE@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagPATCHFILE@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagPATCHFILE@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagPATCHFILE@@IU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAXPAUtagPATCHFILE@@IABU1@AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAXPAUtagPATCHFILE@@0AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAUtagPATCHFILE@@PAU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAPAUtagPATCHFILE@@PAU1@00AAV?$allocator@UtagPATCHFILE@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUtagPATCHFILE@@PAU1@@std@@YAPAUtagPATCHFILE@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@UtagPATCHFILE@@@std@@QAEXPAUtagPATCHFILE@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagPATCHFILE@@@std@@QAEXPAUtagPATCHFILE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagPATCHFILE@@PAU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAPAUtagPATCHFILE@@PAU1@00AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@UtagPATCHFILE@@U1@@std@@YAXPAUtagPATCHFILE@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagPATCHFILE@@@std@@YAXPAUtagPATCHFILE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GtagPATCHFILE@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetGITPtr@CAtlModule@ATL@@UAEJPAPAUIGlobalInterfaceTable@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __GUID_00000146_0000_0000_c000_000000000046
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT _CLSID_StdGlobalInterfaceTable
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?GetLockCount@CAtlModule@ATL@@UAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@CAtlModule@ATL@@UAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Increment@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@G@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetConversionACP@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlFindStringResourceInstance@ATL@@YAPAUHINSTANCE__@@IG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@IG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@PAUHRSRC__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlGetStringResourceImage@ATL@@YAPBUATLSTRINGRESOURCEIMAGE@1@PAUHINSTANCE__@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CAtlModule@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Decrement@CComMultiThreadModel@ATL@@SGKPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Term@CAtlModule@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlCallTermFunc@ATL@@YGXPAU_ATL_MODULE70@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlRaiseException@ATL@@YAXKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Term@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@CAtlModule@ATL@@UAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CAtlException@ATL@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __TI1?AVCAtlException@ATL@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA1?AVCAtlException@ATL@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVCAtlException@ATL@@@84
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVCAtlException@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CCSLock@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CCSLock@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_GCCSLock@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CCSLock@@QAE@PAU_RTL_CRITICAL_SECTION@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlLoadString@ATL@@YAHIPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WordCmpI@CAtlModule@ATL@@SAHPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindOneOf@CAtlModule@ATL@@SAPBDPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetStringValue@CRegKey@ATL@@QAEJPBD0K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteValue@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??BCRegKey@ATL@@QBEPAUHKEY__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@CRegKey@ATL@@QAEJPAUHKEY__@@PBDPADKKPAU_SECURITY_ATTRIBUTES@@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Close@CRegKey@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlHresultFromWin32@ATL@@YAJK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?Open@CRegKey@ATL@@QAEJPAUHKEY__@@PBDK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRegKey@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?UpdateRegistryFromResourceS@CAtlModule@ATL@@QAGJIHPAU_ATL_REGMAP_ENTRY@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRegObject@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IRegistrarBase@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CRegObject@ATL@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?QueryInterface@CRegObject@ATL@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CRegObject@ATL@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CRegObject@ATL@@UAGKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClearReplacements@CRegObject@ATL@@UAGJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lock@CComFakeCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ClearReplacements@CExpansionVector@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetKeyAt@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QBEAAPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetValueAt@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QBEAAPAGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RemoveAll@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@CComFakeCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCRegObject@ATL@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CExpansionVector@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CExpansionVector@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CRegObject@ATL@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@CCRTAllocator@ATL@@SAXPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlHresultFromLastError@ATL@@YAJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlA2WHelper@@YGPAGPAGPBDHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_AtlVerifyStackAvailable@_ATL_SAFE_ALLOCA_IMPL@ATL@@YA_NK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@CAtlSafeAllocBufferNode@?$CAtlSafeAllocBufferManager@VCCRTAllocator@ATL@@@_ATL_SAFE_ALLOCA_IMPL@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EscapeSingleQuote@CAtlModule@ATL@@SAXPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocscpy@@YAPAGPAGPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ocslen@@YAHPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_1O@MNLDABAF@?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AddReplacement@CRegObject@ATL@@UAGJPBG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlW2AHelper@@YGPADPADPBGHI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@CExpansionVector@ATL@@QAEHPBDPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAEHABQADABQAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InternalSetAtIndex@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAEXHABQADABQAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?2PAD@?$Wrapper@PAD@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@SAPAXIPAPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?3PAD@?$Wrapper@PAD@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@SAXPAXPAPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$Wrapper@PAD@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAE@ABQAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?2PAG@?$Wrapper@PAG@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@SAPAXIPAPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?3PAG@?$Wrapper@PAG@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@SAXPAXPAPAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$Wrapper@PAG@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QAE@ABQAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_1BG@JBACFMF@?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AA_?$AAR?$AAa?$AAw?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_1BC@KAILKFFG@?$AAR?$AAE?$AAG?$AAI?$AAS?$AAT?$AAR?$AAY?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?ResourceRegister@CRegObject@ATL@@QAGJPBGI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterFromResource@CRegObject@ATL@@IAEJPBGPBD1H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CRegParser@ATL@@QAE@PAVCRegObject@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeHeap@?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateBytes@?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateHeap@?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterBuffer@CRegParser@ATL@@QAEJPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?PreProcessBuffer@CRegParser@ATL@@QAEJPADPAPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CParseBuffer@CRegParser@ATL@@QAE@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CParseBuffer@CRegParser@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StrChrA@CRegParser@ATL@@KAPADPADD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StrFromMap@CRegObject@ATL@@QAEPBGPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Lookup@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QBEPAGABQAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindKey@?$CSimpleMap@PADPAGVCExpansionVectorEqualHelper@ATL@@@ATL@@QBEHABQAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEqualKey@CExpansionVectorEqualHelper@ATL@@SA_NQAD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddString@CParseBuffer@CRegParser@ATL@@QAEHPBG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Append@CParseBuffer@CRegParser@ATL@@QAEHPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddChar@CParseBuffer@CRegParser@ATL@@QAEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Detach@CParseBuffer@CRegParser@ATL@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HKeyFromString@CRegParser@ATL@@KAPAUHKEY__@@PAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_04OHBKMIBJ@HKCR?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04KIFLFONO@HKCU?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04CBBMIBLK@HKLM?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03DLBIJLAB@HKU?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04OFOCGAOH@HKPD?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04POMNGLEL@HKDD?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04LEMDOLAJ@HKCC?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@JBJOLKMF@HKEY_CLASSES_ROOT?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@GMMMKLBI@HKEY_CURRENT_USER?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@GIIFIKDM@HKEY_LOCAL_MACHINE?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@OEMMANAM@HKEY_USERS?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@IDBEHNDO@HKEY_PERFORMANCE_DATA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@MJDLIIGK@HKEY_DYN_DATA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@NLNNHLLF@HKEY_CURRENT_CONFIG?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?map@?2??HKeyFromString@CRegParser@ATL@@KAPAUHKEY__@@PAD@Z@4QBUkeymap@23@B
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?NextToken@CRegParser@ATL@@IAEJPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?EndOfVar@CRegParser@ATL@@IAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsSpace@CRegParser@ATL@@IAEHD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GenerateError@CRegParser@ATL@@IAEJI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?RegisterSubkeys@CRegParser@ATL@@IAEJPADPAUHKEY__@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?AddValue@CRegParser@ATL@@IAEJAAVCRegKey@2@PBDPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?VTFromRegType@CRegParser@ATL@@KAHPBDAAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?map@?2??VTFromRegType@CRegParser@ATL@@KAHPBDAAG@Z@4QBUtypemap@23@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?$S4@?2??VTFromRegType@CRegParser@ATL@@KAHPBDAAG@Z@4IA
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT ??0?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeHeap@?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateBytes@?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateHeap@?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetMultiStringValue@CRegKey@ATL@@QAEJPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CTempBuffer@D$0BAA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetDWORDValue@CRegKey@ATL@@QAEJPBDK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FreeHeap@?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@AAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Allocate@?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@QAEPAEI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateBytes@?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@QAEPAEI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AllocateHeap@?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@AAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ChToByte@CRegParser@ATL@@KAED@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CTempBuffer@E$0BAA@VCCRTAllocator@ATL@@@ATL@@QBEPAEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SkipAssignment@CRegParser@ATL@@IAEJPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HasSubKeys@CRegParser@ATL@@IAEHPAUHKEY__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CanForceRemoveKey@CRegParser@ATL@@IAEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?RecurseDeleteKey@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@CRegKey@ATL@@QAEXPAUHKEY__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteSubKey@CRegKey@ATL@@QAEJPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Detach@CRegKey@ATL@@QAEPAUHKEY__@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SkipWhiteSpace@CRegParser@ATL@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CTempBuffer@D$0EAA@VCCRTAllocator@ATL@@@ATL@@QBEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ResourceUnregister@CRegObject@ATL@@QAGJPBGI0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_1M@PPPPCDEP@?$AAA?$AAP?$AAP?$AAI?$AAD?$AA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?rgszNeverDelete@CRegParser@ATL@@1QBQBDB	; ATL::CRegParser::rgszNeverDelete
PUBLIC	?g_pfnGetThreadACP@ATL@@3P6GIXZA		; ATL::g_pfnGetThreadACP
PUBLIC	?_AtlGetThreadACPThunk@ATL@@YGIXZ		; ATL::_AtlGetThreadACPThunk
PUBLIC	??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@	; `string'
PUBLIC	??_C@_08PICKODJL@FileType?$AA@			; `string'
PUBLIC	??_C@_09JKPGEJCH@Interface?$AA@			; `string'
PUBLIC	??_C@_08PPIOJEA@Hardware?$AA@			; `string'
PUBLIC	??_C@_04IHBFOLAC@Mime?$AA@			; `string'
PUBLIC	??_C@_03DDIMFGBA@SAM?$AA@			; `string'
PUBLIC	??_C@_08LOPHEHKG@SECURITY?$AA@			; `string'
PUBLIC	??_C@_06FDHFNJBJ@SYSTEM?$AA@			; `string'
PUBLIC	??_C@_08KEKAJNJI@Software?$AA@			; `string'
PUBLIC	??_C@_07KJLOKDKB@TypeLib?$AA@			; `string'
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?m_libid@CAtlModule@ATL@@2U_GUID@@A		; ATL::CAtlModule::m_libid
PUBLIC	_CLSID_StdGlobalInterfaceTable
PUBLIC	??_C@_05GIBEAPNE@CLSID?$AA@			; `string'
PUBLIC	??_C@_05PDIKPLII@AppID?$AA@			; `string'
PUBLIC	??_C@_01CPLAODJH@S?$AA@				; `string'
PUBLIC	??_C@_01PLPBNMEI@M?$AA@				; `string'
PUBLIC	??_C@_01CKDDGHAB@D?$AA@				; `string'
PUBLIC	??_C@_01HMGJMAIH@B?$AA@				; `string'
PUBLIC	??_C@_03LAIAPFCB@Val?$AA@			; `string'
PUBLIC	??_C@_0M@DBGDLGLL@ForceRemove?$AA@		; `string'
PUBLIC	??_C@_08KAAPDIAN@NoRemove?$AA@			; `string'
PUBLIC	??_C@_06JBKGCNBB@Delete?$AA@			; `string'
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
;	COMDAT ?m_libid@CAtlModule@ATL@@2U_GUID@@A
_BSS	SEGMENT
?m_libid@CAtlModule@ATL@@2U_GUID@@A DB 010H DUP (?)	; ATL::CAtlModule::m_libid
_BSS	ENDS
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?g_pfnGetThreadACP@ATL@@3P6GIXZA
_DATA	SEGMENT
?g_pfnGetThreadACP@ATL@@3P6GIXZA DD FLAT:?_AtlGetThreadACPThunk@ATL@@YGIXZ ; ATL::g_pfnGetThreadACP
_DATA	ENDS
;	COMDAT _CLSID_StdGlobalInterfaceTable
CONST	SEGMENT
_CLSID_StdGlobalInterfaceTable DD 0323H
	DW	00H
	DW	00H
	DB	0c0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
CONST	ENDS
;	COMDAT ??_C@_01CPLAODJH@S?$AA@
CONST	SEGMENT
??_C@_01CPLAODJH@S?$AA@ DB 'S', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
_szStringVal DD	FLAT:??_C@_01CPLAODJH@S?$AA@
CONST	ENDS
;	COMDAT ??_C@_01PLPBNMEI@M?$AA@
CONST	SEGMENT
??_C@_01PLPBNMEI@M?$AA@ DB 'M', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
_multiszStringVal DD FLAT:??_C@_01PLPBNMEI@M?$AA@
CONST	ENDS
;	COMDAT ??_C@_01CKDDGHAB@D?$AA@
CONST	SEGMENT
??_C@_01CKDDGHAB@D?$AA@ DB 'D', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
_szDwordVal DD	FLAT:??_C@_01CKDDGHAB@D?$AA@
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B?$AA@
CONST	SEGMENT
??_C@_01HMGJMAIH@B?$AA@ DB 'B', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
_szBinaryVal DD	FLAT:??_C@_01HMGJMAIH@B?$AA@
CONST	ENDS
;	COMDAT ??_C@_03LAIAPFCB@Val?$AA@
CONST	SEGMENT
??_C@_03LAIAPFCB@Val?$AA@ DB 'Val', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
_szValToken DD	FLAT:??_C@_03LAIAPFCB@Val?$AA@
CONST	ENDS
;	COMDAT ??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	SEGMENT
??_C@_0M@DBGDLGLL@ForceRemove?$AA@ DB 'ForceRemove', 00H ; `string'
CONST	ENDS
CONST	SEGMENT
_szForceRemove DD FLAT:??_C@_0M@DBGDLGLL@ForceRemove?$AA@
CONST	ENDS
;	COMDAT ??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	SEGMENT
??_C@_08KAAPDIAN@NoRemove?$AA@ DB 'NoRemove', 00H	; `string'
CONST	ENDS
CONST	SEGMENT
_szNoRemove DD	FLAT:??_C@_08KAAPDIAN@NoRemove?$AA@
CONST	ENDS
;	COMDAT ??_C@_06JBKGCNBB@Delete?$AA@
CONST	SEGMENT
??_C@_06JBKGCNBB@Delete?$AA@ DB 'Delete', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
_szDelete DD	FLAT:??_C@_06JBKGCNBB@Delete?$AA@
CONST	ENDS
;	COMDAT ??_C@_05PDIKPLII@AppID?$AA@
CONST	SEGMENT
??_C@_05PDIKPLII@AppID?$AA@ DB 'AppID', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GIBEAPNE@CLSID?$AA@
CONST	SEGMENT
??_C@_05GIBEAPNE@CLSID?$AA@ DB 'CLSID', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
CONST	SEGMENT
??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@ DB 'Component Categories', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08PICKODJL@FileType?$AA@
CONST	SEGMENT
??_C@_08PICKODJL@FileType?$AA@ DB 'FileType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKPGEJCH@Interface?$AA@
CONST	SEGMENT
??_C@_09JKPGEJCH@Interface?$AA@ DB 'Interface', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPIOJEA@Hardware?$AA@
CONST	SEGMENT
??_C@_08PPIOJEA@Hardware?$AA@ DB 'Hardware', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04IHBFOLAC@Mime?$AA@
CONST	SEGMENT
??_C@_04IHBFOLAC@Mime?$AA@ DB 'Mime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DDIMFGBA@SAM?$AA@
CONST	SEGMENT
??_C@_03DDIMFGBA@SAM?$AA@ DB 'SAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08LOPHEHKG@SECURITY?$AA@
CONST	SEGMENT
??_C@_08LOPHEHKG@SECURITY?$AA@ DB 'SECURITY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDHFNJBJ@SYSTEM?$AA@
CONST	SEGMENT
??_C@_06FDHFNJBJ@SYSTEM?$AA@ DB 'SYSTEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEKAJNJI@Software?$AA@
CONST	SEGMENT
??_C@_08KEKAJNJI@Software?$AA@ DB 'Software', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	SEGMENT
??_C@_07KJLOKDKB@TypeLib?$AA@ DB 'TypeLib', 00H		; `string'
CONST	ENDS
;	COMDAT ?rgszNeverDelete@CRegParser@ATL@@1QBQBDB
CONST	SEGMENT
?rgszNeverDelete@CRegParser@ATL@@1QBQBDB DD FLAT:??_C@_05PDIKPLII@AppID?$AA@ ; ATL::CRegParser::rgszNeverDelete
	DD	FLAT:??_C@_05GIBEAPNE@CLSID?$AA@
	DD	FLAT:??_C@_0BF@HDDNNDFH@Component?5Categories?$AA@
	DD	FLAT:??_C@_08PICKODJL@FileType?$AA@
	DD	FLAT:??_C@_09JKPGEJCH@Interface?$AA@
	DD	FLAT:??_C@_08PPIOJEA@Hardware?$AA@
	DD	FLAT:??_C@_04IHBFOLAC@Mime?$AA@
	DD	FLAT:??_C@_03DDIMFGBA@SAM?$AA@
	DD	FLAT:??_C@_08LOPHEHKG@SECURITY?$AA@
	DD	FLAT:??_C@_06FDHFNJBJ@SYSTEM?$AA@
	DD	FLAT:??_C@_08KEKAJNJI@Software?$AA@
	DD	FLAT:??_C@_07KJLOKDKB@TypeLib?$AA@
CONST	ENDS
PUBLIC	?OnCT_SERVICEDATACLEAR_ACK@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z ; CTPatchSvrModule::OnCT_SERVICEDATACLEAR_ACK
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\handler.cpp
;	COMDAT ?OnCT_SERVICEDATACLEAR_ACK@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z
_TEXT	SEGMENT
_pDB$ = 8						; size = 4
_pSession$ = 12						; size = 4
?OnCT_SERVICEDATACLEAR_ACK@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z PROC NEAR ; CTPatchSvrModule::OnCT_SERVICEDATACLEAR_ACK, COMDAT
; _this$ = ecx

; 29   : 	return EC_NOERROR;

  00000	33 c0		 xor	 eax, eax

; 30   : }

  00002	c2 08 00	 ret	 8
?OnCT_SERVICEDATACLEAR_ACK@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z ENDP ; CTPatchSvrModule::OnCT_SERVICEDATACLEAR_ACK
_TEXT	ENDS
PUBLIC	?OnCT_PATCHSTART_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z ; CTPatchSvrModule::OnCT_PATCHSTART_REQ
; Function compile flags: /Ogty
;	COMDAT ?OnCT_PATCHSTART_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z
_TEXT	SEGMENT
_pDB$ = 8						; size = 4
_pSession$ = 12						; size = 4
?OnCT_PATCHSTART_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z PROC NEAR ; CTPatchSvrModule::OnCT_PATCHSTART_REQ, COMDAT
; _this$ = ecx

; 135  : 	return EC_SESSION_EXIT;

  00000	b8 05 00 00 02	 mov	 eax, 33554437		; 02000005H

; 136  : }

  00005	c2 08 00	 ret	 8
?OnCT_PATCHSTART_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z ENDP ; CTPatchSvrModule::OnCT_PATCHSTART_REQ
_TEXT	ENDS
PUBLIC	?OnCT_CTRLSVR_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z ; CTPatchSvrModule::OnCT_CTRLSVR_REQ
; Function compile flags: /Ogty
;	COMDAT ?OnCT_CTRLSVR_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z
_TEXT	SEGMENT
_pDB$ = 8						; size = 4
_pSession$ = 12						; size = 4
?OnCT_CTRLSVR_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z PROC NEAR ; CTPatchSvrModule::OnCT_CTRLSVR_REQ, COMDAT
; _this$ = ecx

; 140  : 	return EC_NOERROR;

  00000	33 c0		 xor	 eax, eax

; 141  : }

  00002	c2 08 00	 ret	 8
?OnCT_CTRLSVR_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z ENDP ; CTPatchSvrModule::OnCT_CTRLSVR_REQ
_TEXT	ENDS
PUBLIC	?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z	; InterlockedExchangePointer
EXTRN	__imp__InterlockedExchange@8:NEAR
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlconv.h
;	COMDAT ?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z
_TEXT	SEGMENT
_pp$ = 8						; size = 4
_pNew$ = 12						; size = 4
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z PROC NEAR	; InterlockedExchangePointer, COMDAT

; 92   : 	return( reinterpret_cast<void*>(static_cast<LONG_PTR>(::InterlockedExchange(reinterpret_cast<LONG*>(pp), static_cast<LONG>(reinterpret_cast<LONG_PTR>(pNew))))) );

  00000	ff 25 00 00 00
	00		 jmp	 DWORD PTR __imp__InterlockedExchange@8
?InterlockedExchangePointer@@YGPAXPAPAXPAX@Z ENDP	; InterlockedExchangePointer
_TEXT	ENDS
PUBLIC	?_AtlGetThreadACPFake@ATL@@YGIXZ		; ATL::_AtlGetThreadACPFake
EXTRN	__imp__GetACP@0:NEAR
EXTRN	__imp__GetLocaleInfoA@16:NEAR
EXTRN	__imp__GetThreadLocale@0:NEAR
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
; Function compile flags: /Ogty
;	COMDAT ?_AtlGetThreadACPFake@ATL@@YGIXZ
_TEXT	SEGMENT
_szACP$ = -12						; size = 7
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPFake@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPFake, COMDAT

; 101  : {

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	56		 push	 esi
  00009	89 44 24 0c	 mov	 DWORD PTR __$ArrayPad$[esp+16], eax

; 102  : 	UINT nACP = 0;

  0000d	33 f6		 xor	 esi, esi

; 103  : 
; 104  : 	LCID lcidThread = ::GetThreadLocale();

  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetThreadLocale@0

; 105  : 
; 106  : 	char szACP[7];
; 107  : 	// GetLocaleInfoA will fail for a Unicode-only LCID, but those are only supported on 
; 108  : 	// Windows 2000.  Since Windows 2000 supports CP_THREAD_ACP, this code path is never
; 109  : 	// executed on Windows 2000.
; 110  : 	if (::GetLocaleInfoA(lcidThread, LOCALE_IDEFAULTANSICODEPAGE, szACP, 7) != 0)

  00015	6a 07		 push	 7
  00017	8d 4c 24 08	 lea	 ecx, DWORD PTR _szACP$[esp+20]
  0001b	51		 push	 ecx
  0001c	68 04 10 00 00	 push	 4100			; 00001004H
  00021	50		 push	 eax
  00022	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLocaleInfoA@16
  00028	85 c0		 test	 eax, eax
  0002a	74 21		 je	 SHORT $L95894

; 111  : 	{
; 112  : 		char* pch = szACP;
; 113  : 		while (*pch != '\0')

  0002c	8a 44 24 04	 mov	 al, BYTE PTR _szACP$[esp+16]
  00030	84 c0		 test	 al, al
  00032	8d 4c 24 04	 lea	 ecx, DWORD PTR _szACP$[esp+16]
  00036	74 15		 je	 SHORT $L95894
$L58550:

; 114  : 		{
; 115  : 			nACP *= 10;
; 116  : 			nACP += *pch++ - '0';

  00038	0f be c0	 movsx	 eax, al
  0003b	8d 14 b6	 lea	 edx, DWORD PTR [esi+esi*4]
  0003e	41		 inc	 ecx
  0003f	8d 74 50 d0	 lea	 esi, DWORD PTR [eax+edx*2-48]
  00043	8a 01		 mov	 al, BYTE PTR [ecx]
  00045	84 c0		 test	 al, al
  00047	75 ef		 jne	 SHORT $L58550

; 117  : 		}
; 118  : 	}
; 119  : 	// Use the Default ANSI Code Page if we were unable to get the thread ACP or if one does not exist.
; 120  : 	if (nACP == 0)

  00049	85 f6		 test	 esi, esi
  0004b	75 14		 jne	 SHORT $L95895
$L95894:

; 121  : 		nACP = ::GetACP();

  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetACP@0
  00053	5e		 pop	 esi

; 122  : 
; 123  : 	return nACP;
; 124  : }

  00054	8b 4c 24 08	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+12]
  00058	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00060	c3		 ret	 0
$L95895:
  00061	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+16]
  00065	8b c6		 mov	 eax, esi
  00067	5e		 pop	 esi
  00068	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0006d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00070	c3		 ret	 0
?_AtlGetThreadACPFake@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPFake
_TEXT	ENDS
PUBLIC	?_AtlGetThreadACPReal@ATL@@YGIXZ		; ATL::_AtlGetThreadACPReal
; Function compile flags: /Ogty
;	COMDAT ?_AtlGetThreadACPReal@ATL@@YGIXZ
_TEXT	SEGMENT
?_AtlGetThreadACPReal@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPReal, COMDAT

; 128  : 	return( CP_THREAD_ACP );

  00000	b8 03 00 00 00	 mov	 eax, 3

; 129  : }

  00005	c3		 ret	 0
?_AtlGetThreadACPReal@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPReal
_TEXT	ENDS
EXTRN	__imp__GetVersionExA@4:NEAR
; Function compile flags: /Ogty
;	COMDAT ?_AtlGetThreadACPThunk@ATL@@YGIXZ
_TEXT	SEGMENT
_ver$ = -152						; size = 148
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
?_AtlGetThreadACPThunk@ATL@@YGIXZ PROC NEAR		; ATL::_AtlGetThreadACPThunk, COMDAT

; 134  : {

  00000	81 ec 98 00 00
	00		 sub	 esp, 152		; 00000098H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	89 84 24 94 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+152], eax

; 135  : 	OSVERSIONINFO ver;
; 136  : 	ATLGETTHREADACP pfnGetThreadACP;
; 137  : 
; 138  : 	ver.dwOSVersionInfoSize = sizeof( ver );
; 139  : 	::GetVersionEx( &ver );

  00012	8d 04 24	 lea	 eax, DWORD PTR _ver$[esp+152]
  00015	50		 push	 eax
  00016	c7 44 24 04 94
	00 00 00	 mov	 DWORD PTR _ver$[esp+156], 148 ; 00000094H
  0001e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetVersionExA@4

; 140  : 	if( (ver.dwPlatformId == VER_PLATFORM_WIN32_NT) && (ver.dwMajorVersion >= 5) )

  00024	83 7c 24 10 02	 cmp	 DWORD PTR _ver$[esp+168], 2
  00029	75 0c		 jne	 SHORT $L58560
  0002b	83 7c 24 04 05	 cmp	 DWORD PTR _ver$[esp+156], 5

; 141  : 	{
; 142  : 		// On Win2K, CP_THREAD_ACP is supported
; 143  : 		pfnGetThreadACP = _AtlGetThreadACPReal;

  00030	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?_AtlGetThreadACPReal@ATL@@YGIXZ ; ATL::_AtlGetThreadACPReal
  00035	73 05		 jae	 SHORT $L58561
$L58560:

; 144  : 	}
; 145  : 	else
; 146  : 	{
; 147  : 		pfnGetThreadACP = _AtlGetThreadACPFake;

  00037	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?_AtlGetThreadACPFake@ATL@@YGIXZ ; ATL::_AtlGetThreadACPFake
$L58561:

; 148  : 	}
; 149  : 	InterlockedExchangePointer( reinterpret_cast< void** >(&g_pfnGetThreadACP), pfnGetThreadACP );

  0003c	50		 push	 eax
  0003d	68 00 00 00 00	 push	 OFFSET FLAT:?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InterlockedExchange@8

; 150  : 
; 151  : 	return( g_pfnGetThreadACP() );

  00048	ff 15 00 00 00
	00		 call	 DWORD PTR ?g_pfnGetThreadACP@ATL@@3P6GIXZA ; ATL::g_pfnGetThreadACP

; 152  : }

  0004e	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+152]
  00055	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005a	81 c4 98 00 00
	00		 add	 esp, 152		; 00000098H
  00060	c3		 ret	 0
?_AtlGetThreadACPThunk@ATL@@YGIXZ ENDP			; ATL::_AtlGetThreadACPThunk
_TEXT	ENDS
PUBLIC	?size@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QBEIXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::size, COMDAT
; _this$ = ecx

; 448  : 		return (_Mysize);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 449  : 		}

  00003	c3		 ret	 0
?size@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::size
_TEXT	ENDS
PUBLIC	?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ	; ATL::CSimpleStringT<char,0>::GetString
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT
?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ PROC NEAR ; ATL::CSimpleStringT<char,0>::GetString, COMDAT
; _this$ = ecx

; 510  : 		return( m_pszData );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 511  : 	}

  00002	c3		 ret	 0
?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ ENDP	; ATL::CSimpleStringT<char,0>::GetString
_TEXT	ENDS
PUBLIC	?GetDefaultManager@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUIAtlStringMgr@2@XZ ; ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> >::GetDefaultManager
EXTRN	?g_strmgr@ATL@@3VCAtlStringMgr@1@A:BYTE		; ATL::g_strmgr
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlstr.h
;	COMDAT ?GetDefaultManager@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUIAtlStringMgr@2@XZ
_TEXT	SEGMENT
?GetDefaultManager@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUIAtlStringMgr@2@XZ PROC NEAR ; ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> >::GetDefaultManager, COMDAT

; 954  : 		return( &g_strmgr );

  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?g_strmgr@ATL@@3VCAtlStringMgr@1@A ; ATL::g_strmgr

; 955  : 	}

  00005	c3		 ret	 0
?GetDefaultManager@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUIAtlStringMgr@2@XZ ENDP ; ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> >::GetDefaultManager
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC NEAR			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::const_iterator::const_iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 193  : 			{	// construct with null node pointer

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 194  : 			}

  00008	c3		 ret	 0
??0const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??8const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::const_iterator::operator==
; Function compile flags: /Ogty
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::const_iterator::operator==, COMDAT
; _this$ = ecx

; 241  : 			return (_Ptr == _Right._Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	f7 d8		 neg	 eax
  0000a	1b c0		 sbb	 eax, eax
  0000c	40		 inc	 eax

; 242  : 			}

  0000d	c2 04 00	 ret	 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::const_iterator::operator==
_TEXT	ENDS
PUBLIC	??0CAtlException@ATL@@QAE@J@Z			; ATL::CAtlException::CAtlException
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlexcept.h
;	COMDAT ??0CAtlException@ATL@@QAE@J@Z
_TEXT	SEGMENT
_hr$ = 8						; size = 4
??0CAtlException@ATL@@QAE@J@Z PROC NEAR			; ATL::CAtlException::CAtlException, COMDAT
; _this$ = ecx

; 40   : 	{

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR _hr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 41   : 	}

  00008	c2 04 00	 ret	 4
??0CAtlException@ATL@@QAE@J@Z ENDP			; ATL::CAtlException::CAtlException
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBEIXZ ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::capacity
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?capacity@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::capacity, COMDAT
; _this$ = ecx

; 458  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	75 01		 jne	 SHORT $L95934

; 459  : 		}

  00007	c3		 ret	 0
$L95934:

; 458  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00008	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0000b	2b c8		 sub	 ecx, eax
  0000d	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00012	f7 e9		 imul	 ecx
  00014	c1 fa 03	 sar	 edx, 3
  00017	8b c2		 mov	 eax, edx
  00019	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001c	03 c2		 add	 eax, edx

; 459  : 		}

  0001e	c3		 ret	 0
?capacity@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::capacity
_TEXT	ENDS
PUBLIC	?AtlThrow@ATL@@YGXJ@Z				; ATL::AtlThrow
PUBLIC	__TI1?AVCAtlException@ATL@@
PUBLIC	__CTA1?AVCAtlException@ATL@@
PUBLIC	??_R0?AVCAtlException@ATL@@@8			; ATL::CAtlException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVCAtlException@ATL@@@84
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	__CxxThrowException@8:NEAR
;	COMDAT __TI1?AVCAtlException@ATL@@
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlexcept.h
xdata$x	SEGMENT
__TI1?AVCAtlException@ATL@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1?AVCAtlException@ATL@@
xdata$x	ENDS
;	COMDAT __CTA1?AVCAtlException@ATL@@
xdata$x	SEGMENT
__CTA1?AVCAtlException@ATL@@ DD 01H
	DD	FLAT:__CT??_R0?AVCAtlException@ATL@@@84
xdata$x	ENDS
;	COMDAT __CT??_R0?AVCAtlException@ATL@@@84
xdata$x	SEGMENT
__CT??_R0?AVCAtlException@ATL@@@84 DD 00H
	DD	FLAT:??_R0?AVCAtlException@ATL@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0?AVCAtlException@ATL@@@8
_DATA	SEGMENT
??_R0?AVCAtlException@ATL@@@8 DD FLAT:??_7type_info@@6B@ ; ATL::CAtlException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCAtlException@ATL@@', 00H
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT
$T95939 = 8						; size = 4
_hr$ = 8						; size = 4
?AtlThrow@ATL@@YGXJ@Z PROC NEAR				; ATL::AtlThrow, COMDAT

; 62   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );
; 63   : #ifdef _AFX
; 64   : 	if( hr == E_OUTOFMEMORY )
; 65   : 	{
; 66   : 		AfxThrowMemoryException();
; 67   : 	}
; 68   : 	else
; 69   : 	{
; 70   : 		AfxThrowOleException( hr );
; 71   : 	}
; 72   : #else
; 73   : 	throw CAtlException( hr );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _hr$[esp-4]
  00004	68 00 00 00 00	 push	 OFFSET FLAT:__TI1?AVCAtlException@ATL@@
  00009	8d 4c 24 08	 lea	 ecx, DWORD PTR $T95939[esp]
  0000d	51		 push	 ecx
  0000e	89 44 24 0c	 mov	 DWORD PTR $T95939[esp+4], eax
  00012	e8 00 00 00 00	 call	 __CxxThrowException@8
$L95946:
$L95945:
  00017	cc		 int	 3
?AtlThrow@ATL@@YGXJ@Z ENDP				; ATL::AtlThrow
_TEXT	ENDS
PUBLIC	?size@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBEIXZ ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?size@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::size, COMDAT
; _this$ = ecx

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	75 01		 jne	 SHORT $L95950

; 517  : 		}

  00007	c3		 ret	 0
$L95950:

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00008	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0000b	2b c8		 sub	 ecx, eax
  0000d	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00012	f7 e9		 imul	 ecx
  00014	c1 fa 03	 sar	 edx, 3
  00017	8b c2		 mov	 eax, edx
  00019	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001c	03 c2		 add	 eax, edx

; 517  : 		}

  0001e	c3		 ret	 0
?size@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::size
_TEXT	ENDS
PUBLIC	??0?$allocator@UtagPATCHFILE@@@std@@QAE@XZ	; std::allocator<tagPATCHFILE>::allocator<tagPATCHFILE>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@UtagPATCHFILE@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UtagPATCHFILE@@@std@@QAE@XZ PROC NEAR	; std::allocator<tagPATCHFILE>::allocator<tagPATCHFILE>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@UtagPATCHFILE@@@std@@QAE@XZ ENDP		; std::allocator<tagPATCHFILE>::allocator<tagPATCHFILE>
_TEXT	ENDS
PUBLIC	?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<char,0>::GetData
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT
?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ PROC NEAR ; ATL::CSimpleStringT<char,0>::GetData, COMDAT
; _this$ = ecx

; 731  : 		return( reinterpret_cast< CStringData* >( m_pszData )-1 );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 e8 10	 sub	 eax, 16			; 00000010H

; 732  : 	}

  00005	c3		 ret	 0
?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ ENDP ; ATL::CSimpleStringT<char,0>::GetData
_TEXT	ENDS
PUBLIC	?_Left@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::_Left
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::_Left, COMDAT

; 147  : 		return ((_Nodepref)(*_Pnode)._Left);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 148  : 		}

  00004	c3		 ret	 0
?_Left@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::_Left
_TEXT	ENDS
PUBLIC	?_Myval@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBKPAVCTPatchSession@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::_Myval
; Function compile flags: /Ogty
;	COMDAT ?_Myval@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBKPAVCTPatchSession@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBKPAVCTPatchSession@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::_Myval, COMDAT

; 162  : 		return ((_Vref)(*_Pnode)._Myval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 0c	 add	 eax, 12			; 0000000cH

; 163  : 		}

  00007	c3		 ret	 0
?_Myval@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAAAU?$pair@$$CBKPAVCTPatchSession@@@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::_Myval
_TEXT	ENDS
PUBLIC	??0const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::const_iterator::const_iterator
; Function compile flags: /Ogty
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 200  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 201  : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??0?$allocator@UtagPATCHFILE@@@std@@QAE@ABV01@@Z ; std::allocator<tagPATCHFILE>::allocator<tagPATCHFILE>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@UtagPATCHFILE@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UtagPATCHFILE@@@std@@QAE@ABV01@@Z PROC NEAR ; std::allocator<tagPATCHFILE>::allocator<tagPATCHFILE>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UtagPATCHFILE@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<tagPATCHFILE>::allocator<tagPATCHFILE>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UtagPATCHFILE@@@std@@QAEXPAUtagPATCHFILE@@I@Z ; std::allocator<tagPATCHFILE>::deallocate
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Ogty
;	COMDAT ?deallocate@?$allocator@UtagPATCHFILE@@@std@@QAEXPAUtagPATCHFILE@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UtagPATCHFILE@@@std@@QAEXPAUtagPATCHFILE@@I@Z PROC NEAR ; std::allocator<tagPATCHFILE>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@UtagPATCHFILE@@@std@@QAEXPAUtagPATCHFILE@@I@Z ENDP ; std::allocator<tagPATCHFILE>::deallocate
_TEXT	ENDS
PUBLIC	?CopyChars@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z ; ATL::CSimpleStringT<char,0>::CopyChars
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?CopyChars@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z
_TEXT	SEGMENT
_pchDest$ = 8						; size = 4
_pchSrc$ = 12						; size = 4
_nChars$ = 16						; size = 4
?CopyChars@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::CopyChars, COMDAT

; 653  : 		memcpy( pchDest, pchSrc, nChars*sizeof( XCHAR ) );

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR _nChars$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR _pchSrc$[esp]
  00009	8b c1		 mov	 eax, ecx
  0000b	57		 push	 edi
  0000c	8b 7c 24 0c	 mov	 edi, DWORD PTR _pchDest$[esp+4]
  00010	c1 e9 02	 shr	 ecx, 2
  00013	f3 a5		 rep movsd
  00015	8b c8		 mov	 ecx, eax
  00017	83 e1 03	 and	 ecx, 3
  0001a	f3 a4		 rep movsb
  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi

; 654  : 	}

  0001e	c3		 ret	 0
?CopyChars@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z ENDP ; ATL::CSimpleStringT<char,0>::CopyChars
_TEXT	ENDS
PUBLIC	?CopyCharsOverlapped@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z ; ATL::CSimpleStringT<char,0>::CopyCharsOverlapped
EXTRN	_memmove:NEAR
; Function compile flags: /Ogty
;	COMDAT ?CopyCharsOverlapped@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z
_TEXT	SEGMENT
_pchDest$ = 8						; size = 4
_pchSrc$ = 12						; size = 4
_nChars$ = 16						; size = 4
?CopyCharsOverlapped@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::CopyCharsOverlapped, COMDAT

; 657  : 		memmove( pchDest, pchSrc, nChars*sizeof( XCHAR ) );

  00000	e9 00 00 00 00	 jmp	 _memmove
?CopyCharsOverlapped@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z ENDP ; ATL::CSimpleStringT<char,0>::CopyCharsOverlapped
_TEXT	ENDS
PUBLIC	?StringLength@?$CSimpleStringT@D$0A@@ATL@@SAHPBD@Z ; ATL::CSimpleStringT<char,0>::StringLength
; Function compile flags: /Ogty
;	COMDAT ?StringLength@?$CSimpleStringT@D$0A@@ATL@@SAHPBD@Z
_TEXT	SEGMENT
_psz$ = 8						; size = 4
?StringLength@?$CSimpleStringT@D$0A@@ATL@@SAHPBD@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::StringLength, COMDAT

; 678  : 		if( psz == NULL )

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _psz$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	75 01		 jne	 SHORT $L95057

; 683  : 	}

  00008	c3		 ret	 0
$L95057:

; 679  : 		{
; 680  : 			return( 0 );
; 681  : 		}
; 682  : 		return( int( strlen( psz ) ) );

  00009	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  0000c	8d 64 24 00	 npad	 4
$L95982:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $L95982
  00017	2b c2		 sub	 eax, edx

; 683  : 	}

  00019	c3		 ret	 0
?StringLength@?$CSimpleStringT@D$0A@@ATL@@SAHPBD@Z ENDP	; ATL::CSimpleStringT<char,0>::StringLength
_TEXT	ENDS
PUBLIC	?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<char,0>::ThrowMemoryException
; Function compile flags: /Ogty
;	COMDAT ?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ
_TEXT	SEGMENT
?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ PROC NEAR ; ATL::CSimpleStringT<char,0>::ThrowMemoryException, COMDAT

; 705  : 		AtlThrow( E_OUTOFMEMORY );

  00000	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  00005	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L95987:
$L95986:
  0000a	cc		 int	 3
?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ ENDP ; ATL::CSimpleStringT<char,0>::ThrowMemoryException
_TEXT	ENDS
PUBLIC	?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z	; ATL::CSimpleStringT<char,0>::SetLength
; Function compile flags: /Ogty
;	COMDAT ?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_nLength$ = 8						; size = 4
?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::SetLength, COMDAT
; _this$ = ecx

; 790  : 		ATLASSERT( nLength >= 0 );
; 791  : 		ATLASSERT( nLength <= GetData()->nAllocLength );
; 792  : 
; 793  : 		if( nLength < 0 || nLength > GetData()->nAllocLength)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _nLength$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	7c 13		 jl	 SHORT $L95071
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	3b 42 f8	 cmp	 eax, DWORD PTR [edx-8]
  0000d	7f 0c		 jg	 SHORT $L95071

; 794  : 			AtlThrow(E_INVALIDARG);
; 795  : 			
; 796  : 		GetData()->nDataLength = nLength;

  0000f	89 42 f4	 mov	 DWORD PTR [edx-12], eax

; 797  : 		m_pszData[nLength] = 0;

  00012	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00014	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0

; 798  : 	}

  00018	c2 04 00	 ret	 4
$L95071:
  0001b	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00020	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L95998:
$L95997:
  00025	cc		 int	 3
?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ENDP	; ATL::CSimpleStringT<char,0>::SetLength
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UtagPATCHFILE@@@std@@QBEIXZ ; std::allocator<tagPATCHFILE>::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?max_size@?$allocator@UtagPATCHFILE@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UtagPATCHFILE@@@std@@QBEIXZ PROC NEAR ; std::allocator<tagPATCHFILE>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 159  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UtagPATCHFILE@@@std@@QBEIXZ ENDP	; std::allocator<tagPATCHFILE>::max_size
_TEXT	ENDS
PUBLIC	??Yiterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAEAAV012@H@Z ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::iterator::operator+=
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Yiterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Yiterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::iterator::operator+=, COMDAT
; _this$ = ecx

; 255  : 			{	// increment by integer

  00000	8b c1		 mov	 eax, ecx

; 256  : 			this->_Myptr += _Off;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8b 10		 mov	 edx, DWORD PTR [eax]
  00008	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  0000b	c1 e1 02	 shl	 ecx, 2
  0000e	03 d1		 add	 edx, ecx
  00010	89 10		 mov	 DWORD PTR [eax], edx

; 257  : 			return (*this);
; 258  : 			}

  00012	c2 04 00	 ret	 4
??Yiterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::iterator::operator+=
_TEXT	ENDS
PUBLIC	??0const_iterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE@PAUtagPATCHFILE@@@Z ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::const_iterator::const_iterator
; Function compile flags: /Ogty
;	COMDAT ??0const_iterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE@PAUtagPATCHFILE@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0const_iterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE@PAUtagPATCHFILE@@@Z PROC NEAR ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 73   : 		const_iterator(_Tptr _Ptr)

  00000	8b c1		 mov	 eax, ecx

; 74   : 			{	// construct with pointer _Ptr
; 75   : 			_Myptr = _Ptr;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 76   : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE@PAUtagPATCHFILE@@@Z ENDP ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??Gconst_iterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBEHABV012@@Z ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::const_iterator::operator-
; Function compile flags: /Ogty
;	COMDAT ??Gconst_iterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBEHABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Gconst_iterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBEHABV012@@Z PROC NEAR ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::const_iterator::operator-, COMDAT
; _this$ = ecx

; 141  : 
; 142  : 
; 143  : 			return (_Myptr - _Right._Myptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8b 10		 mov	 edx, DWORD PTR [eax]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	2b ca		 sub	 ecx, edx
  0000a	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0000f	f7 e9		 imul	 ecx
  00011	c1 fa 03	 sar	 edx, 3
  00014	8b c2		 mov	 eax, edx
  00016	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00019	03 c2		 add	 eax, edx

; 144  : 			}

  0001b	c2 04 00	 ret	 4
??Gconst_iterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBEHABV012@@Z ENDP ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::const_iterator::operator-
_TEXT	ENDS
PUBLIC	?_Isnil@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::_Isnil
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::_Isnil, COMDAT

; 137  : 		return ((_Charref)(*_Pnode)._Isnil);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 15	 add	 eax, 21			; 00000015H

; 138  : 		}

  00007	c3		 ret	 0
?_Isnil@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::_Isnil
_TEXT	ENDS
PUBLIC	?_Parent@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::_Parent
; Function compile flags: /Ogty
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::_Parent, COMDAT

; 152  : 		return ((_Nodepref)(*_Pnode)._Parent);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 153  : 		}

  00007	c3		 ret	 0
?_Parent@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::_Parent
_TEXT	ENDS
PUBLIC	?_Right@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::_Right
; Function compile flags: /Ogty
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::_Right, COMDAT

; 157  : 		return ((_Nodepref)(*_Pnode)._Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 08	 add	 eax, 8

; 158  : 		}

  00007	c3		 ret	 0
?_Right@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::_Right
_TEXT	ENDS
PUBLIC	?_Min@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::_Min
; Function compile flags: /Ogty
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::_Min, COMDAT

; 1042 : 		while (!_Isnil(_Left(_Pnode)))

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	8b 08		 mov	 ecx, DWORD PTR [eax]
  00006	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00009	84 d2		 test	 dl, dl
  0000b	75 0e		 jne	 SHORT $L95117
  0000d	8d 49 00	 npad	 3
$L95116:

; 1043 : 			_Pnode = _Left(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00017	84 d2		 test	 dl, dl
  00019	74 f5		 je	 SHORT $L95116
$L95117:

; 1044 : 		return (_Pnode);
; 1045 : 		}

  0001b	c3		 ret	 0
?_Min@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::_Min
_TEXT	ENDS
PUBLIC	??$_Allocate@UtagPATCHFILE@@@std@@YAPAUtagPATCHFILE@@IPAU1@@Z ; std::_Allocate<tagPATCHFILE>
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Allocate@UtagPATCHFILE@@@std@@YAPAUtagPATCHFILE@@IPAU1@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UtagPATCHFILE@@@std@@YAPAUtagPATCHFILE@@IPAU1@@Z PROC NEAR ; std::_Allocate<tagPATCHFILE>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00007	c1 e0 02	 shl	 eax, 2
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	83 c4 04	 add	 esp, 4

; 35   : 	}

  00013	c3		 ret	 0
??$_Allocate@UtagPATCHFILE@@@std@@YAPAUtagPATCHFILE@@IPAU1@@Z ENDP ; std::_Allocate<tagPATCHFILE>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUtagPATCHFILE@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagPATCHFILE@@0@Z ; std::_Ptr_cat<tagPATCHFILE *,tagPATCHFILE *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$_Ptr_cat@PAUtagPATCHFILE@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagPATCHFILE@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUtagPATCHFILE@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagPATCHFILE@@0@Z PROC NEAR ; std::_Ptr_cat<tagPATCHFILE *,tagPATCHFILE *>, COMDAT

; 211  : 	{	// return pointer category from arbitrary arguments

  00000	51		 push	 ecx

; 212  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 213  : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 214  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@PAUtagPATCHFILE@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagPATCHFILE@@0@Z ENDP ; std::_Ptr_cat<tagPATCHFILE *,tagPATCHFILE *>
_TEXT	ENDS
PUBLIC	?data@CStringData@ATL@@QAEPAXXZ			; ATL::CStringData::data
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT
?data@CStringData@ATL@@QAEPAXXZ PROC NEAR		; ATL::CStringData::data, COMDAT
; _this$ = ecx

; 66   : 		return (this+1);

  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 67   : 	}

  00003	c3		 ret	 0
?data@CStringData@ATL@@QAEPAXXZ ENDP			; ATL::CStringData::data
_TEXT	ENDS
PUBLIC	?AddRef@CStringData@ATL@@QAEXXZ			; ATL::CStringData::AddRef
; Function compile flags: /Ogty
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT
?AddRef@CStringData@ATL@@QAEXXZ PROC NEAR		; ATL::CStringData::AddRef, COMDAT
; _this$ = ecx

; 71   : 		ATLASSERT(nRefs > 0);
; 72   : 		_InterlockedIncrement(&nRefs);

  00000	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00003	b8 01 00 00 00	 mov	 eax, 1
  00008	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax

; 73   : 	}

  0000c	c3		 ret	 0
?AddRef@CStringData@ATL@@QAEXXZ ENDP			; ATL::CStringData::AddRef
_TEXT	ENDS
PUBLIC	?IsLocked@CStringData@ATL@@QBE_NXZ		; ATL::CStringData::IsLocked
; Function compile flags: /Ogty
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT
?IsLocked@CStringData@ATL@@QBE_NXZ PROC NEAR		; ATL::CStringData::IsLocked, COMDAT
; _this$ = ecx

; 76   : 		return nRefs < 0;

  00000	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00003	33 c0		 xor	 eax, eax
  00005	85 d2		 test	 edx, edx
  00007	0f 9c c0	 setl	 al

; 77   : 	}

  0000a	c3		 ret	 0
?IsLocked@CStringData@ATL@@QBE_NXZ ENDP			; ATL::CStringData::IsLocked
_TEXT	ENDS
PUBLIC	?IsShared@CStringData@ATL@@QBE_NXZ		; ATL::CStringData::IsShared
; Function compile flags: /Ogty
;	COMDAT ?IsShared@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT
?IsShared@CStringData@ATL@@QBE_NXZ PROC NEAR		; ATL::CStringData::IsShared, COMDAT
; _this$ = ecx

; 80   : 		return( nRefs > 1 ); 

  00000	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00003	33 c0		 xor	 eax, eax
  00005	83 fa 01	 cmp	 edx, 1
  00008	0f 9f c0	 setg	 al

; 81   : 	}

  0000b	c3		 ret	 0
?IsShared@CStringData@ATL@@QBE_NXZ ENDP			; ATL::CStringData::IsShared
_TEXT	ENDS
PUBLIC	?Release@CStringData@ATL@@QAEXXZ		; ATL::CStringData::Release
; Function compile flags: /Ogty
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT
?Release@CStringData@ATL@@QAEXXZ PROC NEAR		; ATL::CStringData::Release, COMDAT
; _this$ = ecx

; 93   : 		ATLASSERT( nRefs != 0 );
; 94   : 
; 95   : 		if( _InterlockedDecrement( &nRefs ) <= 0 )

  00000	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  00003	83 ca ff	 or	 edx, -1
  00006	f0 0f c1 10	 lock	  xadd	 DWORD PTR [eax], edx
  0000a	4a		 dec	 edx
  0000b	85 d2		 test	 edx, edx
  0000d	7f 0a		 jg	 SHORT $L73499

; 96   : 		{
; 97   : 			pStringMgr->Free( this );

  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	8b 10		 mov	 edx, DWORD PTR [eax]
  00013	51		 push	 ecx
  00014	8b c8		 mov	 ecx, eax
  00016	ff 52 04	 call	 DWORD PTR [edx+4]
$L73499:

; 98   : 		}
; 99   : 	}

  00019	c3		 ret	 0
?Release@CStringData@ATL@@QAEXXZ ENDP			; ATL::CStringData::Release
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__P$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC NEAR				; operator new, COMDAT

; 109  :         {return (_P); }

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __P$[esp-4]
  00004	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogty
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC NEAR					; operator delete, COMDAT

; 112  :         {return; }

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC NEAR	; std::char_traits<char>::assign, COMDAT

; 331  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 332  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogty
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC NEAR		; std::char_traits<char>::length, COMDAT

; 352  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$L96070:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $L96070
  0000e	2b c2		 sub	 eax, edx

; 353  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
; Function compile flags: /Ogty
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::copy, COMDAT

; 358  : 		return ((_Elem *)::memcpy(_First1, _First2, _Count));

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR __First2$[esp]
  00009	57		 push	 edi
  0000a	8b 7c 24 0c	 mov	 edi, DWORD PTR __First1$[esp+4]
  0000e	8b c1		 mov	 eax, ecx
  00010	8b d7		 mov	 edx, edi
  00012	c1 e9 02	 shr	 ecx, 2
  00015	f3 a5		 rep movsd
  00017	8b c8		 mov	 ecx, eax
  00019	83 e1 03	 and	 ecx, 3
  0001c	f3 a4		 rep movsb
  0001e	5f		 pop	 edi
  0001f	8b c2		 mov	 eax, edx
  00021	5e		 pop	 esi

; 359  : 		}

  00022	c3		 ret	 0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
; Function compile flags: /Ogty
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::move, COMDAT

; 370  : 		return ((_Elem *)::memmove(_First1, _First2, _Count));

  00000	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	??0CCSLock@@QAE@PAU_RTL_CRITICAL_SECTION@@@Z	; CCSLock::CCSLock
PUBLIC	??_7CCSLock@@6B@				; CCSLock::`vftable'
PUBLIC	??_GCCSLock@@UAEPAXI@Z				; CCSLock::`scalar deleting destructor'
EXTRN	??_ECCSLock@@UAEPAXI@Z:NEAR			; CCSLock::`vector deleting destructor'
EXTRN	__imp__EnterCriticalSection@4:NEAR
;	COMDAT ??_7CCSLock@@6B@
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\tnetdef.h
CONST	SEGMENT
??_7CCSLock@@6B@ DD FLAT:??_ECCSLock@@UAEPAXI@Z		; CCSLock::`vftable'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0CCSLock@@QAE@PAU_RTL_CRITICAL_SECTION@@@Z
_TEXT	SEGMENT
_pCS$ = 8						; size = 4
??0CCSLock@@QAE@PAU_RTL_CRITICAL_SECTION@@@Z PROC NEAR	; CCSLock::CCSLock, COMDAT
; _this$ = ecx

; 59   : 	CCSLock( CRITICAL_SECTION *pCS)

  00000	56		 push	 esi
  00001	57		 push	 edi

; 60   : 	{
; 61   : 		EnterCriticalSection(pCS);

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR _pCS$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CCSLock@@6B@
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 62   : 		m_pCS = pCS;

  00015	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00018	5f		 pop	 edi

; 63   : 	};

  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??0CCSLock@@QAE@PAU_RTL_CRITICAL_SECTION@@@Z ENDP	; CCSLock::CCSLock
_TEXT	ENDS
PUBLIC	??1CCSLock@@UAE@XZ				; CCSLock::~CCSLock
EXTRN	__imp__LeaveCriticalSection@4:NEAR
; Function compile flags: /Ogty
;	COMDAT ??1CCSLock@@UAE@XZ
_TEXT	SEGMENT
??1CCSLock@@UAE@XZ PROC NEAR				; CCSLock::~CCSLock, COMDAT
; _this$ = ecx

; 67   : 		LeaveCriticalSection(m_pCS);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	50		 push	 eax
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CCSLock@@6B@
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 68   : 	};

  00010	c3		 ret	 0
??1CCSLock@@UAE@XZ ENDP					; CCSLock::~CCSLock
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_GCCSLock@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCSLock@@UAEPAXI@Z PROC NEAR			; CCSLock::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	50		 push	 eax
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CCSLock@@6B@
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00013	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00018	74 09		 je	 SHORT $L96090
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 04	 add	 esp, 4
$L96090:
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 04 00	 ret	 4
??_GCCSLock@@UAEPAXI@Z ENDP				; CCSLock::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1109 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1110 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L96097
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  00009	c3		 ret	 0
$L96097:

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC NEAR		; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L96105
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  00009	c3		 ret	 0
$L96105:

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC NEAR	; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1494 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi

; 1495 : 		if (_Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00001	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  00004	83 fe 10	 cmp	 esi, 16			; 00000010H
  00007	57		 push	 edi
  00008	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0000b	72 04		 jb	 SHORT $L96118
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	eb 02		 jmp	 SHORT $L96119
$L96118:
  00011	8b d0		 mov	 edx, eax
$L96119:
  00013	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00017	3b fa		 cmp	 edi, edx
  00019	72 17		 jb	 SHORT $L92848
  0001b	83 fe 10	 cmp	 esi, 16			; 00000010H
  0001e	72 02		 jb	 SHORT $L96126
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
$L96126:
  00022	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00025	03 c8		 add	 ecx, eax
  00027	3b cf		 cmp	 ecx, edi
  00029	76 07		 jbe	 SHORT $L92848
  0002b	5f		 pop	 edi

; 1497 : 		else
; 1498 : 			return (true);

  0002c	b0 01		 mov	 al, 1
  0002e	5e		 pop	 esi

; 1499 : 		}

  0002f	c2 04 00	 ret	 4
$L92848:
  00032	5f		 pop	 edi

; 1496 : 			return (false);	// don't ask

  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 1499 : 		}

  00036	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC NEAR		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 159  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogty
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC NEAR		; std::_Allocate<char>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 35   : 	}

  0000d	c3		 ret	 0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
PUBLIC	??0iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::iterator::iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::iterator::iterator, COMDAT
; _this$ = ecx

; 304  : 		iterator()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 305  : 			{	// construct with null node pointer
; 306  : 			}

  00008	c3		 ret	 0
??0iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??9const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::const_iterator::operator!=
; Function compile flags: /Ogty
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::const_iterator::operator!=, COMDAT
; _this$ = ecx

; 246  : 			return (!(*this == _Right));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Right$[esp-4]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]
  00009	33 c9		 xor	 ecx, ecx
  0000b	3b c6		 cmp	 eax, esi
  0000d	0f 95 c1	 setne	 cl
  00010	8a c1		 mov	 al, cl
  00012	5e		 pop	 esi

; 247  : 			}

  00013	c2 04 00	 ret	 4
??9const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::const_iterator::operator!=
_TEXT	ENDS
PUBLIC	??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ		; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ PROC NEAR		; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>, COMDAT
; _this$ = ecx

; 263  : 		CStringData* pData = GetData();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 e8 10	 sub	 eax, 16			; 00000010H

; 264  : 		pData->Release();

  00005	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00008	83 ca ff	 or	 edx, -1
  0000b	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0000f	4a		 dec	 edx
  00010	85 d2		 test	 edx, edx
  00012	7f 08		 jg	 SHORT $L96155
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	8b 11		 mov	 edx, DWORD PTR [ecx]
  00018	50		 push	 eax
  00019	ff 52 04	 call	 DWORD PTR [edx+4]
$L96155:

; 265  : 	}

  0001c	c3		 ret	 0
??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ ENDP		; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>
_TEXT	ENDS
PUBLIC	?GetLength@?$CSimpleStringT@D$0A@@ATL@@QBEHXZ	; ATL::CSimpleStringT<char,0>::GetLength
; Function compile flags: /Ogty
;	COMDAT ?GetLength@?$CSimpleStringT@D$0A@@ATL@@QBEHXZ
_TEXT	SEGMENT
?GetLength@?$CSimpleStringT@D$0A@@ATL@@QBEHXZ PROC NEAR	; ATL::CSimpleStringT<char,0>::GetLength, COMDAT
; _this$ = ecx

; 501  : 		return( GetData()->nDataLength );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 f4	 mov	 eax, DWORD PTR [eax-12]

; 502  : 	}

  00005	c3		 ret	 0
?GetLength@?$CSimpleStringT@D$0A@@ATL@@QBEHXZ ENDP	; ATL::CSimpleStringT<char,0>::GetLength
_TEXT	ENDS
PUBLIC	?_Lmost@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::_Lmost
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 1005 : 		return (_Left(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1006 : 		}

  00003	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::_Lmost
_TEXT	ENDS
PUBLIC	??0iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::iterator::iterator
; Function compile flags: /Ogty
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::iterator::iterator, COMDAT
; _this$ = ecx

; 312  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 313  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBKPAVCTPatchSession@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBKPAVCTPatchSession@@@2@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBKPAVCTPatchSession@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 205  : 			return (_Myval(_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 206  : 			}

  00005	c3		 ret	 0
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QBEABU?$pair@$$CBKPAVCTPatchSession@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAE@V?$allocator@UtagPATCHFILE@@@1@@Z ; std::_Vector_val<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Vector_val<tagPATCHFILE,std::allocator<tagPATCHFILE> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0?$_Vector_val@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAE@V?$allocator@UtagPATCHFILE@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAE@V?$allocator@UtagPATCHFILE@@@1@@Z PROC NEAR ; std::_Vector_val<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Vector_val<tagPATCHFILE,std::allocator<tagPATCHFILE> >, COMDAT
; _this$ = ecx

; 21   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 22   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Vector_val@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAE@V?$allocator@UtagPATCHFILE@@@1@@Z ENDP ; std::_Vector_val<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Vector_val<tagPATCHFILE,std::allocator<tagPATCHFILE> >
_TEXT	ENDS
PUBLIC	?ReleaseBufferSetLength@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z ; ATL::CSimpleStringT<char,0>::ReleaseBufferSetLength
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?ReleaseBufferSetLength@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z
_TEXT	SEGMENT
_nNewLength$ = 8					; size = 4
?ReleaseBufferSetLength@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::ReleaseBufferSetLength, COMDAT
; _this$ = ecx

; 547  : 		ATLASSERT( nNewLength >= 0 );
; 548  : 		SetLength( nNewLength );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _nNewLength$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	7c 13		 jl	 SHORT $L96200
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	3b 42 f8	 cmp	 eax, DWORD PTR [edx-8]
  0000d	7f 0c		 jg	 SHORT $L96200
  0000f	89 42 f4	 mov	 DWORD PTR [edx-12], eax
  00012	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00014	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0

; 549  : 	}

  00018	c2 04 00	 ret	 4
$L96200:
  0001b	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00020	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L96208:
$L96207:
  00025	cc		 int	 3
?ReleaseBufferSetLength@?$CSimpleStringT@D$0A@@ATL@@QAEXH@Z ENDP ; ATL::CSimpleStringT<char,0>::ReleaseBufferSetLength
_TEXT	ENDS
PUBLIC	?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<char,0>::Attach
; Function compile flags: /Ogty
;	COMDAT ?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::Attach, COMDAT
; _this$ = ecx

; 712  : 		m_pszData = static_cast< PXSTR >( pData->data() );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _pData$[esp-4]
  00004	83 c0 10	 add	 eax, 16			; 00000010H
  00007	89 01		 mov	 DWORD PTR [ecx], eax

; 713  : 	}

  00009	c2 04 00	 ret	 4
?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z ENDP ; ATL::CSimpleStringT<char,0>::Attach
_TEXT	ENDS
PUBLIC	?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData
; Function compile flags: /Ogty
;	COMDAT ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::CloneData, COMDAT

; 801  : 	{

  00000	56		 push	 esi

; 802  : 		CStringData* pNewData = NULL;
; 803  : 
; 804  : 		IAtlStringMgr* pNewStringMgr = pData->pStringMgr->Clone();

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _pData$[esp]
  00005	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	ff 50 10	 call	 DWORD PTR [eax+16]

; 805  : 		if( !pData->IsLocked() && (pNewStringMgr == pData->pStringMgr) )

  0000c	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0000f	85 d2		 test	 edx, edx
  00011	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00014	7c 11		 jl	 SHORT $L94904
  00016	3b 06		 cmp	 eax, DWORD PTR [esi]
  00018	75 0d		 jne	 SHORT $L94904

; 806  : 		{
; 807  : 			pNewData = pData;

  0001a	8b c6		 mov	 eax, esi

; 808  : 			pNewData->AddRef();

  0001c	ba 01 00 00 00	 mov	 edx, 1
  00021	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00025	5e		 pop	 esi

; 819  : 		}
; 820  : 
; 821  : 		return( pNewData );
; 822  : 	}

  00026	c3		 ret	 0
$L94904:

; 809  : 		}
; 810  : 		else
; 811  : 		{
; 812  : 			pNewData = pNewStringMgr->Allocate( pData->nDataLength, sizeof( XCHAR ) );

  00027	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0002a	8b 10		 mov	 edx, DWORD PTR [eax]
  0002c	6a 01		 push	 1
  0002e	51		 push	 ecx
  0002f	8b c8		 mov	 ecx, eax
  00031	ff 12		 call	 DWORD PTR [edx]

; 813  : 			if( pNewData == NULL )

  00033	85 c0		 test	 eax, eax
  00035	75 05		 jne	 SHORT $L94907

; 814  : 			{
; 815  : 				ThrowMemoryException();

  00037	e9 00 00 00 00	 jmp	 ?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<char,0>::ThrowMemoryException
$L94907:

; 816  : 			}
; 817  : 			pNewData->nDataLength = pData->nDataLength;

  0003c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003f	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 818  : 			CopyChars( PXSTR( pNewData->data() ), PCXSTR( pData->data() ), pData->nDataLength+1 );  // Copy '\0'

  00042	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00045	41		 inc	 ecx
  00046	8b d1		 mov	 edx, ecx
  00048	57		 push	 edi
  00049	c1 e9 02	 shr	 ecx, 2
  0004c	83 c6 10	 add	 esi, 16			; 00000010H
  0004f	8d 78 10	 lea	 edi, DWORD PTR [eax+16]
  00052	f3 a5		 rep movsd
  00054	8b ca		 mov	 ecx, edx
  00056	83 e1 03	 and	 ecx, 3
  00059	f3 a4		 rep movsb
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi

; 819  : 		}
; 820  : 
; 821  : 		return( pNewData );
; 822  : 	}

  0005d	c3		 ret	 0
?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ENDP ; ATL::CSimpleStringT<char,0>::CloneData
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBEIXZ ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?max_size@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::max_size, COMDAT
; _this$ = ecx

; 521  : 		return (this->_Alval.max_size());

  00000	b8 cc cc cc 0c	 mov	 eax, 214748364		; 0cccccccH

; 522  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UtagPATCHFILE@@@std@@QAEPAUtagPATCHFILE@@I@Z ; std::allocator<tagPATCHFILE>::allocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@UtagPATCHFILE@@@std@@QAEPAUtagPATCHFILE@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UtagPATCHFILE@@@std@@QAEPAUtagPATCHFILE@@I@Z PROC NEAR ; std::allocator<tagPATCHFILE>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00007	c1 e0 02	 shl	 eax, 2
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	83 c4 04	 add	 esp, 4

; 138  : 		}

  00013	c2 04 00	 ret	 4
?allocate@?$allocator@UtagPATCHFILE@@@std@@QAEPAUtagPATCHFILE@@I@Z ENDP ; std::allocator<tagPATCHFILE>::allocate
_TEXT	ENDS
PUBLIC	??0iterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE@PAUtagPATCHFILE@@@Z ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::iterator::iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0iterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE@PAUtagPATCHFILE@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0iterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE@PAUtagPATCHFILE@@@Z PROC NEAR ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::iterator::iterator, COMDAT
; _this$ = ecx

; 215  : 			{	// construct with pointer _Ptr

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 216  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE@PAUtagPATCHFILE@@@Z ENDP ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??Hiterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBE?AV012@H@Z ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::iterator::operator+
; Function compile flags: /Ogty
;	COMDAT ??Hiterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Hiterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::iterator::operator+, COMDAT
; _this$ = ecx

; 262  : 			iterator _Tmp = *this;
; 263  : 			return (_Tmp += _Off);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Off$[esp-4]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  00009	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0000c	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00010	89 10		 mov	 DWORD PTR [eax], edx

; 264  : 			}

  00012	c2 08 00	 ret	 8
??Hiterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBE?AV012@H@Z ENDP ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::iterator::operator+
_TEXT	ENDS
PUBLIC	??Giterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBEHABVconst_iterator@12@@Z ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::iterator::operator-
; Function compile flags: /Ogty
;	COMDAT ??Giterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBEHABVconst_iterator@12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Giterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBEHABVconst_iterator@12@@Z PROC NEAR ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::iterator::operator-, COMDAT
; _this$ = ecx

; 279  : 			return ((const_iterator)*this - _Right);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	8b c8		 mov	 ecx, eax
  0000a	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0000f	f7 e9		 imul	 ecx
  00011	c1 fa 03	 sar	 edx, 3
  00014	8b c2		 mov	 eax, edx
  00016	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00019	03 c2		 add	 eax, edx

; 280  : 			}

  0001b	c2 04 00	 ret	 4
??Giterator@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBEHABVconst_iterator@12@@Z ENDP ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::iterator::operator-
_TEXT	ENDS
PUBLIC	?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ	; ATL::CSimpleStringT<char,0>::Empty
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ
_TEXT	SEGMENT
?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ PROC NEAR	; ATL::CSimpleStringT<char,0>::Empty, COMDAT
; _this$ = ecx

; 421  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 422  : 		CStringData* pOldData = GetData();

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 423  : 		IAtlStringMgr* pStringMgr = pOldData->pStringMgr;
; 424  : 		if( pOldData->nDataLength == 0 )

  00005	8b 51 f4	 mov	 edx, DWORD PTR [ecx-12]
  00008	85 d2		 test	 edx, edx
  0000a	8d 41 f0	 lea	 eax, DWORD PTR [ecx-16]
  0000d	57		 push	 edi
  0000e	8b 38		 mov	 edi, DWORD PTR [eax]
  00010	74 4c		 je	 SHORT $L96307
  00012	53		 push	 ebx

; 425  : 		{
; 426  : 			return;
; 427  : 		}
; 428  : 
; 429  : 		if( pOldData->IsLocked() )

  00013	8b 58 0c	 mov	 ebx, DWORD PTR [eax+12]
  00016	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  00019	85 db		 test	 ebx, ebx
  0001b	5b		 pop	 ebx
  0001c	7d 20		 jge	 SHORT $L95049

; 430  : 		{
; 431  : 			// Don't reallocate a locked buffer that's shrinking
; 432  : 			SetLength( 0 );

  0001e	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00021	85 c0		 test	 eax, eax
  00023	7d 0a		 jge	 SHORT $L96293
  00025	68 57 00 07 80	 push	 -2147024809		; 80070057H
  0002a	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L96309:
$L96293:
  0002f	c7 41 f4 00 00
	00 00		 mov	 DWORD PTR [ecx-12], 0
  00036	8b 06		 mov	 eax, DWORD PTR [esi]
  00038	5f		 pop	 edi
  00039	c6 00 00	 mov	 BYTE PTR [eax], 0
  0003c	5e		 pop	 esi

; 439  : 		}
; 440  : 	}

  0003d	c3		 ret	 0
$L95049:

; 433  : 		}
; 434  : 		else
; 435  : 		{
; 436  : 			pOldData->Release();

  0003e	83 c9 ff	 or	 ecx, -1
  00041	f0 0f c1 0a	 lock	  xadd	 DWORD PTR [edx], ecx
  00045	49		 dec	 ecx
  00046	85 c9		 test	 ecx, ecx
  00048	7f 08		 jg	 SHORT $L96299
  0004a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004e	50		 push	 eax
  0004f	ff 52 04	 call	 DWORD PTR [edx+4]
$L96299:

; 437  : 			CStringData* pNewData = pStringMgr->GetNilString();

  00052	8b 07		 mov	 eax, DWORD PTR [edi]
  00054	8b cf		 mov	 ecx, edi
  00056	ff 50 0c	 call	 DWORD PTR [eax+12]

; 438  : 			Attach( pNewData );

  00059	83 c0 10	 add	 eax, 16			; 00000010H
  0005c	89 06		 mov	 DWORD PTR [esi], eax
$L96307:
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi

; 439  : 		}
; 440  : 	}

  00060	c3		 ret	 0
$L96308:
?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ ENDP		; ATL::CSimpleStringT<char,0>::Empty
_TEXT	ENDS
PUBLIC	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::const_iterator::_Inc
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::const_iterator::_Inc, COMDAT
; _this$ = ecx

; 268  : 			if (_Isnil(_Ptr))

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00005	84 d2		 test	 dl, dl
  00007	75 4d		 jne	 SHORT $L95079

; 269  : 				;	// end() shouldn't be incremented, don't move
; 270  : 			else if (!_Isnil(_Right(_Ptr)))

  00009	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0000c	53		 push	 ebx
  0000d	8a 5a 15	 mov	 bl, BYTE PTR [edx+21]
  00010	84 db		 test	 bl, bl
  00012	75 1b		 jne	 SHORT $L96356

; 271  : 				_Ptr = _Min(_Right(_Ptr));	// ==> smallest of right subtree

  00014	8b 02		 mov	 eax, DWORD PTR [edx]
  00016	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  00019	84 db		 test	 bl, bl
  0001b	75 0e		 jne	 SHORT $L96344
  0001d	8d 49 00	 npad	 3
$L96343:
  00020	8b d0		 mov	 edx, eax
  00022	8b 02		 mov	 eax, DWORD PTR [edx]
  00024	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  00027	84 db		 test	 bl, bl
  00029	74 f5		 je	 SHORT $L96343
$L96344:
  0002b	89 11		 mov	 DWORD PTR [ecx], edx
  0002d	5b		 pop	 ebx

; 279  : 				}
; 280  : 			}

  0002e	c3		 ret	 0
$L96356:

; 272  : 			else
; 273  : 				{	// climb looking for right subtree
; 274  : 				_Nodeptr _Pnode;
; 275  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 276  : 					&& _Ptr == _Right(_Pnode))

  0002f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00032	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00035	84 d2		 test	 dl, dl
  00037	75 1a		 jne	 SHORT $L95083
  00039	8d a4 24 00 00
	00 00		 npad	 7
$L95082:
  00040	8b 11		 mov	 edx, DWORD PTR [ecx]
  00042	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00045	75 0c		 jne	 SHORT $L95083

; 277  : 					_Ptr = _Pnode;	// ==> parent while right subtree

  00047	89 01		 mov	 DWORD PTR [ecx], eax
  00049	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0004f	84 d2		 test	 dl, dl
  00051	74 ed		 je	 SHORT $L95082
$L95083:

; 278  : 				_Ptr = _Pnode;	// ==> parent (head if end())

  00053	89 01		 mov	 DWORD PTR [ecx], eax
  00055	5b		 pop	 ebx
$L95079:

; 279  : 				}
; 280  : 			}

  00056	c3		 ret	 0
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::const_iterator::_Inc
_TEXT	ENDS
PUBLIC	?Fork@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z	; ATL::CSimpleStringT<char,0>::Fork
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?Fork@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
tv181 = 8						; size = 4
_nLength$ = 8						; size = 4
?Fork@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z PROC NEAR	; ATL::CSimpleStringT<char,0>::Fork, COMDAT
; _this$ = ecx

; 715  : 	{

  00000	51		 push	 ecx
  00001	53		 push	 ebx

; 716  : 		CStringData* pOldData = GetData();

  00002	8b 19		 mov	 ebx, DWORD PTR [ecx]
  00004	83 eb 10	 sub	 ebx, 16			; 00000010H
  00007	55		 push	 ebp

; 717  : 		int nOldLength = pOldData->nDataLength;

  00008	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  0000b	89 4c 24 08	 mov	 DWORD PTR _this$[esp+12], ecx

; 718  : 		CStringData* pNewData = pOldData->pStringMgr->Clone()->Allocate( nLength, sizeof( XCHAR ) );

  0000f	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00011	8b 01		 mov	 eax, DWORD PTR [ecx]
  00013	56		 push	 esi
  00014	ff 50 10	 call	 DWORD PTR [eax+16]
  00017	8b 74 24 14	 mov	 esi, DWORD PTR _nLength$[esp+12]
  0001b	8b 10		 mov	 edx, DWORD PTR [eax]
  0001d	6a 01		 push	 1
  0001f	56		 push	 esi
  00020	8b c8		 mov	 ecx, eax
  00022	ff 12		 call	 DWORD PTR [edx]

; 719  : 		if( pNewData == NULL )

  00024	85 c0		 test	 eax, eax
  00026	75 05		 jne	 SHORT $L95124

; 720  : 		{
; 721  : 			ThrowMemoryException();

  00028	e8 00 00 00 00	 call	 ?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<char,0>::ThrowMemoryException
$L96390:
$L95124:

; 722  : 		}
; 723  : 		int nCharsToCopy = ((nOldLength < nLength) ? nOldLength : nLength)+1;  // Copy '\0'

  0002d	3b ee		 cmp	 ebp, esi
  0002f	7d 02		 jge	 SHORT $L96364
  00031	8b f5		 mov	 esi, ebp
$L96364:
  00033	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]

; 724  : 		CopyChars( PXSTR( pNewData->data() ), PCXSTR( pOldData->data() ), nCharsToCopy );

  00036	8b d1		 mov	 edx, ecx
  00038	57		 push	 edi
  00039	c1 e9 02	 shr	 ecx, 2
  0003c	8d 78 10	 lea	 edi, DWORD PTR [eax+16]
  0003f	89 7c 24 18	 mov	 DWORD PTR tv181[esp+16], edi
  00043	8d 73 10	 lea	 esi, DWORD PTR [ebx+16]
  00046	f3 a5		 rep movsd
  00048	8b ca		 mov	 ecx, edx
  0004a	83 e1 03	 and	 ecx, 3
  0004d	f3 a4		 rep movsb

; 725  : 		pNewData->nDataLength = nOldLength;

  0004f	89 68 04	 mov	 DWORD PTR [eax+4], ebp

; 726  : 		pOldData->Release();

  00052	8d 43 0c	 lea	 eax, DWORD PTR [ebx+12]
  00055	83 c9 ff	 or	 ecx, -1
  00058	f0 0f c1 08	 lock	  xadd	 DWORD PTR [eax], ecx
  0005c	49		 dec	 ecx
  0005d	85 c9		 test	 ecx, ecx
  0005f	5f		 pop	 edi
  00060	7f 08		 jg	 SHORT $L96380
  00062	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	53		 push	 ebx
  00067	ff 52 04	 call	 DWORD PTR [edx+4]
$L96380:

; 727  : 		Attach( pNewData );

  0006a	8b 44 24 14	 mov	 eax, DWORD PTR tv181[esp+12]
  0006e	8b 4c 24 0c	 mov	 ecx, DWORD PTR _this$[esp+16]
  00072	5e		 pop	 esi
  00073	5d		 pop	 ebp
  00074	89 01		 mov	 DWORD PTR [ecx], eax
  00076	5b		 pop	 ebx

; 728  : 	}

  00077	59		 pop	 ecx
  00078	c2 04 00	 ret	 4
$L96389:
?Fork@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ENDP		; ATL::CSimpleStringT<char,0>::Fork
_TEXT	ENDS
PUBLIC	?Reallocate@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z	; ATL::CSimpleStringT<char,0>::Reallocate
; Function compile flags: /Ogty
;	COMDAT ?Reallocate@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_nLength$ = 8						; size = 4
?Reallocate@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::Reallocate, COMDAT
; _this$ = ecx

; 776  : 	{

  00000	56		 push	 esi
  00001	57		 push	 edi

; 777  : 		CStringData* pOldData = GetData();
; 778  : 		ATLASSERT( pOldData->nAllocLength < nLength );
; 779  : 		IAtlStringMgr* pStringMgr = pOldData->pStringMgr;
; 780  : 		CStringData* pNewData = pStringMgr->Reallocate( pOldData, nLength, sizeof( XCHAR ) );

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR _nLength$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	8b 06		 mov	 eax, DWORD PTR [esi]
  0000a	8b 48 f0	 mov	 ecx, DWORD PTR [eax-16]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	83 e8 10	 sub	 eax, 16			; 00000010H
  00012	6a 01		 push	 1
  00014	57		 push	 edi
  00015	50		 push	 eax
  00016	ff 52 08	 call	 DWORD PTR [edx+8]

; 781  : 		if( pNewData == NULL )

  00019	85 c0		 test	 eax, eax
  0001b	75 05		 jne	 SHORT $L95133

; 782  : 		{
; 783  : 			ThrowMemoryException();

  0001d	e8 00 00 00 00	 call	 ?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<char,0>::ThrowMemoryException
$L96406:
$L95133:

; 784  : 		}
; 785  : 		Attach( pNewData );

  00022	83 c0 10	 add	 eax, 16			; 00000010H
  00025	5f		 pop	 edi
  00026	89 06		 mov	 DWORD PTR [esi], eax
  00028	5e		 pop	 esi

; 786  : 	}

  00029	c2 04 00	 ret	 4
$L96405:
?Reallocate@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ENDP	; ATL::CSimpleStringT<char,0>::Reallocate
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC NEAR ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 34   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 35   : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogty
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $L96421
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1476 : 		}

  00014	c2 04 00	 ret	 4

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$L96421:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 1476 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1114 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1115 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1116 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC NEAR	; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 138  : 		}

  0000d	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >, COMDAT
; _this$ = ecx

; 963  : 	}

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 e8 10	 sub	 eax, 16			; 00000010H
  00005	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00008	83 ca ff	 or	 edx, -1
  0000b	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0000f	4a		 dec	 edx
  00010	85 d2		 test	 edx, edx
  00012	7f 08		 jg	 SHORT $L96462
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	8b 11		 mov	 edx, DWORD PTR [ecx]
  00018	50		 push	 eax
  00019	ff 52 04	 call	 DWORD PTR [edx+4]
$L96462:
  0001c	c3		 ret	 0
??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
_TEXT	ENDS
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::begin
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::begin, COMDAT
; _this$ = ecx

; 408  : 		return (_TREE_ITERATOR(_Lmost()));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 08		 mov	 ecx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 409  : 		}

  0000b	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::begin
_TEXT	ENDS
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::end
; Function compile flags: /Ogty
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::end, COMDAT
; _this$ = ecx

; 418  : 		return (_TREE_ITERATOR(_Myhead));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 419  : 		}

  00009	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::end
_TEXT	ENDS
PUBLIC	??Diterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBKPAVCTPatchSession@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Diterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBKPAVCTPatchSession@@@2@XZ
_TEXT	SEGMENT
??Diterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBKPAVCTPatchSession@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::iterator::operator*, COMDAT
; _this$ = ecx

; 317  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 318  : 			}

  00005	c3		 ret	 0
??Diterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QBEAAU?$pair@$$CBKPAVCTPatchSession@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::iterator::operator*
_TEXT	ENDS
PUBLIC	??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT
_pStringMgr$ = 8					; size = 4
??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>, COMDAT
; _this$ = ecx

; 210  : 	explicit CSimpleStringT( IAtlStringMgr* pStringMgr ) throw()

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 211  : 	{
; 212  : 		ATLASSERT( pStringMgr != NULL );
; 213  : 		CStringData* pData = pStringMgr->GetNilString();

  00003	8b 4c 24 08	 mov	 ecx, DWORD PTR _pStringMgr$[esp]
  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	ff 50 0c	 call	 DWORD PTR [eax+12]

; 214  : 		Attach( pData );

  0000c	83 c0 10	 add	 eax, 16			; 00000010H
  0000f	89 06		 mov	 DWORD PTR [esi], eax

; 215  : 	}

  00011	8b c6		 mov	 eax, esi
  00013	5e		 pop	 esi
  00014	c2 04 00	 ret	 4
??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ENDP ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>
_TEXT	ENDS
PUBLIC	??0?$CSimpleStringT@D$0A@@ATL@@QAE@ABV01@@Z	; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>
; Function compile flags: /Ogty
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT
_strSrc$ = 8						; size = 4
??0?$CSimpleStringT@D$0A@@ATL@@QAE@ABV01@@Z PROC NEAR	; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>, COMDAT
; _this$ = ecx

; 218  : 	{
; 219  : 		CStringData* pSrcData = strSrc.GetData();

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _strSrc$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]
  00006	56		 push	 esi
  00007	83 e8 10	 sub	 eax, 16			; 00000010H

; 220  : 		CStringData* pNewData = CloneData( pSrcData );

  0000a	50		 push	 eax
  0000b	8b f1		 mov	 esi, ecx
  0000d	e8 00 00 00 00	 call	 ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData

; 221  : 		Attach( pNewData );

  00012	83 c0 10	 add	 eax, 16			; 00000010H
  00015	89 06		 mov	 DWORD PTR [esi], eax
  00017	83 c4 04	 add	 esp, 4

; 222  : 	}

  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	c2 04 00	 ret	 4
??0?$CSimpleStringT@D$0A@@ATL@@QAE@ABV01@@Z ENDP	; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>
_TEXT	ENDS
PUBLIC	?end@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::end
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?end@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::end, COMDAT
; _this$ = ecx

; 473  : 		return (iterator(_Mylast));

  00000	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 474  : 		}

  00009	c2 04 00	 ret	 4
?end@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::end
_TEXT	ENDS
PUBLIC	??Econst_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::const_iterator::operator++
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Econst_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::const_iterator::operator++, COMDAT
; _this$ = ecx

; 214  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 215  : 			_Inc();

  00003	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::const_iterator::_Inc

; 216  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 217  : 			}

  0000b	c3		 ret	 0
??Econst_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::const_iterator::operator++
_TEXT	ENDS
PUBLIC	?begin@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::begin
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?begin@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::begin, COMDAT
; _this$ = ecx

; 463  : 		return (iterator(_Myfirst));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 464  : 		}

  00009	c2 04 00	 ret	 4
?begin@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::begin
_TEXT	ENDS
PUBLIC	?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<char,0>::PrepareWrite2
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_nLength$ = 8						; size = 4
?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::PrepareWrite2, COMDAT
; _this$ = ecx

; 747  : 		CStringData* pOldData = GetData();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 748  : 		if( pOldData->nDataLength > nLength )

  00002	8b 54 24 04	 mov	 edx, DWORD PTR _nLength$[esp-4]
  00006	83 e8 10	 sub	 eax, 16			; 00000010H
  00009	56		 push	 esi
  0000a	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  0000d	3b f2		 cmp	 esi, edx
  0000f	7e 02		 jle	 SHORT $L95098

; 749  : 		{
; 750  : 			nLength = pOldData->nDataLength;

  00011	8b d6		 mov	 edx, esi
$L95098:

; 751  : 		}
; 752  : 		if( pOldData->IsShared() )

  00013	83 78 0c 01	 cmp	 DWORD PTR [eax+12], 1
  00017	5e		 pop	 esi
  00018	7e 09		 jle	 SHORT $L95099

; 753  : 		{
; 754  : 			Fork( nLength );

  0001a	89 54 24 04	 mov	 DWORD PTR _nLength$[esp-4], edx
  0001e	e9 00 00 00 00	 jmp	 ?Fork@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<char,0>::Fork
$L95099:

; 755  : 		}
; 756  : 		else if( pOldData->nAllocLength < nLength )

  00023	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00026	3b c2		 cmp	 eax, edx
  00028	7d 1f		 jge	 SHORT $L95101

; 757  : 		{
; 758  : 			// Grow exponentially, until we hit 1K.
; 759  : 			int nNewLength = pOldData->nAllocLength;
; 760  : 			if( nNewLength > 1024 )

  0002a	3d 00 04 00 00	 cmp	 eax, 1024		; 00000400H
  0002f	7e 07		 jle	 SHORT $L95103

; 761  : 			{
; 762  : 				nNewLength += 1024;

  00031	05 00 04 00 00	 add	 eax, 1024		; 00000400H

; 763  : 			}
; 764  : 			else

  00036	eb 02		 jmp	 SHORT $L95104
$L95103:

; 765  : 			{
; 766  : 				nNewLength *= 2;

  00038	03 c0		 add	 eax, eax
$L95104:

; 767  : 			}
; 768  : 			if( nNewLength < nLength )

  0003a	3b c2		 cmp	 eax, edx
  0003c	7d 02		 jge	 SHORT $L95105

; 769  : 			{
; 770  : 				nNewLength = nLength;

  0003e	8b c2		 mov	 eax, edx
$L95105:

; 771  : 			}
; 772  : 			Reallocate( nNewLength );

  00040	89 44 24 04	 mov	 DWORD PTR _nLength$[esp-4], eax
  00044	e9 00 00 00 00	 jmp	 ?Reallocate@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<char,0>::Reallocate
$L95101:

; 773  : 		}
; 774  : 	}

  00049	c2 04 00	 ret	 4
?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ENDP	; ATL::CSimpleStringT<char,0>::PrepareWrite2
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1510 : 		if (!_Built)

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Built$[esp-4]
  00004	84 c0		 test	 al, al
  00006	53		 push	 ebx
  00007	55		 push	 ebp
  00008	8b 6c 24 10	 mov	 ebp, DWORD PTR __Newsize$[esp+4]
  0000c	8b d9		 mov	 ebx, ecx
  0000e	74 2f		 je	 SHORT $L96578

; 1511 : 			;
; 1512 : 		else if (_BUF_SIZE <= _Myres)

  00010	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  00014	72 29		 jb	 SHORT $L96578

; 1513 : 			{	// copy any leftovers to small buffer and deallocate
; 1514 : 			_Elem *_Ptr = _Bx._Ptr;
; 1515 : 			if (0 < _Newsize)

  00016	85 ed		 test	 ebp, ebp
  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	57		 push	 edi
  0001c	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  0001f	76 14		 jbe	 SHORT $L96575
  00021	56		 push	 esi

; 1516 : 				_Traits::copy(_Bx._Buf, _Ptr, _Newsize);

  00022	8b cd		 mov	 ecx, ebp
  00024	8b d1		 mov	 edx, ecx
  00026	c1 e9 02	 shr	 ecx, 2
  00029	8b f0		 mov	 esi, eax
  0002b	f3 a5		 rep movsd
  0002d	8b ca		 mov	 ecx, edx
  0002f	83 e1 03	 and	 ecx, 3
  00032	f3 a4		 rep movsb
  00034	5e		 pop	 esi
$L96575:

; 1517 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4
  0003e	5f		 pop	 edi
$L96578:

; 1518 : 			}
; 1519 : 		_Myres = _BUF_SIZE - 1;
; 1520 : 		_Eos(_Newsize);

  0003f	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00042	c7 43 18 0f 00
	00 00		 mov	 DWORD PTR [ebx+24], 15	; 0000000fH
  00049	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0004e	5d		 pop	 ebp
  0004f	5b		 pop	 ebx

; 1521 : 		}

  00050	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
EXTRN	?_Xran@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xran
; Function compile flags: /Ogty
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 792  : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp

; 793  : 		if (_Mysize < _Off)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	39 6e 14	 cmp	 DWORD PTR [esi+20], ebp
  0000b	57		 push	 edi
  0000c	73 05		 jae	 SHORT $L92792

; 794  : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L92792:

; 795  : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c5		 sub	 eax, ebp
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $L92793

; 796  : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$L92793:

; 797  : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 47		 jbe	 SHORT $L96643

; 798  : 			{	// move elements down
; 799  : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 800  : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0002c	53		 push	 ebx
  0002d	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  00030	72 04		 jb	 SHORT $L96608
  00032	8b 13		 mov	 edx, DWORD PTR [ebx]
  00034	eb 02		 jmp	 SHORT $L96609
$L96608:
  00036	8b d3		 mov	 edx, ebx
$L96609:
  00038	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0003b	72 04		 jb	 SHORT $L96615
  0003d	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0003f	eb 02		 jmp	 SHORT $L96616
$L96615:
  00041	8b cb		 mov	 ecx, ebx
$L96616:
  00043	2b c7		 sub	 eax, edi

; 803  : 			}
; 804  : 		return (*this);

  00045	03 d5		 add	 edx, ebp
  00047	50		 push	 eax
  00048	03 d7		 add	 edx, edi
  0004a	52		 push	 edx
  0004b	03 cd		 add	 ecx, ebp
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 _memmove
  00053	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00056	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00059	2b c7		 sub	 eax, edi
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005e	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00061	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00064	72 02		 jb	 SHORT $L96638

; 801  : 			size_type _Newsize = _Mysize - _Count;
; 802  : 			_Eos(_Newsize);

  00066	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$L96638:
  00068	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0
  0006c	5b		 pop	 ebx
$L96643:
  0006d	5f		 pop	 edi

; 803  : 			}
; 804  : 		return (*this);

  0006e	8b c6		 mov	 eax, esi
  00070	5e		 pop	 esi
  00071	5d		 pop	 ebp

; 805  : 		}

  00072	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T96850	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
$T96852	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L96650
$T96853	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L96648
$T96851	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T96852
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:$T96853
$T96844	DD	019930520H
	DD	04H
	DD	FLAT:$T96850
	DD	02H
	DD	FLAT:$T96851
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1444 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1445 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	8b d8		 mov	 ebx, eax
  00022	83 cb 0f	 or	 ebx, 15			; 0000000fH

; 1446 : 		if (max_size() < _Newres)

  00025	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00028	57		 push	 edi
  00029	8b f1		 mov	 esi, ecx
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00031	76 04		 jbe	 SHORT $L92838

; 1447 : 			_Newres = _Newsize;	// undo roundup if too big

  00033	8b d8		 mov	 ebx, eax

; 1448 : 		else if (_Newres / 3 < _Myres / 2

  00035	eb 22		 jmp	 SHORT $L92840
$L92838:

; 1449 : 			&& _Myres <= max_size() - _Myres / 2)

  00037	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  0003a	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0003f	f7 e3		 mul	 ebx
  00041	8b cf		 mov	 ecx, edi
  00043	d1 e9		 shr	 ecx, 1
  00045	d1 ea		 shr	 edx, 1
  00047	3b d1		 cmp	 edx, ecx
  00049	73 0e		 jae	 SHORT $L92840
  0004b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00050	2b c1		 sub	 eax, ecx
  00052	3b f8		 cmp	 edi, eax
  00054	77 03		 ja	 SHORT $L92840

; 1450 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00056	8d 1c 39	 lea	 ebx, DWORD PTR [ecx+edi]
$L92840:

; 1451 : 		_Elem *_Ptr;
; 1452 : 
; 1453 : 		_TRY_BEGIN
; 1454 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00059	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  0005c	51		 push	 ecx
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00064	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00069	8b d0		 mov	 edx, eax
  0006b	83 c4 04	 add	 esp, 4
  0006e	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
  00071	eb 29		 jmp	 SHORT $L92842
$L96648:

; 1455 : 		_CATCH_ALL
; 1456 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  00073	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00076	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 1457 : 			_TRY_BEGIN
; 1458 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00079	40		 inc	 eax
  0007a	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0007d	50		 push	 eax
  0007e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00082	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00087	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0008a	83 c4 04	 add	 esp, 4

; 1462 : 			_CATCH_END
; 1463 : 		_CATCH_END

  0008d	b8 00 00 00 00	 mov	 eax, $L96845
  00092	c3		 ret	 0
$L96845:
  00093	8b 5d e8	 mov	 ebx, DWORD PTR __Newres$[ebp]
  00096	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00099	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$L92842:

; 1464 : 
; 1465 : 		if (0 < _Oldlen)

  0009c	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  0009f	85 c9		 test	 ecx, ecx
  000a1	76 24		 jbe	 SHORT $L96768

; 1466 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  000a3	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000a7	72 05		 jb	 SHORT $L96763
  000a9	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000ac	eb 03		 jmp	 SHORT $L96764
$L96763:
  000ae	83 c6 04	 add	 esi, 4
$L96764:
  000b1	8b c1		 mov	 eax, ecx
  000b3	c1 e9 02	 shr	 ecx, 2
  000b6	8b fa		 mov	 edi, edx
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb
  000c1	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000c4	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
$L96768:

; 1467 : 		_Tidy(true);

  000c7	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000cb	72 12		 jb	 SHORT $L96810
  000cd	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000d0	51		 push	 ecx
  000d1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d6	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000d9	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000dc	83 c4 04	 add	 esp, 4
$L96810:

; 1468 : 		_Bx._Ptr = _Ptr;
; 1469 : 		_Myres = _Newres;
; 1470 : 		_Eos(_Oldlen);

  000df	83 fb 10	 cmp	 ebx, 16			; 00000010H
  000e2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000e5	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e8	89 10		 mov	 DWORD PTR [eax], edx
  000ea	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  000ed	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  000f0	72 02		 jb	 SHORT $L96836
  000f2	8b c2		 mov	 eax, edx
$L96836:

; 1471 : 		}

  000f4	5f		 pop	 edi
  000f5	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  000f9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fc	5e		 pop	 esi
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00104	5b		 pop	 ebx
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c2 08 00	 ret	 8
$L96650:

; 1459 : 			_CATCH_ALL
; 1460 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010b	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0010e	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00112	72 0c		 jb	 SHORT $L96743
  00114	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00117	52		 push	 edx
  00118	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0011d	83 c4 04	 add	 esp, 4
$L96743:

; 1461 : 			_RERAISE;

  00120	6a 00		 push	 0
  00122	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00129	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00130	6a 00		 push	 0
  00132	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00136	e8 00 00 00 00	 call	 __CxxThrowException@8
$L96855:
$L96849:
  0013b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T96844
  00005	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	??1tagPATCHFILE@@QAE@XZ				; tagPATCHFILE::~tagPATCHFILE
; Function compile flags: /Ogty
;	COMDAT ??1tagPATCHFILE@@QAE@XZ
_TEXT	SEGMENT
??1tagPATCHFILE@@QAE@XZ PROC NEAR			; tagPATCHFILE::~tagPATCHFILE, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00006	e8 00 00 00 00	 call	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
  0000b	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0000e	5e		 pop	 esi
  0000f	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
??1tagPATCHFILE@@QAE@XZ ENDP				; tagPATCHFILE::~tagPATCHFILE
_TEXT	ENDS
PUBLIC	??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >, COMDAT
; _this$ = ecx

; 796  : 	{

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_strmgr@ATL@@3VCAtlStringMgr@1@A
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_strmgr@ATL@@3VCAtlStringMgr@1@A ; ATL::g_strmgr
  0000d	ff 50 0c	 call	 DWORD PTR [eax+12]
  00010	83 c0 10	 add	 eax, 16			; 00000010H
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 797  : 	}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c3		 ret	 0
??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
_TEXT	ENDS
PUBLIC	??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@ABV01@@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
; Function compile flags: /Ogty
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT
_strSrc$ = 8						; size = 4
??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@ABV01@@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >, COMDAT
; _this$ = ecx

; 814  : 	{

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _strSrc$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]
  00006	56		 push	 esi
  00007	83 e8 10	 sub	 eax, 16			; 00000010H
  0000a	50		 push	 eax
  0000b	8b f1		 mov	 esi, ecx
  0000d	e8 00 00 00 00	 call	 ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData
  00012	83 c0 10	 add	 eax, 16			; 00000010H
  00015	89 06		 mov	 DWORD PTR [esi], eax
  00017	83 c4 04	 add	 esp, 4

; 815  : 	}

  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	c2 04 00	 ret	 4
??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@ABV01@@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
_TEXT	ENDS
PUBLIC	??Eiterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::iterator::operator++
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Eiterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::iterator::operator++, COMDAT
; _this$ = ecx

; 326  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 327  : 			++(*(const_iterator *)this);

  00003	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::const_iterator::_Inc

; 328  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 329  : 			}

  0000b	c3		 ret	 0
??Eiterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::iterator::operator++
_TEXT	ENDS
PUBLIC	??0tagPATCHFILE@@QAE@ABU0@@Z			; tagPATCHFILE::tagPATCHFILE
;	COMDAT xdata$x
xdata$x	SEGMENT
$T96997	DD	0ffffffffH
	DD	FLAT:$L96918
$T96995	DD	019930520H
	DD	01H
	DD	FLAT:$T96997
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??0tagPATCHFILE@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0tagPATCHFILE@@QAE@ABU0@@Z PROC NEAR			; tagPATCHFILE::tagPATCHFILE, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0tagPATCHFILE@@QAE@ABU0@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 1c	 mov	 edi, DWORD PTR ___that$[esp+20]
  0001c	8b 07		 mov	 eax, DWORD PTR [edi]
  0001e	8b f1		 mov	 esi, ecx
  00020	89 06		 mov	 DWORD PTR [esi], eax
  00022	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00025	83 e8 10	 sub	 eax, 16			; 00000010H
  00028	50		 push	 eax
  00029	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  0002d	e8 00 00 00 00	 call	 ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData
  00032	83 c0 10	 add	 eax, 16			; 00000010H
  00035	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00038	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0003b	83 e8 10	 sub	 eax, 16			; 00000010H
  0003e	50		 push	 eax
  0003f	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+40], 0
  00047	e8 00 00 00 00	 call	 ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData
  0004c	83 c4 08	 add	 esp, 8
  0004f	83 c0 10	 add	 eax, 16			; 00000010H
  00052	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00055	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00058	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  0005b	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  0005e	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00062	89 56 10	 mov	 DWORD PTR [esi+16], edx
  00065	5f		 pop	 edi
  00066	8b c6		 mov	 eax, esi
  00068	5e		 pop	 esi
  00069	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00070	83 c4 10	 add	 esp, 16			; 00000010H
  00073	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L96918:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
__ehhandler$??0tagPATCHFILE@@QAE@ABU0@@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T96995
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0tagPATCHFILE@@QAE@ABU0@@Z ENDP			; tagPATCHFILE::tagPATCHFILE
PUBLIC	?PrepareWrite@?$CSimpleStringT@D$0A@@ATL@@AAEPADH@Z ; ATL::CSimpleStringT<char,0>::PrepareWrite
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?PrepareWrite@?$CSimpleStringT@D$0A@@ATL@@AAEPADH@Z
_TEXT	SEGMENT
_nLength$ = 8						; size = 4
?PrepareWrite@?$CSimpleStringT@D$0A@@ATL@@AAEPADH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::PrepareWrite, COMDAT
; _this$ = ecx

; 734  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 735  : 		CStringData* pOldData = GetData();

  00003	8b 06		 mov	 eax, DWORD PTR [esi]

; 736  : 		int nShared = 1-pOldData->nRefs;  // nShared < 0 means true, >= 0 means false

  00005	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00008	83 e8 10	 sub	 eax, 16			; 00000010H
  0000b	b9 01 00 00 00	 mov	 ecx, 1
  00010	2b ca		 sub	 ecx, edx

; 737  : 		int nTooShort = pOldData->nAllocLength-nLength;  // nTooShort < 0 means true, >= 0 means false

  00012	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00015	8b 44 24 08	 mov	 eax, DWORD PTR _nLength$[esp]
  00019	2b d0		 sub	 edx, eax

; 738  : 		if( (nShared|nTooShort) < 0 )  // If either sign bit is set (i.e. either is less than zero), we need to copy data

  0001b	0b ca		 or	 ecx, edx
  0001d	7d 08		 jge	 SHORT $L97006

; 739  : 		{
; 740  : 			PrepareWrite2( nLength );

  0001f	50		 push	 eax
  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<char,0>::PrepareWrite2
$L97006:

; 741  : 		}
; 742  : 
; 743  : 		return( m_pszData );

  00027	8b 06		 mov	 eax, DWORD PTR [esi]
  00029	5e		 pop	 esi

; 744  : 	}

  0002a	c2 04 00	 ret	 4
?PrepareWrite@?$CSimpleStringT@D$0A@@ATL@@AAEPADH@Z ENDP ; ATL::CSimpleStringT<char,0>::PrepareWrite
_TEXT	ENDS
PUBLIC	??$_Construct@UtagPATCHFILE@@U1@@std@@YAXPAUtagPATCHFILE@@ABU1@@Z ; std::_Construct<tagPATCHFILE,tagPATCHFILE>
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\new.h
xdata$x	SEGMENT
$T97021	DD	0ffffffffH
	DD	FLAT:$L97014
$T97019	DD	019930520H
	DD	01H
	DD	FLAT:$T97021
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
xdata$x	ENDS
;	COMDAT ??$_Construct@UtagPATCHFILE@@U1@@std@@YAXPAUtagPATCHFILE@@ABU1@@Z
_TEXT	SEGMENT
$T97011 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UtagPATCHFILE@@U1@@std@@YAXPAUtagPATCHFILE@@ABU1@@Z PROC NEAR ; std::_Construct<tagPATCHFILE,tagPATCHFILE>, COMDAT

; 41   : 	{	// construct object at _Ptr with value _Val

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??$_Construct@UtagPATCHFILE@@U1@@std@@YAXPAUtagPATCHFILE@@ABU1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx

; 42   : 	new ((void _FARQ *)_Ptr) _T1(_Val);

  00016	8b 4c 24 14	 mov	 ecx, DWORD PTR __Ptr$[esp+12]
  0001a	89 0c 24	 mov	 DWORD PTR $T97011[esp+16], ecx
  0001d	85 c9		 test	 ecx, ecx
  0001f	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+24], 0
  00027	74 0a		 je	 SHORT $L97012
  00029	8b 44 24 18	 mov	 eax, DWORD PTR __Val$[esp+12]
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??0tagPATCHFILE@@QAE@ABU0@@Z
$L97012:

; 43   : 	}

  00033	8b 4c 24 04	 mov	 ecx, DWORD PTR __$EHRec$[esp+16]
  00037	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0003e	83 c4 10	 add	 esp, 16			; 00000010H
  00041	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L97014:
  00000	8b 45 04	 mov	 eax, DWORD PTR __Ptr$[ebp-4]
  00003	50		 push	 eax
  00004	8b 4d f0	 mov	 ecx, DWORD PTR $T97011[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Construct@UtagPATCHFILE@@U1@@std@@YAXPAUtagPATCHFILE@@ABU1@@Z:
  00011	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T97019
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$_Construct@UtagPATCHFILE@@U1@@std@@YAXPAUtagPATCHFILE@@ABU1@@Z ENDP ; std::_Construct<tagPATCHFILE,tagPATCHFILE>
PUBLIC	??_GtagPATCHFILE@@QAEPAXI@Z			; tagPATCHFILE::`scalar deleting destructor'
; Function compile flags: /Ogty
;	COMDAT ??_GtagPATCHFILE@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GtagPATCHFILE@@QAEPAXI@Z PROC NEAR			; tagPATCHFILE::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1tagPATCHFILE@@QAE@XZ
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L97027
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L97027:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GtagPATCHFILE@@QAEPAXI@Z ENDP			; tagPATCHFILE::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 456  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 457  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $L97070
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$L97070:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 458  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xlen
; Function compile flags: /Ogty
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1480 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	56		 push	 esi

; 1481 : 		if (max_size() < _Newsize)

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR __Newsize$[esp+4]
  00006	83 fe fe	 cmp	 esi, -2			; fffffffeH
  00009	8b e9		 mov	 ebp, ecx
  0000b	76 05		 jbe	 SHORT $L92801

; 1482 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L92801:

; 1483 : 		if (_Myres < _Newsize)

  00012	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00015	3b c6		 cmp	 eax, esi
  00017	73 19		 jae	 SHORT $L92802

; 1484 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0001c	50		 push	 eax
  0001d	56		 push	 esi
  0001e	8b cd		 mov	 ecx, ebp
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c0		 xor	 eax, eax
  00027	3b c6		 cmp	 eax, esi
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5d		 pop	 ebp

; 1491 : 		}

  0002f	c2 08 00	 ret	 8
$L92802:

; 1485 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	8a 4c 24 10	 mov	 cl, BYTE PTR __Trim$[esp+4]
  00036	84 c9		 test	 cl, cl
  00038	74 5c		 je	 SHORT $L92804
  0003a	83 fe 10	 cmp	 esi, 16			; 00000010H
  0003d	73 57		 jae	 SHORT $L92804
  0003f	53		 push	 ebx

; 1486 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1487 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  00040	8b 5d 14	 mov	 ebx, DWORD PTR [ebp+20]
  00043	3b f3		 cmp	 esi, ebx
  00045	73 02		 jae	 SHORT $L97085
  00047	8b de		 mov	 ebx, esi
$L97085:
  00049	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004c	72 2b		 jb	 SHORT $L97145
  0004e	85 db		 test	 ebx, ebx
  00050	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00053	57		 push	 edi
  00054	8d 7d 04	 lea	 edi, DWORD PTR [ebp+4]
  00057	76 16		 jbe	 SHORT $L97143
  00059	8b cb		 mov	 ecx, ebx
  0005b	8b d1		 mov	 edx, ecx
  0005d	c1 e9 02	 shr	 ecx, 2
  00060	8b f0		 mov	 esi, eax
  00062	f3 a5		 rep movsd
  00064	8b ca		 mov	 ecx, edx
  00066	83 e1 03	 and	 ecx, 3
  00069	f3 a4		 rep movsb
  0006b	8b 74 24 14	 mov	 esi, DWORD PTR __Newsize$[esp+12]
$L97143:
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00075	83 c4 04	 add	 esp, 4
  00078	5f		 pop	 edi
$L97145:
  00079	89 5d 14	 mov	 DWORD PTR [ebp+20], ebx

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  0007c	33 c0		 xor	 eax, eax
  0007e	c7 45 18 0f 00
	00 00		 mov	 DWORD PTR [ebp+24], 15	; 0000000fH
  00085	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0008a	3b c6		 cmp	 eax, esi
  0008c	5b		 pop	 ebx
  0008d	1b c0		 sbb	 eax, eax
  0008f	5e		 pop	 esi
  00090	f7 d8		 neg	 eax
  00092	5d		 pop	 ebp

; 1491 : 		}

  00093	c2 08 00	 ret	 8
$L92804:

; 1488 : 		else if (_Newsize == 0)

  00096	85 f6		 test	 esi, esi
  00098	75 23		 jne	 SHORT $L97176

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

  0009a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0009d	89 75 14	 mov	 DWORD PTR [ebp+20], esi
  000a0	72 14		 jb	 SHORT $L97174
  000a2	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000a5	33 c0		 xor	 eax, eax
  000a7	3b c6		 cmp	 eax, esi
  000a9	1b c0		 sbb	 eax, eax
  000ab	5e		 pop	 esi
  000ac	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
  000b0	f7 d8		 neg	 eax
  000b2	5d		 pop	 ebp

; 1491 : 		}

  000b3	c2 08 00	 ret	 8

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

$L97174:
  000b6	83 c5 04	 add	 ebp, 4
  000b9	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
$L97176:

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000bd	33 c0		 xor	 eax, eax
  000bf	3b c6		 cmp	 eax, esi
  000c1	1b c0		 sbb	 eax, eax
  000c3	5e		 pop	 esi
  000c4	f7 d8		 neg	 eax
  000c6	5d		 pop	 ebp

; 1491 : 		}

  000c7	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	??0tagPATCHFILE@@QAE@XZ				; tagPATCHFILE::tagPATCHFILE
; Function compile flags: /Ogty
;	COMDAT ??0tagPATCHFILE@@QAE@XZ
_TEXT	SEGMENT
??0tagPATCHFILE@@QAE@XZ PROC NEAR			; tagPATCHFILE::tagPATCHFILE, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00006	e8 00 00 00 00	 call	 ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
  0000b	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0000e	e8 00 00 00 00	 call	 ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c3		 ret	 0
??0tagPATCHFILE@@QAE@XZ ENDP				; tagPATCHFILE::tagPATCHFILE
_TEXT	ENDS
PUBLIC	??Eiterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::iterator::operator++
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??Eiterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::iterator::operator++, COMDAT
; _this$ = ecx

; 332  : 			{	// postincrement

  00000	56		 push	 esi

; 333  : 			iterator _Tmp = *this;

  00001	8b 31		 mov	 esi, DWORD PTR [ecx]

; 334  : 			++*this;

  00003	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::const_iterator::_Inc

; 335  : 			return (_Tmp);

  00008	8b 44 24 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  0000c	89 30		 mov	 DWORD PTR [eax], esi
  0000e	5e		 pop	 esi

; 336  : 			}

  0000f	c2 08 00	 ret	 8
??Eiterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAE?AV012@H@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::iterator::operator++
_TEXT	ENDS
PUBLIC	?GetBuffer@?$CSimpleStringT@D$0A@@ATL@@QAEPADH@Z ; ATL::CSimpleStringT<char,0>::GetBuffer
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?GetBuffer@?$CSimpleStringT@D$0A@@ATL@@QAEPADH@Z
_TEXT	SEGMENT
_nMinBufferLength$ = 8					; size = 4
?GetBuffer@?$CSimpleStringT@D$0A@@ATL@@QAEPADH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::GetBuffer, COMDAT
; _this$ = ecx

; 489  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 490  : 		return( PrepareWrite( nMinBufferLength ) );

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00008	83 e8 10	 sub	 eax, 16			; 00000010H
  0000b	b9 01 00 00 00	 mov	 ecx, 1
  00010	2b ca		 sub	 ecx, edx
  00012	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00015	8b 44 24 08	 mov	 eax, DWORD PTR _nMinBufferLength$[esp]
  00019	2b d0		 sub	 edx, eax
  0001b	0b ca		 or	 ecx, edx
  0001d	7d 08		 jge	 SHORT $L97209
  0001f	50		 push	 eax
  00020	8b ce		 mov	 ecx, esi
  00022	e8 00 00 00 00	 call	 ?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<char,0>::PrepareWrite2
$L97209:
  00027	8b 06		 mov	 eax, DWORD PTR [esi]
  00029	5e		 pop	 esi

; 491  : 	}

  0002a	c2 04 00	 ret	 4
?GetBuffer@?$CSimpleStringT@D$0A@@ATL@@QAEPADH@Z ENDP	; ATL::CSimpleStringT<char,0>::GetBuffer
_TEXT	ENDS
PUBLIC	?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::SetString
; Function compile flags: /Ogty
;	COMDAT ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z
_TEXT	SEGMENT
_pszSrc$ = 8						; size = 4
_nLength$ = 12						; size = 4
?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::SetString, COMDAT
; _this$ = ecx

; 583  : 	{

  00000	53		 push	 ebx

; 584  : 		if( nLength == 0 )

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR _nLength$[esp]
  00005	85 db		 test	 ebx, ebx
  00007	55		 push	 ebp
  00008	8b e9		 mov	 ebp, ecx
  0000a	75 0a		 jne	 SHORT $L94886

; 585  : 		{
; 586  : 			Empty();

  0000c	e8 00 00 00 00	 call	 ?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ ; ATL::CSimpleStringT<char,0>::Empty
  00011	5d		 pop	 ebp
  00012	5b		 pop	 ebx

; 614  : 		}
; 615  : 	}

  00013	c2 08 00	 ret	 8
$L94886:

; 587  : 		}
; 588  : 		else
; 589  : 		{
; 590  : 			// It is possible that pszSrc points to a location inside of our 
; 591  : 			// buffer.  GetBuffer() might change m_pszData if (1) the buffer 
; 592  : 			// is shared or (2) the buffer is too small to hold the new 
; 593  : 			// string.  We detect this aliasing, and modify pszSrc to point
; 594  : 			// into the newly allocated buffer instead.
; 595  : 			
; 596  : 			if(pszSrc == NULL)

  00016	8b 54 24 0c	 mov	 edx, DWORD PTR _pszSrc$[esp+4]
  0001a	85 d2		 test	 edx, edx
  0001c	75 0a		 jne	 SHORT $L94888

; 612  : 			}
; 613  : 			ReleaseBufferSetLength( nLength );

$L97277:
  0001e	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00023	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L97285:
$L94888:

; 597  : 				AtlThrow(E_INVALIDARG);			
; 598  : 				
; 599  : 			UINT nOldLength = GetLength();

  00028	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  0002b	56		 push	 esi

; 600  : 			UINT_PTR nOffset = pszSrc-GetString();

  0002c	8b f2		 mov	 esi, edx
  0002e	2b f0		 sub	 esi, eax

; 601  : 			// If 0 <= nOffset <= nOldLength, then pszSrc points into our 
; 602  : 			// buffer
; 603  : 
; 604  : 			PXSTR pszBuffer = GetBuffer( nLength );

  00030	b9 01 00 00 00	 mov	 ecx, 1
  00035	2b 48 fc	 sub	 ecx, DWORD PTR [eax-4]
  00038	57		 push	 edi
  00039	8b 78 f4	 mov	 edi, DWORD PTR [eax-12]
  0003c	8b 40 f8	 mov	 eax, DWORD PTR [eax-8]
  0003f	2b c3		 sub	 eax, ebx
  00041	0b c8		 or	 ecx, eax
  00043	7d 0c		 jge	 SHORT $L97246
  00045	53		 push	 ebx
  00046	8b cd		 mov	 ecx, ebp
  00048	e8 00 00 00 00	 call	 ?PrepareWrite2@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ; ATL::CSimpleStringT<char,0>::PrepareWrite2
  0004d	8b 54 24 14	 mov	 edx, DWORD PTR _pszSrc$[esp+12]
$L97246:

; 605  : 			if( nOffset <= nOldLength )

  00051	3b f7		 cmp	 esi, edi
  00053	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  00056	77 10		 ja	 SHORT $L94893

; 606  : 			{
; 607  : 				CopyCharsOverlapped( pszBuffer, pszBuffer+nOffset, nLength );

  00058	53		 push	 ebx
  00059	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  0005c	51		 push	 ecx
  0005d	50		 push	 eax
  0005e	e8 00 00 00 00	 call	 _memmove
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH

; 608  : 			}
; 609  : 			else

  00066	eb 14		 jmp	 SHORT $L97254
$L94893:

; 610  : 			{
; 611  : 				CopyChars( pszBuffer, pszSrc, nLength );

  00068	8b cb		 mov	 ecx, ebx
  0006a	8b f2		 mov	 esi, edx
  0006c	8b d1		 mov	 edx, ecx
  0006e	c1 e9 02	 shr	 ecx, 2
  00071	8b f8		 mov	 edi, eax
  00073	f3 a5		 rep movsd
  00075	8b ca		 mov	 ecx, edx
  00077	83 e1 03	 and	 ecx, 3
  0007a	f3 a4		 rep movsb
$L97254:

; 612  : 			}
; 613  : 			ReleaseBufferSetLength( nLength );

  0007c	85 db		 test	 ebx, ebx
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	7c 9c		 jl	 SHORT $L97277
  00082	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  00085	3b 58 f8	 cmp	 ebx, DWORD PTR [eax-8]
  00088	7f 94		 jg	 SHORT $L97277
  0008a	89 58 f4	 mov	 DWORD PTR [eax-12], ebx
  0008d	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  00090	5d		 pop	 ebp
  00091	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0
  00095	5b		 pop	 ebx

; 614  : 		}
; 615  : 	}

  00096	c2 08 00	 ret	 8
$L97284:
?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ENDP	; ATL::CSimpleStringT<char,0>::SetString
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UtagPATCHFILE@@@std@@QAEXPAUtagPATCHFILE@@ABU3@@Z ; std::allocator<tagPATCHFILE>::construct
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?construct@?$allocator@UtagPATCHFILE@@@std@@QAEXPAUtagPATCHFILE@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UtagPATCHFILE@@@std@@QAEXPAUtagPATCHFILE@@ABU3@@Z PROC NEAR ; std::allocator<tagPATCHFILE>::construct, COMDAT
; _this$ = ecx

; 147  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Val$[esp-4]
  00004	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00008	50		 push	 eax
  00009	51		 push	 ecx
  0000a	e8 00 00 00 00	 call	 ??$_Construct@UtagPATCHFILE@@U1@@std@@YAXPAUtagPATCHFILE@@ABU1@@Z ; std::_Construct<tagPATCHFILE,tagPATCHFILE>
  0000f	83 c4 08	 add	 esp, 8

; 148  : 		}

  00012	c2 08 00	 ret	 8
?construct@?$allocator@UtagPATCHFILE@@@std@@QAEXPAUtagPATCHFILE@@ABU3@@Z ENDP ; std::allocator<tagPATCHFILE>::construct
_TEXT	ENDS
PUBLIC	??$_Destroy@UtagPATCHFILE@@@std@@YAXPAUtagPATCHFILE@@@Z ; std::_Destroy<tagPATCHFILE>
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy@UtagPATCHFILE@@@std@@YAXPAUtagPATCHFILE@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UtagPATCHFILE@@@std@@YAXPAUtagPATCHFILE@@@Z PROC NEAR ; std::_Destroy<tagPATCHFILE>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	e9 00 00 00 00	 jmp	 ??1tagPATCHFILE@@QAE@XZ
??$_Destroy@UtagPATCHFILE@@@std@@YAXPAUtagPATCHFILE@@@Z ENDP ; std::_Destroy<tagPATCHFILE>
_TEXT	ENDS
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
EXTRN	??1exception@@UAE@XZ:NEAR			; exception::~exception
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:NEAR		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_7logic_error@std@@6B@
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
CONST	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC NEAR			; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 23   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L97357
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L97357:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC NEAR		; std::logic_error::what, COMDAT
; _this$ = ecx

; 27   : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L97389
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  00009	c3		 ret	 0

; 27   : 		return (_Str.c_str());

$L97389:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  0000d	c3		 ret	 0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC NEAR		; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1logic_error@std@@UAE@XZ ; std::logic_error::~logic_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L97397
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L97397:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 590  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 591  : 		if (_Right.size() < _Roff)

  00003	8b 74 24 14	 mov	 esi, DWORD PTR __Roff$[esp+8]
  00007	57		 push	 edi
  00008	8b 7c 24 14	 mov	 edi, DWORD PTR __Right$[esp+12]
  0000c	39 77 14	 cmp	 DWORD PTR [edi+20], esi
  0000f	8b d9		 mov	 ebx, ecx
  00011	73 05		 jae	 SHORT $L92499

; 592  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L92499:

; 593  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 6f 14	 mov	 ebp, DWORD PTR [edi+20]

; 594  : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b ee		 sub	 ebp, esi
  00021	3b c5		 cmp	 eax, ebp
  00023	73 02		 jae	 SHORT $L92501

; 595  : 			_Num = _Count;	// trim _Num to size

  00025	8b e8		 mov	 ebp, eax
$L92501:

; 596  : 
; 597  : 		if (this == &_Right)

  00027	3b df		 cmp	 ebx, edi
  00029	75 1f		 jne	 SHORT $L92502

; 598  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 ee		 add	 ebp, esi
  0002f	55		 push	 ebp
  00030	8b cb		 mov	 ecx, ebx
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	56		 push	 esi
  00038	6a 00		 push	 0
  0003a	8b cb		 mov	 ecx, ebx
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00044	8b c3		 mov	 eax, ebx
  00046	5b		 pop	 ebx

; 605  : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$L92502:

; 599  : 		else if (_Grow(_Num))

  0004a	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  0004d	76 07		 jbe	 SHORT $L97548
  0004f	8b cb		 mov	 ecx, ebx
  00051	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L97548:
  00056	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00059	3b c5		 cmp	 eax, ebp
  0005b	73 21		 jae	 SHORT $L97549
  0005d	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00060	50		 push	 eax
  00061	55		 push	 ebp
  00062	8b cb		 mov	 ecx, ebx
  00064	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00069	85 ed		 test	 ebp, ebp
$L97594:
  0006b	76 6d		 jbe	 SHORT $L97593

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  0006d	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00070	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00075	3b c8		 cmp	 ecx, eax
  00077	72 2f		 jb	 SHORT $L97558
  00079	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0007c	eb 2d		 jmp	 SHORT $L97559

; 599  : 		else if (_Grow(_Num))

$L97549:
  0007e	85 ed		 test	 ebp, ebp
  00080	75 e9		 jne	 SHORT $L97594
  00082	83 f8 10	 cmp	 eax, 16			; 00000010H
  00085	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00088	72 0f		 jb	 SHORT $L97541
  0008a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	c6 00 00	 mov	 BYTE PTR [eax], 0
  00092	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00093	8b c3		 mov	 eax, ebx
  00095	5b		 pop	 ebx

; 605  : 		}

  00096	c2 0c 00	 ret	 12			; 0000000cH

; 599  : 		else if (_Grow(_Num))

$L97541:
  00099	5f		 pop	 edi
  0009a	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  0009d	5e		 pop	 esi
  0009e	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a1	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000a2	8b c3		 mov	 eax, ebx
  000a4	5b		 pop	 ebx

; 605  : 		}

  000a5	c2 0c 00	 ret	 12			; 0000000cH

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

$L97558:
  000a8	8d 57 04	 lea	 edx, DWORD PTR [edi+4]
$L97559:
  000ab	39 43 18	 cmp	 DWORD PTR [ebx+24], eax
  000ae	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000b1	72 04		 jb	 SHORT $L97565
  000b3	8b 38		 mov	 edi, DWORD PTR [eax]
  000b5	eb 02		 jmp	 SHORT $L97566
$L97565:
  000b7	8b f8		 mov	 edi, eax
$L97566:
  000b9	03 f2		 add	 esi, edx
  000bb	8b cd		 mov	 ecx, ebp
  000bd	8b d1		 mov	 edx, ecx
  000bf	c1 e9 02	 shr	 ecx, 2
  000c2	f3 a5		 rep movsd
  000c4	8b ca		 mov	 ecx, edx
  000c6	83 e1 03	 and	 ecx, 3
  000c9	f3 a4		 rep movsb

; 602  : 			_Eos(_Num);

  000cb	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000cf	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000d2	72 02		 jb	 SHORT $L97588
  000d4	8b 00		 mov	 eax, DWORD PTR [eax]
$L97588:
  000d6	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L97593:
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000dd	8b c3		 mov	 eax, ebx
  000df	5b		 pop	 ebx

; 605  : 		}

  000e0	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Num$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 608  : 		{	// assign [_Ptr, _Ptr + _Num)

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 609  : 		if (_Inside(_Ptr))

  00003	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  00006	83 fa 10	 cmp	 edx, 16			; 00000010H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	72 05		 jb	 SHORT $L97615
  0000d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00010	eb 03		 jmp	 SHORT $L97616
$L97615:
  00012	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$L97616:
  00015	8b 74 24 10	 mov	 esi, DWORD PTR __Ptr$[esp+8]
  00019	3b f0		 cmp	 esi, eax
  0001b	72 34		 jb	 SHORT $L92788
  0001d	83 fa 10	 cmp	 edx, 16			; 00000010H
  00020	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00023	72 04		 jb	 SHORT $L97619
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	eb 02		 jmp	 SHORT $L97620
$L97619:
  00029	8b c8		 mov	 ecx, eax
$L97620:
  0002b	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  0002e	03 f9		 add	 edi, ecx
  00030	3b fe		 cmp	 edi, esi
  00032	76 1d		 jbe	 SHORT $L92788

; 610  : 			return (assign(*this, _Ptr - _Myptr(), _Num));	// substring

  00034	83 fa 10	 cmp	 edx, 16			; 00000010H
  00037	72 02		 jb	 SHORT $L97632
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$L97632:
  0003b	8b 4c 24 14	 mov	 ecx, DWORD PTR __Num$[esp+8]
  0003f	51		 push	 ecx
  00040	2b f0		 sub	 esi, eax
  00042	56		 push	 esi
  00043	53		 push	 ebx
  00044	8b cb		 mov	 ecx, ebx
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx

; 618  : 		}

  0004e	c2 08 00	 ret	 8
$L92788:
  00051	55		 push	 ebp

; 611  : 
; 612  : 		if (_Grow(_Num))

  00052	8b 6c 24 18	 mov	 ebp, DWORD PTR __Num$[esp+12]
  00056	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  00059	76 07		 jbe	 SHORT $L97773
  0005b	8b cb		 mov	 ecx, ebx
  0005d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L97773:
  00062	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00065	3b c5		 cmp	 eax, ebp
  00067	73 1b		 jae	 SHORT $L97774
  00069	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  0006c	52		 push	 edx
  0006d	55		 push	 ebp
  0006e	8b cb		 mov	 ecx, ebx
  00070	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00075	85 ed		 test	 ebp, ebp
$L97812:
  00077	76 68		 jbe	 SHORT $L97809

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

  00079	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0007d	72 2f		 jb	 SHORT $L97783
  0007f	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00082	eb 2d		 jmp	 SHORT $L97784

; 611  : 
; 612  : 		if (_Grow(_Num))

$L97774:
  00084	85 ed		 test	 ebp, ebp
  00086	75 ef		 jne	 SHORT $L97812
  00088	83 f8 10	 cmp	 eax, 16			; 00000010H
  0008b	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  0008e	72 0f		 jb	 SHORT $L97766
  00090	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00093	5d		 pop	 ebp
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0
  00098	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  00099	8b c3		 mov	 eax, ebx
  0009b	5b		 pop	 ebx

; 618  : 		}

  0009c	c2 08 00	 ret	 8

; 611  : 
; 612  : 		if (_Grow(_Num))

$L97766:
  0009f	5d		 pop	 ebp
  000a0	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000a3	5f		 pop	 edi
  000a4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a7	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000a8	8b c3		 mov	 eax, ebx
  000aa	5b		 pop	 ebx

; 618  : 		}

  000ab	c2 08 00	 ret	 8

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

$L97783:
  000ae	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
$L97784:
  000b1	8b cd		 mov	 ecx, ebp
  000b3	8b c1		 mov	 eax, ecx
  000b5	c1 e9 02	 shr	 ecx, 2
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb

; 615  : 			_Eos(_Num);

  000c1	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000c5	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000c8	72 10		 jb	 SHORT $L97805
  000ca	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000cd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  000d1	5d		 pop	 ebp
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000d4	8b c3		 mov	 eax, ebx
  000d6	5b		 pop	 ebx

; 618  : 		}

  000d7	c2 08 00	 ret	 8

; 615  : 			_Eos(_Num);

$L97805:
  000da	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000dd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L97809:
  000e1	5d		 pop	 ebp
  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000e4	8b c3		 mov	 eax, ebx
  000e6	5b		 pop	 ebx

; 618  : 		}

  000e7	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?OnCT_SERVICEMONITOR_ACK@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z ; CTPatchSvrModule::OnCT_SERVICEMONITOR_ACK
EXTRN	?SendCT_SERVICEMONITOR_REQ@CTPatchSession@@QAEXKKKK@Z:NEAR ; CTPatchSession::SendCT_SERVICEMONITOR_REQ
EXTRN	?CloseSession@CTPatchSvrModule@@IAEXPAVCTPatchSession@@@Z:NEAR ; CTPatchSvrModule::CloseSession
EXTRN	??5CPacket@@QAEAAV0@AAK@Z:NEAR			; CPacket::operator>>
EXTRN	__imp__GetTickCount@0:NEAR
;	COMDAT xdata$x
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\tnetdef.h
xdata$x	SEGMENT
$T97979	DD	0ffffffffH
	DD	FLAT:$L97820
$T97975	DD	019930520H
	DD	01H
	DD	FLAT:$T97979
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\handler.cpp
xdata$x	ENDS
;	COMDAT ?OnCT_SERVICEMONITOR_ACK@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z
_TEXT	SEGMENT
_dwTick$ = -24						; size = 4
_lock_object$ = -20					; size = 8
__$EHRec$ = -12						; size = 12
_pDB$ = 8						; size = 4
_it$ = 12						; size = 4
_pSession$ = 12						; size = 4
?OnCT_SERVICEMONITOR_ACK@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z PROC NEAR ; CTPatchSvrModule::OnCT_SERVICEMONITOR_ACK, COMDAT
; _this$ = ecx

; 6    : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?OnCT_SERVICEMONITOR_ACK@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00018	55		 push	 ebp
  00019	56		 push	 esi

; 7    : 	pSession->m_Recv.m_ptrOffset += sizeof(INT64);

  0001a	8b 74 24 28	 mov	 esi, DWORD PTR _pSession$[esp+28]
  0001e	8b 6e 48	 mov	 ebp, DWORD PTR [esi+72]
  00021	57		 push	 edi

; 8    : 
; 9    : 	DWORD dwTick;
; 10   : 	pSession->m_Recv
; 11   : 		>> dwTick;

  00022	8d 44 24 0c	 lea	 eax, DWORD PTR _dwTick$[esp+36]
  00026	8b f9		 mov	 edi, ecx
  00028	83 c5 08	 add	 ebp, 8
  0002b	50		 push	 eax
  0002c	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  0002f	89 6e 48	 mov	 DWORD PTR [esi+72], ebp
  00032	e8 00 00 00 00	 call	 ??5CPacket@@QAEAAV0@AAK@Z ; CPacket::operator>>

; 12   : 
; 13   : 	pSession->SendCT_SERVICEMONITOR_REQ(dwTick, DWORD(m_mapTSESSION.size()), DWORD(m_mapTSESSION.size()),0);

  00037	8b 87 5c 01 00
	00		 mov	 eax, DWORD PTR [edi+348]
  0003d	8b 4c 24 0c	 mov	 ecx, DWORD PTR _dwTick$[esp+36]
  00041	6a 00		 push	 0
  00043	50		 push	 eax
  00044	50		 push	 eax
  00045	51		 push	 ecx
  00046	8b ce		 mov	 ecx, esi
  00048	e8 00 00 00 00	 call	 ?SendCT_SERVICEMONITOR_REQ@CTPatchSession@@QAEXKKKK@Z ; CTPatchSession::SendCT_SERVICEMONITOR_REQ

; 14   : 	pSession->m_bSessionType = SESSION_SERVER;
; 15   : 
; 16   : 	SMART_LOCKCS(&m_csPC);

  0004d	8d af 60 01 00
	00		 lea	 ebp, DWORD PTR [edi+352]
  00053	55		 push	 ebp
  00054	c6 46 0c 02	 mov	 BYTE PTR [esi+12], 2
  00058	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR _lock_object$[esp+40], OFFSET FLAT:??_7CCSLock@@6B@
  00060	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
  00066	89 6c 24 14	 mov	 DWORD PTR _lock_object$[esp+40], ebp

; 17   : 	MAPTSESSION::iterator it;
; 18   : 	for(it=m_mapTSESSION.begin(); it!=m_mapTSESSION.end(); it++)

  0006a	8b 8f 58 01 00
	00		 mov	 ecx, DWORD PTR [edi+344]
  00070	8b 01		 mov	 eax, DWORD PTR [ecx]
  00072	3b c1		 cmp	 eax, ecx
  00074	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+44], 0
  0007c	89 44 24 2c	 mov	 DWORD PTR _it$[esp+32], eax
  00080	74 50		 je	 SHORT $L94105
  00082	53		 push	 ebx
  00083	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__GetTickCount@0
  00089	8d a4 24 00 00
	00 00		 npad	 7
$L97879:

; 19   : 		if((*it).second->m_bSessionType == SESSION_CLIENT &&
; 20   : 			(*it).second->m_dwTick &&
; 21   : 			GetTickCount() - (*it).second->m_dwTick > 1000 * 60)

  00090	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00093	80 79 0c 01	 cmp	 BYTE PTR [ecx+12], 1
  00097	75 23		 jne	 SHORT $L94104
  00099	8b 91 d0 00 08
	00		 mov	 edx, DWORD PTR [ecx+524496]
  0009f	85 d2		 test	 edx, edx
  000a1	74 19		 je	 SHORT $L94104
  000a3	8b f1		 mov	 esi, ecx
  000a5	ff d3		 call	 ebx
  000a7	2b 86 d0 00 08
	00		 sub	 eax, DWORD PTR [esi+524496]
  000ad	3d 60 ea 00 00	 cmp	 eax, 60000		; 0000ea60H
  000b2	76 08		 jbe	 SHORT $L94104

; 22   : 			CloseSession((*it).second);

  000b4	56		 push	 esi
  000b5	8b cf		 mov	 ecx, edi
  000b7	e8 00 00 00 00	 call	 ?CloseSession@CTPatchSvrModule@@IAEXPAVCTPatchSession@@@Z ; CTPatchSvrModule::CloseSession
$L94104:
  000bc	8d 4c 24 30	 lea	 ecx, DWORD PTR _it$[esp+36]
  000c0	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCTPatchSession@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCTPatchSession@@@std@@@3@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned long,CTPatchSession *,std::less<unsigned long>,std::allocator<std::pair<unsigned long const ,CTPatchSession *> >,0> >::const_iterator::_Inc
  000c5	8b 44 24 30	 mov	 eax, DWORD PTR _it$[esp+36]
  000c9	3b 87 58 01 00
	00		 cmp	 eax, DWORD PTR [edi+344]
  000cf	75 bf		 jne	 SHORT $L97879
  000d1	5b		 pop	 ebx
$L94105:

; 23   : 
; 24   : 	return EC_NOERROR;

  000d2	55		 push	 ebp
  000d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 25   : }

  000d9	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	33 c0		 xor	 eax, eax
  000e1	5d		 pop	 ebp
  000e2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000e9	83 c4 18	 add	 esp, 24			; 00000018H
  000ec	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L97820:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _lock_object$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CCSLock@@UAE@XZ	; CCSLock::~CCSLock
__ehhandler$?OnCT_SERVICEMONITOR_ACK@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T97975
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?OnCT_SERVICEMONITOR_ACK@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z ENDP ; CTPatchSvrModule::OnCT_SERVICEMONITOR_ACK
PUBLIC	??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CSimpleStringT<char,0>::operator=
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_strSrc$ = 8						; size = 4
??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::operator=, COMDAT
; _this$ = ecx

; 274  : 		CStringData* pSrcData = strSrc.GetData();

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _strSrc$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	8b 08		 mov	 ecx, DWORD PTR [eax]

; 275  : 		CStringData* pOldData = GetData();

  0000a	8b 37		 mov	 esi, DWORD PTR [edi]
  0000c	8d 41 f0	 lea	 eax, DWORD PTR [ecx-16]
  0000f	83 ee 10	 sub	 esi, 16			; 00000010H

; 276  : 		if( pSrcData != pOldData)

  00012	3b c6		 cmp	 eax, esi
  00014	74 4d		 je	 SHORT $L98019

; 277  : 		{
; 278  : 			if( pOldData->IsLocked() || pSrcData->pStringMgr != pOldData->pStringMgr )

  00016	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00019	85 d2		 test	 edx, edx
  0001b	53		 push	 ebx
  0001c	8d 5e 0c	 lea	 ebx, DWORD PTR [esi+12]
  0001f	55		 push	 ebp
  00020	7c 33		 jl	 SHORT $L94794
  00022	8b 10		 mov	 edx, DWORD PTR [eax]
  00024	3b 16		 cmp	 edx, DWORD PTR [esi]
  00026	75 2d		 jne	 SHORT $L94794

; 281  : 			}
; 282  : 			else
; 283  : 			{
; 284  : 				CStringData* pNewData = CloneData( pSrcData );

  00028	50		 push	 eax
  00029	e8 00 00 00 00	 call	 ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData
  0002e	8b e8		 mov	 ebp, eax
  00030	83 c4 04	 add	 esp, 4

; 285  : 				pOldData->Release();

  00033	83 c8 ff	 or	 eax, -1
  00036	f0 0f c1 03	 lock	  xadd	 DWORD PTR [ebx], eax
  0003a	48		 dec	 eax
  0003b	85 c0		 test	 eax, eax
  0003d	7f 08		 jg	 SHORT $L98010
  0003f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00041	8b 11		 mov	 edx, DWORD PTR [ecx]
  00043	56		 push	 esi
  00044	ff 52 04	 call	 DWORD PTR [edx+4]
$L98010:

; 286  : 				Attach( pNewData );

  00047	83 c5 10	 add	 ebp, 16			; 00000010H
  0004a	89 2f		 mov	 DWORD PTR [edi], ebp
  0004c	5d		 pop	 ebp
  0004d	5b		 pop	 ebx

; 287  : 			}
; 288  : 		}
; 289  : 
; 290  : 		return( *this );

  0004e	8b c7		 mov	 eax, edi
  00050	5f		 pop	 edi
  00051	5e		 pop	 esi

; 291  : 	}

  00052	c2 04 00	 ret	 4
$L94794:

; 279  : 			{
; 280  : 				SetString( strSrc.GetString(), strSrc.GetLength() );

  00055	8b 41 f4	 mov	 eax, DWORD PTR [ecx-12]
  00058	50		 push	 eax
  00059	51		 push	 ecx
  0005a	8b cf		 mov	 ecx, edi
  0005c	e8 00 00 00 00	 call	 ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::SetString
  00061	5d		 pop	 ebp
  00062	5b		 pop	 ebx
$L98019:

; 287  : 			}
; 288  : 		}
; 289  : 
; 290  : 		return( *this );

  00063	8b c7		 mov	 eax, edi
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi

; 291  : 	}

  00067	c2 04 00	 ret	 4
??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z ENDP	; ATL::CSimpleStringT<char,0>::operator=
_TEXT	ENDS
PUBLIC	?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBD@Z ; ATL::CSimpleStringT<char,0>::SetString
; Function compile flags: /Ogty
;	COMDAT ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBD@Z
_TEXT	SEGMENT
_pszSrc$ = 8						; size = 4
?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBD@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::SetString, COMDAT
; _this$ = ecx

; 579  : 	{

  00000	56		 push	 esi

; 580  : 		SetString( pszSrc, StringLength( pszSrc ) );

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _pszSrc$[esp]
  00005	85 f6		 test	 esi, esi
  00007	75 0d		 jne	 SHORT $L98029
  00009	33 c0		 xor	 eax, eax
  0000b	50		 push	 eax
  0000c	56		 push	 esi
  0000d	e8 00 00 00 00	 call	 ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::SetString
  00012	5e		 pop	 esi

; 581  : 	}

  00013	c2 04 00	 ret	 4

; 580  : 		SetString( pszSrc, StringLength( pszSrc ) );

$L98029:
  00016	8b c6		 mov	 eax, esi
  00018	57		 push	 edi
  00019	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001c	8d 64 24 00	 npad	 4
$L98031:
  00020	8a 10		 mov	 dl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 d2		 test	 dl, dl
  00025	75 f9		 jne	 SHORT $L98031
  00027	2b c7		 sub	 eax, edi
  00029	5f		 pop	 edi
  0002a	50		 push	 eax
  0002b	56		 push	 esi
  0002c	e8 00 00 00 00	 call	 ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::SetString
  00031	5e		 pop	 esi

; 581  : 	}

  00032	c2 04 00	 ret	 4
?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBD@Z ENDP	; ATL::CSimpleStringT<char,0>::SetString
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UtagPATCHFILE@@@std@@QAEXPAUtagPATCHFILE@@@Z ; std::allocator<tagPATCHFILE>::destroy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?destroy@?$allocator@UtagPATCHFILE@@@std@@QAEXPAUtagPATCHFILE@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UtagPATCHFILE@@@std@@QAEXPAUtagPATCHFILE@@@Z PROC NEAR ; std::allocator<tagPATCHFILE>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	e8 00 00 00 00	 call	 ??1tagPATCHFILE@@QAE@XZ

; 153  : 		}

  00009	c2 04 00	 ret	 4
?destroy@?$allocator@UtagPATCHFILE@@@std@@QAEXPAUtagPATCHFILE@@@Z ENDP ; std::allocator<tagPATCHFILE>::destroy
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUtagPATCHFILE@@PAU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAPAUtagPATCHFILE@@PAU1@00AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<tagPATCHFILE *,tagPATCHFILE *,std::allocator<tagPATCHFILE> >
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
xdata$x	SEGMENT
$T98246	DD	0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:$L98056
	DD	0ffffffffH
	DD	00H
$T98248	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L98049
$T98247	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:$T98248
$T98240	DD	019930520H
	DD	03H
	DD	FLAT:$T98246
	DD	01H
	DD	FLAT:$T98247
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagPATCHFILE@@PAU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAPAUtagPATCHFILE@@PAU1@00AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
$T98073 = 8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PAUtagPATCHFILE@@PAU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAPAUtagPATCHFILE@@PAU1@00AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_copy<tagPATCHFILE *,tagPATCHFILE *,std::allocator<tagPATCHFILE> >, COMDAT

; 77   : 	{	// copy [_First, _Last) to raw _Dest, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_copy@PAUtagPATCHFILE@@PAU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAPAUtagPATCHFILE@@PAU1@00AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 08	 sub	 esp, 8
  0001b	53		 push	 ebx
  0001c	56		 push	 esi

; 78   : 	_FwdIt _Next = _Dest;

  0001d	8b 75 10	 mov	 esi, DWORD PTR __Dest$[ebp]
  00020	57		 push	 edi

; 79   : 
; 80   : 	_TRY_BEGIN

  00021	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  00024	33 db		 xor	 ebx, ebx
  00026	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00029	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  0002c	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  0002f	90		 npad	 1
$L95373:

; 81   : 	for (; _First != _Last; ++_Dest, ++_First)

  00030	3b 7d 0c	 cmp	 edi, DWORD PTR __Last$[ebp]
  00033	74 75		 je	 SHORT $L95375

; 82   : 		_Al.construct(_Dest, *_First);

  00035	89 75 08	 mov	 DWORD PTR $T98073[ebp], esi
  00038	3b f3		 cmp	 esi, ebx
  0003a	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0003e	74 08		 je	 SHORT $L98074
  00040	57		 push	 edi
  00041	8b ce		 mov	 ecx, esi
  00043	e8 00 00 00 00	 call	 ??0tagPATCHFILE@@QAE@ABU0@@Z
$L98074:
  00048	83 c6 14	 add	 esi, 20			; 00000014H
  0004b	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  0004e	89 75 10	 mov	 DWORD PTR __Dest$[ebp], esi
  00051	83 c7 14	 add	 edi, 20			; 00000014H
  00054	eb da		 jmp	 SHORT $L95373
$L98049:

; 83   : 	_CATCH_ALL
; 84   : 	for (; _Next != _Dest; ++_Next)

  00056	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00059	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  0005c	3b f7		 cmp	 esi, edi
  0005e	74 41		 je	 SHORT $L95378
$L95376:

; 85   : 		_Al.destroy(_Next);

  00060	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00063	83 e8 10	 sub	 eax, 16			; 00000010H
  00066	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00069	83 ca ff	 or	 edx, -1
  0006c	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00070	4a		 dec	 edx
  00071	85 d2		 test	 edx, edx
  00073	7f 08		 jg	 SHORT $L98227
  00075	8b 08		 mov	 ecx, DWORD PTR [eax]
  00077	8b 11		 mov	 edx, DWORD PTR [ecx]
  00079	50		 push	 eax
  0007a	ff 52 04	 call	 DWORD PTR [edx+4]
$L98227:
  0007d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00080	83 e8 10	 sub	 eax, 16			; 00000010H
  00083	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00086	83 ca ff	 or	 edx, -1
  00089	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0008d	4a		 dec	 edx
  0008e	85 d2		 test	 edx, edx
  00090	7f 08		 jg	 SHORT $L98237
  00092	8b 08		 mov	 ecx, DWORD PTR [eax]
  00094	8b 11		 mov	 edx, DWORD PTR [ecx]
  00096	50		 push	 eax
  00097	ff 52 04	 call	 DWORD PTR [edx+4]
$L98237:
  0009a	83 c6 14	 add	 esi, 20			; 00000014H
  0009d	3b f7		 cmp	 esi, edi
  0009f	75 bf		 jne	 SHORT $L95376
$L95378:

; 86   : 	_RERAISE;

  000a1	33 db		 xor	 ebx, ebx
  000a3	53		 push	 ebx
  000a4	53		 push	 ebx
  000a5	e8 00 00 00 00	 call	 __CxxThrowException@8
$L98249:
$L95375:

; 87   : 	_CATCH_END
; 88   : 	return (_Dest);
; 89   : 	}

  000aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ad	5f		 pop	 edi
  000ae	8b c6		 mov	 eax, esi
  000b0	5e		 pop	 esi
  000b1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000b8	5b		 pop	 ebx
  000b9	8b e5		 mov	 esp, ebp
  000bb	5d		 pop	 ebp
  000bc	c3		 ret	 0
$L98245:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L98056:
  00000	8b 45 10	 mov	 eax, DWORD PTR __Dest$[ebp]
  00003	50		 push	 eax
  00004	8b 4d 08	 mov	 ecx, DWORD PTR $T98073[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Uninit_copy@PAUtagPATCHFILE@@PAU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAPAUtagPATCHFILE@@PAU1@00AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00011	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T98240
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$_Uninit_copy@PAUtagPATCHFILE@@PAU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAPAUtagPATCHFILE@@PAU1@00AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<tagPATCHFILE *,tagPATCHFILE *,std::allocator<tagPATCHFILE> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 323  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 324  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 325  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 326  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 621  : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 622  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$L98323:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $L98323
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 623  : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::operator=
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_strSrc$ = 8						; size = 4
??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@ABV01@@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::operator=, COMDAT
; _this$ = ecx

; 968  : 		CThisSimpleString::operator=( strSrc );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _strSrc$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CSimpleStringT<char,0>::operator=

; 969  : 
; 970  : 		return( *this );

  0000d	8b c6		 mov	 eax, esi
  0000f	5e		 pop	 esi

; 971  : 	}

  00010	c2 04 00	 ret	 4
??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@ABV01@@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::operator=
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 361  : 		_Tidy();
; 362  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$L98401:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $L98401
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 363  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@PBD@Z	; ATL::CSimpleStringT<char,0>::operator=
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
_pszSrc$ = 8						; size = 4
??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@PBD@Z PROC NEAR	; ATL::CSimpleStringT<char,0>::operator=, COMDAT
; _this$ = ecx

; 316  : 		SetString( pszSrc );

  00000	8b 54 24 04	 mov	 edx, DWORD PTR _pszSrc$[esp-4]
  00004	85 d2		 test	 edx, edx
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
  00009	75 0f		 jne	 SHORT $L98414
  0000b	33 c0		 xor	 eax, eax
  0000d	50		 push	 eax
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::SetString

; 317  : 
; 318  : 		return( *this );

  00014	8b c7		 mov	 eax, edi
  00016	5f		 pop	 edi

; 319  : 	}

  00017	c2 04 00	 ret	 4

; 316  : 		SetString( pszSrc );

$L98414:
  0001a	8b c2		 mov	 eax, edx
  0001c	56		 push	 esi
  0001d	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$L98416:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $L98416
  00027	2b c6		 sub	 eax, esi
  00029	5e		 pop	 esi
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	8b cf		 mov	 ecx, edi
  0002e	e8 00 00 00 00	 call	 ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::SetString

; 317  : 
; 318  : 		return( *this );

  00033	8b c7		 mov	 eax, edi
  00035	5f		 pop	 edi

; 319  : 	}

  00036	c2 04 00	 ret	 4
??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@PBD@Z ENDP	; ATL::CSimpleStringT<char,0>::operator=
_TEXT	ENDS
PUBLIC	??4tagPATCHFILE@@QAEAAU0@ABU0@@Z		; tagPATCHFILE::operator=
; Function compile flags: /Ogty
;	COMDAT ??4tagPATCHFILE@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4tagPATCHFILE@@QAEAAU0@ABU0@@Z PROC NEAR		; tagPATCHFILE::operator=, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR ___that$[esp+4]
  00006	8b 07		 mov	 eax, DWORD PTR [edi]
  00008	8b f1		 mov	 esi, ecx
  0000a	8d 4f 04	 lea	 ecx, DWORD PTR [edi+4]
  0000d	51		 push	 ecx
  0000e	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00011	89 06		 mov	 DWORD PTR [esi], eax
  00013	e8 00 00 00 00	 call	 ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CSimpleStringT<char,0>::operator=
  00018	8d 57 08	 lea	 edx, DWORD PTR [edi+8]
  0001b	52		 push	 edx
  0001c	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  0001f	e8 00 00 00 00	 call	 ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CSimpleStringT<char,0>::operator=
  00024	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00027	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0002a	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  0002d	5f		 pop	 edi
  0002e	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
  00031	8b c6		 mov	 eax, esi
  00033	5e		 pop	 esi
  00034	c2 04 00	 ret	 4
??4tagPATCHFILE@@QAEAAU0@ABU0@@Z ENDP			; tagPATCHFILE::operator=
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUtagPATCHFILE@@IU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAXPAUtagPATCHFILE@@IABU1@AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<tagPATCHFILE *,unsigned int,tagPATCHFILE,std::allocator<tagPATCHFILE> >
;	COMDAT xdata$x
xdata$x	SEGMENT
$T98629	DD	0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:$L98439
	DD	0ffffffffH
	DD	00H
$T98631	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L98432
$T98630	DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:$T98631
$T98623	DD	019930520H
	DD	03H
	DD	FLAT:$T98629
	DD	01H
	DD	FLAT:$T98630
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\memory
xdata$x	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagPATCHFILE@@IU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAXPAUtagPATCHFILE@@IABU1@AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Next$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__First$ = 8						; size = 4
$T98455 = 12						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_fill_n@PAUtagPATCHFILE@@IU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAXPAUtagPATCHFILE@@IABU1@AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_fill_n<tagPATCHFILE *,unsigned int,tagPATCHFILE,std::allocator<tagPATCHFILE> >, COMDAT

; 207  : 	{	// copy _Count *_Val to raw _First, using _Al, arbitrary type

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Uninit_fill_n@PAUtagPATCHFILE@@IU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAXPAUtagPATCHFILE@@IABU1@AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 08	 sub	 esp, 8
  0001b	53		 push	 ebx
  0001c	56		 push	 esi

; 208  : 	_FwdIt _Next = _First;

  0001d	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00020	57		 push	 edi

; 209  : 
; 210  : 	_TRY_BEGIN

  00021	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00024	33 db		 xor	 ebx, ebx
  00026	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00029	89 75 ec	 mov	 DWORD PTR __Next$[ebp], esi
  0002c	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ebx
  0002f	90		 npad	 1
$L95302:

; 211  : 	for (; 0 < _Count; --_Count, ++_First)

  00030	3b fb		 cmp	 edi, ebx
  00032	76 76		 jbe	 SHORT $L95304

; 212  : 		_Al.construct(_First, _Val);

  00034	89 75 0c	 mov	 DWORD PTR $T98455[ebp], esi
  00037	3b f3		 cmp	 esi, ebx
  00039	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0003d	74 0b		 je	 SHORT $L98456
  0003f	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  00042	50		 push	 eax
  00043	8b ce		 mov	 ecx, esi
  00045	e8 00 00 00 00	 call	 ??0tagPATCHFILE@@QAE@ABU0@@Z
$L98456:
  0004a	4f		 dec	 edi
  0004b	83 c6 14	 add	 esi, 20			; 00000014H
  0004e	88 5d fc	 mov	 BYTE PTR __$EHRec$[ebp+12], bl
  00051	89 75 08	 mov	 DWORD PTR __First$[ebp], esi
  00054	eb da		 jmp	 SHORT $L95302
$L98432:

; 213  : 	_CATCH_ALL
; 214  : 	for (; _Next != _First; ++_Next)

  00056	8b 75 ec	 mov	 esi, DWORD PTR __Next$[ebp]
  00059	8b 7d 08	 mov	 edi, DWORD PTR __First$[ebp]
  0005c	3b f7		 cmp	 esi, edi
  0005e	74 41		 je	 SHORT $L95307
$L95305:

; 215  : 		_Al.destroy(_Next);

  00060	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00063	83 e8 10	 sub	 eax, 16			; 00000010H
  00066	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00069	83 ca ff	 or	 edx, -1
  0006c	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00070	4a		 dec	 edx
  00071	85 d2		 test	 edx, edx
  00073	7f 08		 jg	 SHORT $L98607
  00075	8b 08		 mov	 ecx, DWORD PTR [eax]
  00077	8b 11		 mov	 edx, DWORD PTR [ecx]
  00079	50		 push	 eax
  0007a	ff 52 04	 call	 DWORD PTR [edx+4]
$L98607:
  0007d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00080	83 e8 10	 sub	 eax, 16			; 00000010H
  00083	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00086	83 ca ff	 or	 edx, -1
  00089	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0008d	4a		 dec	 edx
  0008e	85 d2		 test	 edx, edx
  00090	7f 08		 jg	 SHORT $L98618
  00092	8b 08		 mov	 ecx, DWORD PTR [eax]
  00094	8b 11		 mov	 edx, DWORD PTR [ecx]
  00096	50		 push	 eax
  00097	ff 52 04	 call	 DWORD PTR [edx+4]
$L98618:
  0009a	83 c6 14	 add	 esi, 20			; 00000014H
  0009d	3b f7		 cmp	 esi, edi
  0009f	75 bf		 jne	 SHORT $L95305
$L95307:

; 216  : 	_RERAISE;

  000a1	33 db		 xor	 ebx, ebx
  000a3	53		 push	 ebx
  000a4	53		 push	 ebx
  000a5	e8 00 00 00 00	 call	 __CxxThrowException@8
$L98632:
$L95304:

; 217  : 	_CATCH_END
; 218  : 	}

  000aa	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000b6	5b		 pop	 ebx
  000b7	8b e5		 mov	 esp, ebp
  000b9	5d		 pop	 ebp
  000ba	c3		 ret	 0
$L98628:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L98439:
  00000	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  00003	50		 push	 eax
  00004	8b 4d 0c	 mov	 ecx, DWORD PTR $T98455[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$??$_Uninit_fill_n@PAUtagPATCHFILE@@IU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAXPAUtagPATCHFILE@@IABU1@AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z:
  00011	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T98623
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$_Uninit_fill_n@PAUtagPATCHFILE@@IU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAXPAUtagPATCHFILE@@IABU1@AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<tagPATCHFILE *,unsigned int,tagPATCHFILE,std::allocator<tagPATCHFILE> >
PUBLIC	??$_Destroy_range@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAXPAUtagPATCHFILE@@0AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<tagPATCHFILE,std::allocator<tagPATCHFILE> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy_range@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAXPAUtagPATCHFILE@@0AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAXPAUtagPATCHFILE@@0AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Destroy_range<tagPATCHFILE,std::allocator<tagPATCHFILE> >, COMDAT

; 224  : 	{	// destroy [_First, _Last), arbitrary type

  00000	56		 push	 esi

; 225  : 	for (; _First != _Last; ++_First)

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 10		 je	 SHORT $L95311
  0000e	8b ff		 npad	 2
$L95309:

; 226  : 		_Al.destroy(_First);

  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1tagPATCHFILE@@QAE@XZ
  00017	83 c6 14	 add	 esi, 20			; 00000014H
  0001a	3b f7		 cmp	 esi, edi
  0001c	75 f2		 jne	 SHORT $L95309
$L95311:
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 227  : 	}

  00020	c3		 ret	 0
??$_Destroy_range@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAXPAUtagPATCHFILE@@0AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<tagPATCHFILE,std::allocator<tagPATCHFILE> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@PAUtagPATCHFILE@@PAU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAPAUtagPATCHFILE@@PAU1@00AAV?$allocator@UtagPATCHFILE@@@0@@Z ; std::_Uninitialized_copy<tagPATCHFILE *,tagPATCHFILE *,std::allocator<tagPATCHFILE> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninitialized_copy@PAUtagPATCHFILE@@PAU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAPAUtagPATCHFILE@@PAU1@00AAV?$allocator@UtagPATCHFILE@@@0@@Z
_TEXT	SEGMENT
__Cat$98663 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAUtagPATCHFILE@@PAU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAPAUtagPATCHFILE@@PAU1@00AAV?$allocator@UtagPATCHFILE@@@0@@Z PROC NEAR ; std::_Uninitialized_copy<tagPATCHFILE *,tagPATCHFILE *,std::allocator<tagPATCHFILE> >, COMDAT

; 126  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 127  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 128  : 		_Ptr_cat(_First, _Dest)));

  00001	8b 04 24	 mov	 eax, DWORD PTR __Cat$98663[esp+4]
  00004	8b 4c 24 14	 mov	 ecx, DWORD PTR __Al$[esp]
  00008	8b 54 24 10	 mov	 edx, DWORD PTR __Dest$[esp]
  0000c	50		 push	 eax
  0000d	8b 44 24 10	 mov	 eax, DWORD PTR __Last$[esp+4]
  00011	51		 push	 ecx
  00012	8b 4c 24 10	 mov	 ecx, DWORD PTR __First$[esp+8]
  00016	52		 push	 edx
  00017	50		 push	 eax
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUtagPATCHFILE@@PAU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAPAUtagPATCHFILE@@PAU1@00AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<tagPATCHFILE *,tagPATCHFILE *,std::allocator<tagPATCHFILE> >

; 129  : 	}

  0001e	83 c4 18	 add	 esp, 24			; 00000018H
  00021	c3		 ret	 0
??$_Uninitialized_copy@PAUtagPATCHFILE@@PAU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAPAUtagPATCHFILE@@PAU1@00AAV?$allocator@UtagPATCHFILE@@@0@@Z ENDP ; std::_Uninitialized_copy<tagPATCHFILE *,tagPATCHFILE *,std::allocator<tagPATCHFILE> >
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUtagPATCHFILE@@PAU1@@std@@YAPAUtagPATCHFILE@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_backward_opt<tagPATCHFILE *,tagPATCHFILE *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAUtagPATCHFILE@@PAU1@@std@@YAPAUtagPATCHFILE@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
_pNewData$98922 = 16					; size = 4
_pNewData$98892 = 16					; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_backward_opt@PAUtagPATCHFILE@@PAU1@@std@@YAPAUtagPATCHFILE@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Copy_backward_opt<tagPATCHFILE *,tagPATCHFILE *>, COMDAT

; 1049 : 	while (_First != _Last)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	57		 push	 edi
  00005	8b 7c 24 0c	 mov	 edi, DWORD PTR __Last$[esp]
  00009	3b c7		 cmp	 eax, edi
  0000b	0f 84 ef 00 00
	00		 je	 $L98924
  00011	53		 push	 ebx
  00012	8b 5c 24 14	 mov	 ebx, DWORD PTR __Dest$[esp+4]
  00016	55		 push	 ebp
  00017	56		 push	 esi
  00018	eb 06 8d 9b 00
	00 00 00	 npad	 8
$L95354:

; 1050 : 		*--_Dest = *--_Last;

  00020	8b 47 ec	 mov	 eax, DWORD PTR [edi-20]
  00023	83 ef 14	 sub	 edi, 20			; 00000014H
  00026	83 eb 14	 sub	 ebx, 20			; 00000014H
  00029	89 03		 mov	 DWORD PTR [ebx], eax
  0002b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0002e	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00031	8d 6b 04	 lea	 ebp, DWORD PTR [ebx+4]
  00034	8d 41 f0	 lea	 eax, DWORD PTR [ecx-16]
  00037	83 ee 10	 sub	 esi, 16			; 00000010H
  0003a	3b c6		 cmp	 eax, esi
  0003c	74 49		 je	 SHORT $L98884
  0003e	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00041	85 d2		 test	 edx, edx
  00043	7c 36		 jl	 SHORT $L98890
  00045	8b 10		 mov	 edx, DWORD PTR [eax]
  00047	3b 16		 cmp	 edx, DWORD PTR [esi]
  00049	75 30		 jne	 SHORT $L98890
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData
  00051	89 44 24 20	 mov	 DWORD PTR _pNewData$98892[esp+16], eax
  00055	83 c4 04	 add	 esp, 4
  00058	83 c9 ff	 or	 ecx, -1
  0005b	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0005e	f0 0f c1 08	 lock	  xadd	 DWORD PTR [eax], ecx
  00062	49		 dec	 ecx
  00063	85 c9		 test	 ecx, ecx
  00065	7f 08		 jg	 SHORT $L98880
  00067	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00069	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006b	56		 push	 esi
  0006c	ff 52 04	 call	 DWORD PTR [edx+4]
$L98880:
  0006f	8b 44 24 1c	 mov	 eax, DWORD PTR _pNewData$98892[esp+12]
  00073	83 c0 10	 add	 eax, 16			; 00000010H
  00076	89 45 00	 mov	 DWORD PTR [ebp], eax
  00079	eb 0c		 jmp	 SHORT $L98884
$L98890:
  0007b	8b 51 f4	 mov	 edx, DWORD PTR [ecx-12]
  0007e	52		 push	 edx
  0007f	51		 push	 ecx
  00080	8b cd		 mov	 ecx, ebp
  00082	e8 00 00 00 00	 call	 ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::SetString
$L98884:
  00087	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  0008a	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]
  0008d	8d 6b 08	 lea	 ebp, DWORD PTR [ebx+8]
  00090	8d 41 f0	 lea	 eax, DWORD PTR [ecx-16]
  00093	83 ee 10	 sub	 esi, 16			; 00000010H
  00096	3b c6		 cmp	 eax, esi
  00098	74 49		 je	 SHORT $L98914
  0009a	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0009d	85 d2		 test	 edx, edx
  0009f	7c 36		 jl	 SHORT $L98920
  000a1	8b 10		 mov	 edx, DWORD PTR [eax]
  000a3	3b 16		 cmp	 edx, DWORD PTR [esi]
  000a5	75 30		 jne	 SHORT $L98920
  000a7	50		 push	 eax
  000a8	e8 00 00 00 00	 call	 ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData
  000ad	89 44 24 20	 mov	 DWORD PTR _pNewData$98922[esp+16], eax
  000b1	83 c4 04	 add	 esp, 4
  000b4	83 c9 ff	 or	 ecx, -1
  000b7	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  000ba	f0 0f c1 08	 lock	  xadd	 DWORD PTR [eax], ecx
  000be	49		 dec	 ecx
  000bf	85 c9		 test	 ecx, ecx
  000c1	7f 08		 jg	 SHORT $L98910
  000c3	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000c5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c7	56		 push	 esi
  000c8	ff 52 04	 call	 DWORD PTR [edx+4]
$L98910:
  000cb	8b 44 24 1c	 mov	 eax, DWORD PTR _pNewData$98922[esp+12]
  000cf	83 c0 10	 add	 eax, 16			; 00000010H
  000d2	89 45 00	 mov	 DWORD PTR [ebp], eax
  000d5	eb 0c		 jmp	 SHORT $L98914
$L98920:
  000d7	8b 51 f4	 mov	 edx, DWORD PTR [ecx-12]
  000da	52		 push	 edx
  000db	51		 push	 ecx
  000dc	8b cd		 mov	 ecx, ebp
  000de	e8 00 00 00 00	 call	 ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::SetString
$L98914:
  000e3	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  000e6	89 43 0c	 mov	 DWORD PTR [ebx+12], eax
  000e9	3b 7c 24 14	 cmp	 edi, DWORD PTR __First$[esp+12]
  000ed	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  000f0	89 4b 10	 mov	 DWORD PTR [ebx+16], ecx
  000f3	0f 85 27 ff ff
	ff		 jne	 $L95354
  000f9	5e		 pop	 esi
  000fa	5d		 pop	 ebp

; 1051 : 	return (_Dest);

  000fb	8b c3		 mov	 eax, ebx
  000fd	5b		 pop	 ebx
  000fe	5f		 pop	 edi

; 1052 : 	}

  000ff	c3		 ret	 0
$L98924:

; 1051 : 	return (_Dest);

  00100	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00104	5f		 pop	 edi

; 1052 : 	}

  00105	c3		 ret	 0
??$_Copy_backward_opt@PAUtagPATCHFILE@@PAU1@@std@@YAPAUtagPATCHFILE@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<tagPATCHFILE *,tagPATCHFILE *>
_TEXT	ENDS
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
EXTRN	??0exception@@QAE@XZ:NEAR			; exception::exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T99027	DD	0ffffffffH
	DD	FLAT:$L98928
$T99025	DD	019930520H
	DD	01H
	DD	FLAT:$T99027
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 19   : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	89 74 24 04	 mov	 DWORD PTR _this$[esp+20], esi
  0001d	e8 00 00 00 00	 call	 ??0exception@@QAE@XZ	; exception::exception
  00022	33 c0		 xor	 eax, eax
  00024	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  0002d	6a ff		 push	 -1
  0002f	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00032	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00039	50		 push	 eax
  0003a	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  0003e	88 41 04	 mov	 BYTE PTR [ecx+4], al
  00041	8b 44 24 20	 mov	 eax, DWORD PTR __Message$[esp+24]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 20   : 		}

  0004b	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  0004f	8b c6		 mov	 eax, esi
  00051	5e		 pop	 esi
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L98928:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T99025
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_Glength_error@std@@UAEPAXI@Z			; std::length_error::`scalar deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:NEAR		; std::length_error::`vector deleting destructor'
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 95   : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@

; 96   : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
; Function compile flags: /Ogty
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC NEAR		; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1length_error@std@@UAE@XZ ; std::length_error::~length_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L99037
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L99037:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC NEAR			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 99   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L99131
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L99131:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
_TEXT	ENDS
PUBLIC	??_C@_0P@BIGOCFAD@CSPPreComplete?$AA@		; `string'
PUBLIC	?OnCT_PREPATCHCOMPLETE_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z ; CTPatchSvrModule::OnCT_PREPATCHCOMPLETE_REQ
EXTRN	?GetQuery@CSqlDatabase@@QAEPAVCSqlQuery@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:NEAR ; CSqlDatabase::GetQuery
EXTRN	?Call@CSqlBase@@QAEHXZ:NEAR			; CSqlBase::Call
;	COMDAT ??_C@_0P@BIGOCFAD@CSPPreComplete?$AA@
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
CONST	SEGMENT
??_C@_0P@BIGOCFAD@CSPPreComplete?$AA@ DB 'CSPPreComplete', 00H ; `string'
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\handler.cpp
CONST	ENDS
;	COMDAT ?OnCT_PREPATCHCOMPLETE_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z
_TEXT	SEGMENT
$T99147 = 8						; size = 4
_pDB$ = 8						; size = 4
_dwVersion$ = 12					; size = 4
_pSession$ = 12						; size = 4
?OnCT_PREPATCHCOMPLETE_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z PROC NEAR ; CTPatchSvrModule::OnCT_PREPATCHCOMPLETE_REQ, COMDAT
; _this$ = ecx

; 144  : 	DWORD dwVersion;
; 145  : 	pSession->m_Recv
; 146  : 		>> dwVersion;

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR _pSession$[esp-4]
  00004	56		 push	 esi
  00005	8d 44 24 0c	 lea	 eax, DWORD PTR _dwVersion$[esp]
  00009	50		 push	 eax
  0000a	83 c1 40	 add	 ecx, 64			; 00000040H
  0000d	e8 00 00 00 00	 call	 ??5CPacket@@QAEAAV0@AAK@Z ; CPacket::operator>>

; 147  : 
; 148  : 	DEFINE_QUERY(pDB, CSPPreComplete)

  00012	8b 74 24 08	 mov	 esi, DWORD PTR _pDB$[esp]
  00016	85 f6		 test	 esi, esi
  00018	74 4c		 je	 SHORT $L94468
  0001a	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0001d	8b cc		 mov	 ecx, esp
  0001f	89 64 24 24	 mov	 DWORD PTR $T99147[esp+28], esp
  00023	6a 0e		 push	 14			; 0000000eH
  00025	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0002c	c7 41 14 00 00
	00 00		 mov	 DWORD PTR [ecx+20], 0
  00033	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@BIGOCFAD@CSPPreComplete?$AA@
  00038	c6 41 04 00	 mov	 BYTE PTR [ecx+4], 0
  0003c	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00041	8b ce		 mov	 ecx, esi
  00043	e8 00 00 00 00	 call	 ?GetQuery@CSqlDatabase@@QAEPAVCSqlQuery@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CSqlDatabase::GetQuery
  00048	85 c0		 test	 eax, eax
  0004a	74 1a		 je	 SHORT $L94468

; 149  : 		query->m_dwBetaVer = dwVersion;

  0004c	8b 4c 24 0c	 mov	 ecx, DWORD PTR _dwVersion$[esp]
  00050	89 88 2c 0c 00
	00		 mov	 DWORD PTR [eax+3116], ecx

; 150  : 	if(!query->Call())

  00056	8b c8		 mov	 ecx, eax
  00058	e8 00 00 00 00	 call	 ?Call@CSqlBase@@QAEHXZ	; CSqlBase::Call
  0005d	85 c0		 test	 eax, eax

; 151  : 		return EC_INITSERVICE_DBOPENFAILED;

  0005f	b8 05 00 00 01	 mov	 eax, 16777221		; 01000005H
  00064	74 05		 je	 SHORT $L94460
$L94468:

; 152  : 	UNDEFINE_QUERY();
; 153  : 	return EC_SESSION_EXIT;

  00066	b8 05 00 00 02	 mov	 eax, 33554437		; 02000005H
$L94460:

; 154  : }

  0006b	5e		 pop	 esi
  0006c	c2 08 00	 ret	 8
?OnCT_PREPATCHCOMPLETE_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z ENDP ; CTPatchSvrModule::OnCT_PREPATCHCOMPLETE_REQ
_TEXT	ENDS
PUBLIC	??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@PBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::operator=
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@PBD@Z
_TEXT	SEGMENT
_pszSrc$ = 8						; size = 4
??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@PBD@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::operator=, COMDAT
; _this$ = ecx

; 983  : 		CThisSimpleString::operator=( pszSrc );

  00000	8b 54 24 04	 mov	 edx, DWORD PTR _pszSrc$[esp-4]
  00004	85 d2		 test	 edx, edx
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
  00009	75 0f		 jne	 SHORT $L99275
  0000b	33 c0		 xor	 eax, eax
  0000d	50		 push	 eax
  0000e	52		 push	 edx
  0000f	e8 00 00 00 00	 call	 ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::SetString

; 984  : 
; 985  : 		return( *this );

  00014	8b c7		 mov	 eax, edi
  00016	5f		 pop	 edi

; 986  : 	}

  00017	c2 04 00	 ret	 4

; 983  : 		CThisSimpleString::operator=( pszSrc );

$L99275:
  0001a	8b c2		 mov	 eax, edx
  0001c	56		 push	 esi
  0001d	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$L99277:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $L99277
  00027	2b c6		 sub	 eax, esi
  00029	5e		 pop	 esi
  0002a	50		 push	 eax
  0002b	52		 push	 edx
  0002c	8b cf		 mov	 ecx, edi
  0002e	e8 00 00 00 00	 call	 ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::SetString

; 984  : 
; 985  : 		return( *this );

  00033	8b c7		 mov	 eax, edi
  00035	5f		 pop	 edi

; 986  : 	}

  00036	c2 04 00	 ret	 4
??4?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAEAAV01@PBD@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::operator=
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IBEXXZ ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Xlen
PUBLIC	??_R0?AVexception@@@8				; exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
EXTRN	??0exception@@QAE@ABV0@@Z:NEAR			; exception::exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	SEGMENT
$T99397	DD	0ffffffffH
	DD	FLAT:$L99283
$T99394	DD	019930520H
	DD	01H
	DD	FLAT:$T99397
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT
??_R0?AVexception@@@8 DD FLAT:??_7type_info@@6B@	; exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@@', 00H
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
_DATA	ENDS
;	COMDAT ?_Xlen@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
$T99282 = -80						; size = 28
$T99281 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IBEXXZ PROC NEAR ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Xlen, COMDAT
; _this$ = ecx

; 883  : 		{	// report a length_error

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Xlen@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IBEXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 44	 sub	 esp, 68			; 00000044H

; 884  : 		_THROW(length_error, "vector<T> too long");

  00018	6a 12		 push	 18			; 00000012H
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001f	8d 4c 24 08	 lea	 ecx, DWORD PTR $T99282[esp+88]
  00023	c7 44 24 20 0f
	00 00 00	 mov	 DWORD PTR $T99282[esp+112], 15 ; 0000000fH
  0002b	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T99282[esp+108], 0
  00033	c6 44 24 0c 00	 mov	 BYTE PTR $T99282[esp+92], 0
  00038	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0003d	8d 04 24	 lea	 eax, DWORD PTR $T99282[esp+80]
  00040	50		 push	 eax
  00041	8d 4c 24 20	 lea	 ecx, DWORD PTR $T99281[esp+84]
  00045	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+92], 0
  0004d	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00052	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVlength_error@std@@
  00057	8d 4c 24 20	 lea	 ecx, DWORD PTR $T99281[esp+84]
  0005b	51		 push	 ecx
  0005c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T99281[esp+88], OFFSET FLAT:??_7length_error@std@@6B@
  00064	e8 00 00 00 00	 call	 __CxxThrowException@8
$L99398:
$L99396:
  00069	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L99283:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T99282[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xlen@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IBEXXZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T99394
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Xlen@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IBEXXZ ENDP ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Xlen
;	COMDAT xdata$x
xdata$x	SEGMENT
$T99503	DD	0ffffffffH
	DD	FLAT:$L99404
$T99501	DD	019930520H
	DD	01H
	DD	FLAT:$T99503
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC NEAR		; std::logic_error::logic_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 1c	 mov	 edi, DWORD PTR ___that$[esp+20]
  0001c	8b f1		 mov	 esi, ecx
  0001e	57		 push	 edi
  0001f	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00023	e8 00 00 00 00	 call	 ??0exception@@QAE@ABV0@@Z ; exception::exception
  00028	33 c0		 xor	 eax, eax
  0002a	6a ff		 push	 -1
  0002c	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00035	50		 push	 eax
  00036	83 c7 0c	 add	 edi, 12			; 0000000cH
  00039	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00040	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00043	57		 push	 edi
  00044	89 44 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], eax
  00048	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00050	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00054	5f		 pop	 edi
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L99404:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T99501
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Ogty
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC NEAR		; std::length_error::length_error, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??$_Uninitialized_fill_n@PAUtagPATCHFILE@@IU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAXPAUtagPATCHFILE@@IABU1@AAV?$allocator@UtagPATCHFILE@@@0@@Z ; std::_Uninitialized_fill_n<tagPATCHFILE *,unsigned int,tagPATCHFILE,std::allocator<tagPATCHFILE> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninitialized_fill_n@PAUtagPATCHFILE@@IU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAXPAUtagPATCHFILE@@IABU1@AAV?$allocator@UtagPATCHFILE@@@0@@Z
_TEXT	SEGMENT
__Cat$99516 = -4					; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_fill_n@PAUtagPATCHFILE@@IU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAXPAUtagPATCHFILE@@IABU1@AAV?$allocator@UtagPATCHFILE@@@0@@Z PROC NEAR ; std::_Uninitialized_fill_n<tagPATCHFILE *,unsigned int,tagPATCHFILE,std::allocator<tagPATCHFILE> >, COMDAT

; 255  : 	{	// copy _Count *_Val to raw _First, using _Al

  00000	51		 push	 ecx

; 256  : 	_Uninit_fill_n(_First, _Count, _Val, _Al,
; 257  : 		_Ptr_cat(_First, _First));

  00001	8b 04 24	 mov	 eax, DWORD PTR __Cat$99516[esp+4]
  00004	8b 4c 24 14	 mov	 ecx, DWORD PTR __Al$[esp]
  00008	8b 54 24 10	 mov	 edx, DWORD PTR __Val$[esp]
  0000c	50		 push	 eax
  0000d	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp+4]
  00011	51		 push	 ecx
  00012	8b 4c 24 10	 mov	 ecx, DWORD PTR __First$[esp+8]
  00016	52		 push	 edx
  00017	50		 push	 eax
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUtagPATCHFILE@@IU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAXPAUtagPATCHFILE@@IABU1@AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<tagPATCHFILE *,unsigned int,tagPATCHFILE,std::allocator<tagPATCHFILE> >

; 258  : 	}

  0001e	83 c4 18	 add	 esp, 24			; 00000018H
  00021	c3		 ret	 0
??$_Uninitialized_fill_n@PAUtagPATCHFILE@@IU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAXPAUtagPATCHFILE@@IABU1@AAV?$allocator@UtagPATCHFILE@@@0@@Z ENDP ; std::_Uninitialized_fill_n<tagPATCHFILE *,unsigned int,tagPATCHFILE,std::allocator<tagPATCHFILE> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAXPAUtagPATCHFILE@@0AAV?$allocator@UtagPATCHFILE@@@0@@Z ; std::_Destroy_range<tagPATCHFILE,std::allocator<tagPATCHFILE> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy_range@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAXPAUtagPATCHFILE@@0AAV?$allocator@UtagPATCHFILE@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAXPAUtagPATCHFILE@@0AAV?$allocator@UtagPATCHFILE@@@0@@Z PROC NEAR ; std::_Destroy_range<tagPATCHFILE,std::allocator<tagPATCHFILE> >, COMDAT

; 216  : 	{	// destroy [_First, _Last)

  00000	56		 push	 esi

; 217  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 10		 je	 SHORT $L99548
  0000e	8b ff		 npad	 2
$L99546:
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1tagPATCHFILE@@QAE@XZ
  00017	83 c6 14	 add	 esi, 20			; 00000014H
  0001a	3b f7		 cmp	 esi, edi
  0001c	75 f2		 jne	 SHORT $L99546
$L99548:
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 218  : 	}

  00020	c3		 ret	 0
??$_Destroy_range@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAXPAUtagPATCHFILE@@0AAV?$allocator@UtagPATCHFILE@@@0@@Z ENDP ; std::_Destroy_range<tagPATCHFILE,std::allocator<tagPATCHFILE> >
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAUtagPATCHFILE@@@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEPAUtagPATCHFILE@@PAU2@00@Z ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Ucopy<tagPATCHFILE *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??$_Ucopy@PAUtagPATCHFILE@@@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEPAUtagPATCHFILE@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$99574 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUtagPATCHFILE@@@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEPAUtagPATCHFILE@@PAU2@00@Z PROC NEAR ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Ucopy<tagPATCHFILE *>, COMDAT
; _this$ = ecx

; 802  : 		{	// copy initializing [_First, _Last), using allocator
; 803  : 		return (_Uninitialized_copy(_First, _Last,
; 804  : 			_Ptr, this->_Alval));

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __Cat$99574[esp-4]
  00004	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00008	50		 push	 eax
  00009	8b 44 24 08	 mov	 eax, DWORD PTR __First$[esp]
  0000d	51		 push	 ecx
  0000e	8b 4c 24 14	 mov	 ecx, DWORD PTR __Ptr$[esp+4]
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUtagPATCHFILE@@PAU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAPAUtagPATCHFILE@@PAU1@00AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<tagPATCHFILE *,tagPATCHFILE *,std::allocator<tagPATCHFILE> >
  0001a	83 c4 14	 add	 esp, 20			; 00000014H

; 805  : 		}

  0001d	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAUtagPATCHFILE@@@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEPAUtagPATCHFILE@@PAU2@00@Z ENDP ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Ucopy<tagPATCHFILE *>
_TEXT	ENDS
PUBLIC	??$fill@PAUtagPATCHFILE@@U1@@std@@YAXPAUtagPATCHFILE@@0ABU1@@Z ; std::fill<tagPATCHFILE *,tagPATCHFILE>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$fill@PAUtagPATCHFILE@@U1@@std@@YAXPAUtagPATCHFILE@@0ABU1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAUtagPATCHFILE@@U1@@std@@YAXPAUtagPATCHFILE@@0ABU1@@Z PROC NEAR ; std::fill<tagPATCHFILE *,tagPATCHFILE>, COMDAT

; 1135 : 	for (; _First != _Last; ++_First)

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00009	3b f0		 cmp	 esi, eax
  0000b	74 43		 je	 SHORT $L95272
  0000d	53		 push	 ebx
  0000e	55		 push	 ebp
  0000f	57		 push	 edi
  00010	8b 7c 24 1c	 mov	 edi, DWORD PTR __Val$[esp+12]
  00014	8d 5f 04	 lea	 ebx, DWORD PTR [edi+4]
  00017	8d 6f 08	 lea	 ebp, DWORD PTR [edi+8]
  0001a	8d 9b 00 00 00
	00		 npad	 6
$L95270:

; 1136 : 		*_First = _Val;

  00020	8b 07		 mov	 eax, DWORD PTR [edi]
  00022	53		 push	 ebx
  00023	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  00026	89 06		 mov	 DWORD PTR [esi], eax
  00028	e8 00 00 00 00	 call	 ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CSimpleStringT<char,0>::operator=
  0002d	55		 push	 ebp
  0002e	8d 4e 08	 lea	 ecx, DWORD PTR [esi+8]
  00031	e8 00 00 00 00	 call	 ??4?$CSimpleStringT@D$0A@@ATL@@QAEAAV01@ABV01@@Z ; ATL::CSimpleStringT<char,0>::operator=
  00036	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00039	8b 44 24 18	 mov	 eax, DWORD PTR __Last$[esp+12]
  0003d	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00040	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  00043	89 56 10	 mov	 DWORD PTR [esi+16], edx
  00046	83 c6 14	 add	 esi, 20			; 00000014H
  00049	3b f0		 cmp	 esi, eax
  0004b	75 d3		 jne	 SHORT $L95270
  0004d	5f		 pop	 edi
  0004e	5d		 pop	 ebp
  0004f	5b		 pop	 ebx
$L95272:
  00050	5e		 pop	 esi

; 1137 : 	}

  00051	c3		 ret	 0
??$fill@PAUtagPATCHFILE@@U1@@std@@YAXPAUtagPATCHFILE@@0ABU1@@Z ENDP ; std::fill<tagPATCHFILE *,tagPATCHFILE>
_TEXT	ENDS
PUBLIC	??$copy_backward@PAUtagPATCHFILE@@PAU1@@std@@YAPAUtagPATCHFILE@@PAU1@00@Z ; std::copy_backward<tagPATCHFILE *,tagPATCHFILE *>
; Function compile flags: /Ogty
;	COMDAT ??$copy_backward@PAUtagPATCHFILE@@PAU1@@std@@YAPAUtagPATCHFILE@@PAU1@00@Z
_TEXT	SEGMENT
__Cat$99604 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$copy_backward@PAUtagPATCHFILE@@PAU1@@std@@YAPAUtagPATCHFILE@@PAU1@00@Z PROC NEAR ; std::copy_backward<tagPATCHFILE *,tagPATCHFILE *>, COMDAT

; 1067 : 	{	// copy [_First, _Last) backwards to [..., _Dest)

  00000	51		 push	 ecx

; 1068 : 	return (_Copy_backward_opt(_First, _Last, _Dest,
; 1069 : 		_Ptr_cat(_First, _Dest)));

  00001	8b 04 24	 mov	 eax, DWORD PTR __Cat$99604[esp+4]
  00004	8b 4c 24 10	 mov	 ecx, DWORD PTR __Dest$[esp]
  00008	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp]
  0000c	50		 push	 eax
  0000d	8b 44 24 0c	 mov	 eax, DWORD PTR __First$[esp+4]
  00011	51		 push	 ecx
  00012	52		 push	 edx
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Copy_backward_opt@PAUtagPATCHFILE@@PAU1@@std@@YAPAUtagPATCHFILE@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_backward_opt<tagPATCHFILE *,tagPATCHFILE *>

; 1070 : 	}

  00019	83 c4 14	 add	 esp, 20			; 00000014H
  0001c	c3		 ret	 0
??$copy_backward@PAUtagPATCHFILE@@PAU1@@std@@YAPAUtagPATCHFILE@@PAU1@00@Z ENDP ; std::copy_backward<tagPATCHFILE *,tagPATCHFILE *>
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAE_NI@Z ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Buy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?_Buy@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAE_NI@Z PROC NEAR ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Buy, COMDAT
; _this$ = ecx

; 771  : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;
; 772  : 		if (_Capacity == 0)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Capacity$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	33 c9		 xor	 ecx, ecx
  00009	3b c1		 cmp	 eax, ecx
  0000b	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0000e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00011	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00014	75 06		 jne	 SHORT $L94848

; 773  : 			return (false);

  00016	32 c0		 xor	 al, al
  00018	5e		 pop	 esi

; 783  : 		}

  00019	c2 04 00	 ret	 4
$L94848:

; 774  : 		else if (max_size() < _Capacity)

  0001c	3d cc cc cc 0c	 cmp	 eax, 214748364		; 0cccccccH
  00021	76 07		 jbe	 SHORT $L94850

; 775  : 			_Xlen();	// result too long

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IBEXXZ ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Xlen
$L99634:
$L94850:
  0002a	57		 push	 edi

; 776  : 		else
; 777  : 			{	// nonempty array, allocate storage
; 778  : 			_Myfirst = this->_Alval.allocate(_Capacity);

  0002b	8d 3c 80	 lea	 edi, DWORD PTR [eax+eax*4]
  0002e	c1 e7 02	 shl	 edi, 2
  00031	57		 push	 edi
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 779  : 			_Mylast = _Myfirst;
; 780  : 			_Myend = _Myfirst + _Capacity;

  00037	03 f8		 add	 edi, eax
  00039	83 c4 04	 add	 esp, 4
  0003c	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  0003f	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00042	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00045	5f		 pop	 edi

; 781  : 			}
; 782  : 		return (true);

  00046	b0 01		 mov	 al, 1
  00048	5e		 pop	 esi

; 783  : 		}

  00049	c2 04 00	 ret	 4
$L99633:
?_Buy@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Buy
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEPAUtagPATCHFILE@@PAU3@IABU3@@Z ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Ufill
; Function compile flags: /Ogty
;	COMDAT ?_Ufill@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEPAUtagPATCHFILE@@PAU3@IABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Cat$99647 = 16					; size = 1
__Val$ = 16						; size = 4
?_Ufill@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEPAUtagPATCHFILE@@PAU3@IABU3@@Z PROC NEAR ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Ufill, COMDAT
; _this$ = ecx

; 878  : 		_Uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __Cat$99647[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR __Count$[esp]
  00009	57		 push	 edi
  0000a	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  0000e	50		 push	 eax
  0000f	51		 push	 ecx
  00010	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Val$[esp+12]
  00014	51		 push	 ecx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUtagPATCHFILE@@IU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAXPAUtagPATCHFILE@@IABU1@AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<tagPATCHFILE *,unsigned int,tagPATCHFILE,std::allocator<tagPATCHFILE> >

; 879  : 		return (_Ptr + _Count);

  0001c	8d 14 b6	 lea	 edx, DWORD PTR [esi+esi*4]
  0001f	83 c4 14	 add	 esp, 20			; 00000014H
  00022	8d 04 97	 lea	 eax, DWORD PTR [edi+edx*4]
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 880  : 		}

  00027	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEPAUtagPATCHFILE@@PAU3@IABU3@@Z ENDP ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Ufill
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXPAUtagPATCHFILE@@0@Z ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Destroy
; Function compile flags: /Ogty
;	COMDAT ?_Destroy@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXPAUtagPATCHFILE@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXPAUtagPATCHFILE@@0@Z PROC NEAR ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Destroy, COMDAT
; _this$ = ecx

; 786  : 		{	// destroy [_First, _Last) using allocator

  00000	56		 push	 esi

; 787  : 		_Destroy_range(_First, _Last, this->_Alval);

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __First$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 10	 mov	 edi, DWORD PTR __Last$[esp+4]
  0000a	3b f7		 cmp	 esi, edi
  0000c	74 10		 je	 SHORT $L99702
  0000e	8b ff		 npad	 2
$L99700:
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ??1tagPATCHFILE@@QAE@XZ
  00017	83 c6 14	 add	 esi, 20			; 00000014H
  0001a	3b f7		 cmp	 esi, edi
  0001c	75 f2		 jne	 SHORT $L99700
$L99702:
  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi

; 788  : 		}

  00020	c2 08 00	 ret	 8
?_Destroy@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXPAUtagPATCHFILE@@0@Z ENDP ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXViterator@12@IABUtagPATCHFILE@@@Z ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Insert_n
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
xdata$x	SEGMENT
$T100021 DD	0ffffffffH
	DD	FLAT:$L99724
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
$T100023 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L99721
$T100024 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L99723
$T100022 DD	01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:$T100023
	DD	03H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:$T100024
$T100018 DD	019930520H
	DD	05H
	DD	FLAT:$T100021
	DD	02H
	DD	FLAT:$T100022
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXViterator@12@IABUtagPATCHFILE@@@Z
_TEXT	SEGMENT
__Tmp$ = -44						; size = 20
__Newvec$94958 = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
tv458 = 8						; size = 4
__Cat$99936 = 8						; size = 1
__Cat$99923 = 8						; size = 1
__Cat$99899 = 8						; size = 1
__Cat$99860 = 8						; size = 1
__Cat$99835 = 8						; size = 1
__Cat$99814 = 8						; size = 1
__Where$ = 8						; size = 4
__Ptr$94959 = 12					; size = 4
__Count$ = 12						; size = 4
tv445 = 16						; size = 4
tv444 = 16						; size = 4
tv429 = 16						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXViterator@12@IABUtagPATCHFILE@@@Z PROC NEAR ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Insert_n, COMDAT
; _this$ = ecx

; 809  : 		{	// insert _Count * _Val at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Insert_n@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXViterator@12@IABUtagPATCHFILE@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 20	 sub	 esp, 32			; 00000020H

; 810  : 		_Ty _Tmp = _Val;	// in case _Val is in sequence

  0001b	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	8b f1		 mov	 esi, ecx
  00023	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00026	50		 push	 eax
  00027	8d 4d d4	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  0002a	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  0002d	e8 00 00 00 00	 call	 ??0tagPATCHFILE@@QAE@ABU0@@Z

; 811  : 		size_type _Capacity = capacity();

  00032	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00035	33 c9		 xor	 ecx, ecx
  00037	3b d9		 cmp	 ebx, ecx
  00039	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ecx
  0003c	74 16		 je	 SHORT $L99730
  0003e	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00041	2b cb		 sub	 ecx, ebx
  00043	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00048	f7 e9		 imul	 ecx
  0004a	c1 fa 03	 sar	 edx, 3
  0004d	8b ca		 mov	 ecx, edx
  0004f	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00052	03 ca		 add	 ecx, edx
$L99730:

; 812  : 
; 813  : 		if (_Count == 0)

  00054	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00057	85 ff		 test	 edi, edi
  00059	0f 84 75 02 00
	00		 je	 $L94978

; 814  : 			;
; 815  : 		else if (max_size() - size() < _Count)

  0005f	85 db		 test	 ebx, ebx
  00061	75 04		 jne	 SHORT $L99752
  00063	33 c0		 xor	 eax, eax
  00065	eb 16		 jmp	 SHORT $L99753
$L99752:
  00067	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0006a	2b d3		 sub	 edx, ebx
  0006c	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00071	f7 ea		 imul	 edx
  00073	c1 fa 03	 sar	 edx, 3
  00076	8b c2		 mov	 eax, edx
  00078	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0007b	03 c2		 add	 eax, edx
$L99753:
  0007d	ba cc cc cc 0c	 mov	 edx, 214748364		; 0cccccccH
  00082	2b d0		 sub	 edx, eax
  00084	3b d7		 cmp	 edx, edi
  00086	73 07		 jae	 SHORT $L94954

; 816  : 			_Xlen();	// result too long

  00088	8b ce		 mov	 ecx, esi
  0008a	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IBEXXZ ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Xlen
$L100025:
$L94954:

; 817  : 		else if (_Capacity < size() + _Count)

  0008f	85 db		 test	 ebx, ebx
  00091	75 04		 jne	 SHORT $L99759
  00093	33 c0		 xor	 eax, eax
  00095	eb 16		 jmp	 SHORT $L99760
$L99759:
  00097	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0009a	2b d3		 sub	 edx, ebx
  0009c	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  000a1	f7 ea		 imul	 edx
  000a3	c1 fa 03	 sar	 edx, 3
  000a6	8b c2		 mov	 eax, edx
  000a8	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ab	03 c2		 add	 eax, edx
$L99760:
  000ad	03 c7		 add	 eax, edi
  000af	3b c8		 cmp	 ecx, eax
  000b1	0f 83 26 01 00
	00		 jae	 $L94956

; 818  : 			{	// not enough room, reallocate
; 819  : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 820  : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  000b7	8b c1		 mov	 eax, ecx
  000b9	d1 e8		 shr	 eax, 1
  000bb	ba cc cc cc 0c	 mov	 edx, 214748364		; 0cccccccH
  000c0	2b d0		 sub	 edx, eax
  000c2	3b d1		 cmp	 edx, ecx
  000c4	73 04		 jae	 SHORT $L99718
  000c6	33 c9		 xor	 ecx, ecx
  000c8	eb 02		 jmp	 SHORT $L99719
$L99718:
  000ca	03 c8		 add	 ecx, eax
$L99719:

; 821  : 			if (_Capacity < size() + _Count)

  000cc	85 db		 test	 ebx, ebx
  000ce	75 04		 jne	 SHORT $L99782
  000d0	33 c0		 xor	 eax, eax
  000d2	eb 16		 jmp	 SHORT $L99783
$L99782:
  000d4	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  000d7	2b d3		 sub	 edx, ebx
  000d9	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  000de	f7 ea		 imul	 edx
  000e0	c1 fa 03	 sar	 edx, 3
  000e3	8b c2		 mov	 eax, edx
  000e5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e8	03 c2		 add	 eax, edx
$L99783:
  000ea	03 c7		 add	 eax, edi
  000ec	3b c8		 cmp	 ecx, eax
  000ee	73 0b		 jae	 SHORT $L94957

; 822  : 				_Capacity = size() + _Count;

  000f0	8b ce		 mov	 ecx, esi
  000f2	e8 00 00 00 00	 call	 ?size@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QBEIXZ ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::size
  000f7	8b c8		 mov	 ecx, eax
  000f9	03 cf		 add	 ecx, edi
$L94957:

; 823  : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

  000fb	8d 0c 89	 lea	 ecx, DWORD PTR [ecx+ecx*4]
  000fe	c1 e1 02	 shl	 ecx, 2
  00101	51		 push	 ecx
  00102	89 4d 10	 mov	 DWORD PTR tv444[ebp], ecx
  00105	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 824  : 			pointer _Ptr = _Newvec;
; 825  : 
; 826  : 			_TRY_BEGIN
; 827  : 			_Ptr = _Ucopy(_Myfirst, _ITER_BASE(_Where),
; 828  : 				_Newvec);	// copy prefix

  0010a	8b 4d 08	 mov	 ecx, DWORD PTR __Cat$99814[ebp]
  0010d	8b 55 08	 mov	 edx, DWORD PTR __Where$[ebp]
  00110	51		 push	 ecx
  00111	8b d8		 mov	 ebx, eax
  00113	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00116	56		 push	 esi
  00117	53		 push	 ebx
  00118	52		 push	 edx
  00119	50		 push	 eax
  0011a	89 5d e8	 mov	 DWORD PTR __Newvec$94958[ebp], ebx
  0011d	89 5d 0c	 mov	 DWORD PTR __Ptr$94959[ebp], ebx
  00120	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00124	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUtagPATCHFILE@@PAU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAPAUtagPATCHFILE@@PAU1@00AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<tagPATCHFILE *,tagPATCHFILE *,std::allocator<tagPATCHFILE> >

; 829  : 			_Ptr = _Ufill(_Ptr, _Count, _Tmp);	// add new stuff

  00129	8b 4d 08	 mov	 ecx, DWORD PTR __Cat$99835[ebp]
  0012c	83 c4 18	 add	 esp, 24			; 00000018H
  0012f	51		 push	 ecx
  00130	56		 push	 esi
  00131	8d 55 d4	 lea	 edx, DWORD PTR __Tmp$[ebp]
  00134	52		 push	 edx
  00135	57		 push	 edi
  00136	50		 push	 eax
  00137	89 45 0c	 mov	 DWORD PTR __Ptr$94959[ebp], eax
  0013a	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUtagPATCHFILE@@IU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAXPAUtagPATCHFILE@@IABU1@AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<tagPATCHFILE *,unsigned int,tagPATCHFILE,std::allocator<tagPATCHFILE> >

; 830  : 			_Ucopy(_ITER_BASE(_Where), _Mylast, _Ptr);	// copy suffix

  0013f	8b 55 08	 mov	 edx, DWORD PTR __Cat$99860[ebp]
  00142	8b 4d 0c	 mov	 ecx, DWORD PTR __Ptr$94959[ebp]
  00145	83 c4 14	 add	 esp, 20			; 00000014H
  00148	52		 push	 edx
  00149	8d 04 bf	 lea	 eax, DWORD PTR [edi+edi*4]
  0014c	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0014f	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00152	56		 push	 esi
  00153	50		 push	 eax
  00154	89 45 0c	 mov	 DWORD PTR __Ptr$94959[ebp], eax
  00157	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  0015a	51		 push	 ecx
  0015b	50		 push	 eax
  0015c	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUtagPATCHFILE@@PAU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAPAUtagPATCHFILE@@PAU1@00AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<tagPATCHFILE *,tagPATCHFILE *,std::allocator<tagPATCHFILE> >

; 835  : 			_CATCH_END
; 836  : 
; 837  : 			_Count += size();

  00161	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00164	83 c4 14	 add	 esp, 20			; 00000014H
  00167	85 c0		 test	 eax, eax
  00169	74 16		 je	 SHORT $L99871
$L99870:
  0016b	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0016e	2b c8		 sub	 ecx, eax
  00170	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00175	f7 e9		 imul	 ecx
  00177	c1 fa 03	 sar	 edx, 3
  0017a	8b c2		 mov	 eax, edx
  0017c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0017f	03 c2		 add	 eax, edx
$L99871:
  00181	03 f8		 add	 edi, eax

; 838  : 			if (_Myfirst != 0)

  00183	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00186	85 c0		 test	 eax, eax
  00188	74 18		 je	 SHORT $L99875

; 839  : 				{	// destroy and deallocate old array
; 840  : 				_Destroy(_Myfirst, _Mylast);

  0018a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0018d	51		 push	 ecx
  0018e	50		 push	 eax
  0018f	8b ce		 mov	 ecx, esi
  00191	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXPAUtagPATCHFILE@@0@Z ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Destroy

; 841  : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  00196	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00199	50		 push	 eax
  0019a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0019f	83 c4 04	 add	 esp, 4
$L99875:

; 842  : 				}
; 843  : 			_Myend = _Newvec + _Capacity;

  001a2	8b 55 10	 mov	 edx, DWORD PTR tv444[ebp]

; 844  : 			_Mylast = _Newvec + _Count;

  001a5	8d 04 bf	 lea	 eax, DWORD PTR [edi+edi*4]
  001a8	03 d3		 add	 edx, ebx
  001aa	8d 0c 83	 lea	 ecx, DWORD PTR [ebx+eax*4]
  001ad	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  001b0	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 845  : 			_Myfirst = _Newvec;

  001b3	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 846  : 			}
; 847  : 		else if ((size_type)(_Mylast - _ITER_BASE(_Where)) < _Count)

  001b6	e9 19 01 00 00	 jmp	 $L94978
$L99721:

; 831  : 			_CATCH_ALL
; 832  : 			_Destroy(_Newvec, _Ptr);

  001bb	8b 55 0c	 mov	 edx, DWORD PTR __Ptr$94959[ebp]
  001be	8b 75 e8	 mov	 esi, DWORD PTR __Newvec$94958[ebp]
  001c1	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001c4	52		 push	 edx
  001c5	56		 push	 esi
  001c6	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXPAUtagPATCHFILE@@0@Z ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Destroy

; 833  : 			this->_Alval.deallocate(_Newvec, _Capacity);

  001cb	56		 push	 esi
  001cc	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001d1	83 c4 04	 add	 esp, 4

; 834  : 			_RERAISE;

  001d4	6a 00		 push	 0
  001d6	6a 00		 push	 0
  001d8	e8 00 00 00 00	 call	 __CxxThrowException@8
$L100026:
$L94956:

; 846  : 			}
; 847  : 		else if ((size_type)(_Mylast - _ITER_BASE(_Where)) < _Count)

  001dd	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001e0	8b 5d 08	 mov	 ebx, DWORD PTR __Where$[ebp]
  001e3	8b d1		 mov	 edx, ecx
  001e5	2b d3		 sub	 edx, ebx
  001e7	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  001ec	f7 ea		 imul	 edx
  001ee	c1 fa 03	 sar	 edx, 3
  001f1	8b c2		 mov	 eax, edx
  001f3	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001f6	03 c2		 add	 eax, edx
  001f8	3b c7		 cmp	 eax, edi
  001fa	89 4d 10	 mov	 DWORD PTR tv429[ebp], ecx
  001fd	0f 83 92 00 00
	00		 jae	 $L94969

; 848  : 			{	// new stuff spills off end
; 849  : 			_Ucopy(_ITER_BASE(_Where), _Mylast,
; 850  : 				_ITER_BASE(_Where) + _Count);	// copy suffix

  00203	8b 55 08	 mov	 edx, DWORD PTR __Cat$99899[ebp]
  00206	52		 push	 edx
  00207	8d 04 bf	 lea	 eax, DWORD PTR [edi+edi*4]
  0020a	c1 e0 02	 shl	 eax, 2
  0020d	89 45 10	 mov	 DWORD PTR tv445[ebp], eax
  00210	56		 push	 esi
  00211	03 c3		 add	 eax, ebx
  00213	50		 push	 eax
  00214	51		 push	 ecx
  00215	53		 push	 ebx
  00216	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUtagPATCHFILE@@PAU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAPAUtagPATCHFILE@@PAU1@00AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<tagPATCHFILE *,tagPATCHFILE *,std::allocator<tagPATCHFILE> >

; 851  : 
; 852  : 			_TRY_BEGIN
; 853  : 			_Ufill(_Mylast, _Count - (_Mylast - _ITER_BASE(_Where)),
; 854  : 				_Tmp);	// insert new stuff off end

  0021b	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0021e	83 c4 14	 add	 esp, 20			; 00000014H
  00221	8d 45 d4	 lea	 eax, DWORD PTR __Tmp$[ebp]
  00224	50		 push	 eax
  00225	8b d1		 mov	 edx, ecx
  00227	2b d3		 sub	 edx, ebx
  00229	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0022e	f7 ea		 imul	 edx
  00230	c1 fa 03	 sar	 edx, 3
  00233	8b c2		 mov	 eax, edx
  00235	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00238	03 c2		 add	 eax, edx
  0023a	2b f8		 sub	 edi, eax
  0023c	57		 push	 edi
  0023d	51		 push	 ecx
  0023e	8b ce		 mov	 ecx, esi
  00240	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+12], 3
  00244	e8 00 00 00 00	 call	 ?_Ufill@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEPAUtagPATCHFILE@@PAU3@IABU3@@Z ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Ufill

; 858  : 			_CATCH_END
; 859  : 
; 860  : 			_Mylast += _Count;

  00249	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0024c	8b 45 10	 mov	 eax, DWORD PTR tv445[ebp]
  0024f	03 f8		 add	 edi, eax
  00251	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 861  : 			fill(_ITER_BASE(_Where), _Mylast - _Count,
; 862  : 				_Tmp);	// insert up to old end

  00254	8d 4d d4	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00257	8b f7		 mov	 esi, edi
  00259	51		 push	 ecx
  0025a	2b f0		 sub	 esi, eax
  0025c	56		 push	 esi
  0025d	53		 push	 ebx
  0025e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00265	e8 00 00 00 00	 call	 ??$fill@PAUtagPATCHFILE@@U1@@std@@YAXPAUtagPATCHFILE@@0ABU1@@Z ; std::fill<tagPATCHFILE *,tagPATCHFILE>
  0026a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 863  : 			}
; 864  : 		else

  0026d	eb 65		 jmp	 SHORT $L94978
$L99723:

; 855  : 			_CATCH_ALL
; 856  : 			_Destroy(_ITER_BASE(_Where) + _Count, _Mylast + _Count);

  0026f	8b 45 0c	 mov	 eax, DWORD PTR __Count$[ebp]
  00272	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00275	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00278	8d 04 80	 lea	 eax, DWORD PTR [eax+eax*4]
  0027b	c1 e0 02	 shl	 eax, 2
  0027e	03 d0		 add	 edx, eax
  00280	52		 push	 edx
  00281	8b 55 08	 mov	 edx, DWORD PTR __Where$[ebp]
  00284	03 c2		 add	 eax, edx
  00286	50		 push	 eax
  00287	e8 00 00 00 00	 call	 ?_Destroy@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXPAUtagPATCHFILE@@0@Z ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Destroy

; 857  : 			_RERAISE;

  0028c	6a 00		 push	 0
  0028e	6a 00		 push	 0
  00290	e8 00 00 00 00	 call	 __CxxThrowException@8
$L100027:
$L94969:

; 865  : 			{	// new stuff can all be assigned
; 866  : 			pointer _Oldend = _Mylast;
; 867  : 			_Mylast = _Ucopy(_Oldend - _Count, _Oldend,
; 868  : 				_Mylast);	// copy suffix

  00295	8d 3c bf	 lea	 edi, DWORD PTR [edi+edi*4]
  00298	8b c1		 mov	 eax, ecx
  0029a	c1 e7 02	 shl	 edi, 2
  0029d	2b c7		 sub	 eax, edi
  0029f	89 45 08	 mov	 DWORD PTR tv458[ebp], eax
  002a2	8b 55 08	 mov	 edx, DWORD PTR __Cat$99923[ebp]
  002a5	52		 push	 edx
  002a6	56		 push	 esi
  002a7	51		 push	 ecx
  002a8	51		 push	 ecx
  002a9	50		 push	 eax
  002aa	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUtagPATCHFILE@@PAU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAPAUtagPATCHFILE@@PAU1@00AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<tagPATCHFILE *,tagPATCHFILE *,std::allocator<tagPATCHFILE> >

; 869  : 			copy_backward(_ITER_BASE(_Where), _Oldend - _Count,
; 870  : 				_Oldend);	// copy hole

  002af	8b 4d 10	 mov	 ecx, DWORD PTR tv429[ebp]
  002b2	8b 55 08	 mov	 edx, DWORD PTR tv458[ebp]
  002b5	89 46 08	 mov	 DWORD PTR [esi+8], eax
  002b8	8b 45 08	 mov	 eax, DWORD PTR __Cat$99936[ebp]
  002bb	50		 push	 eax
  002bc	51		 push	 ecx
  002bd	52		 push	 edx
  002be	53		 push	 ebx
  002bf	e8 00 00 00 00	 call	 ??$_Copy_backward_opt@PAUtagPATCHFILE@@PAU1@@std@@YAPAUtagPATCHFILE@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_backward_opt<tagPATCHFILE *,tagPATCHFILE *>

; 871  : 			fill(_ITER_BASE(_Where), _ITER_BASE(_Where) + _Count,
; 872  : 				_Tmp);	// insert into hole

  002c4	8d 45 d4	 lea	 eax, DWORD PTR __Tmp$[ebp]
  002c7	50		 push	 eax
  002c8	03 fb		 add	 edi, ebx
  002ca	57		 push	 edi
  002cb	53		 push	 ebx
  002cc	e8 00 00 00 00	 call	 ??$fill@PAUtagPATCHFILE@@U1@@std@@YAXPAUtagPATCHFILE@@0ABU1@@Z ; std::fill<tagPATCHFILE *,tagPATCHFILE>
  002d1	83 c4 30	 add	 esp, 48			; 00000030H
$L94978:

; 873  : 			}
; 874  : 		}

  002d4	8b 45 dc	 mov	 eax, DWORD PTR __Tmp$[ebp+8]
  002d7	83 c0 f0	 add	 eax, -16		; fffffff0H
  002da	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  002e1	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  002e4	83 ca ff	 or	 edx, -1
  002e7	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  002eb	4a		 dec	 edx
  002ec	85 d2		 test	 edx, edx
  002ee	7f 08		 jg	 SHORT $L100006
  002f0	8b 08		 mov	 ecx, DWORD PTR [eax]
  002f2	8b 11		 mov	 edx, DWORD PTR [ecx]
  002f4	50		 push	 eax
  002f5	ff 52 04	 call	 DWORD PTR [edx+4]
$L100006:
  002f8	8b 45 d8	 mov	 eax, DWORD PTR __Tmp$[ebp+4]
  002fb	83 c0 f0	 add	 eax, -16		; fffffff0H
  002fe	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00301	83 ca ff	 or	 edx, -1
  00304	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00308	4a		 dec	 edx
  00309	85 d2		 test	 edx, edx
  0030b	7f 08		 jg	 SHORT $L100016
  0030d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0030f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00311	50		 push	 eax
  00312	ff 52 04	 call	 DWORD PTR [edx+4]
$L100016:
  00315	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00318	5f		 pop	 edi
  00319	5e		 pop	 esi
  0031a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00321	5b		 pop	 ebx
  00322	8b e5		 mov	 esp, ebp
  00324	5d		 pop	 ebp
  00325	c2 0c 00	 ret	 12			; 0000000cH
$L100020:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L99724:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1tagPATCHFILE@@QAE@XZ
__ehhandler$?_Insert_n@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXViterator@12@IABUtagPATCHFILE@@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T100018
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Insert_n@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXViterator@12@IABUtagPATCHFILE@@@Z ENDP ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Insert_n
PUBLIC	??0?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE@XZ ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >
; Function compile flags: /Ogty
;	COMDAT ??0?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE@XZ PROC NEAR ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >, COMDAT
; _this$ = ecx

; 299  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx

; 300  : 		_Buy(0);

  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00007	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 301  : 		}

  0000d	c3		 ret	 0
??0?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE@XZ ENDP ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >
_TEXT	ENDS
PUBLIC	?insert@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE?AViterator@12@V312@ABUtagPATCHFILE@@@Z ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::insert
; Function compile flags: /Ogty
;	COMDAT ?insert@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE?AViterator@12@V312@ABUtagPATCHFILE@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
tv90 = 12						; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE?AViterator@12@V312@ABUtagPATCHFILE@@@Z PROC NEAR ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::insert, COMDAT
; _this$ = ecx

; 620  : 		{	// insert _Val at _Where

  00000	53		 push	 ebx

; 621  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Where$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
  00009	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0000c	85 f6		 test	 esi, esi
  0000e	74 1c		 je	 SHORT $L100153
  00010	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00013	2b ce		 sub	 ecx, esi
  00015	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  0001a	f7 e9		 imul	 ecx
  0001c	c1 fa 03	 sar	 edx, 3
  0001f	8b c2		 mov	 eax, edx
  00021	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00024	03 c2		 add	 eax, edx
  00026	89 44 24 14	 mov	 DWORD PTR tv90[esp+8], eax
  0002a	75 04		 jne	 SHORT $L100092
$L100153:
  0002c	33 f6		 xor	 esi, esi
  0002e	eb 15		 jmp	 SHORT $L100093
$L100092:
  00030	8b cb		 mov	 ecx, ebx
  00032	2b ce		 sub	 ecx, esi
  00034	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00039	f7 e9		 imul	 ecx
  0003b	c1 fa 03	 sar	 edx, 3
  0003e	8b f2		 mov	 esi, edx
  00040	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00043	03 f2		 add	 esi, edx
$L100093:

; 622  : 		_Insert_n(_Where, (size_type)1, _Val);

  00045	8b 4c 24 18	 mov	 ecx, DWORD PTR __Val$[esp+8]
  00049	51		 push	 ecx
  0004a	6a 01		 push	 1
  0004c	53		 push	 ebx
  0004d	8b cf		 mov	 ecx, edi
  0004f	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXViterator@12@IABUtagPATCHFILE@@@Z ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Insert_n

; 623  : 		return (begin() + _Off);

  00054	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00057	8d 14 b6	 lea	 edx, DWORD PTR [esi+esi*4]
  0005a	5f		 pop	 edi
  0005b	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  0005e	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  00062	5e		 pop	 esi
  00063	89 08		 mov	 DWORD PTR [eax], ecx
  00065	5b		 pop	 ebx

; 624  : 		}

  00066	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE?AViterator@12@V312@ABUtagPATCHFILE@@@Z ENDP ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::insert
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXXZ ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Tidy
; Function compile flags: /Ogty
;	COMDAT ?_Tidy@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXXZ PROC NEAR ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Tidy, COMDAT
; _this$ = ecx

; 791  : 		{	// free all storage

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi

; 792  : 		if (_Myfirst != 0)

  00004	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00007	85 f6		 test	 esi, esi
  00009	74 23		 je	 SHORT $L100240
  0000b	57		 push	 edi

; 793  : 			{	// something to free, destroy and deallocate it
; 794  : 			_Destroy(_Myfirst, _Mylast);

  0000c	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]
  0000f	3b f7		 cmp	 esi, edi
  00011	74 0e		 je	 SHORT $L100228
$L100226:
  00013	8b ce		 mov	 ecx, esi
  00015	e8 00 00 00 00	 call	 ??1tagPATCHFILE@@QAE@XZ
  0001a	83 c6 14	 add	 esi, 20			; 00000014H
  0001d	3b f7		 cmp	 esi, edi
  0001f	75 f2		 jne	 SHORT $L100226
$L100228:

; 795  : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  00021	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002a	83 c4 04	 add	 esp, 4
  0002d	5f		 pop	 edi
$L100240:
  0002e	5e		 pop	 esi

; 796  : 			}
; 797  : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  0002f	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
  00036	c7 43 08 00 00
	00 00		 mov	 DWORD PTR [ebx+8], 0
  0003d	c7 43 0c 00 00
	00 00		 mov	 DWORD PTR [ebx+12], 0
  00044	5b		 pop	 ebx

; 798  : 		}

  00045	c3		 ret	 0
?_Tidy@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXXZ ENDP ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Tidy
_TEXT	ENDS
PUBLIC	??1?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE@XZ ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::~vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >
; Function compile flags: /Ogty
;	COMDAT ??1?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE@XZ PROC NEAR ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::~vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >, COMDAT
; _this$ = ecx

; 388  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXXZ ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Tidy
??1?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE@XZ ENDP ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::~vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAEXABUtagPATCHFILE@@@Z ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::push_back
; Function compile flags: /Ogty
;	COMDAT ?push_back@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAEXABUtagPATCHFILE@@@Z
_TEXT	SEGMENT
__Cat$100288 = 8					; size = 1
$T100253 = 8						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAEXABUtagPATCHFILE@@@Z PROC NEAR ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::push_back, COMDAT
; _this$ = ecx

; 579  : 		{	// insert element at end

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 580  : 		if (size() < capacity())

  00004	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00007	85 ff		 test	 edi, edi
  00009	75 04		 jne	 SHORT $L100259
  0000b	33 c9		 xor	 ecx, ecx
  0000d	eb 16		 jmp	 SHORT $L100260
$L100259:
  0000f	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00012	2b cf		 sub	 ecx, edi
  00014	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00019	f7 e9		 imul	 ecx
  0001b	c1 fa 03	 sar	 edx, 3
  0001e	8b ca		 mov	 ecx, edx
  00020	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00023	03 ca		 add	 ecx, edx
$L100260:
  00025	85 ff		 test	 edi, edi
  00027	74 3e		 je	 SHORT $L94620
  00029	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0002c	2b d7		 sub	 edx, edi
  0002e	b8 67 66 66 66	 mov	 eax, 1717986919		; 66666667H
  00033	f7 ea		 imul	 edx
  00035	c1 fa 03	 sar	 edx, 3
  00038	8b c2		 mov	 eax, edx
  0003a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003d	03 c2		 add	 eax, edx
  0003f	3b c8		 cmp	 ecx, eax
  00041	73 24		 jae	 SHORT $L94620

; 581  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

  00043	8b 44 24 0c	 mov	 eax, DWORD PTR __Cat$100288[esp+4]
  00047	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Val$[esp+4]
  0004b	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0004e	50		 push	 eax
  0004f	56		 push	 esi
  00050	51		 push	 ecx
  00051	6a 01		 push	 1
  00053	57		 push	 edi
  00054	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUtagPATCHFILE@@IU1@V?$allocator@UtagPATCHFILE@@@std@@@std@@YAXPAUtagPATCHFILE@@IABU1@AAV?$allocator@UtagPATCHFILE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<tagPATCHFILE *,unsigned int,tagPATCHFILE,std::allocator<tagPATCHFILE> >
  00059	83 c4 14	 add	 esp, 20			; 00000014H
  0005c	83 c7 14	 add	 edi, 20			; 00000014H
  0005f	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi

; 584  : 		}

  00064	c2 04 00	 ret	 4
$L94620:

; 582  : 		else
; 583  : 			insert(end(), _Val);

  00067	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp+4]
  0006b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0006e	52		 push	 edx
  0006f	50		 push	 eax
  00070	8d 44 24 14	 lea	 eax, DWORD PTR $T100253[esp+12]
  00074	50		 push	 eax
  00075	8b ce		 mov	 ecx, esi
  00077	e8 00 00 00 00	 call	 ?insert@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE?AViterator@12@V312@ABUtagPATCHFILE@@@Z ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::insert
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi

; 584  : 		}

  0007e	c2 04 00	 ret	 4
?push_back@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAEXABUtagPATCHFILE@@@Z ENDP ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::push_back
_TEXT	ENDS
PUBLIC	?clear@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAEXXZ ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::clear
; Function compile flags: /Ogty
;	COMDAT ?clear@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAEXXZ PROC NEAR ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::clear, COMDAT
; _this$ = ecx

; 744  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXXZ ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Tidy
?clear@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAEXXZ ENDP ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::clear
_TEXT	ENDS
PUBLIC	??_C@_0M@OFNNAIND@CTBLVersion?$AA@		; `string'
PUBLIC	?OnCT_PATCH_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z ; CTPatchSvrModule::OnCT_PATCH_REQ
EXTRN	?SendCT_PATCH_ACK@CTPatchSession@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@PAUsockaddr_in@@PAV?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@@Z:NEAR ; CTPatchSession::SendCT_PATCH_ACK
EXTRN	?Close@CSqlBase@@QAEXXZ:NEAR			; CSqlBase::Close
EXTRN	?Fetch@CSqlBase@@QAEHXZ:NEAR			; CSqlBase::Fetch
EXTRN	?Open@CSqlBase@@QAEHH@Z:NEAR			; CSqlBase::Open
;	COMDAT xdata$x
xdata$x	SEGMENT
$T100785 DD	0ffffffffH
	DD	FLAT:$L100316
	DD	00H
	DD	FLAT:$L100318
$T100780 DD	019930520H
	DD	02H
	DD	FLAT:$T100785
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0M@OFNNAIND@CTBLVersion?$AA@
CONST	SEGMENT
??_C@_0M@OFNNAIND@CTBLVersion?$AA@ DB 'CTBLVersion', 00H ; `string'
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\handler.cpp
CONST	ENDS
;	COMDAT ?OnCT_PATCH_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z
_TEXT	SEGMENT
_dwVersion$ = -56					; size = 4
_this$ = -52						; size = 4
_vPatch$ = -48						; size = 16
_pPatch$94389 = -32					; size = 20
__$EHRec$ = -12						; size = 12
$T100314 = 8						; size = 4
$T100313 = 8						; size = 4
_pDB$ = 8						; size = 4
_pSession$ = 12						; size = 4
?OnCT_PATCH_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z PROC NEAR ; CTPatchSvrModule::OnCT_PATCH_REQ, COMDAT
; _this$ = ecx

; 33   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?OnCT_PATCH_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00018	53		 push	 ebx
  00019	55		 push	 ebp
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	8b f9		 mov	 edi, ecx

; 34   : 	DWORD dwVersion;
; 35   : 	pSession->m_Recv
; 36   : 		>> dwVersion;

  0001e	8b 4c 24 50	 mov	 ecx, DWORD PTR _pSession$[esp+68]
  00022	8d 44 24 10	 lea	 eax, DWORD PTR _dwVersion$[esp+72]
  00026	50		 push	 eax
  00027	83 c1 40	 add	 ecx, 64			; 00000040H
  0002a	89 7c 24 18	 mov	 DWORD PTR _this$[esp+76], edi
  0002e	e8 00 00 00 00	 call	 ??5CPacket@@QAEAAV0@AAK@Z ; CPacket::operator>>

; 37   : 
; 38   : 	VPATCHFILE vPatch;

  00033	33 db		 xor	 ebx, ebx
  00035	89 5c 24 1c	 mov	 DWORD PTR _vPatch$[esp+76], ebx
  00039	89 5c 24 20	 mov	 DWORD PTR _vPatch$[esp+80], ebx
  0003d	89 5c 24 24	 mov	 DWORD PTR _vPatch$[esp+84], ebx

; 39   : 	vPatch.clear();

  00041	8d 4c 24 18	 lea	 ecx, DWORD PTR _vPatch$[esp+72]
  00045	89 5c 24 44	 mov	 DWORD PTR __$EHRec$[esp+80], ebx
  00049	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXXZ ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Tidy

; 40   : 
; 41   : 	DEFINE_QUERY(pDB, CTBLVersion)

  0004e	8b 74 24 4c	 mov	 esi, DWORD PTR _pDB$[esp+68]
  00052	3b f3		 cmp	 esi, ebx
  00054	0f 84 54 01 00
	00		 je	 $L94385
  0005a	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0005d	8b cc		 mov	 ecx, esp
  0005f	89 64 24 68	 mov	 DWORD PTR $T100313[esp+96], esp
  00063	6a 0b		 push	 11			; 0000000bH
  00065	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0006c	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  0006f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@OFNNAIND@CTBLVersion?$AA@
  00074	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  00077	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0007c	8b ce		 mov	 ecx, esi
  0007e	e8 00 00 00 00	 call	 ?GetQuery@CSqlDatabase@@QAEPAVCSqlQuery@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CSqlDatabase::GetQuery
  00083	8b f0		 mov	 esi, eax
  00085	3b f3		 cmp	 esi, ebx
  00087	0f 84 21 01 00
	00		 je	 $L94385

; 42   : 	query->m_dwVersion = dwVersion;

  0008d	8b 4c 24 10	 mov	 ecx, DWORD PTR _dwVersion$[esp+72]
  00091	89 8e c4 0c 00
	00		 mov	 DWORD PTR [esi+3268], ecx

; 43   : 	if(query->Open())

  00097	53		 push	 ebx
  00098	8b ce		 mov	 ecx, esi
  0009a	e8 00 00 00 00	 call	 ?Open@CSqlBase@@QAEHH@Z	; CSqlBase::Open
  0009f	85 c0		 test	 eax, eax
  000a1	0f 84 07 01 00
	00		 je	 $L94385

; 44   : 	{
; 45   : 		while(query->Fetch())

  000a7	8b ce		 mov	 ecx, esi
  000a9	e8 00 00 00 00	 call	 ?Fetch@CSqlBase@@QAEHXZ	; CSqlBase::Fetch
  000ae	85 c0		 test	 eax, eax
  000b0	0f 84 f1 00 00
	00		 je	 $L94388
  000b6	8d be 5f 0c 00
	00		 lea	 edi, DWORD PTR [esi+3167]
  000bc	8d ae 2c 0c 00
	00		 lea	 ebp, DWORD PTR [esi+3116]
$L94387:

; 46   : 		{
; 47   : 			PATCHFILE pPatch;

  000c2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_strmgr@ATL@@3VCAtlStringMgr@1@A
  000c8	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_strmgr@ATL@@3VCAtlStringMgr@1@A ; ATL::g_strmgr
  000cd	ff 52 0c	 call	 DWORD PTR [edx+12]
  000d0	83 c0 10	 add	 eax, 16			; 00000010H
  000d3	89 44 24 2c	 mov	 DWORD PTR _pPatch$94389[esp+76], eax
  000d7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_strmgr@ATL@@3VCAtlStringMgr@1@A
  000dc	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_strmgr@ATL@@3VCAtlStringMgr@1@A ; ATL::g_strmgr
  000e1	ff 50 0c	 call	 DWORD PTR [eax+12]
  000e4	83 c0 10	 add	 eax, 16			; 00000010H
  000e7	89 44 24 30	 mov	 DWORD PTR _pPatch$94389[esp+80], eax

; 48   : 			pPatch.m_dwVersion = query->m_dwVersion;
; 49   : 			pPatch.m_strPath = query->m_szPath;

  000eb	3b fb		 cmp	 edi, ebx
  000ed	8b 8e c4 0c 00
	00		 mov	 ecx, DWORD PTR [esi+3268]
  000f3	c6 44 24 44 01	 mov	 BYTE PTR __$EHRec$[esp+80], 1
  000f8	89 4c 24 28	 mov	 DWORD PTR _pPatch$94389[esp+72], ecx
  000fc	75 04		 jne	 SHORT $L100627
  000fe	33 c0		 xor	 eax, eax
  00100	eb 0e		 jmp	 SHORT $L100626
$L100627:
  00102	8b c7		 mov	 eax, edi
  00104	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$L100782:
  00107	8a 08		 mov	 cl, BYTE PTR [eax]
  00109	40		 inc	 eax
  0010a	3a cb		 cmp	 cl, bl
  0010c	75 f9		 jne	 SHORT $L100782
  0010e	2b c2		 sub	 eax, edx
$L100626:
  00110	50		 push	 eax
  00111	57		 push	 edi
  00112	8d 4c 24 34	 lea	 ecx, DWORD PTR _pPatch$94389[esp+84]
  00116	e8 00 00 00 00	 call	 ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::SetString

; 50   : 			pPatch.m_strName = query->m_szName;

  0011b	3b eb		 cmp	 ebp, ebx
  0011d	75 04		 jne	 SHORT $L100658
  0011f	33 c0		 xor	 eax, eax
  00121	eb 0e		 jmp	 SHORT $L100657
$L100658:
  00123	8b c5		 mov	 eax, ebp
  00125	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$L100783:
  00128	8a 08		 mov	 cl, BYTE PTR [eax]
  0012a	40		 inc	 eax
  0012b	3a cb		 cmp	 cl, bl
  0012d	75 f9		 jne	 SHORT $L100783
  0012f	2b c2		 sub	 eax, edx
$L100657:
  00131	50		 push	 eax
  00132	55		 push	 ebp
  00133	8d 4c 24 38	 lea	 ecx, DWORD PTR _pPatch$94389[esp+88]
  00137	e8 00 00 00 00	 call	 ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::SetString

; 51   : 			pPatch.m_dwSize = query->m_dwSize;

  0013c	8b 96 cc 0c 00
	00		 mov	 edx, DWORD PTR [esi+3276]

; 52   : 			vPatch.push_back(pPatch);

  00142	8d 44 24 28	 lea	 eax, DWORD PTR _pPatch$94389[esp+72]
  00146	50		 push	 eax
  00147	8d 4c 24 1c	 lea	 ecx, DWORD PTR _vPatch$[esp+76]
  0014b	89 54 24 38	 mov	 DWORD PTR _pPatch$94389[esp+88], edx
  0014f	e8 00 00 00 00	 call	 ?push_back@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAEXABUtagPATCHFILE@@@Z ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::push_back

; 53   : 		}

  00154	8b 44 24 30	 mov	 eax, DWORD PTR _pPatch$94389[esp+80]
  00158	83 c0 f0	 add	 eax, -16		; fffffff0H
  0015b	88 5c 24 44	 mov	 BYTE PTR __$EHRec$[esp+80], bl
  0015f	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00162	83 ca ff	 or	 edx, -1
  00165	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00169	4a		 dec	 edx
  0016a	85 d2		 test	 edx, edx
  0016c	7f 08		 jg	 SHORT $L100726
  0016e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00170	8b 11		 mov	 edx, DWORD PTR [ecx]
  00172	50		 push	 eax
  00173	ff 52 04	 call	 DWORD PTR [edx+4]
$L100726:
  00176	8b 44 24 2c	 mov	 eax, DWORD PTR _pPatch$94389[esp+76]
  0017a	83 c0 f0	 add	 eax, -16		; fffffff0H
  0017d	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00180	83 ca ff	 or	 edx, -1
  00183	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00187	4a		 dec	 edx
  00188	85 d2		 test	 edx, edx
  0018a	7f 08		 jg	 SHORT $L100736
  0018c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0018e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00190	50		 push	 eax
  00191	ff 52 04	 call	 DWORD PTR [edx+4]
$L100736:
  00194	8b ce		 mov	 ecx, esi
  00196	e8 00 00 00 00	 call	 ?Fetch@CSqlBase@@QAEHXZ	; CSqlBase::Fetch
  0019b	85 c0		 test	 eax, eax
  0019d	0f 85 1f ff ff
	ff		 jne	 $L94387

; 44   : 	{
; 45   : 		while(query->Fetch())

  001a3	8b 7c 24 14	 mov	 edi, DWORD PTR _this$[esp+72]
$L94388:

; 54   : 		query->Close();

  001a7	8b ce		 mov	 ecx, esi
  001a9	e8 00 00 00 00	 call	 ?Close@CSqlBase@@QAEXXZ	; CSqlBase::Close
$L94385:

; 55   : 	}
; 56   : 	UNDEFINE_QUERY()
; 57   : 
; 58   : 	pSession->SendCT_PATCH_ACK(m_strFTP, &m_addrLOGIN, &vPatch);

  001ae	8d 44 24 18	 lea	 eax, DWORD PTR _vPatch$[esp+72]
  001b2	50		 push	 eax
  001b3	8b 87 80 0d 00
	00		 mov	 eax, DWORD PTR [edi+3456]
  001b9	8d 8f 88 0d 00
	00		 lea	 ecx, DWORD PTR [edi+3464]
  001bf	51		 push	 ecx
  001c0	51		 push	 ecx
  001c1	83 e8 10	 sub	 eax, 16			; 00000010H
  001c4	89 64 24 58	 mov	 DWORD PTR $T100314[esp+80], esp
  001c8	8b f4		 mov	 esi, esp
  001ca	50		 push	 eax
  001cb	e8 00 00 00 00	 call	 ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData
  001d0	8b 4c 24 60	 mov	 ecx, DWORD PTR _pSession$[esp+84]
  001d4	83 c0 10	 add	 eax, 16			; 00000010H
  001d7	83 c4 04	 add	 esp, 4
  001da	89 06		 mov	 DWORD PTR [esi], eax
  001dc	e8 00 00 00 00	 call	 ?SendCT_PATCH_ACK@CTPatchSession@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@PAUsockaddr_in@@PAV?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@@Z ; CTPatchSession::SendCT_PATCH_ACK

; 59   : 
; 60   : 	return EC_NOERROR;

  001e1	8d 4c 24 18	 lea	 ecx, DWORD PTR _vPatch$[esp+72]
  001e5	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXXZ ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Tidy

; 61   : }

  001ea	8b 4c 24 3c	 mov	 ecx, DWORD PTR __$EHRec$[esp+72]
  001ee	5f		 pop	 edi
  001ef	5e		 pop	 esi
  001f0	5d		 pop	 ebp
  001f1	33 c0		 xor	 eax, eax
  001f3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001fa	5b		 pop	 ebx
  001fb	83 c4 38	 add	 esp, 56			; 00000038H
  001fe	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L100316:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _vPatch$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE@XZ ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::~vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >
$L100318:
  00008	8d 4d e0	 lea	 ecx, DWORD PTR _pPatch$94389[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1tagPATCHFILE@@QAE@XZ
__ehhandler$?OnCT_PATCH_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z:
  00010	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T100780
  00015	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?OnCT_PATCH_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z ENDP ; CTPatchSvrModule::OnCT_PATCH_REQ
PUBLIC	??_C@_0O@EIMIBPM@CSPMinBetaVer?$AA@		; `string'
PUBLIC	?OnCT_NEWPATCH_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z ; CTPatchSvrModule::OnCT_NEWPATCH_REQ
EXTRN	?SendCT_NEWPATCH_ACK@CTPatchSession@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@PAUsockaddr_in@@PAV?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@K@Z:NEAR ; CTPatchSession::SendCT_NEWPATCH_ACK
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
xdata$x	SEGMENT
$T101372 DD	0ffffffffH
	DD	FLAT:$L100795
	DD	00H
	DD	FLAT:$L100797
$T101366 DD	019930520H
	DD	02H
	DD	FLAT:$T101372
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0O@EIMIBPM@CSPMinBetaVer?$AA@
CONST	SEGMENT
??_C@_0O@EIMIBPM@CSPMinBetaVer?$AA@ DB 'CSPMinBetaVer', 00H ; `string'
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\handler.cpp
CONST	ENDS
;	COMDAT ?OnCT_NEWPATCH_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z
_TEXT	SEGMENT
_dwVersion$ = -60					; size = 4
_this$ = -56						; size = 4
$T100791 = -52						; size = 4
_vPatch$ = -48						; size = 16
_pPatch$94415 = -32					; size = 20
__$EHRec$ = -12						; size = 12
$T100793 = 8						; size = 4
$T100792 = 8						; size = 4
_pDB$ = 8						; size = 4
_pSession$ = 12						; size = 4
?OnCT_NEWPATCH_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z PROC NEAR ; CTPatchSvrModule::OnCT_NEWPATCH_REQ, COMDAT
; _this$ = ecx

; 64   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?OnCT_NEWPATCH_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 30	 sub	 esp, 48			; 00000030H
  00018	53		 push	 ebx
  00019	55		 push	 ebp
  0001a	56		 push	 esi
  0001b	89 4c 24 10	 mov	 DWORD PTR _this$[esp+72], ecx

; 65   : 	DWORD dwVersion;
; 66   : 	pSession->m_Recv
; 67   : 		>> dwVersion;

  0001f	8b 4c 24 50	 mov	 ecx, DWORD PTR _pSession$[esp+68]
  00023	57		 push	 edi
  00024	8d 44 24 10	 lea	 eax, DWORD PTR _dwVersion$[esp+76]
  00028	50		 push	 eax
  00029	83 c1 40	 add	 ecx, 64			; 00000040H
  0002c	e8 00 00 00 00	 call	 ??5CPacket@@QAEAAV0@AAK@Z ; CPacket::operator>>

; 68   : 
; 69   : 	VPATCHFILE vPatch;

  00031	33 db		 xor	 ebx, ebx
  00033	89 5c 24 20	 mov	 DWORD PTR _vPatch$[esp+80], ebx
  00037	89 5c 24 24	 mov	 DWORD PTR _vPatch$[esp+84], ebx
  0003b	89 5c 24 28	 mov	 DWORD PTR _vPatch$[esp+88], ebx

; 70   : 	vPatch.clear();

  0003f	8d 4c 24 1c	 lea	 ecx, DWORD PTR _vPatch$[esp+76]
  00043	89 5c 24 48	 mov	 DWORD PTR __$EHRec$[esp+84], ebx
  00047	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXXZ ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Tidy

; 71   : 
; 72   : 	DEFINE_QUERY(pDB, CTBLVersion)

  0004c	8b 6c 24 50	 mov	 ebp, DWORD PTR _pDB$[esp+72]
  00050	3b eb		 cmp	 ebp, ebx
  00052	0f 84 5e 01 00
	00		 je	 $L94411
  00058	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0005b	8b cc		 mov	 ecx, esp
  0005d	89 64 24 34	 mov	 DWORD PTR $T100791[esp+104], esp
  00061	6a 0b		 push	 11			; 0000000bH
  00063	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0006a	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  0006d	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@OFNNAIND@CTBLVersion?$AA@
  00072	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  00075	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0007a	8b cd		 mov	 ecx, ebp
  0007c	e8 00 00 00 00	 call	 ?GetQuery@CSqlDatabase@@QAEPAVCSqlQuery@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CSqlDatabase::GetQuery
  00081	8b f0		 mov	 esi, eax
  00083	3b f3		 cmp	 esi, ebx
  00085	0f 84 2b 01 00
	00		 je	 $L94411

; 73   : 	query->m_dwVersion = dwVersion;

  0008b	8b 4c 24 10	 mov	 ecx, DWORD PTR _dwVersion$[esp+76]
  0008f	89 8e c4 0c 00
	00		 mov	 DWORD PTR [esi+3268], ecx

; 74   : 	if(query->Open())

  00095	53		 push	 ebx
  00096	8b ce		 mov	 ecx, esi
  00098	e8 00 00 00 00	 call	 ?Open@CSqlBase@@QAEHH@Z	; CSqlBase::Open
  0009d	85 c0		 test	 eax, eax
  0009f	0f 84 11 01 00
	00		 je	 $L94411

; 75   : 	{
; 76   : 		while(query->Fetch())

  000a5	8b ce		 mov	 ecx, esi
  000a7	e8 00 00 00 00	 call	 ?Fetch@CSqlBase@@QAEHXZ	; CSqlBase::Fetch
  000ac	85 c0		 test	 eax, eax
  000ae	0f 84 fb 00 00
	00		 je	 $L94414
  000b4	8d be 5f 0c 00
	00		 lea	 edi, DWORD PTR [esi+3167]
  000ba	8d ae 2c 0c 00
	00		 lea	 ebp, DWORD PTR [esi+3116]
$L94413:

; 77   : 		{
; 78   : 			PATCHFILE pPatch;

  000c0	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_strmgr@ATL@@3VCAtlStringMgr@1@A
  000c6	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_strmgr@ATL@@3VCAtlStringMgr@1@A ; ATL::g_strmgr
  000cb	ff 52 0c	 call	 DWORD PTR [edx+12]
  000ce	83 c0 10	 add	 eax, 16			; 00000010H
  000d1	89 44 24 30	 mov	 DWORD PTR _pPatch$94415[esp+80], eax
  000d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_strmgr@ATL@@3VCAtlStringMgr@1@A
  000da	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_strmgr@ATL@@3VCAtlStringMgr@1@A ; ATL::g_strmgr
  000df	ff 50 0c	 call	 DWORD PTR [eax+12]
  000e2	83 c0 10	 add	 eax, 16			; 00000010H
  000e5	89 44 24 34	 mov	 DWORD PTR _pPatch$94415[esp+84], eax

; 79   : 			pPatch.m_dwVersion = query->m_dwVersion;
; 80   : 			pPatch.m_strPath = query->m_szPath;

  000e9	3b fb		 cmp	 edi, ebx
  000eb	8b 8e c4 0c 00
	00		 mov	 ecx, DWORD PTR [esi+3268]
  000f1	c6 44 24 48 01	 mov	 BYTE PTR __$EHRec$[esp+84], 1
  000f6	89 4c 24 2c	 mov	 DWORD PTR _pPatch$94415[esp+76], ecx
  000fa	75 04		 jne	 SHORT $L101110
  000fc	33 c0		 xor	 eax, eax
  000fe	eb 0e		 jmp	 SHORT $L101109
$L101110:
  00100	8b c7		 mov	 eax, edi
  00102	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$L101368:
  00105	8a 08		 mov	 cl, BYTE PTR [eax]
  00107	40		 inc	 eax
  00108	3a cb		 cmp	 cl, bl
  0010a	75 f9		 jne	 SHORT $L101368
  0010c	2b c2		 sub	 eax, edx
$L101109:
  0010e	50		 push	 eax
  0010f	57		 push	 edi
  00110	8d 4c 24 38	 lea	 ecx, DWORD PTR _pPatch$94415[esp+88]
  00114	e8 00 00 00 00	 call	 ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::SetString

; 81   : 			pPatch.m_strName = query->m_szName;

  00119	3b eb		 cmp	 ebp, ebx
  0011b	75 04		 jne	 SHORT $L101140
  0011d	33 c0		 xor	 eax, eax
  0011f	eb 0e		 jmp	 SHORT $L101139
$L101140:
  00121	8b c5		 mov	 eax, ebp
  00123	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$L101369:
  00126	8a 08		 mov	 cl, BYTE PTR [eax]
  00128	40		 inc	 eax
  00129	3a cb		 cmp	 cl, bl
  0012b	75 f9		 jne	 SHORT $L101369
  0012d	2b c2		 sub	 eax, edx
$L101139:
  0012f	50		 push	 eax
  00130	55		 push	 ebp
  00131	8d 4c 24 3c	 lea	 ecx, DWORD PTR _pPatch$94415[esp+92]
  00135	e8 00 00 00 00	 call	 ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::SetString

; 82   : 			pPatch.m_dwSize = query->m_dwSize;

  0013a	8b 96 cc 0c 00
	00		 mov	 edx, DWORD PTR [esi+3276]

; 83   : 			pPatch.m_dwBetaVer = query->m_dwBetaVer;

  00140	8b 86 c8 0c 00
	00		 mov	 eax, DWORD PTR [esi+3272]

; 84   : 			vPatch.push_back(pPatch);

  00146	8d 4c 24 2c	 lea	 ecx, DWORD PTR _pPatch$94415[esp+76]
  0014a	51		 push	 ecx
  0014b	8d 4c 24 20	 lea	 ecx, DWORD PTR _vPatch$[esp+80]
  0014f	89 54 24 3c	 mov	 DWORD PTR _pPatch$94415[esp+92], edx
  00153	89 44 24 40	 mov	 DWORD PTR _pPatch$94415[esp+96], eax
  00157	e8 00 00 00 00	 call	 ?push_back@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAEXABUtagPATCHFILE@@@Z ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::push_back

; 85   : 		}

  0015c	8b 44 24 34	 mov	 eax, DWORD PTR _pPatch$94415[esp+84]
  00160	83 c0 f0	 add	 eax, -16		; fffffff0H
  00163	88 5c 24 48	 mov	 BYTE PTR __$EHRec$[esp+84], bl
  00167	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  0016a	83 c9 ff	 or	 ecx, -1
  0016d	f0 0f c1 0a	 lock	  xadd	 DWORD PTR [edx], ecx
  00171	49		 dec	 ecx
  00172	85 c9		 test	 ecx, ecx
  00174	7f 08		 jg	 SHORT $L101207
  00176	8b 08		 mov	 ecx, DWORD PTR [eax]
  00178	8b 11		 mov	 edx, DWORD PTR [ecx]
  0017a	50		 push	 eax
  0017b	ff 52 04	 call	 DWORD PTR [edx+4]
$L101207:
  0017e	8b 44 24 30	 mov	 eax, DWORD PTR _pPatch$94415[esp+80]
  00182	83 c0 f0	 add	 eax, -16		; fffffff0H
  00185	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00188	83 ca ff	 or	 edx, -1
  0018b	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0018f	4a		 dec	 edx
  00190	85 d2		 test	 edx, edx
  00192	7f 08		 jg	 SHORT $L101217
  00194	8b 08		 mov	 ecx, DWORD PTR [eax]
  00196	8b 11		 mov	 edx, DWORD PTR [ecx]
  00198	50		 push	 eax
  00199	ff 52 04	 call	 DWORD PTR [edx+4]
$L101217:
  0019c	8b ce		 mov	 ecx, esi
  0019e	e8 00 00 00 00	 call	 ?Fetch@CSqlBase@@QAEHXZ	; CSqlBase::Fetch
  001a3	85 c0		 test	 eax, eax
  001a5	0f 85 15 ff ff
	ff		 jne	 $L94413

; 75   : 	{
; 76   : 		while(query->Fetch())

  001ab	8b 6c 24 50	 mov	 ebp, DWORD PTR _pDB$[esp+72]
$L94414:

; 86   : 		query->Close();

  001af	8b ce		 mov	 ecx, esi
  001b1	e8 00 00 00 00	 call	 ?Close@CSqlBase@@QAEXXZ	; CSqlBase::Close
$L94411:

; 87   : 	}
; 88   : 	UNDEFINE_QUERY()
; 89   : 
; 90   : 	DWORD dwMinBetaVer = 0;

  001b6	33 ff		 xor	 edi, edi

; 91   : 	DEFINE_QUERY(pDB, CSPMinBetaVer)

  001b8	3b eb		 cmp	 ebp, ebx
  001ba	74 40		 je	 SHORT $L94423
  001bc	83 ec 1c	 sub	 esp, 28			; 0000001cH
  001bf	8b cc		 mov	 ecx, esp
  001c1	89 64 24 6c	 mov	 DWORD PTR $T100792[esp+100], esp
  001c5	6a 0d		 push	 13			; 0000000dH
  001c7	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  001ce	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  001d1	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@EIMIBPM@CSPMinBetaVer?$AA@
  001d6	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  001d9	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  001de	8b cd		 mov	 ecx, ebp
  001e0	e8 00 00 00 00	 call	 ?GetQuery@CSqlDatabase@@QAEPAVCSqlQuery@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CSqlDatabase::GetQuery
  001e5	8b f0		 mov	 esi, eax
  001e7	3b f3		 cmp	 esi, ebx
  001e9	74 11		 je	 SHORT $L94423

; 92   : 	if(query->Call())

  001eb	8b ce		 mov	 ecx, esi
  001ed	e8 00 00 00 00	 call	 ?Call@CSqlBase@@QAEHXZ	; CSqlBase::Call
  001f2	85 c0		 test	 eax, eax
  001f4	74 06		 je	 SHORT $L94423

; 93   : 		dwMinBetaVer = query->m_dwMinVer;

  001f6	8b be 2c 0c 00
	00		 mov	 edi, DWORD PTR [esi+3116]
$L94423:

; 94   : 	UNDEFINE_QUERY();	
; 95   : 
; 96   : 	pSession->SendCT_NEWPATCH_ACK(m_strFTP, &m_addrLOGIN, &vPatch, dwMinBetaVer);

  001fc	57		 push	 edi
  001fd	8d 44 24 20	 lea	 eax, DWORD PTR _vPatch$[esp+80]
  00201	50		 push	 eax
  00202	8b 44 24 1c	 mov	 eax, DWORD PTR _this$[esp+84]
  00206	8d 88 88 0d 00
	00		 lea	 ecx, DWORD PTR [eax+3464]
  0020c	8b 80 80 0d 00
	00		 mov	 eax, DWORD PTR [eax+3456]
  00212	51		 push	 ecx
  00213	51		 push	 ecx
  00214	83 e8 10	 sub	 eax, 16			; 00000010H
  00217	89 64 24 60	 mov	 DWORD PTR $T100793[esp+88], esp
  0021b	8b f4		 mov	 esi, esp
  0021d	50		 push	 eax
  0021e	e8 00 00 00 00	 call	 ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData
  00223	8b 4c 24 68	 mov	 ecx, DWORD PTR _pSession$[esp+92]
  00227	83 c0 10	 add	 eax, 16			; 00000010H
  0022a	83 c4 04	 add	 esp, 4
  0022d	89 06		 mov	 DWORD PTR [esi], eax
  0022f	e8 00 00 00 00	 call	 ?SendCT_NEWPATCH_ACK@CTPatchSession@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@PAUsockaddr_in@@PAV?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@K@Z ; CTPatchSession::SendCT_NEWPATCH_ACK

; 97   : 
; 98   : 	return EC_NOERROR;

  00234	8d 4c 24 1c	 lea	 ecx, DWORD PTR _vPatch$[esp+76]
  00238	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXXZ ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Tidy

; 99   : }

  0023d	8b 4c 24 40	 mov	 ecx, DWORD PTR __$EHRec$[esp+76]
  00241	5f		 pop	 edi
  00242	5e		 pop	 esi
  00243	5d		 pop	 ebp
  00244	33 c0		 xor	 eax, eax
  00246	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0024d	5b		 pop	 ebx
  0024e	83 c4 3c	 add	 esp, 60			; 0000003cH
  00251	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L100795:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _vPatch$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE@XZ ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::~vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >
$L100797:
  00008	8d 4d e0	 lea	 ecx, DWORD PTR _pPatch$94415[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1tagPATCHFILE@@QAE@XZ
__ehhandler$?OnCT_NEWPATCH_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z:
  00010	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T101366
  00015	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?OnCT_NEWPATCH_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z ENDP ; CTPatchSvrModule::OnCT_NEWPATCH_REQ
PUBLIC	??_C@_0P@PFMHOGAK@CTBLPreVersion?$AA@		; `string'
PUBLIC	?OnCT_PREPATCH_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z ; CTPatchSvrModule::OnCT_PREPATCH_REQ
EXTRN	?SendCT_PREPATCH_ACK@CTPatchSession@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@PAUsockaddr_in@@PAV?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@@Z:NEAR ; CTPatchSession::SendCT_PREPATCH_ACK
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
xdata$x	SEGMENT
$T101850 DD	0ffffffffH
	DD	FLAT:$L101381
	DD	00H
	DD	FLAT:$L101383
$T101845 DD	019930520H
	DD	02H
	DD	FLAT:$T101850
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0P@PFMHOGAK@CTBLPreVersion?$AA@
CONST	SEGMENT
??_C@_0P@PFMHOGAK@CTBLPreVersion?$AA@ DB 'CTBLPreVersion', 00H ; `string'
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\handler.cpp
CONST	ENDS
;	COMDAT ?OnCT_PREPATCH_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z
_TEXT	SEGMENT
_dwVersion$ = -56					; size = 4
_this$ = -52						; size = 4
_vPatch$ = -48						; size = 16
_pPatch$94443 = -32					; size = 20
__$EHRec$ = -12						; size = 12
$T101379 = 8						; size = 4
$T101378 = 8						; size = 4
_pDB$ = 8						; size = 4
_pSession$ = 12						; size = 4
?OnCT_PREPATCH_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z PROC NEAR ; CTPatchSvrModule::OnCT_PREPATCH_REQ, COMDAT
; _this$ = ecx

; 102  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?OnCT_PREPATCH_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00018	53		 push	 ebx
  00019	55		 push	 ebp
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	8b f9		 mov	 edi, ecx

; 103  : 	DWORD dwVersion;
; 104  : 	pSession->m_Recv
; 105  : 		>> dwVersion;

  0001e	8b 4c 24 50	 mov	 ecx, DWORD PTR _pSession$[esp+68]
  00022	8d 44 24 10	 lea	 eax, DWORD PTR _dwVersion$[esp+72]
  00026	50		 push	 eax
  00027	83 c1 40	 add	 ecx, 64			; 00000040H
  0002a	89 7c 24 18	 mov	 DWORD PTR _this$[esp+76], edi
  0002e	e8 00 00 00 00	 call	 ??5CPacket@@QAEAAV0@AAK@Z ; CPacket::operator>>

; 106  : 
; 107  : 	VPATCHFILE vPatch;

  00033	33 db		 xor	 ebx, ebx
  00035	89 5c 24 1c	 mov	 DWORD PTR _vPatch$[esp+76], ebx
  00039	89 5c 24 20	 mov	 DWORD PTR _vPatch$[esp+80], ebx
  0003d	89 5c 24 24	 mov	 DWORD PTR _vPatch$[esp+84], ebx

; 108  : 	vPatch.clear();

  00041	8d 4c 24 18	 lea	 ecx, DWORD PTR _vPatch$[esp+72]
  00045	89 5c 24 44	 mov	 DWORD PTR __$EHRec$[esp+80], ebx
  00049	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXXZ ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Tidy

; 109  : 
; 110  : 	DEFINE_QUERY(pDB, CTBLPreVersion)

  0004e	8b 74 24 4c	 mov	 esi, DWORD PTR _pDB$[esp+68]
  00052	3b f3		 cmp	 esi, ebx
  00054	0f 84 54 01 00
	00		 je	 $L94439
  0005a	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0005d	8b cc		 mov	 ecx, esp
  0005f	89 64 24 68	 mov	 DWORD PTR $T101378[esp+96], esp
  00063	6a 0e		 push	 14			; 0000000eH
  00065	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  0006c	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  0006f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@PFMHOGAK@CTBLPreVersion?$AA@
  00074	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  00077	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0007c	8b ce		 mov	 ecx, esi
  0007e	e8 00 00 00 00	 call	 ?GetQuery@CSqlDatabase@@QAEPAVCSqlQuery@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CSqlDatabase::GetQuery
  00083	8b f0		 mov	 esi, eax
  00085	3b f3		 cmp	 esi, ebx
  00087	0f 84 21 01 00
	00		 je	 $L94439

; 111  : 	query->m_dwBetaVer = dwVersion;

  0008d	8b 4c 24 10	 mov	 ecx, DWORD PTR _dwVersion$[esp+72]
  00091	89 8e c4 0c 00
	00		 mov	 DWORD PTR [esi+3268], ecx

; 112  : 	if(query->Open())

  00097	53		 push	 ebx
  00098	8b ce		 mov	 ecx, esi
  0009a	e8 00 00 00 00	 call	 ?Open@CSqlBase@@QAEHH@Z	; CSqlBase::Open
  0009f	85 c0		 test	 eax, eax
  000a1	0f 84 07 01 00
	00		 je	 $L94439

; 113  : 	{
; 114  : 		while(query->Fetch())

  000a7	8b ce		 mov	 ecx, esi
  000a9	e8 00 00 00 00	 call	 ?Fetch@CSqlBase@@QAEHXZ	; CSqlBase::Fetch
  000ae	85 c0		 test	 eax, eax
  000b0	0f 84 f1 00 00
	00		 je	 $L94442
  000b6	8d be 5f 0c 00
	00		 lea	 edi, DWORD PTR [esi+3167]
  000bc	8d ae 2c 0c 00
	00		 lea	 ebp, DWORD PTR [esi+3116]
$L94441:

; 115  : 		{
; 116  : 			PATCHFILE pPatch;

  000c2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_strmgr@ATL@@3VCAtlStringMgr@1@A
  000c8	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_strmgr@ATL@@3VCAtlStringMgr@1@A ; ATL::g_strmgr
  000cd	ff 52 0c	 call	 DWORD PTR [edx+12]
  000d0	83 c0 10	 add	 eax, 16			; 00000010H
  000d3	89 44 24 2c	 mov	 DWORD PTR _pPatch$94443[esp+76], eax
  000d7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_strmgr@ATL@@3VCAtlStringMgr@1@A
  000dc	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_strmgr@ATL@@3VCAtlStringMgr@1@A ; ATL::g_strmgr
  000e1	ff 50 0c	 call	 DWORD PTR [eax+12]
  000e4	83 c0 10	 add	 eax, 16			; 00000010H
  000e7	89 44 24 30	 mov	 DWORD PTR _pPatch$94443[esp+80], eax

; 117  : 			pPatch.m_dwBetaVer	= query->m_dwBetaVer;
; 118  : 			pPatch.m_strPath	= query->m_szPath;

  000eb	3b fb		 cmp	 edi, ebx
  000ed	8b 8e c4 0c 00
	00		 mov	 ecx, DWORD PTR [esi+3268]
  000f3	c6 44 24 44 01	 mov	 BYTE PTR __$EHRec$[esp+80], 1
  000f8	89 4c 24 38	 mov	 DWORD PTR _pPatch$94443[esp+88], ecx
  000fc	75 04		 jne	 SHORT $L101693
  000fe	33 c0		 xor	 eax, eax
  00100	eb 0e		 jmp	 SHORT $L101692
$L101693:
  00102	8b c7		 mov	 eax, edi
  00104	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$L101847:
  00107	8a 08		 mov	 cl, BYTE PTR [eax]
  00109	40		 inc	 eax
  0010a	3a cb		 cmp	 cl, bl
  0010c	75 f9		 jne	 SHORT $L101847
  0010e	2b c2		 sub	 eax, edx
$L101692:
  00110	50		 push	 eax
  00111	57		 push	 edi
  00112	8d 4c 24 34	 lea	 ecx, DWORD PTR _pPatch$94443[esp+84]
  00116	e8 00 00 00 00	 call	 ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::SetString

; 119  : 			pPatch.m_strName	= query->m_szName;

  0011b	3b eb		 cmp	 ebp, ebx
  0011d	75 04		 jne	 SHORT $L101723
  0011f	33 c0		 xor	 eax, eax
  00121	eb 0e		 jmp	 SHORT $L101722
$L101723:
  00123	8b c5		 mov	 eax, ebp
  00125	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$L101848:
  00128	8a 08		 mov	 cl, BYTE PTR [eax]
  0012a	40		 inc	 eax
  0012b	3a cb		 cmp	 cl, bl
  0012d	75 f9		 jne	 SHORT $L101848
  0012f	2b c2		 sub	 eax, edx
$L101722:
  00131	50		 push	 eax
  00132	55		 push	 ebp
  00133	8d 4c 24 38	 lea	 ecx, DWORD PTR _pPatch$94443[esp+88]
  00137	e8 00 00 00 00	 call	 ?SetString@?$CSimpleStringT@D$0A@@ATL@@QAEXPBDH@Z ; ATL::CSimpleStringT<char,0>::SetString

; 120  : 			pPatch.m_dwSize		= query->m_dwSize;

  0013c	8b 96 c8 0c 00
	00		 mov	 edx, DWORD PTR [esi+3272]

; 121  : 
; 122  : 			vPatch.push_back(pPatch);

  00142	8d 44 24 28	 lea	 eax, DWORD PTR _pPatch$94443[esp+72]
  00146	50		 push	 eax
  00147	8d 4c 24 1c	 lea	 ecx, DWORD PTR _vPatch$[esp+76]
  0014b	89 54 24 38	 mov	 DWORD PTR _pPatch$94443[esp+88], edx
  0014f	e8 00 00 00 00	 call	 ?push_back@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAEXABUtagPATCHFILE@@@Z ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::push_back

; 123  : 		}

  00154	8b 44 24 30	 mov	 eax, DWORD PTR _pPatch$94443[esp+80]
  00158	83 c0 f0	 add	 eax, -16		; fffffff0H
  0015b	88 5c 24 44	 mov	 BYTE PTR __$EHRec$[esp+80], bl
  0015f	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00162	83 ca ff	 or	 edx, -1
  00165	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00169	4a		 dec	 edx
  0016a	85 d2		 test	 edx, edx
  0016c	7f 08		 jg	 SHORT $L101791
  0016e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00170	8b 11		 mov	 edx, DWORD PTR [ecx]
  00172	50		 push	 eax
  00173	ff 52 04	 call	 DWORD PTR [edx+4]
$L101791:
  00176	8b 44 24 2c	 mov	 eax, DWORD PTR _pPatch$94443[esp+76]
  0017a	83 c0 f0	 add	 eax, -16		; fffffff0H
  0017d	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00180	83 ca ff	 or	 edx, -1
  00183	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00187	4a		 dec	 edx
  00188	85 d2		 test	 edx, edx
  0018a	7f 08		 jg	 SHORT $L101801
  0018c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0018e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00190	50		 push	 eax
  00191	ff 52 04	 call	 DWORD PTR [edx+4]
$L101801:
  00194	8b ce		 mov	 ecx, esi
  00196	e8 00 00 00 00	 call	 ?Fetch@CSqlBase@@QAEHXZ	; CSqlBase::Fetch
  0019b	85 c0		 test	 eax, eax
  0019d	0f 85 1f ff ff
	ff		 jne	 $L94441

; 113  : 	{
; 114  : 		while(query->Fetch())

  001a3	8b 7c 24 14	 mov	 edi, DWORD PTR _this$[esp+72]
$L94442:

; 124  : 		query->Close();

  001a7	8b ce		 mov	 ecx, esi
  001a9	e8 00 00 00 00	 call	 ?Close@CSqlBase@@QAEXXZ	; CSqlBase::Close
$L94439:

; 125  : 	}
; 126  : 	UNDEFINE_QUERY()
; 127  : 
; 128  : 	pSession->SendCT_PREPATCH_ACK(m_strPreFTP, &m_addrLOGIN, &vPatch);

  001ae	8d 44 24 18	 lea	 eax, DWORD PTR _vPatch$[esp+72]
  001b2	50		 push	 eax
  001b3	8b 87 84 0d 00
	00		 mov	 eax, DWORD PTR [edi+3460]
  001b9	8d 8f 88 0d 00
	00		 lea	 ecx, DWORD PTR [edi+3464]
  001bf	51		 push	 ecx
  001c0	51		 push	 ecx
  001c1	83 e8 10	 sub	 eax, 16			; 00000010H
  001c4	89 64 24 58	 mov	 DWORD PTR $T101379[esp+80], esp
  001c8	8b f4		 mov	 esi, esp
  001ca	50		 push	 eax
  001cb	e8 00 00 00 00	 call	 ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData
  001d0	8b 4c 24 60	 mov	 ecx, DWORD PTR _pSession$[esp+84]
  001d4	83 c0 10	 add	 eax, 16			; 00000010H
  001d7	83 c4 04	 add	 esp, 4
  001da	89 06		 mov	 DWORD PTR [esi], eax
  001dc	e8 00 00 00 00	 call	 ?SendCT_PREPATCH_ACK@CTPatchSession@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@PAUsockaddr_in@@PAV?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@@Z ; CTPatchSession::SendCT_PREPATCH_ACK

; 129  : 
; 130  : 	return EC_NOERROR;

  001e1	8d 4c 24 18	 lea	 ecx, DWORD PTR _vPatch$[esp+72]
  001e5	e8 00 00 00 00	 call	 ?_Tidy@?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@IAEXXZ ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::_Tidy

; 131  : }

  001ea	8b 4c 24 3c	 mov	 ecx, DWORD PTR __$EHRec$[esp+72]
  001ee	5f		 pop	 edi
  001ef	5e		 pop	 esi
  001f0	5d		 pop	 ebp
  001f1	33 c0		 xor	 eax, eax
  001f3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001fa	5b		 pop	 ebx
  001fb	83 c4 38	 add	 esp, 56			; 00000038H
  001fe	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L101381:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR _vPatch$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@UtagPATCHFILE@@V?$allocator@UtagPATCHFILE@@@std@@@std@@QAE@XZ ; std::vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >::~vector<tagPATCHFILE,std::allocator<tagPATCHFILE> >
$L101383:
  00008	8d 4d e0	 lea	 ecx, DWORD PTR _pPatch$94443[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1tagPATCHFILE@@QAE@XZ
__ehhandler$?OnCT_PREPATCH_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z:
  00010	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T101845
  00015	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?OnCT_PREPATCH_REQ@CTPatchSvrModule@@IAEKPAVCSqlDatabase@@PAVCTPatchSession@@@Z ENDP ; CTPatchSvrModule::OnCT_PREPATCH_REQ
END
