; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\BindDesc.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??0CBindDesc@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCBindDesc@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CBindDesc@@QAE@FH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CBindDesc@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MAlloc@CBindDesc@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?MAlloc@CBindDesc@@QAEXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@CBindDesc@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@G@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CBindDesc@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0CBindDesc@@QAE@XZ				; CBindDesc::CBindDesc
PUBLIC	??_7CBindDesc@@6B@				; CBindDesc::`vftable'
PUBLIC	??_GCBindDesc@@UAEPAXI@Z			; CBindDesc::`scalar deleting destructor'
EXTRN	??_ECBindDesc@@UAEPAXI@Z:NEAR			; CBindDesc::`vector deleting destructor'
;	COMDAT ??_7CBindDesc@@6B@
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\binddesc.cpp
CONST	SEGMENT
??_7CBindDesc@@6B@ DD FLAT:??_ECBindDesc@@UAEPAXI@Z	; CBindDesc::`vftable'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0CBindDesc@@QAE@XZ
_TEXT	SEGMENT
??0CBindDesc@@QAE@XZ PROC NEAR				; CBindDesc::CBindDesc, COMDAT
; _this$ = ecx

; 13   : {

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CBindDesc@@6B@

; 14   : 	m_ptr = NULL;

  00008	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0

; 15   : }

  0000f	c3		 ret	 0
??0CBindDesc@@QAE@XZ ENDP				; CBindDesc::CBindDesc
_TEXT	ENDS
PUBLIC	??0CBindDesc@@QAE@FH@Z				; CBindDesc::CBindDesc
; Function compile flags: /Ogty
;	COMDAT ??0CBindDesc@@QAE@FH@Z
_TEXT	SEGMENT
_type$ = 8						; size = 2
_size$ = 12						; size = 4
??0CBindDesc@@QAE@FH@Z PROC NEAR			; CBindDesc::CBindDesc, COMDAT
; _this$ = ecx

; 19   : 	m_ptr = NULL;
; 20   : 	m_type = type;
; 21   : 	m_size = size;

  00000	8b 54 24 08	 mov	 edx, DWORD PTR _size$[esp-4]
  00004	8b c1		 mov	 eax, ecx
  00006	66 8b 4c 24 04	 mov	 cx, WORD PTR _type$[esp-4]
  0000b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CBindDesc@@6B@
  00011	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
  00018	66 89 48 04	 mov	 WORD PTR [eax+4], cx
  0001c	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 22   : }

  0001f	c2 08 00	 ret	 8
??0CBindDesc@@QAE@FH@Z ENDP				; CBindDesc::CBindDesc
_TEXT	ENDS
PUBLIC	?Free@CBindDesc@@QAEXXZ				; CBindDesc::Free
EXTRN	_free:NEAR
; Function compile flags: /Ogty
;	COMDAT ?Free@CBindDesc@@QAEXXZ
_TEXT	SEGMENT
?Free@CBindDesc@@QAEXXZ PROC NEAR			; CBindDesc::Free, COMDAT
; _this$ = ecx

; 41   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 42   : 	if(m_ptr)	

  00003	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L93024

; 43   : 		free(m_ptr);

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 _free
  00010	83 c4 04	 add	 esp, 4
$L93024:

; 44   : 	m_ptr = NULL;

  00013	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0001a	5e		 pop	 esi

; 45   : }

  0001b	c3		 ret	 0
?Free@CBindDesc@@QAEXXZ ENDP				; CBindDesc::Free
_TEXT	ENDS
PUBLIC	??1CBindDesc@@UAE@XZ				; CBindDesc::~CBindDesc
; Function compile flags: /Ogty
;	COMDAT ??1CBindDesc@@UAE@XZ
_TEXT	SEGMENT
??1CBindDesc@@UAE@XZ PROC NEAR				; CBindDesc::~CBindDesc, COMDAT
; _this$ = ecx

; 25   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 26   : 	Free();

  00003	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00006	85 c0		 test	 eax, eax
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CBindDesc@@6B@
  0000e	74 09		 je	 SHORT $L93032
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 _free
  00016	83 c4 04	 add	 esp, 4
$L93032:
  00019	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00020	5e		 pop	 esi

; 27   : }

  00021	c3		 ret	 0
??1CBindDesc@@UAE@XZ ENDP				; CBindDesc::~CBindDesc
_TEXT	ENDS
PUBLIC	?MAlloc@CBindDesc@@QAEXK@Z			; CBindDesc::MAlloc
EXTRN	_malloc:NEAR
; Function compile flags: /Ogty
;	COMDAT ?MAlloc@CBindDesc@@QAEXK@Z
_TEXT	SEGMENT
_cb$ = 8						; size = 4
?MAlloc@CBindDesc@@QAEXK@Z PROC NEAR			; CBindDesc::MAlloc, COMDAT
; _this$ = ecx

; 35   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 36   : 	Free();

  00003	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L93038
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 _free
  00010	83 c4 04	 add	 esp, 4
$L93038:

; 37   : 	m_ptr = malloc(cb);

  00013	8b 44 24 08	 mov	 eax, DWORD PTR _cb$[esp]
  00017	50		 push	 eax
  00018	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0001f	e8 00 00 00 00	 call	 _malloc
  00024	83 c4 04	 add	 esp, 4
  00027	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0002a	5e		 pop	 esi

; 38   : }

  0002b	c2 04 00	 ret	 4
?MAlloc@CBindDesc@@QAEXK@Z ENDP				; CBindDesc::MAlloc
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Ogty
;	COMDAT ??_GCBindDesc@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCBindDesc@@UAEPAXI@Z PROC NEAR			; CBindDesc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00006	85 c0		 test	 eax, eax
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CBindDesc@@6B@
  0000e	74 09		 je	 SHORT $L93051
  00010	50		 push	 eax
  00011	e8 00 00 00 00	 call	 _free
  00016	83 c4 04	 add	 esp, 4
$L93051:
  00019	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0001e	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00025	74 09		 je	 SHORT $L93053
  00027	56		 push	 esi
  00028	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002d	83 c4 04	 add	 esp, 4
$L93053:
  00030	8b c6		 mov	 eax, esi
  00032	5e		 pop	 esi
  00033	c2 04 00	 ret	 4
??_GCBindDesc@@UAEPAXI@Z ENDP				; CBindDesc::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?MAlloc@CBindDesc@@QAEXXZ			; CBindDesc::MAlloc
; Function compile flags: /Ogty
;	COMDAT ?MAlloc@CBindDesc@@QAEXXZ
_TEXT	SEGMENT
?MAlloc@CBindDesc@@QAEXXZ PROC NEAR			; CBindDesc::MAlloc, COMDAT
; _this$ = ecx

; 30   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 31   : 	MAlloc(m_size);

  00003	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00006	85 c0		 test	 eax, eax
  00008	57		 push	 edi
  00009	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0000c	74 09		 je	 SHORT $L93065
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _free
  00014	83 c4 04	 add	 esp, 4
$L93065:
  00017	57		 push	 edi
  00018	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  0001f	e8 00 00 00 00	 call	 _malloc
  00024	83 c4 04	 add	 esp, 4
  00027	5f		 pop	 edi
  00028	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0002b	5e		 pop	 esi

; 32   : }

  0002c	c3		 ret	 0
?MAlloc@CBindDesc@@QAEXXZ ENDP				; CBindDesc::MAlloc
_TEXT	ENDS
END
