; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\DBAccess.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0P@EOMPGPJC@CSPLoadService?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@OFNNAIND@CTBLVersion?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@EIMIBPM@CSPMinBetaVer?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@PFMHOGAK@CTBLPreVersion?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@BIGOCFAD@CSPPreComplete?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?InitQueryTPatchSvr@@YAHPAVCSqlDatabase@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@G@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSPPreComplete@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BK@IECNCIJF@?$HLCALL?5TPreCompleteAdd?$CI?$DP?$CJ?$HN?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CSPPreComplete@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_GCSPPreComplete@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSPPreComplete@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNumParam@CSPPreComplete@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BindParameters@CSPPreComplete@@UAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTBLPreVersion@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0GB@BGECDJEC@SELECT?5dwBetaVer?0?5szPath?0?5szName@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CTBLPreVersion@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_GCTBLPreVersion@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CTBLPreVersion@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNumCol@CTBLPreVersion@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNumParam@CTBLPreVersion@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BindColumns@CTBLPreVersion@@UAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BindParameters@CTBLPreVersion@@UAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSPMinBetaVer@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BH@PKLBIMMO@?$HL?$DP?5?$DN?5CALL?5TMinBetaVer?$HN?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CSPMinBetaVer@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_GCSPMinBetaVer@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSPMinBetaVer@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNumParam@CSPMinBetaVer@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BindParameters@CSPMinBetaVer@@UAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTBLVersion@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0GJ@MNDCAIFG@SELECT?5dwVersion?0?5szPath?0?5szName@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CTBLVersion@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_GCTBLVersion@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CTBLVersion@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNumCol@CTBLVersion@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNumParam@CTBLVersion@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BindColumns@CTBLVersion@@UAEFXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BindParameters@CTBLVersion@@UAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CSPLoadService@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BN@FKLLIGDD@?$HLCALL?5TLoadService?$CI?$DP?0?$DP?0?$DP?0?$DP?$CJ?$HN?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CSPLoadService@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_GCSPLoadService@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSPLoadService@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNumParam@CSPLoadService@@UAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?BindParameters@CSPLoadService@@UAEFH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC NEAR			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC NEAR	; std::char_traits<char>::assign, COMDAT

; 331  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 332  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogty
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC NEAR		; std::char_traits<char>::length, COMDAT

; 352  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$L93114:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $L93114
  0000e	2b c2		 sub	 eax, edx

; 353  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
; Function compile flags: /Ogty
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::copy, COMDAT

; 358  : 		return ((_Elem *)::memcpy(_First1, _First2, _Count));

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR __First2$[esp]
  00009	57		 push	 edi
  0000a	8b 7c 24 0c	 mov	 edi, DWORD PTR __First1$[esp+4]
  0000e	8b c1		 mov	 eax, ecx
  00010	8b d7		 mov	 edx, edi
  00012	c1 e9 02	 shr	 ecx, 2
  00015	f3 a5		 rep movsd
  00017	8b c8		 mov	 ecx, eax
  00019	83 e1 03	 and	 ecx, 3
  0001c	f3 a4		 rep movsb
  0001e	5f		 pop	 edi
  0001f	8b c2		 mov	 eax, edx
  00021	5e		 pop	 esi

; 359  : 		}

  00022	c3		 ret	 0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	_memmove:NEAR
; Function compile flags: /Ogty
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::move, COMDAT

; 370  : 		return ((_Elem *)::memmove(_First1, _First2, _Count));

  00000	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1109 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1110 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L93128
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  00009	c3		 ret	 0
$L93128:

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC NEAR		; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L93136
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  00009	c3		 ret	 0
$L93136:

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC NEAR	; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1494 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi

; 1495 : 		if (_Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00001	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  00004	83 fe 10	 cmp	 esi, 16			; 00000010H
  00007	57		 push	 edi
  00008	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0000b	72 04		 jb	 SHORT $L93149
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	eb 02		 jmp	 SHORT $L93150
$L93149:
  00011	8b d0		 mov	 edx, eax
$L93150:
  00013	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00017	3b fa		 cmp	 edi, edx
  00019	72 17		 jb	 SHORT $L92848
  0001b	83 fe 10	 cmp	 esi, 16			; 00000010H
  0001e	72 02		 jb	 SHORT $L93157
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
$L93157:
  00022	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00025	03 c8		 add	 ecx, eax
  00027	3b cf		 cmp	 ecx, edi
  00029	76 07		 jbe	 SHORT $L92848
  0002b	5f		 pop	 edi

; 1497 : 		else
; 1498 : 			return (true);

  0002c	b0 01		 mov	 al, 1
  0002e	5e		 pop	 esi

; 1499 : 		}

  0002f	c2 04 00	 ret	 4
$L92848:
  00032	5f		 pop	 edi

; 1496 : 			return (false);	// don't ask

  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 1499 : 		}

  00036	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC NEAR		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 159  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
; Function compile flags: /Ogty
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC NEAR		; std::_Allocate<char>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 35   : 	}

  0000d	c3		 ret	 0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC NEAR ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 34   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 35   : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogty
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $L93181
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1476 : 		}

  00014	c2 04 00	 ret	 4

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$L93181:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 1476 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1114 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1115 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1116 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC NEAR	; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 138  : 		}

  0000d	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1510 : 		if (!_Built)

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Built$[esp-4]
  00004	84 c0		 test	 al, al
  00006	53		 push	 ebx
  00007	55		 push	 ebp
  00008	8b 6c 24 10	 mov	 ebp, DWORD PTR __Newsize$[esp+4]
  0000c	8b d9		 mov	 ebx, ecx
  0000e	74 2f		 je	 SHORT $L93213

; 1511 : 			;
; 1512 : 		else if (_BUF_SIZE <= _Myres)

  00010	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  00014	72 29		 jb	 SHORT $L93213

; 1513 : 			{	// copy any leftovers to small buffer and deallocate
; 1514 : 			_Elem *_Ptr = _Bx._Ptr;
; 1515 : 			if (0 < _Newsize)

  00016	85 ed		 test	 ebp, ebp
  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	57		 push	 edi
  0001c	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  0001f	76 14		 jbe	 SHORT $L93210
  00021	56		 push	 esi

; 1516 : 				_Traits::copy(_Bx._Buf, _Ptr, _Newsize);

  00022	8b cd		 mov	 ecx, ebp
  00024	8b d1		 mov	 edx, ecx
  00026	c1 e9 02	 shr	 ecx, 2
  00029	8b f0		 mov	 esi, eax
  0002b	f3 a5		 rep movsd
  0002d	8b ca		 mov	 ecx, edx
  0002f	83 e1 03	 and	 ecx, 3
  00032	f3 a4		 rep movsb
  00034	5e		 pop	 esi
$L93210:

; 1517 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4
  0003e	5f		 pop	 edi
$L93213:

; 1518 : 			}
; 1519 : 		_Myres = _BUF_SIZE - 1;
; 1520 : 		_Eos(_Newsize);

  0003f	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00042	c7 43 18 0f 00
	00 00		 mov	 DWORD PTR [ebx+24], 15	; 0000000fH
  00049	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0004e	5d		 pop	 ebp
  0004f	5b		 pop	 ebx

; 1521 : 		}

  00050	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
EXTRN	?_Xran@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xran
; Function compile flags: /Ogty
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 792  : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp

; 793  : 		if (_Mysize < _Off)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	39 6e 14	 cmp	 DWORD PTR [esi+20], ebp
  0000b	57		 push	 edi
  0000c	73 05		 jae	 SHORT $L92792

; 794  : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L92792:

; 795  : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c5		 sub	 eax, ebp
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $L92793

; 796  : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$L92793:

; 797  : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 47		 jbe	 SHORT $L93278

; 798  : 			{	// move elements down
; 799  : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 800  : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0002c	53		 push	 ebx
  0002d	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  00030	72 04		 jb	 SHORT $L93243
  00032	8b 13		 mov	 edx, DWORD PTR [ebx]
  00034	eb 02		 jmp	 SHORT $L93244
$L93243:
  00036	8b d3		 mov	 edx, ebx
$L93244:
  00038	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0003b	72 04		 jb	 SHORT $L93250
  0003d	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0003f	eb 02		 jmp	 SHORT $L93251
$L93250:
  00041	8b cb		 mov	 ecx, ebx
$L93251:
  00043	2b c7		 sub	 eax, edi

; 803  : 			}
; 804  : 		return (*this);

  00045	03 d5		 add	 edx, ebp
  00047	50		 push	 eax
  00048	03 d7		 add	 edx, edi
  0004a	52		 push	 edx
  0004b	03 cd		 add	 ecx, ebp
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 _memmove
  00053	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00056	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00059	2b c7		 sub	 eax, edi
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005e	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00061	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00064	72 02		 jb	 SHORT $L93273

; 801  : 			size_type _Newsize = _Mysize - _Count;
; 802  : 			_Eos(_Newsize);

  00066	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$L93273:
  00068	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0
  0006c	5b		 pop	 ebx
$L93278:
  0006d	5f		 pop	 edi

; 803  : 			}
; 804  : 		return (*this);

  0006e	8b c6		 mov	 eax, esi
  00070	5e		 pop	 esi
  00071	5d		 pop	 ebp

; 805  : 		}

  00072	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	__CxxThrowException@8:NEAR
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T93486	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
$T93488	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L93286
$T93489	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L93284
$T93487	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T93488
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:$T93489
$T93480	DD	019930520H
	DD	04H
	DD	FLAT:$T93486
	DD	02H
	DD	FLAT:$T93487
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1444 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1445 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	8b d8		 mov	 ebx, eax
  00022	83 cb 0f	 or	 ebx, 15			; 0000000fH

; 1446 : 		if (max_size() < _Newres)

  00025	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00028	57		 push	 edi
  00029	8b f1		 mov	 esi, ecx
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00031	76 04		 jbe	 SHORT $L92838

; 1447 : 			_Newres = _Newsize;	// undo roundup if too big

  00033	8b d8		 mov	 ebx, eax

; 1448 : 		else if (_Newres / 3 < _Myres / 2

  00035	eb 22		 jmp	 SHORT $L92840
$L92838:

; 1449 : 			&& _Myres <= max_size() - _Myres / 2)

  00037	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  0003a	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0003f	f7 e3		 mul	 ebx
  00041	8b cf		 mov	 ecx, edi
  00043	d1 e9		 shr	 ecx, 1
  00045	d1 ea		 shr	 edx, 1
  00047	3b d1		 cmp	 edx, ecx
  00049	73 0e		 jae	 SHORT $L92840
  0004b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00050	2b c1		 sub	 eax, ecx
  00052	3b f8		 cmp	 edi, eax
  00054	77 03		 ja	 SHORT $L92840

; 1450 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00056	8d 1c 39	 lea	 ebx, DWORD PTR [ecx+edi]
$L92840:

; 1451 : 		_Elem *_Ptr;
; 1452 : 
; 1453 : 		_TRY_BEGIN
; 1454 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00059	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  0005c	51		 push	 ecx
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00064	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00069	8b d0		 mov	 edx, eax
  0006b	83 c4 04	 add	 esp, 4
  0006e	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
  00071	eb 29		 jmp	 SHORT $L92842
$L93284:

; 1455 : 		_CATCH_ALL
; 1456 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  00073	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00076	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 1457 : 			_TRY_BEGIN
; 1458 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00079	40		 inc	 eax
  0007a	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0007d	50		 push	 eax
  0007e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00082	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00087	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0008a	83 c4 04	 add	 esp, 4

; 1462 : 			_CATCH_END
; 1463 : 		_CATCH_END

  0008d	b8 00 00 00 00	 mov	 eax, $L93481
  00092	c3		 ret	 0
$L93481:
  00093	8b 5d e8	 mov	 ebx, DWORD PTR __Newres$[ebp]
  00096	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00099	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$L92842:

; 1464 : 
; 1465 : 		if (0 < _Oldlen)

  0009c	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  0009f	85 c9		 test	 ecx, ecx
  000a1	76 24		 jbe	 SHORT $L93404

; 1466 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  000a3	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000a7	72 05		 jb	 SHORT $L93399
  000a9	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000ac	eb 03		 jmp	 SHORT $L93400
$L93399:
  000ae	83 c6 04	 add	 esi, 4
$L93400:
  000b1	8b c1		 mov	 eax, ecx
  000b3	c1 e9 02	 shr	 ecx, 2
  000b6	8b fa		 mov	 edi, edx
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb
  000c1	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000c4	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
$L93404:

; 1467 : 		_Tidy(true);

  000c7	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000cb	72 12		 jb	 SHORT $L93440
  000cd	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000d0	51		 push	 ecx
  000d1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d6	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000d9	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000dc	83 c4 04	 add	 esp, 4
$L93440:

; 1468 : 		_Bx._Ptr = _Ptr;
; 1469 : 		_Myres = _Newres;
; 1470 : 		_Eos(_Oldlen);

  000df	83 fb 10	 cmp	 ebx, 16			; 00000010H
  000e2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000e5	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e8	89 10		 mov	 DWORD PTR [eax], edx
  000ea	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  000ed	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  000f0	72 02		 jb	 SHORT $L93472
  000f2	8b c2		 mov	 eax, edx
$L93472:

; 1471 : 		}

  000f4	5f		 pop	 edi
  000f5	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  000f9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fc	5e		 pop	 esi
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00104	5b		 pop	 ebx
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c2 08 00	 ret	 8
$L93286:

; 1459 : 			_CATCH_ALL
; 1460 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010b	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0010e	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00112	72 0c		 jb	 SHORT $L93379
  00114	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00117	52		 push	 edx
  00118	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0011d	83 c4 04	 add	 esp, 4
$L93379:

; 1461 : 			_RERAISE;

  00120	6a 00		 push	 0
  00122	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00129	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00130	6a 00		 push	 0
  00132	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00136	e8 00 00 00 00	 call	 __CxxThrowException@8
$L93491:
$L93485:
  0013b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T93480
  00005	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 456  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 457  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $L93530
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$L93530:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 458  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xlen
; Function compile flags: /Ogty
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1480 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	56		 push	 esi

; 1481 : 		if (max_size() < _Newsize)

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR __Newsize$[esp+4]
  00006	83 fe fe	 cmp	 esi, -2			; fffffffeH
  00009	8b e9		 mov	 ebp, ecx
  0000b	76 05		 jbe	 SHORT $L92801

; 1482 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L92801:

; 1483 : 		if (_Myres < _Newsize)

  00012	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00015	3b c6		 cmp	 eax, esi
  00017	73 19		 jae	 SHORT $L92802

; 1484 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0001c	50		 push	 eax
  0001d	56		 push	 esi
  0001e	8b cd		 mov	 ecx, ebp
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c0		 xor	 eax, eax
  00027	3b c6		 cmp	 eax, esi
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5d		 pop	 ebp

; 1491 : 		}

  0002f	c2 08 00	 ret	 8
$L92802:

; 1485 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	8a 4c 24 10	 mov	 cl, BYTE PTR __Trim$[esp+4]
  00036	84 c9		 test	 cl, cl
  00038	74 5c		 je	 SHORT $L92804
  0003a	83 fe 10	 cmp	 esi, 16			; 00000010H
  0003d	73 57		 jae	 SHORT $L92804
  0003f	53		 push	 ebx

; 1486 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1487 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  00040	8b 5d 14	 mov	 ebx, DWORD PTR [ebp+20]
  00043	3b f3		 cmp	 esi, ebx
  00045	73 02		 jae	 SHORT $L93550
  00047	8b de		 mov	 ebx, esi
$L93550:
  00049	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004c	72 2b		 jb	 SHORT $L93605
  0004e	85 db		 test	 ebx, ebx
  00050	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00053	57		 push	 edi
  00054	8d 7d 04	 lea	 edi, DWORD PTR [ebp+4]
  00057	76 16		 jbe	 SHORT $L93603
  00059	8b cb		 mov	 ecx, ebx
  0005b	8b d1		 mov	 edx, ecx
  0005d	c1 e9 02	 shr	 ecx, 2
  00060	8b f0		 mov	 esi, eax
  00062	f3 a5		 rep movsd
  00064	8b ca		 mov	 ecx, edx
  00066	83 e1 03	 and	 ecx, 3
  00069	f3 a4		 rep movsb
  0006b	8b 74 24 14	 mov	 esi, DWORD PTR __Newsize$[esp+12]
$L93603:
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00075	83 c4 04	 add	 esp, 4
  00078	5f		 pop	 edi
$L93605:
  00079	89 5d 14	 mov	 DWORD PTR [ebp+20], ebx

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  0007c	33 c0		 xor	 eax, eax
  0007e	c7 45 18 0f 00
	00 00		 mov	 DWORD PTR [ebp+24], 15	; 0000000fH
  00085	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0008a	3b c6		 cmp	 eax, esi
  0008c	5b		 pop	 ebx
  0008d	1b c0		 sbb	 eax, eax
  0008f	5e		 pop	 esi
  00090	f7 d8		 neg	 eax
  00092	5d		 pop	 ebp

; 1491 : 		}

  00093	c2 08 00	 ret	 8
$L92804:

; 1488 : 		else if (_Newsize == 0)

  00096	85 f6		 test	 esi, esi
  00098	75 23		 jne	 SHORT $L93641

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

  0009a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0009d	89 75 14	 mov	 DWORD PTR [ebp+20], esi
  000a0	72 14		 jb	 SHORT $L93637
  000a2	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000a5	33 c0		 xor	 eax, eax
  000a7	3b c6		 cmp	 eax, esi
  000a9	1b c0		 sbb	 eax, eax
  000ab	5e		 pop	 esi
  000ac	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
  000b0	f7 d8		 neg	 eax
  000b2	5d		 pop	 ebp

; 1491 : 		}

  000b3	c2 08 00	 ret	 8

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

$L93637:
  000b6	83 c5 04	 add	 ebp, 4
  000b9	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
$L93641:

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000bd	33 c0		 xor	 eax, eax
  000bf	3b c6		 cmp	 eax, esi
  000c1	1b c0		 sbb	 eax, eax
  000c3	5e		 pop	 esi
  000c4	f7 d8		 neg	 eax
  000c6	5d		 pop	 ebp

; 1491 : 		}

  000c7	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 590  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 591  : 		if (_Right.size() < _Roff)

  00003	8b 74 24 14	 mov	 esi, DWORD PTR __Roff$[esp+8]
  00007	57		 push	 edi
  00008	8b 7c 24 14	 mov	 edi, DWORD PTR __Right$[esp+12]
  0000c	39 77 14	 cmp	 DWORD PTR [edi+20], esi
  0000f	8b d9		 mov	 ebx, ecx
  00011	73 05		 jae	 SHORT $L92499

; 592  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L92499:

; 593  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 6f 14	 mov	 ebp, DWORD PTR [edi+20]

; 594  : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b ee		 sub	 ebp, esi
  00021	3b c5		 cmp	 eax, ebp
  00023	73 02		 jae	 SHORT $L92501

; 595  : 			_Num = _Count;	// trim _Num to size

  00025	8b e8		 mov	 ebp, eax
$L92501:

; 596  : 
; 597  : 		if (this == &_Right)

  00027	3b df		 cmp	 ebx, edi
  00029	75 1f		 jne	 SHORT $L92502

; 598  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 ee		 add	 ebp, esi
  0002f	55		 push	 ebp
  00030	8b cb		 mov	 ecx, ebx
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	56		 push	 esi
  00038	6a 00		 push	 0
  0003a	8b cb		 mov	 ecx, ebx
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00044	8b c3		 mov	 eax, ebx
  00046	5b		 pop	 ebx

; 605  : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$L92502:

; 599  : 		else if (_Grow(_Num))

  0004a	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  0004d	76 07		 jbe	 SHORT $L93794
  0004f	8b cb		 mov	 ecx, ebx
  00051	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L93794:
  00056	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00059	3b c5		 cmp	 eax, ebp
  0005b	73 21		 jae	 SHORT $L93795
  0005d	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00060	50		 push	 eax
  00061	55		 push	 ebp
  00062	8b cb		 mov	 ecx, ebx
  00064	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00069	85 ed		 test	 ebp, ebp
$L93840:
  0006b	76 6d		 jbe	 SHORT $L93839

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  0006d	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00070	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00075	3b c8		 cmp	 ecx, eax
  00077	72 2f		 jb	 SHORT $L93805
  00079	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0007c	eb 2d		 jmp	 SHORT $L93806

; 599  : 		else if (_Grow(_Num))

$L93795:
  0007e	85 ed		 test	 ebp, ebp
  00080	75 e9		 jne	 SHORT $L93840
  00082	83 f8 10	 cmp	 eax, 16			; 00000010H
  00085	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00088	72 0f		 jb	 SHORT $L93787
  0008a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	c6 00 00	 mov	 BYTE PTR [eax], 0
  00092	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00093	8b c3		 mov	 eax, ebx
  00095	5b		 pop	 ebx

; 605  : 		}

  00096	c2 0c 00	 ret	 12			; 0000000cH

; 599  : 		else if (_Grow(_Num))

$L93787:
  00099	5f		 pop	 edi
  0009a	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  0009d	5e		 pop	 esi
  0009e	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a1	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000a2	8b c3		 mov	 eax, ebx
  000a4	5b		 pop	 ebx

; 605  : 		}

  000a5	c2 0c 00	 ret	 12			; 0000000cH

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

$L93805:
  000a8	8d 57 04	 lea	 edx, DWORD PTR [edi+4]
$L93806:
  000ab	39 43 18	 cmp	 DWORD PTR [ebx+24], eax
  000ae	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000b1	72 04		 jb	 SHORT $L93811
  000b3	8b 38		 mov	 edi, DWORD PTR [eax]
  000b5	eb 02		 jmp	 SHORT $L93812
$L93811:
  000b7	8b f8		 mov	 edi, eax
$L93812:
  000b9	03 f2		 add	 esi, edx
  000bb	8b cd		 mov	 ecx, ebp
  000bd	8b d1		 mov	 edx, ecx
  000bf	c1 e9 02	 shr	 ecx, 2
  000c2	f3 a5		 rep movsd
  000c4	8b ca		 mov	 ecx, edx
  000c6	83 e1 03	 and	 ecx, 3
  000c9	f3 a4		 rep movsb

; 602  : 			_Eos(_Num);

  000cb	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000cf	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000d2	72 02		 jb	 SHORT $L93835
  000d4	8b 00		 mov	 eax, DWORD PTR [eax]
$L93835:
  000d6	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L93839:
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000dd	8b c3		 mov	 eax, ebx
  000df	5b		 pop	 ebx

; 605  : 		}

  000e0	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Num$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 608  : 		{	// assign [_Ptr, _Ptr + _Num)

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 609  : 		if (_Inside(_Ptr))

  00003	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  00006	83 fa 10	 cmp	 edx, 16			; 00000010H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	72 05		 jb	 SHORT $L93862
  0000d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00010	eb 03		 jmp	 SHORT $L93863
$L93862:
  00012	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$L93863:
  00015	8b 74 24 10	 mov	 esi, DWORD PTR __Ptr$[esp+8]
  00019	3b f0		 cmp	 esi, eax
  0001b	72 34		 jb	 SHORT $L92788
  0001d	83 fa 10	 cmp	 edx, 16			; 00000010H
  00020	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00023	72 04		 jb	 SHORT $L93866
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	eb 02		 jmp	 SHORT $L93867
$L93866:
  00029	8b c8		 mov	 ecx, eax
$L93867:
  0002b	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  0002e	03 f9		 add	 edi, ecx
  00030	3b fe		 cmp	 edi, esi
  00032	76 1d		 jbe	 SHORT $L92788

; 610  : 			return (assign(*this, _Ptr - _Myptr(), _Num));	// substring

  00034	83 fa 10	 cmp	 edx, 16			; 00000010H
  00037	72 02		 jb	 SHORT $L93879
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$L93879:
  0003b	8b 4c 24 14	 mov	 ecx, DWORD PTR __Num$[esp+8]
  0003f	51		 push	 ecx
  00040	2b f0		 sub	 esi, eax
  00042	56		 push	 esi
  00043	53		 push	 ebx
  00044	8b cb		 mov	 ecx, ebx
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx

; 618  : 		}

  0004e	c2 08 00	 ret	 8
$L92788:
  00051	55		 push	 ebp

; 611  : 
; 612  : 		if (_Grow(_Num))

  00052	8b 6c 24 18	 mov	 ebp, DWORD PTR __Num$[esp+12]
  00056	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  00059	76 07		 jbe	 SHORT $L93977
  0005b	8b cb		 mov	 ecx, ebx
  0005d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L93977:
  00062	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00065	3b c5		 cmp	 eax, ebp
  00067	73 1b		 jae	 SHORT $L93978
  00069	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  0006c	52		 push	 edx
  0006d	55		 push	 ebp
  0006e	8b cb		 mov	 ecx, ebx
  00070	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00075	85 ed		 test	 ebp, ebp
$L94058:
  00077	76 68		 jbe	 SHORT $L94055

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

  00079	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0007d	72 2f		 jb	 SHORT $L94030
  0007f	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00082	eb 2d		 jmp	 SHORT $L94031

; 611  : 
; 612  : 		if (_Grow(_Num))

$L93978:
  00084	85 ed		 test	 ebp, ebp
  00086	75 ef		 jne	 SHORT $L94058
  00088	83 f8 10	 cmp	 eax, 16			; 00000010H
  0008b	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  0008e	72 0f		 jb	 SHORT $L94021
  00090	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00093	5d		 pop	 ebp
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0
  00098	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  00099	8b c3		 mov	 eax, ebx
  0009b	5b		 pop	 ebx

; 618  : 		}

  0009c	c2 08 00	 ret	 8

; 611  : 
; 612  : 		if (_Grow(_Num))

$L94021:
  0009f	5d		 pop	 ebp
  000a0	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000a3	5f		 pop	 edi
  000a4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a7	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000a8	8b c3		 mov	 eax, ebx
  000aa	5b		 pop	 ebx

; 618  : 		}

  000ab	c2 08 00	 ret	 8

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

$L94030:
  000ae	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
$L94031:
  000b1	8b cd		 mov	 ecx, ebp
  000b3	8b c1		 mov	 eax, ecx
  000b5	c1 e9 02	 shr	 ecx, 2
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb

; 615  : 			_Eos(_Num);

  000c1	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000c5	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000c8	72 10		 jb	 SHORT $L94053
  000ca	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000cd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  000d1	5d		 pop	 ebp
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000d4	8b c3		 mov	 eax, ebx
  000d6	5b		 pop	 ebx

; 618  : 		}

  000d7	c2 08 00	 ret	 8

; 615  : 			_Eos(_Num);

$L94053:
  000da	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000dd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L94055:
  000e1	5d		 pop	 ebp
  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000e4	8b c3		 mov	 eax, ebx
  000e6	5b		 pop	 ebx

; 618  : 		}

  000e7	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 323  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 324  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 325  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 326  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 621  : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 622  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$L94131:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $L94131
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 623  : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 361  : 		_Tidy();
; 362  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$L94206:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $L94206
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 363  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0CSPLoadService@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CSPLoadService::CSPLoadService
PUBLIC	?GetNumParam@CSPLoadService@@UAEHXZ		; CSPLoadService::GetNumParam
PUBLIC	?BindParameters@CSPLoadService@@UAEFH@Z		; CSPLoadService::BindParameters
PUBLIC	??_7CSPLoadService@@6B@				; CSPLoadService::`vftable'
PUBLIC	??_GCSPLoadService@@UAEPAXI@Z			; CSPLoadService::`scalar deleting destructor'
PUBLIC	??_C@_0BN@FKLLIGDD@?$HLCALL?5TLoadService?$CI?$DP?0?$DP?0?$DP?0?$DP?$CJ?$HN?$AA@ ; `string'
EXTRN	??_ECSPLoadService@@UAEPAXI@Z:NEAR		; CSPLoadService::`vector deleting destructor'
EXTRN	?GetNumCol@CSqlBase@@UAEHXZ:NEAR		; CSqlBase::GetNumCol
EXTRN	??0CSqlQuery@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z:NEAR ; CSqlQuery::CSqlQuery
EXTRN	?AllocStatement@CSqlQuery@@UAEHXZ:NEAR		; CSqlQuery::AllocStatement
EXTRN	?BindColumns@CSqlQuery@@UAEFXZ:NEAR		; CSqlQuery::BindColumns
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T94385	DD	0ffffffffH
	DD	FLAT:$L94211
$T94382	DD	019930520H
	DD	01H
	DD	FLAT:$T94385
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BN@FKLLIGDD@?$HLCALL?5TLoadService?$CI?$DP?0?$DP?0?$DP?0?$DP?$CJ?$HN?$AA@
CONST	SEGMENT
??_C@_0BN@FKLLIGDD@?$HLCALL?5TLoadService?$CI?$DP?0?$DP?0?$DP?0?$DP?$CJ?$HN?$AA@ DB '{'
	DB	'CALL TLoadService(?,?,?,?)}', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CSPLoadService@@6B@
CONST	SEGMENT
??_7CSPLoadService@@6B@ DD FLAT:??_ECSPLoadService@@UAEPAXI@Z ; CSPLoadService::`vftable'
	DD	FLAT:?GetNumCol@CSqlBase@@UAEHXZ
	DD	FLAT:?GetNumParam@CSPLoadService@@UAEHXZ
	DD	FLAT:?AllocStatement@CSqlQuery@@UAEHXZ
	DD	FLAT:?BindColumns@CSqlQuery@@UAEFXZ
	DD	FLAT:?BindParameters@CSPLoadService@@UAEFH@Z
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\dbaccess.h
CONST	ENDS
;	COMDAT ??0CSPLoadService@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T94210 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pdb$ = 8						; size = 4
_strKey$ = 12						; size = 28
??0CSPLoadService@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC NEAR ; CSPLoadService::CSPLoadService, COMDAT
; _this$ = ecx

; 15   : DEF_QUERY(CSPLoadService, _T("{CALL TLoadService(?,?,?,?)}"))

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0CSPLoadService@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BN@FKLLIGDD@?$HLCALL?5TLoadService?$CI?$DP?0?$DP?0?$DP?0?$DP?$CJ?$HN?$AA@
  0001e	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00021	8b cc		 mov	 ecx, esp
  00023	33 c0		 xor	 eax, eax
  00025	89 64 24 24	 mov	 DWORD PTR $T94210[esp+52], esp
  00029	6a ff		 push	 -1
  0002b	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0002e	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00035	50		 push	 eax
  00036	89 44 24 38	 mov	 DWORD PTR __$EHRec$[esp+68], eax
  0003a	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0003d	8d 44 24 44	 lea	 eax, DWORD PTR _strKey$[esp+56]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00047	8b 4c 24 38	 mov	 ecx, DWORD PTR _pdb$[esp+48]
  0004b	51		 push	 ecx
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ??0CSqlQuery@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CSqlQuery::CSqlQuery
  00053	83 7c 24 34 10	 cmp	 DWORD PTR _strKey$[esp+40], 16 ; 00000010H
  00058	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CSPLoadService@@6B@
  0005e	72 0d		 jb	 SHORT $L94383
  00060	8b 54 24 20	 mov	 edx, DWORD PTR _strKey$[esp+20]
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006a	83 c4 04	 add	 esp, 4
$L94383:
  0006d	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  00071	8b c6		 mov	 eax, esi
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0007a	5e		 pop	 esi
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	c2 20 00	 ret	 32			; 00000020H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L94211:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _strKey$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0CSPLoadService@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T94382
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CSPLoadService@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CSPLoadService::CSPLoadService
; Function compile flags: /Ogty
;	COMDAT ?GetNumParam@CSPLoadService@@UAEHXZ
_TEXT	SEGMENT
?GetNumParam@CSPLoadService@@UAEHXZ PROC NEAR		; CSPLoadService::GetNumParam, COMDAT
; _this$ = ecx

; 17   : BEGIN_PARAM(4)

  00000	b8 04 00 00 00	 mov	 eax, 4
  00005	c3		 ret	 0
?GetNumParam@CSPLoadService@@UAEHXZ ENDP		; CSPLoadService::GetNumParam
_TEXT	ENDS
EXTRN	?BindParam@CSqlBase@@QAEFFFPAE@Z:NEAR		; CSqlBase::BindParam
EXTRN	?BindParam@CSqlBase@@QAEFFFPAG@Z:NEAR		; CSqlBase::BindParam
EXTRN	?BindParamStr@CSqlBase@@QAEFFFPADJ@Z:NEAR	; CSqlBase::BindParamStr
; Function compile flags: /Ogty
;	COMDAT ?BindParameters@CSPLoadService@@UAEFH@Z
_TEXT	SEGMENT
_bRewind$ = 8						; size = 4
?BindParameters@CSPLoadService@@UAEFH@Z PROC NEAR	; CSPLoadService::BindParameters, COMDAT
; _this$ = ecx

; 17   : BEGIN_PARAM(4)

  00000	56		 push	 esi
  00001	57		 push	 edi

; 18   : 	PARAM_ENTRY(SQL_PARAM_INPUT, m_bWorld)

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR _bRewind$[esp+4]
  00006	33 c0		 xor	 eax, eax
  00008	85 ff		 test	 edi, edi
  0000a	8b f1		 mov	 esi, ecx
  0000c	89 86 10 08 00
	00		 mov	 DWORD PTR [esi+2064], eax
  00012	75 1b		 jne	 SHORT $L91494
  00014	8d 86 2c 0c 00
	00		 lea	 eax, DWORD PTR [esi+3116]
  0001a	50		 push	 eax
  0001b	6a 01		 push	 1
  0001d	6a 01		 push	 1
  0001f	e8 00 00 00 00	 call	 ?BindParam@CSqlBase@@QAEFFFPAE@Z ; CSqlBase::BindParam
  00024	66 85 c0	 test	 ax, ax
  00027	74 06		 je	 SHORT $L91494
  00029	66 3d 01 00	 cmp	 ax, 1
  0002d	75 78		 jne	 SHORT $L91489
$L91494:

; 19   : 	PARAM_ENTRY(SQL_PARAM_INPUT, m_bServiceGroup)

  0002f	85 ff		 test	 edi, edi
  00031	c7 86 14 08 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+2068], 0
  0003b	75 12		 jne	 SHORT $L91495
  0003d	8d 8e 2d 0c 00
	00		 lea	 ecx, DWORD PTR [esi+3117]
  00043	51		 push	 ecx
  00044	6a 02		 push	 2
  00046	6a 01		 push	 1
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ?BindParam@CSqlBase@@QAEFFFPAE@Z ; CSqlBase::BindParam
$L91495:
  0004f	66 85 c0	 test	 ax, ax
  00052	74 06		 je	 SHORT $L91496
  00054	66 3d 01 00	 cmp	 ax, 1
  00058	75 4d		 jne	 SHORT $L91489
$L91496:

; 20   : 	PARAM_ENTRY_STR(SQL_PARAM_OUTPUT, m_szIP)

  0005a	85 ff		 test	 edi, edi
  0005c	c7 86 18 08 00
	00 fd ff ff ff	 mov	 DWORD PTR [esi+2072], -3 ; fffffffdH
  00066	75 14		 jne	 SHORT $L91497
  00068	6a 65		 push	 101			; 00000065H
  0006a	8d 96 2e 0c 00
	00		 lea	 edx, DWORD PTR [esi+3118]
  00070	52		 push	 edx
  00071	6a 03		 push	 3
  00073	6a 04		 push	 4
  00075	8b ce		 mov	 ecx, esi
  00077	e8 00 00 00 00	 call	 ?BindParamStr@CSqlBase@@QAEFFFPADJ@Z ; CSqlBase::BindParamStr
$L91497:
  0007c	66 85 c0	 test	 ax, ax
  0007f	74 06		 je	 SHORT $L91498
  00081	66 3d 01 00	 cmp	 ax, 1
  00085	75 20		 jne	 SHORT $L91489
$L91498:

; 21   : 	PARAM_ENTRY(SQL_PARAM_OUTPUT, m_wPort)

  00087	85 ff		 test	 edi, edi
  00089	c7 86 1c 08 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+2076], 0
  00093	75 12		 jne	 SHORT $L91489
  00095	8d 86 94 0c 00
	00		 lea	 eax, DWORD PTR [esi+3220]
  0009b	50		 push	 eax
  0009c	6a 04		 push	 4
  0009e	6a 04		 push	 4
  000a0	8b ce		 mov	 ecx, esi
  000a2	e8 00 00 00 00	 call	 ?BindParam@CSqlBase@@QAEFFFPAG@Z ; CSqlBase::BindParam
$L91489:
  000a7	5f		 pop	 edi
  000a8	5e		 pop	 esi

; 22   : END_PARAM()

  000a9	c2 04 00	 ret	 4
?BindParameters@CSPLoadService@@UAEFH@Z ENDP		; CSPLoadService::BindParameters
_TEXT	ENDS
PUBLIC	??1CSPLoadService@@UAE@XZ			; CSPLoadService::~CSPLoadService
; Function compile flags: /Ogty
;	COMDAT ??_GCSPLoadService@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSPLoadService@@UAEPAXI@Z PROC NEAR			; CSPLoadService::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1CSPLoadService@@UAE@XZ
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L94397
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L94397:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GCSPLoadService@@UAEPAXI@Z ENDP			; CSPLoadService::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1CSqlQuery@@UAE@XZ:NEAR			; CSqlQuery::~CSqlQuery
; Function compile flags: /Ogty
;	COMDAT ??1CSPLoadService@@UAE@XZ
_TEXT	SEGMENT
??1CSPLoadService@@UAE@XZ PROC NEAR			; CSPLoadService::~CSPLoadService, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1CSqlQuery@@UAE@XZ	; CSqlQuery::~CSqlQuery
??1CSPLoadService@@UAE@XZ ENDP				; CSPLoadService::~CSPLoadService
_TEXT	ENDS
PUBLIC	??0CSPMinBetaVer@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CSPMinBetaVer::CSPMinBetaVer
PUBLIC	?GetNumParam@CSPMinBetaVer@@UAEHXZ		; CSPMinBetaVer::GetNumParam
PUBLIC	?BindParameters@CSPMinBetaVer@@UAEFH@Z		; CSPMinBetaVer::BindParameters
PUBLIC	??_7CSPMinBetaVer@@6B@				; CSPMinBetaVer::`vftable'
PUBLIC	??_GCSPMinBetaVer@@UAEPAXI@Z			; CSPMinBetaVer::`scalar deleting destructor'
PUBLIC	??_C@_0BH@PKLBIMMO@?$HL?$DP?5?$DN?5CALL?5TMinBetaVer?$HN?$AA@ ; `string'
EXTRN	??_ECSPMinBetaVer@@UAEPAXI@Z:NEAR		; CSPMinBetaVer::`vector deleting destructor'
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T94580	DD	0ffffffffH
	DD	FLAT:$L94406
$T94577	DD	019930520H
	DD	01H
	DD	FLAT:$T94580
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BH@PKLBIMMO@?$HL?$DP?5?$DN?5CALL?5TMinBetaVer?$HN?$AA@
CONST	SEGMENT
??_C@_0BH@PKLBIMMO@?$HL?$DP?5?$DN?5CALL?5TMinBetaVer?$HN?$AA@ DB '{? = CA'
	DB	'LL TMinBetaVer}', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7CSPMinBetaVer@@6B@
CONST	SEGMENT
??_7CSPMinBetaVer@@6B@ DD FLAT:??_ECSPMinBetaVer@@UAEPAXI@Z ; CSPMinBetaVer::`vftable'
	DD	FLAT:?GetNumCol@CSqlBase@@UAEHXZ
	DD	FLAT:?GetNumParam@CSPMinBetaVer@@UAEHXZ
	DD	FLAT:?AllocStatement@CSqlQuery@@UAEHXZ
	DD	FLAT:?BindColumns@CSqlQuery@@UAEFXZ
	DD	FLAT:?BindParameters@CSPMinBetaVer@@UAEFH@Z
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\dbaccess.h
CONST	ENDS
;	COMDAT ??0CSPMinBetaVer@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T94405 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pdb$ = 8						; size = 4
_strKey$ = 12						; size = 28
??0CSPMinBetaVer@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC NEAR ; CSPMinBetaVer::CSPMinBetaVer, COMDAT
; _this$ = ecx

; 30   : DEF_QUERY(CSPMinBetaVer, _T("{? = CALL TMinBetaVer}"))

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0CSPMinBetaVer@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BH@PKLBIMMO@?$HL?$DP?5?$DN?5CALL?5TMinBetaVer?$HN?$AA@
  0001e	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00021	8b cc		 mov	 ecx, esp
  00023	33 c0		 xor	 eax, eax
  00025	89 64 24 24	 mov	 DWORD PTR $T94405[esp+52], esp
  00029	6a ff		 push	 -1
  0002b	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0002e	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00035	50		 push	 eax
  00036	89 44 24 38	 mov	 DWORD PTR __$EHRec$[esp+68], eax
  0003a	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0003d	8d 44 24 44	 lea	 eax, DWORD PTR _strKey$[esp+56]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00047	8b 4c 24 38	 mov	 ecx, DWORD PTR _pdb$[esp+48]
  0004b	51		 push	 ecx
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ??0CSqlQuery@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CSqlQuery::CSqlQuery
  00053	83 7c 24 34 10	 cmp	 DWORD PTR _strKey$[esp+40], 16 ; 00000010H
  00058	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CSPMinBetaVer@@6B@
  0005e	72 0d		 jb	 SHORT $L94578
  00060	8b 54 24 20	 mov	 edx, DWORD PTR _strKey$[esp+20]
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006a	83 c4 04	 add	 esp, 4
$L94578:
  0006d	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  00071	8b c6		 mov	 eax, esi
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0007a	5e		 pop	 esi
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	c2 20 00	 ret	 32			; 00000020H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L94406:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _strKey$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0CSPMinBetaVer@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T94577
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CSPMinBetaVer@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CSPMinBetaVer::CSPMinBetaVer
; Function compile flags: /Ogty
;	COMDAT ?GetNumParam@CSPMinBetaVer@@UAEHXZ
_TEXT	SEGMENT
?GetNumParam@CSPMinBetaVer@@UAEHXZ PROC NEAR		; CSPMinBetaVer::GetNumParam, COMDAT
; _this$ = ecx

; 32   : BEGIN_PARAM(1)

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?GetNumParam@CSPMinBetaVer@@UAEHXZ ENDP			; CSPMinBetaVer::GetNumParam
_TEXT	ENDS
EXTRN	?BindParam@CSqlBase@@QAEFFFPAK@Z:NEAR		; CSqlBase::BindParam
; Function compile flags: /Ogty
;	COMDAT ?BindParameters@CSPMinBetaVer@@UAEFH@Z
_TEXT	SEGMENT
_bRewind$ = 8						; size = 4
?BindParameters@CSPMinBetaVer@@UAEFH@Z PROC NEAR	; CSPMinBetaVer::BindParameters, COMDAT
; _this$ = ecx

; 33   : 	PARAM_ENTRY(SQL_PARAM_OUTPUT, m_dwMinVer)

  00000	8b 54 24 04	 mov	 edx, DWORD PTR _bRewind$[esp-4]
  00004	33 c0		 xor	 eax, eax
  00006	85 d2		 test	 edx, edx
  00008	89 81 10 08 00
	00		 mov	 DWORD PTR [ecx+2064], eax
  0000e	75 10		 jne	 SHORT $L91538
  00010	8d 81 2c 0c 00
	00		 lea	 eax, DWORD PTR [ecx+3116]
  00016	50		 push	 eax
  00017	6a 01		 push	 1
  00019	6a 04		 push	 4
  0001b	e8 00 00 00 00	 call	 ?BindParam@CSqlBase@@QAEFFFPAK@Z ; CSqlBase::BindParam
$L91538:

; 34   : END_PARAM()

  00020	c2 04 00	 ret	 4
?BindParameters@CSPMinBetaVer@@UAEFH@Z ENDP		; CSPMinBetaVer::BindParameters
_TEXT	ENDS
PUBLIC	??1CSPMinBetaVer@@UAE@XZ			; CSPMinBetaVer::~CSPMinBetaVer
; Function compile flags: /Ogty
;	COMDAT ??_GCSPMinBetaVer@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSPMinBetaVer@@UAEPAXI@Z PROC NEAR			; CSPMinBetaVer::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1CSPMinBetaVer@@UAE@XZ
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L94592
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L94592:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GCSPMinBetaVer@@UAEPAXI@Z ENDP			; CSPMinBetaVer::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1CSPMinBetaVer@@UAE@XZ
_TEXT	SEGMENT
??1CSPMinBetaVer@@UAE@XZ PROC NEAR			; CSPMinBetaVer::~CSPMinBetaVer, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1CSqlQuery@@UAE@XZ	; CSqlQuery::~CSqlQuery
??1CSPMinBetaVer@@UAE@XZ ENDP				; CSPMinBetaVer::~CSPMinBetaVer
_TEXT	ENDS
PUBLIC	??0CSPPreComplete@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CSPPreComplete::CSPPreComplete
PUBLIC	?GetNumParam@CSPPreComplete@@UAEHXZ		; CSPPreComplete::GetNumParam
PUBLIC	?BindParameters@CSPPreComplete@@UAEFH@Z		; CSPPreComplete::BindParameters
PUBLIC	??_7CSPPreComplete@@6B@				; CSPPreComplete::`vftable'
PUBLIC	??_GCSPPreComplete@@UAEPAXI@Z			; CSPPreComplete::`scalar deleting destructor'
PUBLIC	??_C@_0BK@IECNCIJF@?$HLCALL?5TPreCompleteAdd?$CI?$DP?$CJ?$HN?$AA@ ; `string'
EXTRN	??_ECSPPreComplete@@UAEPAXI@Z:NEAR		; CSPPreComplete::`vector deleting destructor'
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T94775	DD	0ffffffffH
	DD	FLAT:$L94601
$T94772	DD	019930520H
	DD	01H
	DD	FLAT:$T94775
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BK@IECNCIJF@?$HLCALL?5TPreCompleteAdd?$CI?$DP?$CJ?$HN?$AA@
CONST	SEGMENT
??_C@_0BK@IECNCIJF@?$HLCALL?5TPreCompleteAdd?$CI?$DP?$CJ?$HN?$AA@ DB '{CA'
	DB	'LL TPreCompleteAdd(?)}', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CSPPreComplete@@6B@
CONST	SEGMENT
??_7CSPPreComplete@@6B@ DD FLAT:??_ECSPPreComplete@@UAEPAXI@Z ; CSPPreComplete::`vftable'
	DD	FLAT:?GetNumCol@CSqlBase@@UAEHXZ
	DD	FLAT:?GetNumParam@CSPPreComplete@@UAEHXZ
	DD	FLAT:?AllocStatement@CSqlQuery@@UAEHXZ
	DD	FLAT:?BindColumns@CSqlQuery@@UAEFXZ
	DD	FLAT:?BindParameters@CSPPreComplete@@UAEFH@Z
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\dbaccess.h
CONST	ENDS
;	COMDAT ??0CSPPreComplete@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T94600 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pdb$ = 8						; size = 4
_strKey$ = 12						; size = 28
??0CSPPreComplete@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC NEAR ; CSPPreComplete::CSPPreComplete, COMDAT
; _this$ = ecx

; 42   : DEF_QUERY(CSPPreComplete, _T("{CALL TPreCompleteAdd(?)}"))

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0CSPPreComplete@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@IECNCIJF@?$HLCALL?5TPreCompleteAdd?$CI?$DP?$CJ?$HN?$AA@
  0001e	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00021	8b cc		 mov	 ecx, esp
  00023	33 c0		 xor	 eax, eax
  00025	89 64 24 24	 mov	 DWORD PTR $T94600[esp+52], esp
  00029	6a ff		 push	 -1
  0002b	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0002e	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00035	50		 push	 eax
  00036	89 44 24 38	 mov	 DWORD PTR __$EHRec$[esp+68], eax
  0003a	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0003d	8d 44 24 44	 lea	 eax, DWORD PTR _strKey$[esp+56]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00047	8b 4c 24 38	 mov	 ecx, DWORD PTR _pdb$[esp+48]
  0004b	51		 push	 ecx
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ??0CSqlQuery@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CSqlQuery::CSqlQuery
  00053	83 7c 24 34 10	 cmp	 DWORD PTR _strKey$[esp+40], 16 ; 00000010H
  00058	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CSPPreComplete@@6B@
  0005e	72 0d		 jb	 SHORT $L94773
  00060	8b 54 24 20	 mov	 edx, DWORD PTR _strKey$[esp+20]
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006a	83 c4 04	 add	 esp, 4
$L94773:
  0006d	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  00071	8b c6		 mov	 eax, esi
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0007a	5e		 pop	 esi
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	c2 20 00	 ret	 32			; 00000020H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L94601:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _strKey$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0CSPPreComplete@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T94772
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CSPPreComplete@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CSPPreComplete::CSPPreComplete
; Function compile flags: /Ogty
;	COMDAT ?GetNumParam@CSPPreComplete@@UAEHXZ
_TEXT	SEGMENT
?GetNumParam@CSPPreComplete@@UAEHXZ PROC NEAR		; CSPPreComplete::GetNumParam, COMDAT
; _this$ = ecx

; 44   : BEGIN_PARAM(1)

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?GetNumParam@CSPPreComplete@@UAEHXZ ENDP		; CSPPreComplete::GetNumParam
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?BindParameters@CSPPreComplete@@UAEFH@Z
_TEXT	SEGMENT
_bRewind$ = 8						; size = 4
?BindParameters@CSPPreComplete@@UAEFH@Z PROC NEAR	; CSPPreComplete::BindParameters, COMDAT
; _this$ = ecx

; 45   : 	PARAM_ENTRY(SQL_PARAM_INPUT, m_dwBetaVer)

  00000	8b 54 24 04	 mov	 edx, DWORD PTR _bRewind$[esp-4]
  00004	33 c0		 xor	 eax, eax
  00006	85 d2		 test	 edx, edx
  00008	89 81 10 08 00
	00		 mov	 DWORD PTR [ecx+2064], eax
  0000e	75 10		 jne	 SHORT $L91581
  00010	8d 81 2c 0c 00
	00		 lea	 eax, DWORD PTR [ecx+3116]
  00016	50		 push	 eax
  00017	6a 01		 push	 1
  00019	6a 01		 push	 1
  0001b	e8 00 00 00 00	 call	 ?BindParam@CSqlBase@@QAEFFFPAK@Z ; CSqlBase::BindParam
$L91581:

; 46   : END_PARAM()

  00020	c2 04 00	 ret	 4
?BindParameters@CSPPreComplete@@UAEFH@Z ENDP		; CSPPreComplete::BindParameters
_TEXT	ENDS
PUBLIC	??1CSPPreComplete@@UAE@XZ			; CSPPreComplete::~CSPPreComplete
; Function compile flags: /Ogty
;	COMDAT ??_GCSPPreComplete@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSPPreComplete@@UAEPAXI@Z PROC NEAR			; CSPPreComplete::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1CSPPreComplete@@UAE@XZ
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L94787
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L94787:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GCSPPreComplete@@UAEPAXI@Z ENDP			; CSPPreComplete::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1CSPPreComplete@@UAE@XZ
_TEXT	SEGMENT
??1CSPPreComplete@@UAE@XZ PROC NEAR			; CSPPreComplete::~CSPPreComplete, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1CSqlQuery@@UAE@XZ	; CSqlQuery::~CSqlQuery
??1CSPPreComplete@@UAE@XZ ENDP				; CSPPreComplete::~CSPPreComplete
_TEXT	ENDS
PUBLIC	??0CTBLVersion@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CTBLVersion::CTBLVersion
PUBLIC	?GetNumCol@CTBLVersion@@UAEHXZ			; CTBLVersion::GetNumCol
PUBLIC	?BindColumns@CTBLVersion@@UAEFXZ		; CTBLVersion::BindColumns
PUBLIC	?GetNumParam@CTBLVersion@@UAEHXZ		; CTBLVersion::GetNumParam
PUBLIC	?BindParameters@CTBLVersion@@UAEFH@Z		; CTBLVersion::BindParameters
PUBLIC	??_7CTBLVersion@@6B@				; CTBLVersion::`vftable'
PUBLIC	??_GCTBLVersion@@UAEPAXI@Z			; CTBLVersion::`scalar deleting destructor'
PUBLIC	??_C@_0GJ@MNDCAIFG@SELECT?5dwVersion?0?5szPath?0?5szName@ ; `string'
EXTRN	??_ECTBLVersion@@UAEPAXI@Z:NEAR			; CTBLVersion::`vector deleting destructor'
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T94970	DD	0ffffffffH
	DD	FLAT:$L94796
$T94967	DD	019930520H
	DD	01H
	DD	FLAT:$T94970
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0GJ@MNDCAIFG@SELECT?5dwVersion?0?5szPath?0?5szName@
CONST	SEGMENT
??_C@_0GJ@MNDCAIFG@SELECT?5dwVersion?0?5szPath?0?5szName@ DB 'SELECT dwVe'
	DB	'rsion, szPath, szName, dwSize, dwBetaVer FROM TVERSION WHERE '
	DB	'dwVersion > ? ORDER BY dwVersion', 00H	; `string'
CONST	ENDS
;	COMDAT ??_7CTBLVersion@@6B@
CONST	SEGMENT
??_7CTBLVersion@@6B@ DD FLAT:??_ECTBLVersion@@UAEPAXI@Z	; CTBLVersion::`vftable'
	DD	FLAT:?GetNumCol@CTBLVersion@@UAEHXZ
	DD	FLAT:?GetNumParam@CTBLVersion@@UAEHXZ
	DD	FLAT:?AllocStatement@CSqlQuery@@UAEHXZ
	DD	FLAT:?BindColumns@CTBLVersion@@UAEFXZ
	DD	FLAT:?BindParameters@CTBLVersion@@UAEFH@Z
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\dbaccess.h
CONST	ENDS
;	COMDAT ??0CTBLVersion@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T94795 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pdb$ = 8						; size = 4
_strKey$ = 12						; size = 28
??0CTBLVersion@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC NEAR ; CTBLVersion::CTBLVersion, COMDAT
; _this$ = ecx

; 58   : DEF_QUERY(CTBLVersion, _T("SELECT dwVersion, szPath, szName, dwSize, dwBetaVer FROM TVERSION WHERE dwVersion > ? ORDER BY dwVersion"))

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0CTBLVersion@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0GJ@MNDCAIFG@SELECT?5dwVersion?0?5szPath?0?5szName@
  0001e	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00021	8b cc		 mov	 ecx, esp
  00023	33 c0		 xor	 eax, eax
  00025	89 64 24 24	 mov	 DWORD PTR $T94795[esp+52], esp
  00029	6a ff		 push	 -1
  0002b	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0002e	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00035	50		 push	 eax
  00036	89 44 24 38	 mov	 DWORD PTR __$EHRec$[esp+68], eax
  0003a	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0003d	8d 44 24 44	 lea	 eax, DWORD PTR _strKey$[esp+56]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00047	8b 4c 24 38	 mov	 ecx, DWORD PTR _pdb$[esp+48]
  0004b	51		 push	 ecx
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ??0CSqlQuery@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CSqlQuery::CSqlQuery
  00053	83 7c 24 34 10	 cmp	 DWORD PTR _strKey$[esp+40], 16 ; 00000010H
  00058	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CTBLVersion@@6B@
  0005e	72 0d		 jb	 SHORT $L94968
  00060	8b 54 24 20	 mov	 edx, DWORD PTR _strKey$[esp+20]
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006a	83 c4 04	 add	 esp, 4
$L94968:
  0006d	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  00071	8b c6		 mov	 eax, esi
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0007a	5e		 pop	 esi
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	c2 20 00	 ret	 32			; 00000020H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L94796:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _strKey$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0CTBLVersion@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T94967
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CTBLVersion@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CTBLVersion::CTBLVersion
; Function compile flags: /Ogty
;	COMDAT ?GetNumCol@CTBLVersion@@UAEHXZ
_TEXT	SEGMENT
?GetNumCol@CTBLVersion@@UAEHXZ PROC NEAR		; CTBLVersion::GetNumCol, COMDAT
; _this$ = ecx

; 60   : BEGIN_COLUMN(5)

  00000	b8 05 00 00 00	 mov	 eax, 5
  00005	c3		 ret	 0
?GetNumCol@CTBLVersion@@UAEHXZ ENDP			; CTBLVersion::GetNumCol
_TEXT	ENDS
EXTRN	?BindCol@CSqlBase@@QAEFFPAK@Z:NEAR		; CSqlBase::BindCol
EXTRN	?BindColStr@CSqlBase@@QAEFFPADJ@Z:NEAR		; CSqlBase::BindColStr
; Function compile flags: /Ogty
;	COMDAT ?BindColumns@CTBLVersion@@UAEFXZ
_TEXT	SEGMENT
?BindColumns@CTBLVersion@@UAEFXZ PROC NEAR		; CTBLVersion::BindColumns, COMDAT
; _this$ = ecx

; 60   : BEGIN_COLUMN(5)

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 61   : 	COLUMN_ENTRY(m_dwVersion)

  00003	8d 86 c4 0c 00
	00		 lea	 eax, DWORD PTR [esi+3268]
  00009	50		 push	 eax
  0000a	6a 01		 push	 1
  0000c	e8 00 00 00 00	 call	 ?BindCol@CSqlBase@@QAEFFPAK@Z ; CSqlBase::BindCol
  00011	66 85 c0	 test	 ax, ax
  00014	74 06		 je	 SHORT $L91634
  00016	66 3d 01 00	 cmp	 ax, 1
  0001a	75 65		 jne	 SHORT $L91630
$L91634:

; 62   : 	COLUMN_ENTRY_STR(m_szPath)

  0001c	6a 64		 push	 100			; 00000064H
  0001e	8d 8e 5f 0c 00
	00		 lea	 ecx, DWORD PTR [esi+3167]
  00024	51		 push	 ecx
  00025	6a 02		 push	 2
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?BindColStr@CSqlBase@@QAEFFPADJ@Z ; CSqlBase::BindColStr
  0002e	66 85 c0	 test	 ax, ax
  00031	74 06		 je	 SHORT $L91635
  00033	66 3d 01 00	 cmp	 ax, 1
  00037	75 48		 jne	 SHORT $L91630
$L91635:

; 63   : 	COLUMN_ENTRY_STR(m_szName)

  00039	6a 33		 push	 51			; 00000033H
  0003b	8d 96 2c 0c 00
	00		 lea	 edx, DWORD PTR [esi+3116]
  00041	52		 push	 edx
  00042	6a 03		 push	 3
  00044	8b ce		 mov	 ecx, esi
  00046	e8 00 00 00 00	 call	 ?BindColStr@CSqlBase@@QAEFFPADJ@Z ; CSqlBase::BindColStr
  0004b	66 85 c0	 test	 ax, ax
  0004e	74 06		 je	 SHORT $L91636
  00050	66 3d 01 00	 cmp	 ax, 1
  00054	75 2b		 jne	 SHORT $L91630
$L91636:

; 64   : 	COLUMN_ENTRY(m_dwSize)

  00056	8d 86 cc 0c 00
	00		 lea	 eax, DWORD PTR [esi+3276]
  0005c	50		 push	 eax
  0005d	6a 04		 push	 4
  0005f	8b ce		 mov	 ecx, esi
  00061	e8 00 00 00 00	 call	 ?BindCol@CSqlBase@@QAEFFPAK@Z ; CSqlBase::BindCol
  00066	66 85 c0	 test	 ax, ax
  00069	74 06		 je	 SHORT $L91637
  0006b	66 3d 01 00	 cmp	 ax, 1
  0006f	75 10		 jne	 SHORT $L91630
$L91637:

; 65   : 	COLUMN_ENTRY(m_dwBetaVer)

  00071	8d 8e c8 0c 00
	00		 lea	 ecx, DWORD PTR [esi+3272]
  00077	51		 push	 ecx
  00078	6a 05		 push	 5
  0007a	8b ce		 mov	 ecx, esi
  0007c	e8 00 00 00 00	 call	 ?BindCol@CSqlBase@@QAEFFPAK@Z ; CSqlBase::BindCol
$L91630:
  00081	5e		 pop	 esi

; 66   : END_COL()

  00082	c3		 ret	 0
?BindColumns@CTBLVersion@@UAEFXZ ENDP			; CTBLVersion::BindColumns
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?GetNumParam@CTBLVersion@@UAEHXZ
_TEXT	SEGMENT
?GetNumParam@CTBLVersion@@UAEHXZ PROC NEAR		; CTBLVersion::GetNumParam, COMDAT
; _this$ = ecx

; 68   : BEGIN_PARAM(1)

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?GetNumParam@CTBLVersion@@UAEHXZ ENDP			; CTBLVersion::GetNumParam
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?BindParameters@CTBLVersion@@UAEFH@Z
_TEXT	SEGMENT
_bRewind$ = 8						; size = 4
?BindParameters@CTBLVersion@@UAEFH@Z PROC NEAR		; CTBLVersion::BindParameters, COMDAT
; _this$ = ecx

; 69   : 	PARAM_ENTRY(SQL_PARAM_INPUT, m_dwVersion)

  00000	8b 54 24 04	 mov	 edx, DWORD PTR _bRewind$[esp-4]
  00004	33 c0		 xor	 eax, eax
  00006	85 d2		 test	 edx, edx
  00008	89 81 10 08 00
	00		 mov	 DWORD PTR [ecx+2064], eax
  0000e	75 10		 jne	 SHORT $L91643
  00010	8d 81 c4 0c 00
	00		 lea	 eax, DWORD PTR [ecx+3268]
  00016	50		 push	 eax
  00017	6a 01		 push	 1
  00019	6a 01		 push	 1
  0001b	e8 00 00 00 00	 call	 ?BindParam@CSqlBase@@QAEFFFPAK@Z ; CSqlBase::BindParam
$L91643:

; 70   : END_PARAM()

  00020	c2 04 00	 ret	 4
?BindParameters@CTBLVersion@@UAEFH@Z ENDP		; CTBLVersion::BindParameters
_TEXT	ENDS
PUBLIC	??1CTBLVersion@@UAE@XZ				; CTBLVersion::~CTBLVersion
; Function compile flags: /Ogty
;	COMDAT ??_GCTBLVersion@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCTBLVersion@@UAEPAXI@Z PROC NEAR			; CTBLVersion::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1CTBLVersion@@UAE@XZ
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L94988
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L94988:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GCTBLVersion@@UAEPAXI@Z ENDP				; CTBLVersion::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1CTBLVersion@@UAE@XZ
_TEXT	SEGMENT
??1CTBLVersion@@UAE@XZ PROC NEAR			; CTBLVersion::~CTBLVersion, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1CSqlQuery@@UAE@XZ	; CSqlQuery::~CSqlQuery
??1CTBLVersion@@UAE@XZ ENDP				; CTBLVersion::~CTBLVersion
_TEXT	ENDS
PUBLIC	??0CTBLPreVersion@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CTBLPreVersion::CTBLPreVersion
PUBLIC	?GetNumCol@CTBLPreVersion@@UAEHXZ		; CTBLPreVersion::GetNumCol
PUBLIC	?BindColumns@CTBLPreVersion@@UAEFXZ		; CTBLPreVersion::BindColumns
PUBLIC	?GetNumParam@CTBLPreVersion@@UAEHXZ		; CTBLPreVersion::GetNumParam
PUBLIC	?BindParameters@CTBLPreVersion@@UAEFH@Z		; CTBLPreVersion::BindParameters
PUBLIC	??_7CTBLPreVersion@@6B@				; CTBLPreVersion::`vftable'
PUBLIC	??_GCTBLPreVersion@@UAEPAXI@Z			; CTBLPreVersion::`scalar deleting destructor'
PUBLIC	??_C@_0GB@BGECDJEC@SELECT?5dwBetaVer?0?5szPath?0?5szName@ ; `string'
EXTRN	??_ECTBLPreVersion@@UAEPAXI@Z:NEAR		; CTBLPreVersion::`vector deleting destructor'
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T95171	DD	0ffffffffH
	DD	FLAT:$L94997
$T95168	DD	019930520H
	DD	01H
	DD	FLAT:$T95171
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0GB@BGECDJEC@SELECT?5dwBetaVer?0?5szPath?0?5szName@
CONST	SEGMENT
??_C@_0GB@BGECDJEC@SELECT?5dwBetaVer?0?5szPath?0?5szName@ DB 'SELECT dwBe'
	DB	'taVer, szPath, szName, dwSize FROM TPREVERSION WHERE dwBetaVe'
	DB	'r > ? ORDER BY dwBetaVer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7CTBLPreVersion@@6B@
CONST	SEGMENT
??_7CTBLPreVersion@@6B@ DD FLAT:??_ECTBLPreVersion@@UAEPAXI@Z ; CTBLPreVersion::`vftable'
	DD	FLAT:?GetNumCol@CTBLPreVersion@@UAEHXZ
	DD	FLAT:?GetNumParam@CTBLPreVersion@@UAEHXZ
	DD	FLAT:?AllocStatement@CSqlQuery@@UAEHXZ
	DD	FLAT:?BindColumns@CTBLPreVersion@@UAEFXZ
	DD	FLAT:?BindParameters@CTBLPreVersion@@UAEFH@Z
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\dbaccess.h
CONST	ENDS
;	COMDAT ??0CTBLPreVersion@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
$T94996 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pdb$ = 8						; size = 4
_strKey$ = 12						; size = 28
??0CTBLPreVersion@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC NEAR ; CTBLPreVersion::CTBLPreVersion, COMDAT
; _this$ = ecx

; 81   : DEF_QUERY(CTBLPreVersion, _T("SELECT dwBetaVer, szPath, szName, dwSize FROM TPREVERSION WHERE dwBetaVer > ? ORDER BY dwBetaVer"))

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0CTBLPreVersion@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0GB@BGECDJEC@SELECT?5dwBetaVer?0?5szPath?0?5szName@
  0001e	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00021	8b cc		 mov	 ecx, esp
  00023	33 c0		 xor	 eax, eax
  00025	89 64 24 24	 mov	 DWORD PTR $T94996[esp+52], esp
  00029	6a ff		 push	 -1
  0002b	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0002e	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00035	50		 push	 eax
  00036	89 44 24 38	 mov	 DWORD PTR __$EHRec$[esp+68], eax
  0003a	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0003d	8d 44 24 44	 lea	 eax, DWORD PTR _strKey$[esp+56]
  00041	50		 push	 eax
  00042	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00047	8b 4c 24 38	 mov	 ecx, DWORD PTR _pdb$[esp+48]
  0004b	51		 push	 ecx
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ??0CSqlQuery@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBD@Z ; CSqlQuery::CSqlQuery
  00053	83 7c 24 34 10	 cmp	 DWORD PTR _strKey$[esp+40], 16 ; 00000010H
  00058	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CTBLPreVersion@@6B@
  0005e	72 0d		 jb	 SHORT $L95169
  00060	8b 54 24 20	 mov	 edx, DWORD PTR _strKey$[esp+20]
  00064	52		 push	 edx
  00065	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0006a	83 c4 04	 add	 esp, 4
$L95169:
  0006d	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  00071	8b c6		 mov	 eax, esi
  00073	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0007a	5e		 pop	 esi
  0007b	83 c4 10	 add	 esp, 16			; 00000010H
  0007e	c2 20 00	 ret	 32			; 00000020H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L94997:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _strKey$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$??0CTBLPreVersion@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T95168
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CTBLPreVersion@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CTBLPreVersion::CTBLPreVersion
; Function compile flags: /Ogty
;	COMDAT ?GetNumCol@CTBLPreVersion@@UAEHXZ
_TEXT	SEGMENT
?GetNumCol@CTBLPreVersion@@UAEHXZ PROC NEAR		; CTBLPreVersion::GetNumCol, COMDAT
; _this$ = ecx

; 83   : BEGIN_COLUMN(4)

  00000	b8 04 00 00 00	 mov	 eax, 4
  00005	c3		 ret	 0
?GetNumCol@CTBLPreVersion@@UAEHXZ ENDP			; CTBLPreVersion::GetNumCol
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?BindColumns@CTBLPreVersion@@UAEFXZ
_TEXT	SEGMENT
?BindColumns@CTBLPreVersion@@UAEFXZ PROC NEAR		; CTBLPreVersion::BindColumns, COMDAT
; _this$ = ecx

; 83   : BEGIN_COLUMN(4)

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 84   : 	COLUMN_ENTRY(m_dwBetaVer)

  00003	8d 86 c4 0c 00
	00		 lea	 eax, DWORD PTR [esi+3268]
  00009	50		 push	 eax
  0000a	6a 01		 push	 1
  0000c	e8 00 00 00 00	 call	 ?BindCol@CSqlBase@@QAEFFPAK@Z ; CSqlBase::BindCol
  00011	66 85 c0	 test	 ax, ax
  00014	74 06		 je	 SHORT $L91695
  00016	66 3d 01 00	 cmp	 ax, 1
  0001a	75 4a		 jne	 SHORT $L91691
$L91695:

; 85   : 	COLUMN_ENTRY_STR(m_szPath)

  0001c	6a 64		 push	 100			; 00000064H
  0001e	8d 8e 5f 0c 00
	00		 lea	 ecx, DWORD PTR [esi+3167]
  00024	51		 push	 ecx
  00025	6a 02		 push	 2
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 ?BindColStr@CSqlBase@@QAEFFPADJ@Z ; CSqlBase::BindColStr
  0002e	66 85 c0	 test	 ax, ax
  00031	74 06		 je	 SHORT $L91696
  00033	66 3d 01 00	 cmp	 ax, 1
  00037	75 2d		 jne	 SHORT $L91691
$L91696:

; 86   : 	COLUMN_ENTRY_STR(m_szName)

  00039	6a 33		 push	 51			; 00000033H
  0003b	8d 96 2c 0c 00
	00		 lea	 edx, DWORD PTR [esi+3116]
  00041	52		 push	 edx
  00042	6a 03		 push	 3
  00044	8b ce		 mov	 ecx, esi
  00046	e8 00 00 00 00	 call	 ?BindColStr@CSqlBase@@QAEFFPADJ@Z ; CSqlBase::BindColStr
  0004b	66 85 c0	 test	 ax, ax
  0004e	74 06		 je	 SHORT $L91697
  00050	66 3d 01 00	 cmp	 ax, 1
  00054	75 10		 jne	 SHORT $L91691
$L91697:

; 87   : 	COLUMN_ENTRY(m_dwSize)

  00056	8d 86 c8 0c 00
	00		 lea	 eax, DWORD PTR [esi+3272]
  0005c	50		 push	 eax
  0005d	6a 04		 push	 4
  0005f	8b ce		 mov	 ecx, esi
  00061	e8 00 00 00 00	 call	 ?BindCol@CSqlBase@@QAEFFPAK@Z ; CSqlBase::BindCol
$L91691:
  00066	5e		 pop	 esi

; 88   : END_COL()

  00067	c3		 ret	 0
?BindColumns@CTBLPreVersion@@UAEFXZ ENDP		; CTBLPreVersion::BindColumns
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?GetNumParam@CTBLPreVersion@@UAEHXZ
_TEXT	SEGMENT
?GetNumParam@CTBLPreVersion@@UAEHXZ PROC NEAR		; CTBLPreVersion::GetNumParam, COMDAT
; _this$ = ecx

; 90   : BEGIN_PARAM(1)

  00000	b8 01 00 00 00	 mov	 eax, 1
  00005	c3		 ret	 0
?GetNumParam@CTBLPreVersion@@UAEHXZ ENDP		; CTBLPreVersion::GetNumParam
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?BindParameters@CTBLPreVersion@@UAEFH@Z
_TEXT	SEGMENT
_bRewind$ = 8						; size = 4
?BindParameters@CTBLPreVersion@@UAEFH@Z PROC NEAR	; CTBLPreVersion::BindParameters, COMDAT
; _this$ = ecx

; 91   : 	PARAM_ENTRY(SQL_PARAM_INPUT, m_dwBetaVer)

  00000	8b 54 24 04	 mov	 edx, DWORD PTR _bRewind$[esp-4]
  00004	33 c0		 xor	 eax, eax
  00006	85 d2		 test	 edx, edx
  00008	89 81 10 08 00
	00		 mov	 DWORD PTR [ecx+2064], eax
  0000e	75 10		 jne	 SHORT $L91703
  00010	8d 81 c4 0c 00
	00		 lea	 eax, DWORD PTR [ecx+3268]
  00016	50		 push	 eax
  00017	6a 01		 push	 1
  00019	6a 01		 push	 1
  0001b	e8 00 00 00 00	 call	 ?BindParam@CSqlBase@@QAEFFFPAK@Z ; CSqlBase::BindParam
$L91703:

; 92   : END_PARAM()

  00020	c2 04 00	 ret	 4
?BindParameters@CTBLPreVersion@@UAEFH@Z ENDP		; CTBLPreVersion::BindParameters
_TEXT	ENDS
PUBLIC	??1CTBLPreVersion@@UAE@XZ			; CTBLPreVersion::~CTBLPreVersion
; Function compile flags: /Ogty
;	COMDAT ??_GCTBLPreVersion@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCTBLPreVersion@@UAEPAXI@Z PROC NEAR			; CTBLPreVersion::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1CTBLPreVersion@@UAE@XZ
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L95189
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L95189:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GCTBLPreVersion@@UAEPAXI@Z ENDP			; CTBLPreVersion::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1CTBLPreVersion@@UAE@XZ
_TEXT	SEGMENT
??1CTBLPreVersion@@UAE@XZ PROC NEAR			; CTBLPreVersion::~CTBLPreVersion, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1CSqlQuery@@UAE@XZ	; CSqlQuery::~CSqlQuery
??1CTBLPreVersion@@UAE@XZ ENDP				; CTBLPreVersion::~CTBLPreVersion
_TEXT	ENDS
PUBLIC	?InitQueryTPatchSvr@@YAHPAVCSqlDatabase@@@Z	; InitQueryTPatchSvr
PUBLIC	??_C@_0P@EOMPGPJC@CSPLoadService?$AA@		; `string'
PUBLIC	??_C@_0M@OFNNAIND@CTBLVersion?$AA@		; `string'
PUBLIC	??_C@_0O@EIMIBPM@CSPMinBetaVer?$AA@		; `string'
PUBLIC	??_C@_0P@PFMHOGAK@CTBLPreVersion?$AA@		; `string'
PUBLIC	??_C@_0P@BIGOCFAD@CSPPreComplete?$AA@		; `string'
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T95448	DD	0ffffffffH
	DD	FLAT:$L95222
	DD	0ffffffffH
	DD	FLAT:$L95224
	DD	0ffffffffH
	DD	FLAT:$L95226
	DD	0ffffffffH
	DD	FLAT:$L95228
	DD	0ffffffffH
	DD	FLAT:$L95230
$T95445	DD	019930520H
	DD	05H
	DD	FLAT:$T95448
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0P@EOMPGPJC@CSPLoadService?$AA@
CONST	SEGMENT
??_C@_0P@EOMPGPJC@CSPLoadService?$AA@ DB 'CSPLoadService', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OFNNAIND@CTBLVersion?$AA@
CONST	SEGMENT
??_C@_0M@OFNNAIND@CTBLVersion?$AA@ DB 'CTBLVersion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EIMIBPM@CSPMinBetaVer?$AA@
CONST	SEGMENT
??_C@_0O@EIMIBPM@CSPMinBetaVer?$AA@ DB 'CSPMinBetaVer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PFMHOGAK@CTBLPreVersion?$AA@
CONST	SEGMENT
??_C@_0P@PFMHOGAK@CTBLPreVersion?$AA@ DB 'CTBLPreVersion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BIGOCFAD@CSPPreComplete?$AA@
CONST	SEGMENT
??_C@_0P@BIGOCFAD@CSPPreComplete?$AA@ DB 'CSPPreComplete', 00H ; `string'
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\dbaccess.cpp
CONST	ENDS
;	COMDAT ?InitQueryTPatchSvr@@YAHPAVCSqlDatabase@@@Z
_TEXT	SEGMENT
$T95219 = -20						; size = 4
$T95214 = -20						; size = 4
$T95209 = -20						; size = 4
$T95204 = -20						; size = 4
$T95198 = -20						; size = 4
$T95218 = -16						; size = 4
$T95213 = -16						; size = 4
$T95208 = -16						; size = 4
$T95203 = -16						; size = 4
$T95199 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pdb$ = 8						; size = 4
?InitQueryTPatchSvr@@YAHPAVCSqlDatabase@@@Z PROC NEAR	; InitQueryTPatchSvr, COMDAT

; 3    : BEGIN_INIT_QUERY(TPatchSvr)

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?InitQueryTPatchSvr@@YAHPAVCSqlDatabase@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 08	 sub	 esp, 8
  00018	53		 push	 ebx
  00019	55		 push	 ebp
  0001a	56		 push	 esi
  0001b	57		 push	 edi

; 4    : 	PREDEFINE_QUERY(CSPLoadService)

  0001c	68 98 0c 00 00	 push	 3224			; 00000c98H
  00021	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00026	8b f0		 mov	 esi, eax
  00028	83 c4 04	 add	 esp, 4
  0002b	89 74 24 10	 mov	 DWORD PTR $T95198[esp+36], esi
  0002f	8b 7c 24 28	 mov	 edi, DWORD PTR _pdb$[esp+32]
  00033	33 db		 xor	 ebx, ebx
  00035	3b f3		 cmp	 esi, ebx
  00037	89 5c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], ebx
  0003b	bd 0f 00 00 00	 mov	 ebp, 15			; 0000000fH
  00040	74 28		 je	 SHORT $L95200
  00042	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00045	8b cc		 mov	 ecx, esp
  00047	89 64 24 30	 mov	 DWORD PTR $T95199[esp+64], esp
  0004b	6a 0e		 push	 14			; 0000000eH
  0004d	89 69 18	 mov	 DWORD PTR [ecx+24], ebp
  00050	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  00053	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@EOMPGPJC@CSPLoadService?$AA@
  00058	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  0005b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00060	57		 push	 edi
  00061	8b ce		 mov	 ecx, esi
  00063	e8 00 00 00 00	 call	 ??0CSPLoadService@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CSPLoadService::CSPLoadService
  00068	eb 02		 jmp	 SHORT $L95201
$L95200:
  0006a	33 c0		 xor	 eax, eax
$L95201:
  0006c	3b c3		 cmp	 eax, ebx
  0006e	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+44], -1
  00076	0f 84 26 01 00
	00		 je	 $L95446

; 5    : 	PREDEFINE_QUERY(CTBLVersion)

  0007c	68 d0 0c 00 00	 push	 3280			; 00000cd0H
  00081	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00086	8b f0		 mov	 esi, eax
  00088	83 c4 04	 add	 esp, 4
  0008b	89 74 24 14	 mov	 DWORD PTR $T95203[esp+36], esi
  0008f	3b f3		 cmp	 esi, ebx
  00091	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+44], 1
  00099	74 28		 je	 SHORT $L95205
  0009b	83 ec 1c	 sub	 esp, 28			; 0000001cH
  0009e	8b cc		 mov	 ecx, esp
  000a0	89 64 24 2c	 mov	 DWORD PTR $T95204[esp+64], esp
  000a4	6a 0b		 push	 11			; 0000000bH
  000a6	89 69 18	 mov	 DWORD PTR [ecx+24], ebp
  000a9	89 59 14	 mov	 DWORD PTR [ecx+20], ebx
  000ac	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@OFNNAIND@CTBLVersion?$AA@
  000b1	88 59 04	 mov	 BYTE PTR [ecx+4], bl
  000b4	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  000b9	57		 push	 edi
  000ba	8b ce		 mov	 ecx, esi
  000bc	e8 00 00 00 00	 call	 ??0CTBLVersion@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CTBLVersion::CTBLVersion
  000c1	eb 02		 jmp	 SHORT $L95206
$L95205:
  000c3	33 c0		 xor	 eax, eax
$L95206:
  000c5	83 cd ff	 or	 ebp, -1
  000c8	3b c3		 cmp	 eax, ebx
  000ca	89 6c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], ebp
  000ce	0f 84 ce 00 00
	00		 je	 $L95446

; 6    : 	PREDEFINE_QUERY(CSPMinBetaVer)

  000d4	68 30 0c 00 00	 push	 3120			; 00000c30H
  000d9	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000de	8b f0		 mov	 esi, eax
  000e0	83 c4 04	 add	 esp, 4
  000e3	89 74 24 14	 mov	 DWORD PTR $T95208[esp+36], esi
  000e7	3b f3		 cmp	 esi, ebx
  000e9	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+44], 2
  000f1	74 1d		 je	 SHORT $L95210
  000f3	83 ec 1c	 sub	 esp, 28			; 0000001cH
  000f6	8b cc		 mov	 ecx, esp
  000f8	89 64 24 2c	 mov	 DWORD PTR $T95209[esp+64], esp
  000fc	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@EIMIBPM@CSPMinBetaVer?$AA@
  00101	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00106	57		 push	 edi
  00107	8b ce		 mov	 ecx, esi
  00109	e8 00 00 00 00	 call	 ??0CSPMinBetaVer@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CSPMinBetaVer::CSPMinBetaVer
  0010e	eb 02		 jmp	 SHORT $L95211
$L95210:
  00110	33 c0		 xor	 eax, eax
$L95211:
  00112	3b c3		 cmp	 eax, ebx
  00114	89 6c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], ebp
  00118	0f 84 84 00 00
	00		 je	 $L95446

; 7    : 	PREDEFINE_QUERY(CTBLPreVersion)

  0011e	68 cc 0c 00 00	 push	 3276			; 00000cccH
  00123	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00128	8b f0		 mov	 esi, eax
  0012a	83 c4 04	 add	 esp, 4
  0012d	89 74 24 14	 mov	 DWORD PTR $T95213[esp+36], esi
  00131	3b f3		 cmp	 esi, ebx
  00133	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+44], 3
  0013b	74 1d		 je	 SHORT $L95215
  0013d	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00140	8b cc		 mov	 ecx, esp
  00142	89 64 24 2c	 mov	 DWORD PTR $T95214[esp+64], esp
  00146	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@PFMHOGAK@CTBLPreVersion?$AA@
  0014b	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00150	57		 push	 edi
  00151	8b ce		 mov	 ecx, esi
  00153	e8 00 00 00 00	 call	 ??0CTBLPreVersion@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CTBLPreVersion::CTBLPreVersion
  00158	eb 02		 jmp	 SHORT $L95216
$L95215:
  0015a	33 c0		 xor	 eax, eax
$L95216:
  0015c	3b c3		 cmp	 eax, ebx
  0015e	89 6c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], ebp
  00162	74 3e		 je	 SHORT $L95446

; 8    : 	PREDEFINE_QUERY(CSPPreComplete)

  00164	68 30 0c 00 00	 push	 3120			; 00000c30H
  00169	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0016e	8b f0		 mov	 esi, eax
  00170	83 c4 04	 add	 esp, 4
  00173	89 74 24 14	 mov	 DWORD PTR $T95218[esp+36], esi
  00177	3b f3		 cmp	 esi, ebx
  00179	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+44], 4
  00181	74 1f		 je	 SHORT $L95446
  00183	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00186	8b cc		 mov	 ecx, esp
  00188	89 64 24 2c	 mov	 DWORD PTR $T95219[esp+64], esp
  0018c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0P@BIGOCFAD@CSPPreComplete?$AA@
  00191	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00196	57		 push	 edi
  00197	8b ce		 mov	 ecx, esi
  00199	e8 00 00 00 00	 call	 ??0CSPPreComplete@@QAE@PAVCSqlDatabase@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CSPPreComplete::CSPPreComplete
  0019e	3b c3		 cmp	 eax, ebx
  001a0	75 15		 jne	 SHORT $L93007
$L95446:
  001a2	33 c0		 xor	 eax, eax

; 9    : END_INIT_QUERY()

  001a4	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  001a8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001af	5f		 pop	 edi
  001b0	5e		 pop	 esi
  001b1	5d		 pop	 ebp
  001b2	5b		 pop	 ebx
  001b3	83 c4 14	 add	 esp, 20			; 00000014H
  001b6	c3		 ret	 0
$L93007:
  001b7	8b 4c 24 18	 mov	 ecx, DWORD PTR __$EHRec$[esp+36]
  001bb	5f		 pop	 edi
  001bc	5e		 pop	 esi
  001bd	5d		 pop	 ebp
  001be	b8 01 00 00 00	 mov	 eax, 1
  001c3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001ca	5b		 pop	 ebx
  001cb	83 c4 14	 add	 esp, 20			; 00000014H
  001ce	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L95222:
  00000	8b 45 ec	 mov	 eax, DWORD PTR $T95198[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
$L95224:
  0000b	8b 45 f0	 mov	 eax, DWORD PTR $T95203[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
$L95226:
  00016	8b 45 f0	 mov	 eax, DWORD PTR $T95208[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001f	59		 pop	 ecx
  00020	c3		 ret	 0
$L95228:
  00021	8b 45 f0	 mov	 eax, DWORD PTR $T95213[ebp]
  00024	50		 push	 eax
  00025	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002a	59		 pop	 ecx
  0002b	c3		 ret	 0
$L95230:
  0002c	8b 45 f0	 mov	 eax, DWORD PTR $T95218[ebp]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00035	59		 pop	 ecx
  00036	c3		 ret	 0
__ehhandler$?InitQueryTPatchSvr@@YAHPAVCSqlDatabase@@@Z:
  00037	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T95445
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?InitQueryTPatchSvr@@YAHPAVCSqlDatabase@@@Z ENDP	; InitQueryTPatchSvr
END
