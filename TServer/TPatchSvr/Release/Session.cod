; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\Session.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??0CSession@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCSession@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CSession@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Close@CSession@@UAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateSocket@CSession@@SAHAAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Listen@CSession@@QAEHG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Open@CSession@@UAEHIAAVCPacket@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendQueueFull@CSession@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Say@CSession@@UAEHPAVCPacket@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnInvalidSession@CSession@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CloseSession@CSession@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendComplete@CSession@@QAEHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?OnSendComplete@CSession@@QAEHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Post@CSession@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WaitForMessage@CSession@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Read@CSession@@QAEHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckMessage@CSession@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Flush@CSession@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Connect@CSession@@QAEHPBDG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?empty@?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?front@?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAEAAPAVCPacket@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push@?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAEXABQAVCPacket@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop@?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?empty@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?front@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAEAAPAVCPacket@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop_front@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push_back@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAEXABQAVCPacket@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop_back@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Growmap@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Deque_val@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IAE@V?$allocator@PAVCPacket@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAVCPacket@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVCPacket@@@std@@QAEXPAPAVCPacket@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@PAVCPacket@@@std@@QAEPAPAVCPacket@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@PAVCPacket@@@std@@QAEXPAPAVCPacket@@ABQAV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAVCPacket@@@std@@QAEXPAPAVCPacket@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAPAVCPacket@@@std@@QAEXPAPAPAVCPacket@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAPAVCPacket@@@std@@QAEXPAPAPAVCPacket@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QBEAAPAVCPacket@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xlen@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Deque_map@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IAE@V?$allocator@PAVCPacket@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAVCPacket@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@PAPAVCPacket@@@std@@QAEPAPAPAVCPacket@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAE@IPBV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QBEABQAVCPacket@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAVCPacket@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAE@IPBV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAPAPAVCPacket@@PAPAPAV1@V?$allocator@PAPAVCPacket@@@std@@@std@@YAPAPAPAVCPacket@@PAPAPAV1@00AAV?$allocator@PAPAVCPacket@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_fill_n@PAPAPAVCPacket@@IPAPAV1@V?$allocator@PAPAVCPacket@@@std@@@std@@YAXPAPAPAVCPacket@@IABQAPAV1@AAV?$allocator@PAPAVCPacket@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAPAVCPacket@@V?$allocator@PAPAVCPacket@@@std@@@std@@YAXPAPAPAVCPacket@@0AAV?$allocator@PAPAVCPacket@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCPacket@@@std@@YAPAPAVCPacket@@IPAPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@PAVCPacket@@PAV1@@std@@YAXPAPAVCPacket@@ABQAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAVCPacket@@@std@@YAXPAPAVCPacket@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAPAVCPacket@@@std@@YAXPAPAPAVCPacket@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0PAVCPacket@@@?$allocator@PAPAVCPacket@@@std@@QAE@ABV?$allocator@PAVCPacket@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAPAVCPacket@@@std@@YAPAPAPAVCPacket@@IPAPAPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAVCPacket@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAPAVCPacket@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAPAVCPacket@@PAPAV1@@std@@YAPAPAPAVCPacket@@PAPAPAV1@00AAV?$allocator@PAPAVCPacket@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAPAVCPacket@@IPAPAV1@@std@@YAXPAPAPAVCPacket@@IABQAPAV1@AAV?$allocator@PAPAVCPacket@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAPAVCPacket@@V?$allocator@PAPAVCPacket@@@std@@@std@@YAXPAPAPAVCPacket@@0AAV?$allocator@PAPAVCPacket@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill_n@PAPAPAVCPacket@@IPAPAV1@@std@@YAXPAPAPAVCPacket@@IABQAPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@G@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CCSLock@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CCSLock@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_GCCSLock@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CCSLock@@QAE@PAU_RTL_CRITICAL_SECTION@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CSession@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?CreateSocket@CSession@@SAHAAI@Z		; CSession::CreateSocket
EXTRN	__imp__WSASocketA@24:NEAR
EXTRN	__imp__closesocket@4:NEAR
EXTRN	__imp__ioctlsocket@12:NEAR
EXTRN	__imp__setsockopt@20:NEAR
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\session.cpp
;	COMDAT ?CreateSocket@CSession@@SAHAAI@Z
_TEXT	SEGMENT
_bAsync$ = -4						; size = 4
_nSIZE$ = 8						; size = 4
_socket$ = 8						; size = 4
?CreateSocket@CSession@@SAHAAI@Z PROC NEAR		; CSession::CreateSocket, COMDAT

; 70   : {

  00000	51		 push	 ecx
  00001	53		 push	 ebx

; 71   : 	if( socket != INVALID_SOCKET )

  00002	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__closesocket@4
  00008	56		 push	 esi
  00009	8b 74 24 10	 mov	 esi, DWORD PTR _socket$[esp+8]
  0000d	8b 06		 mov	 eax, DWORD PTR [esi]
  0000f	83 f8 ff	 cmp	 eax, -1
  00012	74 03		 je	 SHORT $L93001

; 72   : 		closesocket(socket);

  00014	50		 push	 eax
  00015	ff d3		 call	 ebx
$L93001:

; 73   : 
; 74   : 	socket = WSASocket(
; 75   : 		AF_INET,
; 76   : 		SOCK_STREAM,
; 77   : 		IPPROTO_TCP,
; 78   : 		NULL, 0,
; 79   : 		WSA_FLAG_OVERLAPPED);

  00017	6a 01		 push	 1
  00019	6a 00		 push	 0
  0001b	6a 00		 push	 0
  0001d	6a 06		 push	 6
  0001f	6a 01		 push	 1
  00021	6a 02		 push	 2
  00023	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSASocketA@24

; 80   : 
; 81   : 	if( socket == INVALID_SOCKET )

  00029	83 f8 ff	 cmp	 eax, -1
  0002c	89 06		 mov	 DWORD PTR [esi], eax

; 82   : 		return FALSE;

  0002e	74 31		 je	 SHORT $L93908

; 83   : 	BOOL bAsync = TRUE;
; 84   : 
; 85   : 	int nERROR = ioctlsocket( socket, FIONBIO, (unsigned long *) &bAsync);

  00030	8d 4c 24 08	 lea	 ecx, DWORD PTR _bAsync$[esp+12]
  00034	51		 push	 ecx
  00035	68 7e 66 04 80	 push	 -2147195266		; 8004667eH
  0003a	50		 push	 eax
  0003b	c7 44 24 14 01
	00 00 00	 mov	 DWORD PTR _bAsync$[esp+24], 1
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ioctlsocket@12

; 86   : 	int nSIZE = 8192; // Socket buffer size
; 87   : 
; 88   : 	if( nERROR == SOCKET_ERROR )

  00049	83 f8 ff	 cmp	 eax, -1
  0004c	c7 44 24 10 00
	20 00 00	 mov	 DWORD PTR _nSIZE$[esp+8], 8192 ; 00002000H
  00054	75 11		 jne	 SHORT $L93010

; 89   : 	{
; 90   : 		closesocket(socket);

  00056	8b 16		 mov	 edx, DWORD PTR [esi]
  00058	52		 push	 edx
  00059	ff d3		 call	 ebx

; 91   : 		socket = INVALID_SOCKET;

  0005b	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1
$L93908:
  00061	5e		 pop	 esi

; 92   : 
; 93   : 		return FALSE;

  00062	33 c0		 xor	 eax, eax
  00064	5b		 pop	 ebx

; 115  : }

  00065	59		 pop	 ecx
  00066	c3		 ret	 0
$L93010:

; 94   : 	}
; 95   : 
; 96   : 	nERROR = setsockopt( socket, SOL_SOCKET, SO_RCVBUF, (const char *) &nSIZE, sizeof(int));

  00067	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00069	57		 push	 edi
  0006a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__setsockopt@20
  00070	6a 04		 push	 4
  00072	8d 44 24 18	 lea	 eax, DWORD PTR _nSIZE$[esp+16]
  00076	50		 push	 eax
  00077	68 02 10 00 00	 push	 4098			; 00001002H
  0007c	68 ff ff 00 00	 push	 65535			; 0000ffffH
  00081	51		 push	 ecx
  00082	ff d7		 call	 edi

; 97   : 	if( nERROR == SOCKET_ERROR )

  00084	83 f8 ff	 cmp	 eax, -1
  00087	75 12		 jne	 SHORT $L93014
$L93907:

; 98   : 	{
; 99   : 		closesocket(socket);

  00089	8b 16		 mov	 edx, DWORD PTR [esi]
  0008b	52		 push	 edx
  0008c	ff d3		 call	 ebx
  0008e	5f		 pop	 edi

; 100  : 		socket = INVALID_SOCKET;

  0008f	c7 06 ff ff ff
	ff		 mov	 DWORD PTR [esi], -1
  00095	5e		 pop	 esi

; 101  : 
; 102  : 		return FALSE;

  00096	33 c0		 xor	 eax, eax
  00098	5b		 pop	 ebx

; 115  : }

  00099	59		 pop	 ecx
  0009a	c3		 ret	 0
$L93014:

; 103  : 	}
; 104  : 
; 105  : 	nERROR = setsockopt( socket, SOL_SOCKET, SO_SNDBUF, (const char *) &nSIZE, sizeof(int));

  0009b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0009d	6a 04		 push	 4
  0009f	8d 44 24 18	 lea	 eax, DWORD PTR _nSIZE$[esp+16]
  000a3	50		 push	 eax
  000a4	68 01 10 00 00	 push	 4097			; 00001001H
  000a9	68 ff ff 00 00	 push	 65535			; 0000ffffH
  000ae	51		 push	 ecx
  000af	ff d7		 call	 edi

; 106  : 	if( nERROR == SOCKET_ERROR )

  000b1	83 f8 ff	 cmp	 eax, -1

; 107  : 	{
; 108  : 		closesocket(socket);
; 109  : 		socket = INVALID_SOCKET;
; 110  : 
; 111  : 		return FALSE;

  000b4	74 d3		 je	 SHORT $L93907
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi

; 112  : 	}
; 113  : 
; 114  : 	return TRUE;

  000b8	b8 01 00 00 00	 mov	 eax, 1
  000bd	5b		 pop	 ebx

; 115  : }

  000be	59		 pop	 ecx
  000bf	c3		 ret	 0
?CreateSocket@CSession@@SAHAAI@Z ENDP			; CSession::CreateSocket
_TEXT	ENDS
PUBLIC	?Listen@CSession@@QAEHG@Z			; CSession::Listen
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	__imp__bind@12:NEAR
EXTRN	__imp__htons@4:NEAR
EXTRN	__imp__listen@8:NEAR
; Function compile flags: /Ogty
;	COMDAT ?Listen@CSession@@QAEHG@Z
_TEXT	SEGMENT
_addr$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_wPort$ = 8						; size = 2
?Listen@CSession@@QAEHG@Z PROC NEAR			; CSession::Listen, COMDAT
; _this$ = ecx

; 118  : {

  00000	83 ec 14	 sub	 esp, 20			; 00000014H
  00003	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx

; 119  : 	SOCKADDR_IN addr;
; 120  : 
; 121  : 	if(!CreateSocket(m_sock))

  0000c	8d 77 70	 lea	 esi, DWORD PTR [edi+112]
  0000f	56		 push	 esi
  00010	89 44 24 1c	 mov	 DWORD PTR __$ArrayPad$[esp+32], eax
  00014	e8 00 00 00 00	 call	 ?CreateSocket@CSession@@SAHAAI@Z ; CSession::CreateSocket
  00019	83 c4 04	 add	 esp, 4
  0001c	85 c0		 test	 eax, eax

; 122  : 		return FALSE;

  0001e	74 59		 je	 SHORT $L93917

; 123  : 
; 124  : 	memset( &addr, 0, sizeof(SOCKADDR_IN));
; 125  : 	addr.sin_family = AF_INET;
; 126  : 	addr.sin_addr.s_addr = INADDR_ANY;
; 127  : 	addr.sin_port = htons(wPort);

  00020	8b 4c 24 20	 mov	 ecx, DWORD PTR _wPort$[esp+24]
  00024	33 c0		 xor	 eax, eax
  00026	89 44 24 08	 mov	 DWORD PTR _addr$[esp+28], eax
  0002a	89 44 24 0c	 mov	 DWORD PTR _addr$[esp+32], eax
  0002e	89 44 24 10	 mov	 DWORD PTR _addr$[esp+36], eax
  00032	51		 push	 ecx
  00033	89 44 24 18	 mov	 DWORD PTR _addr$[esp+44], eax
  00037	66 c7 44 24 0c
	02 00		 mov	 WORD PTR _addr$[esp+32], 2
  0003e	89 44 24 10	 mov	 DWORD PTR _addr$[esp+36], eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__htons@4

; 128  : 
; 129  : 	int nERROR = bind( m_sock, (sockaddr *) &addr, sizeof(SOCKADDR_IN));

  00048	6a 10		 push	 16			; 00000010H
  0004a	8d 54 24 0c	 lea	 edx, DWORD PTR _addr$[esp+32]
  0004e	66 89 44 24 0e	 mov	 WORD PTR _addr$[esp+34], ax
  00053	8b 06		 mov	 eax, DWORD PTR [esi]
  00055	52		 push	 edx
  00056	50		 push	 eax
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__bind@12

; 130  : 	if( nERROR == SOCKET_ERROR )

  0005d	83 f8 ff	 cmp	 eax, -1

; 131  : 	{
; 132  : 		Close();
; 133  : 		return FALSE;

  00060	74 10		 je	 SHORT $L93916

; 134  : 	}
; 135  : 
; 136  : 	nERROR = listen( m_sock, 5);

  00062	8b 06		 mov	 eax, DWORD PTR [esi]
  00064	6a 05		 push	 5
  00066	50		 push	 eax
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__listen@8

; 137  : 	if( nERROR == SOCKET_ERROR )

  0006d	83 f8 ff	 cmp	 eax, -1
  00070	75 1a		 jne	 SHORT $L93032
$L93916:

; 138  : 	{
; 139  : 		Close();

  00072	8b 17		 mov	 edx, DWORD PTR [edi]
  00074	8b cf		 mov	 ecx, edi
  00076	ff 52 08	 call	 DWORD PTR [edx+8]
$L93917:
  00079	5f		 pop	 edi

; 140  : 		return FALSE;

  0007a	33 c0		 xor	 eax, eax
  0007c	5e		 pop	 esi

; 141  : 	}
; 142  : 
; 143  : 	return TRUE;
; 144  : }

  0007d	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  00081	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00086	83 c4 14	 add	 esp, 20			; 00000014H
  00089	c2 04 00	 ret	 4
$L93032:
  0008c	8b 4c 24 18	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+28]
  00090	5f		 pop	 edi
  00091	b8 01 00 00 00	 mov	 eax, 1
  00096	5e		 pop	 esi
  00097	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0009c	83 c4 14	 add	 esp, 20			; 00000014H
  0009f	c2 04 00	 ret	 4
?Listen@CSession@@QAEHG@Z ENDP				; CSession::Listen
_TEXT	ENDS
PUBLIC	?Open@CSession@@UAEHIAAVCPacket@@@Z		; CSession::Open
EXTRN	?GetBuffer@CPacket@@QAEPAEXZ:NEAR		; CPacket::GetBuffer
; Function compile flags: /Ogty
;	COMDAT ?Open@CSession@@UAEHIAAVCPacket@@@Z
_TEXT	SEGMENT
_sock$ = 8						; size = 4
_init$ = 12						; size = 4
?Open@CSession@@UAEHIAAVCPacket@@@Z PROC NEAR		; CSession::Open, COMDAT
; _this$ = ecx

; 147  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 148  : 	SOCKADDR_IN *pAddr = (SOCKADDR_IN *) (init.GetBuffer() + 38);

  00003	8b 4c 24 0c	 mov	 ecx, DWORD PTR _init$[esp]
  00007	e8 00 00 00 00	 call	 ?GetBuffer@CPacket@@QAEPAEXZ ; CPacket::GetBuffer

; 149  : 
; 150  : 	memcpy( &m_addr, pAddr, sizeof(SOCKADDR_IN));

  0000c	8b 50 26	 mov	 edx, DWORD PTR [eax+38]
  0000f	83 c0 26	 add	 eax, 38			; 00000026H
  00012	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00015	89 11		 mov	 DWORD PTR [ecx], edx
  00017	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0001a	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0001d	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00020	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00023	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00026	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 151  : 	m_bClosing = FALSE;
; 152  : 	m_bCanRecv = TRUE;
; 153  : 	m_bCanSend = TRUE;
; 154  : 	m_bValid = TRUE;
; 155  : 	m_sock = sock;

  00029	8b 4c 24 08	 mov	 ecx, DWORD PTR _sock$[esp]
  0002d	b8 01 00 00 00	 mov	 eax, 1
  00032	c6 46 0f 00	 mov	 BYTE PTR [esi+15], 0
  00036	88 46 0d	 mov	 BYTE PTR [esi+13], al
  00039	88 46 0e	 mov	 BYTE PTR [esi+14], al
  0003c	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0003f	89 4e 70	 mov	 DWORD PTR [esi+112], ecx
  00042	5e		 pop	 esi

; 156  : 
; 157  : 	return TRUE;
; 158  : }

  00043	c2 08 00	 ret	 8
?Open@CSession@@UAEHIAAVCPacket@@@Z ENDP		; CSession::Open
_TEXT	ENDS
PUBLIC	?Connect@CSession@@QAEHPBDG@Z			; CSession::Connect
EXTRN	__imp__connect@12:NEAR
EXTRN	__imp__inet_addr@4:NEAR
EXTRN	__imp__select@20:NEAR
EXTRN	__imp__WSAGetLastError@0:NEAR
; Function compile flags: /Ogty
;	COMDAT ?Connect@CSession@@QAEHPBDG@Z
_TEXT	SEGMENT
_timeout$93189 = -268					; size = 8
_fds$93188 = -260					; size = 260
_lpszAddr$ = 8						; size = 4
_wPort$ = 12						; size = 2
?Connect@CSession@@QAEHPBDG@Z PROC NEAR			; CSession::Connect, COMDAT
; _this$ = ecx

; 393  : {

  00000	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00006	55		 push	 ebp
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx

; 394  : 	if(!CreateSocket(m_sock))

  0000a	8d 6e 70	 lea	 ebp, DWORD PTR [esi+112]
  0000d	55		 push	 ebp
  0000e	e8 00 00 00 00	 call	 ?CreateSocket@CSession@@SAHAAI@Z ; CSession::CreateSocket
  00013	83 c4 04	 add	 esp, 4
  00016	85 c0		 test	 eax, eax
  00018	75 0b		 jne	 SHORT $L93181
  0001a	5e		 pop	 esi
  0001b	5d		 pop	 ebp

; 430  : }

  0001c	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  00022	c2 08 00	 ret	 8
$L93181:

; 395  : 		return FALSE;
; 396  : 
; 397  : 	m_addr.sin_family = AF_INET;
; 398  : 	m_addr.sin_addr.s_addr = inet_addr(lpszAddr);

  00025	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR _lpszAddr$[esp+272]
  0002c	53		 push	 ebx
  0002d	57		 push	 edi
  0002e	8d 7e 30	 lea	 edi, DWORD PTR [esi+48]
  00031	50		 push	 eax
  00032	66 c7 07 02 00	 mov	 WORD PTR [edi], 2
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__inet_addr@4

; 399  : 	m_addr.sin_port = htons((u_short) wPort);

  0003d	8b 8c 24 24 01
	00 00		 mov	 ecx, DWORD PTR _wPort$[esp+280]
  00044	51		 push	 ecx
  00045	89 46 34	 mov	 DWORD PTR [esi+52], eax
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__htons@4

; 400  : 
; 401  : 	int nERROR = connect( m_sock, (sockaddr *) &m_addr, sizeof(SOCKADDR_IN));

  0004e	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  00051	6a 10		 push	 16			; 00000010H
  00053	57		 push	 edi
  00054	52		 push	 edx
  00055	66 89 46 32	 mov	 WORD PTR [esi+50], ax
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__connect@12

; 402  : 	if( SOCKET_ERROR == nERROR )

  0005f	83 f8 ff	 cmp	 eax, -1
  00062	bb 01 00 00 00	 mov	 ebx, 1
  00067	75 6e		 jne	 SHORT $L93208

; 403  : 		if( WSAGetLastError() == WSAEWOULDBLOCK )

  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0
  0006f	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  00074	75 4b		 jne	 SHORT $L93187

; 404  : 		{
; 405  : 			fd_set fds;
; 406  : 			timeval timeout = { 2, 0};
; 407  : 
; 408  : 			FD_ZERO(&fds);
; 409  : 			FD_SET( m_sock, &fds);

  00076	8b 45 00	 mov	 eax, DWORD PTR [ebp]

; 410  : 
; 411  : 			nERROR = select( 0, NULL, &fds, NULL, &timeout);

  00079	8d 4c 24 10	 lea	 ecx, DWORD PTR _timeout$93189[esp+284]
  0007d	51		 push	 ecx
  0007e	6a 00		 push	 0
  00080	8d 54 24 20	 lea	 edx, DWORD PTR _fds$93188[esp+292]
  00084	52		 push	 edx
  00085	6a 00		 push	 0
  00087	6a 00		 push	 0
  00089	c7 44 24 24 02
	00 00 00	 mov	 DWORD PTR _timeout$93189[esp+304], 2
  00091	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR _timeout$93189[esp+308], 0
  00099	89 44 24 30	 mov	 DWORD PTR _fds$93188[esp+308], eax
  0009d	89 5c 24 2c	 mov	 DWORD PTR _fds$93188[esp+304], ebx
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__select@20

; 412  : 			if( nERROR <= 0 )

  000a7	85 c0		 test	 eax, eax
  000a9	7f 2c		 jg	 SHORT $L93208

; 413  : 			{
; 414  : 				Close();

  000ab	8b 06		 mov	 eax, DWORD PTR [esi]
  000ad	8b ce		 mov	 ecx, esi
  000af	ff 50 08	 call	 DWORD PTR [eax+8]
  000b2	5f		 pop	 edi
  000b3	5b		 pop	 ebx
  000b4	5e		 pop	 esi

; 415  : 				return FALSE;

  000b5	33 c0		 xor	 eax, eax
  000b7	5d		 pop	 ebp

; 430  : }

  000b8	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  000be	c2 08 00	 ret	 8
$L93187:

; 416  : 			}
; 417  : 		}
; 418  : 		else
; 419  : 		{
; 420  : 			Close();

  000c1	8b 16		 mov	 edx, DWORD PTR [esi]
  000c3	8b ce		 mov	 ecx, esi
  000c5	ff 52 08	 call	 DWORD PTR [edx+8]
  000c8	5f		 pop	 edi
  000c9	5b		 pop	 ebx
  000ca	5e		 pop	 esi

; 421  : 			return FALSE;

  000cb	33 c0		 xor	 eax, eax
  000cd	5d		 pop	 ebp

; 430  : }

  000ce	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  000d4	c2 08 00	 ret	 8
$L93208:
  000d7	5f		 pop	 edi

; 422  : 		}
; 423  : 
; 424  : 	m_bClosing = FALSE;
; 425  : 	m_bCanRecv = TRUE;

  000d8	88 5e 0d	 mov	 BYTE PTR [esi+13], bl

; 426  : 	m_bCanSend = TRUE;

  000db	88 5e 0e	 mov	 BYTE PTR [esi+14], bl

; 427  : 	m_bValid = TRUE;

  000de	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 428  : 
; 429  : 	return TRUE;

  000e1	8b c3		 mov	 eax, ebx
  000e3	5b		 pop	 ebx
  000e4	c6 46 0f 00	 mov	 BYTE PTR [esi+15], 0
  000e8	5e		 pop	 esi
  000e9	5d		 pop	 ebp

; 430  : }

  000ea	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  000f0	c2 08 00	 ret	 8
?Connect@CSession@@QAEHPBDG@Z ENDP			; CSession::Connect
_TEXT	ENDS
PUBLIC	?size@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QBEIXZ ; std::deque<CPacket *,std::allocator<CPacket *> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ?size@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QBEIXZ PROC NEAR ; std::deque<CPacket *,std::allocator<CPacket *> >::size, COMDAT
; _this$ = ecx

; 492  : 		return (_Mysize);

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 493  : 		}

  00003	c3		 ret	 0
?size@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QBEIXZ ENDP ; std::deque<CPacket *,std::allocator<CPacket *> >::size
_TEXT	ENDS
PUBLIC	?empty@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QBE_NXZ ; std::deque<CPacket *,std::allocator<CPacket *> >::empty
; Function compile flags: /Ogty
;	COMDAT ?empty@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QBE_NXZ PROC NEAR ; std::deque<CPacket *,std::allocator<CPacket *> >::empty, COMDAT
; _this$ = ecx

; 502  : 		return (_Mysize == 0);

  00000	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00003	33 c0		 xor	 eax, eax
  00005	85 d2		 test	 edx, edx
  00007	0f 94 c0	 sete	 al

; 503  : 		}

  0000a	c3		 ret	 0
?empty@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QBE_NXZ ENDP ; std::deque<CPacket *,std::allocator<CPacket *> >::empty
_TEXT	ENDS
PUBLIC	??0?$allocator@PAVCPacket@@@std@@QAE@XZ		; std::allocator<CPacket *>::allocator<CPacket *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@PAVCPacket@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAVCPacket@@@std@@QAE@XZ PROC NEAR	; std::allocator<CPacket *>::allocator<CPacket *>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@PAVCPacket@@@std@@QAE@XZ ENDP		; std::allocator<CPacket *>::allocator<CPacket *>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAVCPacket@@@std@@QAEXPAPAVCPacket@@I@Z ; std::allocator<CPacket *>::deallocate
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Ogty
;	COMDAT ?deallocate@?$allocator@PAVCPacket@@@std@@QAEXPAPAVCPacket@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVCPacket@@@std@@QAEXPAPAVCPacket@@I@Z PROC NEAR ; std::allocator<CPacket *>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@PAVCPacket@@@std@@QAEXPAPAVCPacket@@I@Z ENDP ; std::allocator<CPacket *>::deallocate
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAPAVCPacket@@@std@@QAEXPAPAPAVCPacket@@I@Z ; std::allocator<CPacket * *>::deallocate
; Function compile flags: /Ogty
;	COMDAT ?deallocate@?$allocator@PAPAVCPacket@@@std@@QAEXPAPAPAVCPacket@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAPAVCPacket@@@std@@QAEXPAPAPAVCPacket@@I@Z PROC NEAR ; std::allocator<CPacket * *>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@PAPAVCPacket@@@std@@QAEXPAPAPAVCPacket@@I@Z ENDP ; std::allocator<CPacket * *>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@PAVCPacket@@@std@@QAE@ABV01@@Z	; std::allocator<CPacket *>::allocator<CPacket *>
; Function compile flags: /Ogty
;	COMDAT ??0?$allocator@PAVCPacket@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PAVCPacket@@@std@@QAE@ABV01@@Z PROC NEAR	; std::allocator<CPacket *>::allocator<CPacket *>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@PAVCPacket@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<CPacket *>::allocator<CPacket *>
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QBEABQAVCPacket@@XZ ; std::deque<CPacket *,std::allocator<CPacket *> >::const_iterator::operator*
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ??Dconst_iterator@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QBEABQAVCPacket@@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QBEABQAVCPacket@@XZ PROC NEAR ; std::deque<CPacket *,std::allocator<CPacket *> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 109  : 			size_type _Block = _Myoff / _DEQUESIZ;

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]

; 110  : 			size_type _Off = _Myoff - _Block * _DEQUESIZ;
; 111  : 			if (_Mycont->_Mapsize <= _Block)

  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b c2		 mov	 eax, edx
  00007	c1 e8 02	 shr	 eax, 2
  0000a	56		 push	 esi
  0000b	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00012	2b d6		 sub	 edx, esi
  00014	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00017	3b f0		 cmp	 esi, eax
  00019	77 02		 ja	 SHORT $L93512

; 112  : 				_Block -= _Mycont->_Mapsize;

  0001b	2b c6		 sub	 eax, esi
$L93512:

; 113  : 			return ((_Mycont->_Map)[_Block][_Off]);

  0001d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00020	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00023	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00026	5e		 pop	 esi

; 114  : 			}

  00027	c3		 ret	 0
??Dconst_iterator@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QBEABQAVCPacket@@XZ ENDP ; std::deque<CPacket *,std::allocator<CPacket *> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAVCPacket@@@std@@QBEIXZ	; std::allocator<CPacket *>::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?max_size@?$allocator@PAVCPacket@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAVCPacket@@@std@@QBEIXZ PROC NEAR ; std::allocator<CPacket *>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 159  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PAVCPacket@@@std@@QBEIXZ ENDP	; std::allocator<CPacket *>::max_size
_TEXT	ENDS
PUBLIC	??0const_iterator@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAE@IPBV12@@Z ; std::deque<CPacket *,std::allocator<CPacket *> >::const_iterator::const_iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ??0const_iterator@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAE@IPBV12@@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0const_iterator@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAE@IPBV12@@Z PROC NEAR ; std::deque<CPacket *,std::allocator<CPacket *> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 102  : 			{	// construct with offset _Off in *_Pdeque
; 103  : 			_Mycont = _Pdeque;
; 104  : 			_Myoff = _Off;

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00004	8b c1		 mov	 eax, ecx
  00006	8b 4c 24 08	 mov	 ecx, DWORD PTR __Pdeque$[esp-4]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 105  : 			}

  0000f	c2 08 00	 ret	 8
??0const_iterator@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAE@IPBV12@@Z ENDP ; std::deque<CPacket *,std::allocator<CPacket *> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC NEAR			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCPacket@@@std@@YAPAPAVCPacket@@IPAPAV1@@Z ; std::_Allocate<CPacket *>
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
; Function compile flags: /Ogty
;	COMDAT ??$_Allocate@PAVCPacket@@@std@@YAPAPAVCPacket@@IPAPAV1@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCPacket@@@std@@YAPAPAVCPacket@@IPAPAV1@@Z PROC NEAR ; std::_Allocate<CPacket *>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 35   : 	}

  00014	c3		 ret	 0
??$_Allocate@PAVCPacket@@@std@@YAPAPAVCPacket@@IPAPAV1@@Z ENDP ; std::_Allocate<CPacket *>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAVCPacket@@@std@@YAXPAPAVCPacket@@@Z ; std::_Destroy<CPacket *>
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy@PAVCPacket@@@std@@YAXPAPAVCPacket@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAVCPacket@@@std@@YAXPAPAVCPacket@@@Z PROC NEAR ; std::_Destroy<CPacket *>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAVCPacket@@@std@@YAXPAPAVCPacket@@@Z ENDP	; std::_Destroy<CPacket *>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAPAVCPacket@@@std@@YAXPAPAPAVCPacket@@@Z ; std::_Destroy<CPacket * *>
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy@PAPAVCPacket@@@std@@YAXPAPAPAVCPacket@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAPAVCPacket@@@std@@YAXPAPAPAVCPacket@@@Z PROC NEAR ; std::_Destroy<CPacket * *>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAPAVCPacket@@@std@@YAXPAPAPAVCPacket@@@Z ENDP ; std::_Destroy<CPacket * *>
_TEXT	ENDS
PUBLIC	??$?0PAVCPacket@@@?$allocator@PAPAVCPacket@@@std@@QAE@ABV?$allocator@PAVCPacket@@@1@@Z ; std::allocator<CPacket * *>::allocator<CPacket * *><CPacket *>
; Function compile flags: /Ogty
;	COMDAT ??$?0PAVCPacket@@@?$allocator@PAPAVCPacket@@@std@@QAE@ABV?$allocator@PAVCPacket@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0PAVCPacket@@@?$allocator@PAPAVCPacket@@@std@@QAE@ABV?$allocator@PAVCPacket@@@1@@Z PROC NEAR ; std::allocator<CPacket * *>::allocator<CPacket * *><CPacket *>, COMDAT
; _this$ = ecx

; 120  : 		allocator(const allocator<_Other>&)

  00000	8b c1		 mov	 eax, ecx

; 121  : 		{	// construct from a related allocator (do nothing)
; 122  : 		}

  00002	c2 04 00	 ret	 4
??$?0PAVCPacket@@@?$allocator@PAPAVCPacket@@@std@@QAE@ABV?$allocator@PAVCPacket@@@1@@Z ENDP ; std::allocator<CPacket * *>::allocator<CPacket * *><CPacket *>
_TEXT	ENDS
PUBLIC	??$_Allocate@PAPAVCPacket@@@std@@YAPAPAPAVCPacket@@IPAPAPAV1@@Z ; std::_Allocate<CPacket * *>
; Function compile flags: /Ogty
;	COMDAT ??$_Allocate@PAPAVCPacket@@@std@@YAPAPAPAVCPacket@@IPAPAPAV1@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAPAVCPacket@@@std@@YAPAPAPAVCPacket@@IPAPAPAV1@@Z PROC NEAR ; std::_Allocate<CPacket * *>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 35   : 	}

  00014	c3		 ret	 0
??$_Allocate@PAPAVCPacket@@@std@@YAPAPAPAVCPacket@@IPAPAPAV1@@Z ENDP ; std::_Allocate<CPacket * *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAVCPacket@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAPAVCPacket@@0@Z ; std::_Ptr_cat<CPacket *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$_Ptr_cat@PAVCPacket@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAPAVCPacket@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAVCPacket@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAPAVCPacket@@0@Z PROC NEAR ; std::_Ptr_cat<CPacket *>, COMDAT

; 218  : 	{	// return pointer category from pointer to pointer arguments

  00000	51		 push	 ecx

; 219  : 	_Scalar_ptr_iterator_tag _Cat;
; 220  : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 221  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@PAVCPacket@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAPAVCPacket@@0@Z ENDP ; std::_Ptr_cat<CPacket *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAPAVCPacket@@PAPAV1@@std@@YAPAPAPAVCPacket@@PAPAPAV1@00AAV?$allocator@PAPAVCPacket@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<CPacket * *,CPacket * *>
EXTRN	_memmove:NEAR
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninit_copy@PAPAVCPacket@@PAPAV1@@std@@YAPAPAPAVCPacket@@PAPAPAV1@00AAV?$allocator@PAPAVCPacket@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PAPAVCPacket@@PAPAV1@@std@@YAPAPAPAVCPacket@@PAPAPAV1@00AAV?$allocator@PAPAVCPacket@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_copy<CPacket * *,CPacket * *>, COMDAT

; 106  : 	size_t _Count = (size_t)(_Last - _First);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2

; 107  : 	return ((_Ty2 *)memmove(&*_Dest, &*_First,
; 108  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 109  : 	}

  00027	c3		 ret	 0
??$_Uninit_copy@PAPAVCPacket@@PAPAV1@@std@@YAPAPAPAVCPacket@@PAPAPAV1@00AAV?$allocator@PAPAVCPacket@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<CPacket * *,CPacket * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@PAPAVCPacket@@V?$allocator@PAPAVCPacket@@@std@@@std@@YAXPAPAPAVCPacket@@0AAV?$allocator@PAPAVCPacket@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<CPacket * *,std::allocator<CPacket * *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy_range@PAPAVCPacket@@V?$allocator@PAPAVCPacket@@@std@@@std@@YAXPAPAPAVCPacket@@0AAV?$allocator@PAPAVCPacket@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@PAPAVCPacket@@V?$allocator@PAPAVCPacket@@@std@@@std@@YAXPAPAPAVCPacket@@0AAV?$allocator@PAPAVCPacket@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Destroy_range<CPacket * *,std::allocator<CPacket * *> >, COMDAT

; 234  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@PAPAVCPacket@@V?$allocator@PAPAVCPacket@@@std@@@std@@YAXPAPAPAVCPacket@@0AAV?$allocator@PAPAVCPacket@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<CPacket * *,std::allocator<CPacket * *> >
_TEXT	ENDS
PUBLIC	??$fill_n@PAPAPAVCPacket@@IPAPAV1@@std@@YAXPAPAPAVCPacket@@IABQAPAV1@@Z ; std::fill_n<CPacket * * *,unsigned int,CPacket * *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$fill_n@PAPAPAVCPacket@@IPAPAV1@@std@@YAXPAPAPAVCPacket@@IABQAPAV1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill_n@PAPAPAVCPacket@@IPAPAV1@@std@@YAXPAPAPAVCPacket@@IABQAPAV1@@Z PROC NEAR ; std::fill_n<CPacket * * *,unsigned int,CPacket * *>, COMDAT

; 1160 : 	for (; 0 < _Count; --_Count, ++_First)

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	76 14		 jbe	 SHORT $L93752
  00008	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  0000c	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00010	56		 push	 esi
$L93750:

; 1161 : 		*_First = _Val;

  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	49		 dec	 ecx
  00019	75 f6		 jne	 SHORT $L93750
  0001b	5e		 pop	 esi
$L93752:

; 1162 : 	}

  0001c	c3		 ret	 0
??$fill_n@PAPAPAVCPacket@@IPAPAV1@@std@@YAXPAPAPAVCPacket@@IABQAPAV1@@Z ENDP ; std::fill_n<CPacket * * *,unsigned int,CPacket * *>
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__P$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC NEAR				; operator new, COMDAT

; 109  :         {return (_P); }

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __P$[esp-4]
  00004	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC NEAR	; std::char_traits<char>::assign, COMDAT

; 331  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 332  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogty
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC NEAR		; std::char_traits<char>::length, COMDAT

; 352  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$L94000:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $L94000
  0000e	2b c2		 sub	 eax, edx

; 353  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
; Function compile flags: /Ogty
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::copy, COMDAT

; 358  : 		return ((_Elem *)::memcpy(_First1, _First2, _Count));

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR __First2$[esp]
  00009	57		 push	 edi
  0000a	8b 7c 24 0c	 mov	 edi, DWORD PTR __First1$[esp+4]
  0000e	8b c1		 mov	 eax, ecx
  00010	8b d7		 mov	 edx, edi
  00012	c1 e9 02	 shr	 ecx, 2
  00015	f3 a5		 rep movsd
  00017	8b c8		 mov	 ecx, eax
  00019	83 e1 03	 and	 ecx, 3
  0001c	f3 a4		 rep movsb
  0001e	5f		 pop	 edi
  0001f	8b c2		 mov	 eax, edx
  00021	5e		 pop	 esi

; 359  : 		}

  00022	c3		 ret	 0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
; Function compile flags: /Ogty
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::move, COMDAT

; 370  : 		return ((_Elem *)::memmove(_First1, _First2, _Count));

  00000	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	??0CCSLock@@QAE@PAU_RTL_CRITICAL_SECTION@@@Z	; CCSLock::CCSLock
PUBLIC	??_7CCSLock@@6B@				; CCSLock::`vftable'
PUBLIC	??_GCCSLock@@UAEPAXI@Z				; CCSLock::`scalar deleting destructor'
EXTRN	??_ECCSLock@@UAEPAXI@Z:NEAR			; CCSLock::`vector deleting destructor'
EXTRN	__imp__EnterCriticalSection@4:NEAR
;	COMDAT ??_7CCSLock@@6B@
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\tnetdef.h
CONST	SEGMENT
??_7CCSLock@@6B@ DD FLAT:??_ECCSLock@@UAEPAXI@Z		; CCSLock::`vftable'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0CCSLock@@QAE@PAU_RTL_CRITICAL_SECTION@@@Z
_TEXT	SEGMENT
_pCS$ = 8						; size = 4
??0CCSLock@@QAE@PAU_RTL_CRITICAL_SECTION@@@Z PROC NEAR	; CCSLock::CCSLock, COMDAT
; _this$ = ecx

; 59   : 	CCSLock( CRITICAL_SECTION *pCS)

  00000	56		 push	 esi
  00001	57		 push	 edi

; 60   : 	{
; 61   : 		EnterCriticalSection(pCS);

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR _pCS$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CCSLock@@6B@
  0000f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 62   : 		m_pCS = pCS;

  00015	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  00018	5f		 pop	 edi

; 63   : 	};

  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??0CCSLock@@QAE@PAU_RTL_CRITICAL_SECTION@@@Z ENDP	; CCSLock::CCSLock
_TEXT	ENDS
PUBLIC	??1CCSLock@@UAE@XZ				; CCSLock::~CCSLock
EXTRN	__imp__LeaveCriticalSection@4:NEAR
; Function compile flags: /Ogty
;	COMDAT ??1CCSLock@@UAE@XZ
_TEXT	SEGMENT
??1CCSLock@@UAE@XZ PROC NEAR				; CCSLock::~CCSLock, COMDAT
; _this$ = ecx

; 67   : 		LeaveCriticalSection(m_pCS);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	50		 push	 eax
  00004	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CCSLock@@6B@
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 68   : 	};

  00010	c3		 ret	 0
??1CCSLock@@UAE@XZ ENDP					; CCSLock::~CCSLock
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_GCCSLock@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCCSLock@@UAEPAXI@Z PROC NEAR			; CCSLock::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	50		 push	 eax
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CCSLock@@6B@
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00013	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00018	74 09		 je	 SHORT $L94020
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 04	 add	 esp, 4
$L94020:
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 04 00	 ret	 4
??_GCCSLock@@UAEPAXI@Z ENDP				; CCSLock::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1109 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1110 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L94027
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  00009	c3		 ret	 0
$L94027:

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC NEAR		; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L94035
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  00009	c3		 ret	 0
$L94035:

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC NEAR	; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1494 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi

; 1495 : 		if (_Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00001	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  00004	83 fe 10	 cmp	 esi, 16			; 00000010H
  00007	57		 push	 edi
  00008	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0000b	72 04		 jb	 SHORT $L94048
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	eb 02		 jmp	 SHORT $L94049
$L94048:
  00011	8b d0		 mov	 edx, eax
$L94049:
  00013	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00017	3b fa		 cmp	 edi, edx
  00019	72 17		 jb	 SHORT $L92848
  0001b	83 fe 10	 cmp	 esi, 16			; 00000010H
  0001e	72 02		 jb	 SHORT $L94056
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
$L94056:
  00022	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00025	03 c8		 add	 ecx, eax
  00027	3b cf		 cmp	 ecx, edi
  00029	76 07		 jbe	 SHORT $L92848
  0002b	5f		 pop	 edi

; 1497 : 		else
; 1498 : 			return (true);

  0002c	b0 01		 mov	 al, 1
  0002e	5e		 pop	 esi

; 1499 : 		}

  0002f	c2 04 00	 ret	 4
$L92848:
  00032	5f		 pop	 edi

; 1496 : 			return (false);	// don't ask

  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 1499 : 		}

  00036	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC NEAR		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 159  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogty
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC NEAR		; std::_Allocate<char>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 35   : 	}

  0000d	c3		 ret	 0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
PUBLIC	?OnInvalidSession@CSession@@QAEHXZ		; CSession::OnInvalidSession
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT xdata$x
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\tnetdef.h
xdata$x	SEGMENT
$T94087	DD	0ffffffffH
	DD	FLAT:$L94070
$T94084	DD	019930520H
	DD	01H
	DD	FLAT:$T94087
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\session.cpp
xdata$x	ENDS
;	COMDAT ?OnInvalidSession@CSession@@QAEHXZ
_TEXT	SEGMENT
_lock_object$ = -20					; size = 8
__$EHRec$ = -12						; size = 12
?OnInvalidSession@CSession@@QAEHXZ PROC NEAR		; CSession::OnInvalidSession, COMDAT
; _this$ = ecx

; 197  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?OnInvalidSession@CSession@@QAEHXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 08	 sub	 esp, 8
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8b f1		 mov	 esi, ecx

; 198  : 	SMART_LOCKCS(&m_cs)

  0001c	8d 7e 18	 lea	 edi, DWORD PTR [esi+24]
  0001f	57		 push	 edi
  00020	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR _lock_object$[esp+32], OFFSET FLAT:??_7CCSLock@@6B@
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
  0002e	89 7c 24 0c	 mov	 DWORD PTR _lock_object$[esp+32], edi

; 199  : 	if(m_bCanSend)

  00032	8a 4e 0e	 mov	 cl, BYTE PTR [esi+14]
  00035	33 c0		 xor	 eax, eax
  00037	3a c8		 cmp	 cl, al
  00039	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  0003d	74 24		 je	 SHORT $L93064

; 200  : 	{
; 201  : 		Close();

  0003f	8b 06		 mov	 eax, DWORD PTR [esi]
  00041	8b ce		 mov	 ecx, esi
  00043	ff 50 08	 call	 DWORD PTR [eax+8]

; 202  : 		return TRUE;

  00046	57		 push	 edi
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0004d	5f		 pop	 edi
  0004e	b8 01 00 00 00	 mov	 eax, 1
  00053	5e		 pop	 esi

; 207  : }

  00054	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0005f	83 c4 14	 add	 esp, 20			; 00000014H
  00062	c3		 ret	 0
$L93064:

; 203  : 	}
; 204  : 	m_bValid = FALSE;
; 205  : 
; 206  : 	return FALSE;

  00063	57		 push	 edi
  00064	89 46 10	 mov	 DWORD PTR [esi+16], eax
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 207  : }

  0006d	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00071	5f		 pop	 edi
  00072	33 c0		 xor	 eax, eax
  00074	5e		 pop	 esi
  00075	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0007c	83 c4 14	 add	 esp, 20			; 00000014H
  0007f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L94070:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _lock_object$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CCSLock@@UAE@XZ	; CCSLock::~CCSLock
__ehhandler$?OnInvalidSession@CSession@@QAEHXZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T94084
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?OnInvalidSession@CSession@@QAEHXZ ENDP			; CSession::OnInvalidSession
PUBLIC	?CloseSession@CSession@@QAEHXZ			; CSession::CloseSession
; Function compile flags: /Ogty
;	COMDAT ?CloseSession@CSession@@QAEHXZ
_TEXT	SEGMENT
?CloseSession@CSession@@QAEHXZ PROC NEAR		; CSession::CloseSession, COMDAT
; _this$ = ecx

; 210  : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f1		 mov	 esi, ecx

; 211  : 	SMART_LOCKCS(&m_cs)

  00004	8d 7e 18	 lea	 edi, DWORD PTR [esi+24]
  00007	57		 push	 edi
  00008	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 212  : 	if( m_sock == INVALID_SOCKET )

  0000e	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  00011	83 f8 ff	 cmp	 eax, -1
  00014	75 0f		 jne	 SHORT $L93072

; 213  : 		return TRUE;

  00016	57		 push	 edi
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0001d	5f		 pop	 edi
  0001e	b8 01 00 00 00	 mov	 eax, 1
  00023	5e		 pop	 esi

; 220  : }

  00024	c3		 ret	 0
$L93072:

; 214  : 
; 215  : 	closesocket(m_sock);

  00025	50		 push	 eax
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4

; 216  : 	m_sock = INVALID_SOCKET;
; 217  : 	m_bCanRecv = FALSE;
; 218  : 
; 219  : 	return FALSE;

  0002c	57		 push	 edi
  0002d	c7 46 70 ff ff
	ff ff		 mov	 DWORD PTR [esi+112], -1
  00034	c6 46 0d 00	 mov	 BYTE PTR [esi+13], 0
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  0003e	5f		 pop	 edi
  0003f	33 c0		 xor	 eax, eax
  00041	5e		 pop	 esi

; 220  : }

  00042	c3		 ret	 0
?CloseSession@CSession@@QAEHXZ ENDP			; CSession::CloseSession
_TEXT	ENDS
PUBLIC	?WaitForMessage@CSession@@QAEHXZ		; CSession::WaitForMessage
EXTRN	__imp__WSARecv@28:NEAR
EXTRN	?ExpandIoBuffer@CPacket@@QAEKK@Z:NEAR		; CPacket::ExpandIoBuffer
EXTRN	?IsReadBufferFull@CPacket@@QAEHXZ:NEAR		; CPacket::IsReadBufferFull
EXTRN	?GetReadBytes@CPacket@@QAEKXZ:NEAR		; CPacket::GetReadBytes
EXTRN	?GetSize@CPacket@@QAEGXZ:NEAR			; CPacket::GetSize
;	COMDAT xdata$x
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\tnetdef.h
xdata$x	SEGMENT
$T94131	DD	0ffffffffH
	DD	FLAT:$L94113
$T94128	DD	019930520H
	DD	01H
	DD	FLAT:$T94131
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\session.cpp
xdata$x	ENDS
;	COMDAT ?WaitForMessage@CSession@@QAEHXZ
_TEXT	SEGMENT
$T94117 = -32						; size = 4
_dwFlags$ = -28						; size = 4
_dwRecv$ = -24						; size = 4
_lock_object$ = -20					; size = 8
__$EHRec$ = -12						; size = 12
?WaitForMessage@CSession@@QAEHXZ PROC NEAR		; CSession::WaitForMessage, COMDAT
; _this$ = ecx

; 322  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?WaitForMessage@CSession@@QAEHXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 14	 sub	 esp, 20			; 00000014H
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8b f1		 mov	 esi, ecx

; 323  : 	SMART_LOCKCS(&m_cs)

  0001c	8d 7e 18	 lea	 edi, DWORD PTR [esi+24]
  0001f	57		 push	 edi
  00020	89 7c 24 0c	 mov	 DWORD PTR $T94117[esp+44], edi
  00024	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR _lock_object$[esp+44], OFFSET FLAT:??_7CCSLock@@6B@
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
  00032	89 7c 24 18	 mov	 DWORD PTR _lock_object$[esp+44], edi

; 324  : 
; 325  : 	if( INVALID_SOCKET == m_sock || !m_bValid || !m_bCanRecv )

  00036	8b 4e 70	 mov	 ecx, DWORD PTR [esi+112]
  00039	33 c0		 xor	 eax, eax
  0003b	83 f9 ff	 cmp	 ecx, -1
  0003e	89 44 24 24	 mov	 DWORD PTR __$EHRec$[esp+48], eax
  00042	0f 84 c7 00 00
	00		 je	 $L93130
  00048	39 46 10	 cmp	 DWORD PTR [esi+16], eax
  0004b	0f 84 be 00 00
	00		 je	 $L93130
  00051	38 46 0d	 cmp	 BYTE PTR [esi+13], al
  00054	0f 84 b5 00 00
	00		 je	 $L93130

; 327  : 
; 328  : 	DWORD dwFlags = 0;
; 329  : 	DWORD dwRecv = 0;
; 330  : 
; 331  : 	if(m_Recv.IsReadBufferFull())

  0005a	8d 7e 40	 lea	 edi, DWORD PTR [esi+64]
  0005d	8b cf		 mov	 ecx, edi
  0005f	89 44 24 0c	 mov	 DWORD PTR _dwFlags$[esp+40], eax
  00063	89 44 24 10	 mov	 DWORD PTR _dwRecv$[esp+40], eax
  00067	e8 00 00 00 00	 call	 ?IsReadBufferFull@CPacket@@QAEHXZ ; CPacket::IsReadBufferFull
  0006c	85 c0		 test	 eax, eax
  0006e	74 12		 je	 SHORT $L93134

; 332  : 		m_Recv.ExpandIoBuffer(m_Recv.GetSize());

  00070	8b cf		 mov	 ecx, edi
  00072	e8 00 00 00 00	 call	 ?GetSize@CPacket@@QAEGXZ ; CPacket::GetSize
  00077	0f b7 c0	 movzx	 eax, ax
  0007a	50		 push	 eax
  0007b	8b cf		 mov	 ecx, edi
  0007d	e8 00 00 00 00	 call	 ?ExpandIoBuffer@CPacket@@QAEKK@Z ; CPacket::ExpandIoBuffer
$L93134:
  00082	53		 push	 ebx
  00083	55		 push	 ebp

; 333  : 
; 334  : 	memset( &m_vBUF, 0, sizeof(WSABUF));

  00084	8d 6e 74	 lea	 ebp, DWORD PTR [esi+116]
  00087	33 c9		 xor	 ecx, ecx
  00089	8b d5		 mov	 edx, ebp
  0008b	89 0a		 mov	 DWORD PTR [edx], ecx
  0008d	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 335  : 	m_vBUF.buf = (char *) (m_Recv.GetBuffer() + m_Recv.GetReadBytes());

  00090	8b cf		 mov	 ecx, edi
  00092	e8 00 00 00 00	 call	 ?GetReadBytes@CPacket@@QAEKXZ ; CPacket::GetReadBytes
  00097	8b cf		 mov	 ecx, edi
  00099	8b d8		 mov	 ebx, eax
  0009b	e8 00 00 00 00	 call	 ?GetBuffer@CPacket@@QAEPAEXZ ; CPacket::GetBuffer
  000a0	03 d8		 add	 ebx, eax

; 336  : 	m_vBUF.len = m_Recv.m_dwBufferSize - m_Recv.GetReadBytes();

  000a2	8b cf		 mov	 ecx, edi
  000a4	89 5e 78	 mov	 DWORD PTR [esi+120], ebx
  000a7	e8 00 00 00 00	 call	 ?GetReadBytes@CPacket@@QAEKXZ ; CPacket::GetReadBytes
  000ac	8b 4e 50	 mov	 ecx, DWORD PTR [esi+80]

; 337  : 
; 338  : 	if( WSARecv(
; 339  : 		m_sock,
; 340  : 		&m_vBUF, 1,
; 341  : 		&dwRecv,
; 342  : 		&dwFlags,
; 343  : 		(LPOVERLAPPED) &m_ovRECV,
; 344  : 		NULL))

  000af	6a 00		 push	 0
  000b1	2b c8		 sub	 ecx, eax
  000b3	8d 96 b0 00 08
	00		 lea	 edx, DWORD PTR [esi+524464]
  000b9	52		 push	 edx
  000ba	8b 56 70	 mov	 edx, DWORD PTR [esi+112]
  000bd	8d 44 24 1c	 lea	 eax, DWORD PTR _dwFlags$[esp+56]
  000c1	50		 push	 eax
  000c2	89 4d 00	 mov	 DWORD PTR [ebp], ecx
  000c5	8d 4c 24 24	 lea	 ecx, DWORD PTR _dwRecv$[esp+60]
  000c9	51		 push	 ecx
  000ca	6a 01		 push	 1
  000cc	55		 push	 ebp
  000cd	52		 push	 edx
  000ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSARecv@28
  000d4	85 c0		 test	 eax, eax
  000d6	5d		 pop	 ebp
  000d7	5b		 pop	 ebx
  000d8	74 14		 je	 SHORT $L93140

; 345  : 	{
; 346  : 		DWORD dwERROR = WSAGetLastError();

  000da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0

; 347  : 
; 348  : 		if( dwERROR != ERROR_IO_PENDING )

  000e0	3d e5 03 00 00	 cmp	 eax, 997		; 000003e5H
  000e5	74 07		 je	 SHORT $L93140

; 349  : 			return FALSE;

  000e7	8b 44 24 08	 mov	 eax, DWORD PTR $T94117[esp+40]
  000eb	50		 push	 eax
  000ec	eb 22		 jmp	 SHORT $L94130
$L93140:

; 350  : 	}
; 351  : 
; 352  : 	return TRUE;

  000ee	8b 4c 24 08	 mov	 ecx, DWORD PTR $T94117[esp+40]
  000f2	51		 push	 ecx
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  000f9	5f		 pop	 edi
  000fa	b8 01 00 00 00	 mov	 eax, 1
  000ff	5e		 pop	 esi

; 353  : }

  00100	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  00104	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0010b	83 c4 20	 add	 esp, 32			; 00000020H
  0010e	c3		 ret	 0
$L93130:

; 326  : 		return FALSE;

  0010f	57		 push	 edi
$L94130:
  00110	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 353  : }

  00116	8b 4c 24 1c	 mov	 ecx, DWORD PTR __$EHRec$[esp+40]
  0011a	5f		 pop	 edi
  0011b	33 c0		 xor	 eax, eax
  0011d	5e		 pop	 esi
  0011e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00125	83 c4 20	 add	 esp, 32			; 00000020H
  00128	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L94113:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _lock_object$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CCSLock@@UAE@XZ	; CCSLock::~CCSLock
__ehhandler$?WaitForMessage@CSession@@QAEHXZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T94128
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?WaitForMessage@CSession@@QAEHXZ ENDP			; CSession::WaitForMessage
PUBLIC	?Read@CSession@@QAEHK@Z				; CSession::Read
EXTRN	?ReadBytes@CPacket@@QAEHK@Z:NEAR		; CPacket::ReadBytes
;	COMDAT xdata$x
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\tnetdef.h
xdata$x	SEGMENT
$T94157	DD	0ffffffffH
	DD	FLAT:$L94140
$T94155	DD	019930520H
	DD	01H
	DD	FLAT:$T94157
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\session.cpp
xdata$x	ENDS
;	COMDAT ?Read@CSession@@QAEHK@Z
_TEXT	SEGMENT
_lock_object$ = -20					; size = 8
__$EHRec$ = -12						; size = 12
_dwRead$ = 8						; size = 4
?Read@CSession@@QAEHK@Z PROC NEAR			; CSession::Read, COMDAT
; _this$ = ecx

; 356  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?Read@CSession@@QAEHK@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 08	 sub	 esp, 8
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8b f1		 mov	 esi, ecx

; 357  : 	SMART_LOCKCS(&m_cs)

  0001c	8d 7e 18	 lea	 edi, DWORD PTR [esi+24]
  0001f	57		 push	 edi
  00020	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR _lock_object$[esp+32], OFFSET FLAT:??_7CCSLock@@6B@
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
  0002e	89 7c 24 0c	 mov	 DWORD PTR _lock_object$[esp+32], edi

; 358  : 
; 359  : 	if( INVALID_SOCKET == m_sock || !m_bValid || !m_bCanRecv )

  00032	83 7e 70 ff	 cmp	 DWORD PTR [esi+112], -1
  00036	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+36], 0
  0003e	74 3d		 je	 SHORT $L93150
  00040	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00043	85 c0		 test	 eax, eax
  00045	74 36		 je	 SHORT $L93150
  00047	8a 46 0d	 mov	 al, BYTE PTR [esi+13]
  0004a	84 c0		 test	 al, al
  0004c	74 2f		 je	 SHORT $L93150

; 361  : 
; 362  : 	if( dwRead == 0 )

  0004e	8b 44 24 20	 mov	 eax, DWORD PTR _dwRead$[esp+24]
  00052	85 c0		 test	 eax, eax

; 363  : 		return FALSE;

  00054	74 27		 je	 SHORT $L93150

; 364  : 
; 365  : 	return m_Recv.ReadBytes(dwRead);

  00056	50		 push	 eax
  00057	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  0005a	e8 00 00 00 00	 call	 ?ReadBytes@CPacket@@QAEHK@Z ; CPacket::ReadBytes
  0005f	57		 push	 edi
  00060	8b f0		 mov	 esi, eax
  00062	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00068	5f		 pop	 edi
  00069	8b c6		 mov	 eax, esi
  0006b	5e		 pop	 esi

; 366  : }

  0006c	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  00070	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00077	83 c4 14	 add	 esp, 20			; 00000014H
  0007a	c2 04 00	 ret	 4
$L93150:

; 360  : 		return FALSE;

  0007d	57		 push	 edi
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 366  : }

  00084	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00088	5f		 pop	 edi
  00089	33 c0		 xor	 eax, eax
  0008b	5e		 pop	 esi
  0008c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00093	83 c4 14	 add	 esp, 20			; 00000014H
  00096	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L94140:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _lock_object$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CCSLock@@UAE@XZ	; CCSLock::~CCSLock
__ehhandler$?Read@CSession@@QAEHK@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T94155
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Read@CSession@@QAEHK@Z ENDP				; CSession::Read
PUBLIC	?CheckMessage@CSession@@QAEHXZ			; CSession::CheckMessage
;	COMDAT xdata$x
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\tnetdef.h
xdata$x	SEGMENT
$T94188	DD	0ffffffffH
	DD	FLAT:$L94167
$T94185	DD	019930520H
	DD	01H
	DD	FLAT:$T94188
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\session.cpp
xdata$x	ENDS
;	COMDAT ?CheckMessage@CSession@@QAEHXZ
_TEXT	SEGMENT
_lock_object$ = -20					; size = 8
__$EHRec$ = -12						; size = 12
?CheckMessage@CSession@@QAEHXZ PROC NEAR		; CSession::CheckMessage, COMDAT
; _this$ = ecx

; 369  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?CheckMessage@CSession@@QAEHXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 08	 sub	 esp, 8
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8b f1		 mov	 esi, ecx

; 370  : 	SMART_LOCKCS(&m_cs)

  0001c	8d 7e 18	 lea	 edi, DWORD PTR [esi+24]
  0001f	57		 push	 edi
  00020	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR _lock_object$[esp+32], OFFSET FLAT:??_7CCSLock@@6B@
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
  0002e	89 7c 24 0c	 mov	 DWORD PTR _lock_object$[esp+32], edi

; 371  : 
; 372  : 	if( m_sock == INVALID_SOCKET || !m_bValid || !m_bCanRecv )

  00032	83 7e 70 ff	 cmp	 DWORD PTR [esi+112], -1
  00036	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+36], 0
  0003e	0f 84 83 00 00
	00		 je	 $L93161
  00044	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00047	85 c0		 test	 eax, eax
  00049	74 7c		 je	 SHORT $L93161
  0004b	8a 46 0d	 mov	 al, BYTE PTR [esi+13]
  0004e	84 c0		 test	 al, al
  00050	74 75		 je	 SHORT $L93161

; 374  : 
; 375  : 	if( m_Recv.GetReadBytes() < PACKET_HEADER_SIZE ||
; 376  : 		m_Recv.GetReadBytes() < m_Recv.GetSize() )

  00052	83 c6 40	 add	 esi, 64			; 00000040H
  00055	8b ce		 mov	 ecx, esi
  00057	e8 00 00 00 00	 call	 ?GetReadBytes@CPacket@@QAEKXZ ; CPacket::GetReadBytes
  0005c	83 f8 08	 cmp	 eax, 8
  0005f	72 4b		 jb	 SHORT $L93165
  00061	53		 push	 ebx
  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?GetSize@CPacket@@QAEGXZ ; CPacket::GetSize
  00069	8b ce		 mov	 ecx, esi
  0006b	0f b7 d8	 movzx	 ebx, ax
  0006e	e8 00 00 00 00	 call	 ?GetReadBytes@CPacket@@QAEKXZ ; CPacket::GetReadBytes
  00073	3b c3		 cmp	 eax, ebx
  00075	5b		 pop	 ebx
  00076	72 34		 jb	 SHORT $L93165

; 378  : 
; 379  : 	if( m_Recv.GetSize() < PACKET_HEADER_SIZE ||
; 380  : 		m_Recv.GetSize() == MAX_PACKET_SIZE)

  00078	8b ce		 mov	 ecx, esi
  0007a	e8 00 00 00 00	 call	 ?GetSize@CPacket@@QAEGXZ ; CPacket::GetSize
  0007f	66 3d 08 00	 cmp	 ax, 8
  00083	72 42		 jb	 SHORT $L93161
  00085	8b ce		 mov	 ecx, esi
  00087	e8 00 00 00 00	 call	 ?GetSize@CPacket@@QAEGXZ ; CPacket::GetSize
  0008c	66 3d ff ff	 cmp	 ax, 65535		; 0000ffffH
  00090	74 35		 je	 SHORT $L93161

; 381  : 		return PACKET_INVALID;
; 382  : 
; 383  : 	return PACKET_COMPLETE;

  00092	57		 push	 edi
  00093	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00099	5f		 pop	 edi
  0009a	33 c0		 xor	 eax, eax
  0009c	5e		 pop	 esi

; 384  : }

  0009d	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  000a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000a8	83 c4 14	 add	 esp, 20			; 00000014H
  000ab	c3		 ret	 0
$L93165:

; 377  : 		return PACKET_INCOMPLETE;

  000ac	57		 push	 edi
  000ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  000b3	5f		 pop	 edi
  000b4	83 c8 ff	 or	 eax, -1
  000b7	5e		 pop	 esi

; 384  : }

  000b8	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  000bc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000c3	83 c4 14	 add	 esp, 20			; 00000014H
  000c6	c3		 ret	 0
$L93161:

; 373  : 		return PACKET_INVALID;

  000c7	57		 push	 edi
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 384  : }

  000ce	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  000d2	5f		 pop	 edi
  000d3	b8 01 00 00 00	 mov	 eax, 1
  000d8	5e		 pop	 esi
  000d9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000e0	83 c4 14	 add	 esp, 20			; 00000014H
  000e3	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L94167:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _lock_object$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CCSLock@@UAE@XZ	; CCSLock::~CCSLock
__ehhandler$?CheckMessage@CSession@@QAEHXZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T94185
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?CheckMessage@CSession@@QAEHXZ ENDP			; CSession::CheckMessage
PUBLIC	?Flush@CSession@@QAEXXZ				; CSession::Flush
EXTRN	?Flush@CPacket@@QAEXXZ:NEAR			; CPacket::Flush
;	COMDAT xdata$x
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\tnetdef.h
xdata$x	SEGMENT
$T94205	DD	0ffffffffH
	DD	FLAT:$L94194
$T94203	DD	019930520H
	DD	01H
	DD	FLAT:$T94205
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\session.cpp
xdata$x	ENDS
;	COMDAT ?Flush@CSession@@QAEXXZ
_TEXT	SEGMENT
_lock_object$ = -20					; size = 8
__$EHRec$ = -12						; size = 12
?Flush@CSession@@QAEXXZ PROC NEAR			; CSession::Flush, COMDAT
; _this$ = ecx

; 387  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?Flush@CSession@@QAEXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 08	 sub	 esp, 8
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8b f9		 mov	 edi, ecx

; 388  : 	SMART_LOCKCS(&m_cs)

  0001c	8d 77 18	 lea	 esi, DWORD PTR [edi+24]
  0001f	56		 push	 esi
  00020	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR _lock_object$[esp+32], OFFSET FLAT:??_7CCSLock@@6B@
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
  0002e	89 74 24 0c	 mov	 DWORD PTR _lock_object$[esp+32], esi

; 389  : 	m_Recv.Flush();

  00032	8d 4f 40	 lea	 ecx, DWORD PTR [edi+64]
  00035	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+36], 0
  0003d	e8 00 00 00 00	 call	 ?Flush@CPacket@@QAEXXZ	; CPacket::Flush

; 390  : }

  00042	56		 push	 esi
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00049	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00056	83 c4 14	 add	 esp, 20			; 00000014H
  00059	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L94194:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _lock_object$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CCSLock@@UAE@XZ	; CCSLock::~CCSLock
__ehhandler$?Flush@CSession@@QAEXXZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T94203
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Flush@CSession@@QAEXXZ ENDP				; CSession::Flush
PUBLIC	?empty@?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QBE_NXZ ; std::queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >::empty
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\queue
;	COMDAT ?empty@?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QBE_NXZ PROC NEAR ; std::queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >::empty, COMDAT
; _this$ = ecx

; 36   : 		return (c.empty());

  00000	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00003	33 c0		 xor	 eax, eax
  00005	85 d2		 test	 edx, edx
  00007	0f 94 c0	 sete	 al

; 37   : 		}

  0000a	c3		 ret	 0
?empty@?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QBE_NXZ ENDP ; std::queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >::empty
_TEXT	ENDS
PUBLIC	?size@?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QBEIXZ ; std::queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >::size
; Function compile flags: /Ogty
;	COMDAT ?size@?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QBEIXZ PROC NEAR ; std::queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >::size, COMDAT
; _this$ = ecx

; 41   : 		return (c.size());

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 42   : 		}

  00003	c3		 ret	 0
?size@?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QBEIXZ ENDP ; std::queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >::size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAVCPacket@@@std@@QAEPAPAVCPacket@@I@Z ; std::allocator<CPacket *>::allocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@PAVCPacket@@@std@@QAEPAPAVCPacket@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVCPacket@@@std@@QAEPAPAVCPacket@@I@Z PROC NEAR ; std::allocator<CPacket *>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 138  : 		}

  00014	c2 04 00	 ret	 4
?allocate@?$allocator@PAVCPacket@@@std@@QAEPAPAVCPacket@@I@Z ENDP ; std::allocator<CPacket *>::allocate
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAVCPacket@@@std@@QAEXPAPAVCPacket@@@Z ; std::allocator<CPacket *>::destroy
; Function compile flags: /Ogty
;	COMDAT ?destroy@?$allocator@PAVCPacket@@@std@@QAEXPAPAVCPacket@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAVCPacket@@@std@@QAEXPAPAVCPacket@@@Z PROC NEAR ; std::allocator<CPacket *>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAVCPacket@@@std@@QAEXPAPAVCPacket@@@Z ENDP ; std::allocator<CPacket *>::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAPAVCPacket@@@std@@QAEXPAPAPAVCPacket@@@Z ; std::allocator<CPacket * *>::destroy
; Function compile flags: /Ogty
;	COMDAT ?destroy@?$allocator@PAPAVCPacket@@@std@@QAEXPAPAPAVCPacket@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAPAVCPacket@@@std@@QAEXPAPAPAVCPacket@@@Z PROC NEAR ; std::allocator<CPacket * *>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAPAVCPacket@@@std@@QAEXPAPAPAVCPacket@@@Z ENDP ; std::allocator<CPacket * *>::destroy
_TEXT	ENDS
PUBLIC	??Diterator@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QBEAAPAVCPacket@@XZ ; std::deque<CPacket *,std::allocator<CPacket *> >::iterator::operator*
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ??Diterator@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QBEAAPAVCPacket@@XZ
_TEXT	SEGMENT
??Diterator@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QBEAAPAVCPacket@@XZ PROC NEAR ; std::deque<CPacket *,std::allocator<CPacket *> >::iterator::operator*, COMDAT
; _this$ = ecx

; 247  : 			return ((reference)**(const_iterator *)this);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00005	8b c2		 mov	 eax, edx
  00007	c1 e8 02	 shr	 eax, 2
  0000a	56		 push	 esi
  0000b	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00012	2b d6		 sub	 edx, esi
  00014	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00017	3b f0		 cmp	 esi, eax
  00019	77 02		 ja	 SHORT $L94247
  0001b	2b c6		 sub	 eax, esi
$L94247:
  0001d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00020	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00023	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00026	5e		 pop	 esi

; 248  : 			}

  00027	c3		 ret	 0
??Diterator@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QBEAAPAVCPacket@@XZ ENDP ; std::deque<CPacket *,std::allocator<CPacket *> >::iterator::operator*
_TEXT	ENDS
PUBLIC	?max_size@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QBEIXZ ; std::deque<CPacket *,std::allocator<CPacket *> >::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QBEIXZ PROC NEAR ; std::deque<CPacket *,std::allocator<CPacket *> >::max_size, COMDAT
; _this$ = ecx

; 497  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 498  : 		}

  00005	c3		 ret	 0
?max_size@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QBEIXZ ENDP ; std::deque<CPacket *,std::allocator<CPacket *> >::max_size
_TEXT	ENDS
PUBLIC	??0?$_Deque_map@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IAE@V?$allocator@PAVCPacket@@@1@@Z ; std::_Deque_map<CPacket *,std::allocator<CPacket *> >::_Deque_map<CPacket *,std::allocator<CPacket *> >
; Function compile flags: /Ogty
;	COMDAT ??0?$_Deque_map@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IAE@V?$allocator@PAVCPacket@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Deque_map@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IAE@V?$allocator@PAVCPacket@@@1@@Z PROC NEAR ; std::_Deque_map<CPacket *,std::allocator<CPacket *> >::_Deque_map<CPacket *,std::allocator<CPacket *> >, COMDAT
; _this$ = ecx

; 21   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 22   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Deque_map@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IAE@V?$allocator@PAVCPacket@@@1@@Z ENDP ; std::_Deque_map<CPacket *,std::allocator<CPacket *> >::_Deque_map<CPacket *,std::allocator<CPacket *> >
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAPAVCPacket@@@std@@QAEPAPAPAVCPacket@@I@Z ; std::allocator<CPacket * *>::allocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@PAPAVCPacket@@@std@@QAEPAPAPAVCPacket@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAPAVCPacket@@@std@@QAEPAPAPAVCPacket@@I@Z PROC NEAR ; std::allocator<CPacket * *>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 138  : 		}

  00014	c2 04 00	 ret	 4
?allocate@?$allocator@PAPAVCPacket@@@std@@QAEPAPAPAVCPacket@@I@Z ENDP ; std::allocator<CPacket * *>::allocate
_TEXT	ENDS
PUBLIC	??0iterator@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAE@IPBV12@@Z ; std::deque<CPacket *,std::allocator<CPacket *> >::iterator::iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ??0iterator@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAE@IPBV12@@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0iterator@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAE@IPBV12@@Z PROC NEAR ; std::deque<CPacket *,std::allocator<CPacket *> >::iterator::iterator, COMDAT
; _this$ = ecx

; 242  : 			{	// construct with offset _Off in *_Pdeque

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Off$[esp-4]
  00004	8b c1		 mov	 eax, ecx
  00006	8b 4c 24 08	 mov	 ecx, DWORD PTR __Pdeque$[esp-4]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 243  : 			}

  0000f	c2 08 00	 ret	 8
??0iterator@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAE@IPBV12@@Z ENDP ; std::deque<CPacket *,std::allocator<CPacket *> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@PAPAPAVCPacket@@PAPAPAV1@V?$allocator@PAPAVCPacket@@@std@@@std@@YAPAPAPAVCPacket@@PAPAPAV1@00AAV?$allocator@PAPAVCPacket@@@0@@Z ; std::_Uninitialized_copy<CPacket * * *,CPacket * * *,std::allocator<CPacket * *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninitialized_copy@PAPAPAVCPacket@@PAPAPAV1@V?$allocator@PAPAVCPacket@@@std@@@std@@YAPAPAPAVCPacket@@PAPAPAV1@00AAV?$allocator@PAPAVCPacket@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAPAPAVCPacket@@PAPAPAV1@V?$allocator@PAPAVCPacket@@@std@@@std@@YAPAPAPAVCPacket@@PAPAPAV1@00AAV?$allocator@PAPAVCPacket@@@0@@Z PROC NEAR ; std::_Uninitialized_copy<CPacket * * *,CPacket * * *,std::allocator<CPacket * *> >, COMDAT

; 127  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 128  : 		_Ptr_cat(_First, _Dest)));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 129  : 	}

  00027	c3		 ret	 0
??$_Uninitialized_copy@PAPAPAVCPacket@@PAPAPAV1@V?$allocator@PAPAVCPacket@@@std@@@std@@YAPAPAPAVCPacket@@PAPAPAV1@00AAV?$allocator@PAPAVCPacket@@@0@@Z ENDP ; std::_Uninitialized_copy<CPacket * * *,CPacket * * *,std::allocator<CPacket * *> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@PAPAVCPacket@@V?$allocator@PAPAVCPacket@@@std@@@std@@YAXPAPAPAVCPacket@@0AAV?$allocator@PAPAVCPacket@@@0@@Z ; std::_Destroy_range<CPacket * *,std::allocator<CPacket * *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy_range@PAPAVCPacket@@V?$allocator@PAPAVCPacket@@@std@@@std@@YAXPAPAPAVCPacket@@0AAV?$allocator@PAPAVCPacket@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@PAPAVCPacket@@V?$allocator@PAPAVCPacket@@@std@@@std@@YAXPAPAPAVCPacket@@0AAV?$allocator@PAPAVCPacket@@@0@@Z PROC NEAR ; std::_Destroy_range<CPacket * *,std::allocator<CPacket * *> >, COMDAT

; 217  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 218  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@PAPAVCPacket@@V?$allocator@PAPAVCPacket@@@std@@@std@@YAXPAPAPAVCPacket@@0AAV?$allocator@PAPAVCPacket@@@0@@Z ENDP ; std::_Destroy_range<CPacket * *,std::allocator<CPacket * *> >
_TEXT	ENDS
PUBLIC	??$_Construct@PAVCPacket@@PAV1@@std@@YAXPAPAVCPacket@@ABQAV1@@Z ; std::_Construct<CPacket *,CPacket *>
; Function compile flags: /Ogty
;	COMDAT ??$_Construct@PAVCPacket@@PAV1@@std@@YAXPAPAVCPacket@@ABQAV1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAVCPacket@@PAV1@@std@@YAXPAPAVCPacket@@ABQAV1@@Z PROC NEAR ; std::_Construct<CPacket *,CPacket *>, COMDAT

; 42   : 	new ((void _FARQ *)_Ptr) _T1(_Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $L94304
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$L94304:

; 43   : 	}

  00010	c3		 ret	 0
??$_Construct@PAVCPacket@@PAV1@@std@@YAXPAPAVCPacket@@ABQAV1@@Z ENDP ; std::_Construct<CPacket *,CPacket *>
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAPAVCPacket@@IPAPAV1@@std@@YAXPAPAPAVCPacket@@IABQAPAV1@AAV?$allocator@PAPAVCPacket@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<CPacket * *,unsigned int,CPacket * *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninit_fill_n@PAPAVCPacket@@IPAPAV1@@std@@YAXPAPAPAVCPacket@@IABQAPAV1@AAV?$allocator@PAPAVCPacket@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_fill_n@PAPAVCPacket@@IPAPAV1@@std@@YAXPAPAPAVCPacket@@IABQAPAV1@AAV?$allocator@PAPAVCPacket@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_fill_n<CPacket * *,unsigned int,CPacket * *>, COMDAT

; 237  : 	fill_n(_First, _Count, _Val);

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  0000a	76 10		 jbe	 SHORT $L94317
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$L94315:
  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	49		 dec	 ecx
  00019	75 f6		 jne	 SHORT $L94315
  0001b	5e		 pop	 esi
$L94317:

; 238  : 	}

  0001c	c3		 ret	 0
??$_Uninit_fill_n@PAPAVCPacket@@IPAPAV1@@std@@YAXPAPAPAVCPacket@@IABQAPAV1@AAV?$allocator@PAPAVCPacket@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<CPacket * *,unsigned int,CPacket * *>
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC NEAR ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 34   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 35   : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogty
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $L94336
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1476 : 		}

  00014	c2 04 00	 ret	 4

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$L94336:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 1476 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1114 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1115 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1116 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC NEAR	; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 138  : 		}

  0000d	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	?SendQueueFull@CSession@@QAEHXZ			; CSession::SendQueueFull
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\session.cpp
;	COMDAT ?SendQueueFull@CSession@@QAEHXZ
_TEXT	SEGMENT
?SendQueueFull@CSession@@QAEHXZ PROC NEAR		; CSession::SendQueueFull, COMDAT
; _this$ = ecx

; 162  : 	WORD wMaxQ;
; 163  : 
; 164  : 	if(m_bSessionType == SESSION_CLIENT)

  00000	8a 51 0c	 mov	 dl, BYTE PTR [ecx+12]
  00003	b8 01 00 00 00	 mov	 eax, 1
  00008	3a d0		 cmp	 dl, al
  0000a	75 0d		 jne	 SHORT $L93045

; 168  : 
; 169  : 	if(m_qSEND.size() > wMaxQ)

  0000c	81 79 6c 00 10
	00 00		 cmp	 DWORD PTR [ecx+108], 4096 ; 00001000H
  00013	76 04		 jbe	 SHORT $L93045

; 170  : 	{
; 171  : 		m_bBufFull = TRUE;

  00015	88 41 14	 mov	 BYTE PTR [ecx+20], al

; 172  : 		return TRUE;
; 173  : 	}
; 174  : 
; 175  : 	return FALSE;
; 176  : }

  00018	c3		 ret	 0
$L93045:

; 165  : 		wMaxQ = 4096;
; 166  : 	else
; 167  : 		return FALSE;

  00019	33 c0		 xor	 eax, eax

; 172  : 		return TRUE;
; 173  : 	}
; 174  : 
; 175  : 	return FALSE;
; 176  : }

  0001b	c3		 ret	 0
?SendQueueFull@CSession@@QAEHXZ ENDP			; CSession::SendQueueFull
_TEXT	ENDS
PUBLIC	?pop_front@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAEXXZ ; std::deque<CPacket *,std::allocator<CPacket *> >::pop_front
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ?pop_front@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?pop_front@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAEXXZ PROC NEAR ; std::deque<CPacket *,std::allocator<CPacket *> >::pop_front, COMDAT
; _this$ = ecx

; 571  : 		if (!empty())

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	85 c0		 test	 eax, eax
  00005	74 27		 je	 SHORT $L93362

; 572  : 			{	// something to erase, do it
; 573  : 			size_type _Block = _Myoff / _DEQUESIZ;
; 574  : 			this->_Alval.destroy(_Map[_Block] + _Myoff % _DEQUESIZ);
; 575  : 			if (_Mapsize * _DEQUESIZ <= ++_Myoff)

  00007	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0000a	57		 push	 edi
  0000b	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  0000e	42		 inc	 edx
  0000f	c1 e7 02	 shl	 edi, 2
  00012	3b fa		 cmp	 edi, edx
  00014	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  00017	5f		 pop	 edi
  00018	77 07		 ja	 SHORT $L93361

; 576  : 				_Myoff = 0;

  0001a	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$L93361:

; 577  : 			if (--_Mysize == 0)

  00021	48		 dec	 eax
  00022	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00025	75 07		 jne	 SHORT $L93362

; 578  : 				_Myoff = 0;

  00027	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$L93362:

; 579  : 			}
; 580  : 		}

  0002e	c3		 ret	 0
?pop_front@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAEXXZ ENDP ; std::deque<CPacket *,std::allocator<CPacket *> >::pop_front
_TEXT	ENDS
PUBLIC	?begin@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAE?AViterator@12@XZ ; std::deque<CPacket *,std::allocator<CPacket *> >::begin
; Function compile flags: /Ogty
;	COMDAT ?begin@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::deque<CPacket *,std::allocator<CPacket *> >::begin, COMDAT
; _this$ = ecx

; 439  : 		return (iterator(_Myoff, this));

  00000	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx
  00009	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 440  : 		}

  0000c	c2 04 00	 ret	 4
?begin@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::deque<CPacket *,std::allocator<CPacket *> >::begin
_TEXT	ENDS
PUBLIC	?pop_back@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAEXXZ ; std::deque<CPacket *,std::allocator<CPacket *> >::pop_back
; Function compile flags: /Ogty
;	COMDAT ?pop_back@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?pop_back@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAEXXZ PROC NEAR ; std::deque<CPacket *,std::allocator<CPacket *> >::pop_back, COMDAT
; _this$ = ecx

; 599  : 		if (!empty())

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	85 c0		 test	 eax, eax
  00005	74 0d		 je	 SHORT $L93391

; 600  : 			{	// something to erase, do it
; 601  : 			size_type _Newoff = _Mysize + _Myoff - 1;
; 602  : 			size_type _Block = _Newoff / _DEQUESIZ;
; 603  : 			if (_Mapsize <= _Block)
; 604  : 				_Block -= _Mapsize;
; 605  : 			this->_Alval.destroy(_Map[_Block] + _Newoff % _DEQUESIZ);
; 606  : 			if (--_Mysize == 0)

  00007	48		 dec	 eax
  00008	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000b	75 07		 jne	 SHORT $L93391

; 607  : 				_Myoff = 0;

  0000d	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$L93391:

; 608  : 			}
; 609  : 		}

  00014	c3		 ret	 0
?pop_back@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAEXXZ ENDP ; std::deque<CPacket *,std::allocator<CPacket *> >::pop_back
_TEXT	ENDS
PUBLIC	??0?$_Deque_val@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IAE@V?$allocator@PAVCPacket@@@1@@Z ; std::_Deque_val<CPacket *,std::allocator<CPacket *> >::_Deque_val<CPacket *,std::allocator<CPacket *> >
; Function compile flags: /Ogty
;	COMDAT ??0?$_Deque_val@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IAE@V?$allocator@PAVCPacket@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Deque_val@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IAE@V?$allocator@PAVCPacket@@@1@@Z PROC NEAR ; std::_Deque_val<CPacket *,std::allocator<CPacket *> >::_Deque_val<CPacket *,std::allocator<CPacket *> >, COMDAT
; _this$ = ecx

; 40   : 		{	// construct allocator and base from _Al

  00000	8b c1		 mov	 eax, ecx

; 41   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Deque_val@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IAE@V?$allocator@PAVCPacket@@@1@@Z ENDP ; std::_Deque_val<CPacket *,std::allocator<CPacket *> >::_Deque_val<CPacket *,std::allocator<CPacket *> >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAVCPacket@@@std@@QAEXPAPAVCPacket@@ABQAV3@@Z ; std::allocator<CPacket *>::construct
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?construct@?$allocator@PAVCPacket@@@std@@QAEXPAPAVCPacket@@ABQAV3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAVCPacket@@@std@@QAEXPAPAVCPacket@@ABQAV3@@Z PROC NEAR ; std::allocator<CPacket *>::construct, COMDAT
; _this$ = ecx

; 147  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $L94428
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$L94428:

; 148  : 		}

  00010	c2 08 00	 ret	 8
?construct@?$allocator@PAVCPacket@@@std@@QAEXPAPAVCPacket@@ABQAV3@@Z ENDP ; std::allocator<CPacket *>::construct
_TEXT	ENDS
PUBLIC	??$_Uninitialized_fill_n@PAPAPAVCPacket@@IPAPAV1@V?$allocator@PAPAVCPacket@@@std@@@std@@YAXPAPAPAVCPacket@@IABQAPAV1@AAV?$allocator@PAPAVCPacket@@@0@@Z ; std::_Uninitialized_fill_n<CPacket * * *,unsigned int,CPacket * *,std::allocator<CPacket * *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninitialized_fill_n@PAPAPAVCPacket@@IPAPAV1@V?$allocator@PAPAVCPacket@@@std@@@std@@YAXPAPAPAVCPacket@@IABQAPAV1@AAV?$allocator@PAPAVCPacket@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_fill_n@PAPAPAVCPacket@@IPAPAV1@V?$allocator@PAPAVCPacket@@@std@@@std@@YAXPAPAPAVCPacket@@IABQAPAV1@AAV?$allocator@PAPAVCPacket@@@0@@Z PROC NEAR ; std::_Uninitialized_fill_n<CPacket * * *,unsigned int,CPacket * *,std::allocator<CPacket * *> >, COMDAT

; 256  : 	_Uninit_fill_n(_First, _Count, _Val, _Al,
; 257  : 		_Ptr_cat(_First, _First));

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  0000a	76 10		 jbe	 SHORT $L94455
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$L94453:
  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	49		 dec	 ecx
  00019	75 f6		 jne	 SHORT $L94453
  0001b	5e		 pop	 esi
$L94455:

; 258  : 	}

  0001c	c3		 ret	 0
??$_Uninitialized_fill_n@PAPAPAVCPacket@@IPAPAV1@V?$allocator@PAPAVCPacket@@@std@@@std@@YAXPAPAPAVCPacket@@IABQAPAV1@AAV?$allocator@PAPAVCPacket@@@0@@Z ENDP ; std::_Uninitialized_fill_n<CPacket * * *,unsigned int,CPacket * *,std::allocator<CPacket * *> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1510 : 		if (!_Built)

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Built$[esp-4]
  00004	84 c0		 test	 al, al
  00006	53		 push	 ebx
  00007	55		 push	 ebp
  00008	8b 6c 24 10	 mov	 ebp, DWORD PTR __Newsize$[esp+4]
  0000c	8b d9		 mov	 ebx, ecx
  0000e	74 2f		 je	 SHORT $L94467

; 1511 : 			;
; 1512 : 		else if (_BUF_SIZE <= _Myres)

  00010	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  00014	72 29		 jb	 SHORT $L94467

; 1513 : 			{	// copy any leftovers to small buffer and deallocate
; 1514 : 			_Elem *_Ptr = _Bx._Ptr;
; 1515 : 			if (0 < _Newsize)

  00016	85 ed		 test	 ebp, ebp
  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	57		 push	 edi
  0001c	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  0001f	76 14		 jbe	 SHORT $L94464
  00021	56		 push	 esi

; 1516 : 				_Traits::copy(_Bx._Buf, _Ptr, _Newsize);

  00022	8b cd		 mov	 ecx, ebp
  00024	8b d1		 mov	 edx, ecx
  00026	c1 e9 02	 shr	 ecx, 2
  00029	8b f0		 mov	 esi, eax
  0002b	f3 a5		 rep movsd
  0002d	8b ca		 mov	 ecx, edx
  0002f	83 e1 03	 and	 ecx, 3
  00032	f3 a4		 rep movsb
  00034	5e		 pop	 esi
$L94464:

; 1517 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4
  0003e	5f		 pop	 edi
$L94467:

; 1518 : 			}
; 1519 : 		_Myres = _BUF_SIZE - 1;
; 1520 : 		_Eos(_Newsize);

  0003f	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00042	c7 43 18 0f 00
	00 00		 mov	 DWORD PTR [ebx+24], 15	; 0000000fH
  00049	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0004e	5d		 pop	 ebp
  0004f	5b		 pop	 ebx

; 1521 : 		}

  00050	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
EXTRN	?_Xran@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xran
; Function compile flags: /Ogty
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 792  : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp

; 793  : 		if (_Mysize < _Off)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	39 6e 14	 cmp	 DWORD PTR [esi+20], ebp
  0000b	57		 push	 edi
  0000c	73 05		 jae	 SHORT $L92792

; 794  : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L92792:

; 795  : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c5		 sub	 eax, ebp
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $L92793

; 796  : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$L92793:

; 797  : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 47		 jbe	 SHORT $L94532

; 798  : 			{	// move elements down
; 799  : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 800  : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0002c	53		 push	 ebx
  0002d	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  00030	72 04		 jb	 SHORT $L94497
  00032	8b 13		 mov	 edx, DWORD PTR [ebx]
  00034	eb 02		 jmp	 SHORT $L94498
$L94497:
  00036	8b d3		 mov	 edx, ebx
$L94498:
  00038	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0003b	72 04		 jb	 SHORT $L94504
  0003d	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0003f	eb 02		 jmp	 SHORT $L94505
$L94504:
  00041	8b cb		 mov	 ecx, ebx
$L94505:
  00043	2b c7		 sub	 eax, edi

; 803  : 			}
; 804  : 		return (*this);

  00045	03 d5		 add	 edx, ebp
  00047	50		 push	 eax
  00048	03 d7		 add	 edx, edi
  0004a	52		 push	 edx
  0004b	03 cd		 add	 ecx, ebp
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 _memmove
  00053	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00056	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00059	2b c7		 sub	 eax, edi
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005e	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00061	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00064	72 02		 jb	 SHORT $L94527

; 801  : 			size_type _Newsize = _Mysize - _Count;
; 802  : 			_Eos(_Newsize);

  00066	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$L94527:
  00068	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0
  0006c	5b		 pop	 ebx
$L94532:
  0006d	5f		 pop	 edi

; 803  : 			}
; 804  : 		return (*this);

  0006e	8b c6		 mov	 eax, esi
  00070	5e		 pop	 esi
  00071	5d		 pop	 ebp

; 805  : 		}

  00072	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	__CxxThrowException@8:NEAR
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T94737	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
$T94739	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L94540
$T94740	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L94538
$T94738	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T94739
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:$T94740
$T94732	DD	019930520H
	DD	04H
	DD	FLAT:$T94737
	DD	02H
	DD	FLAT:$T94738
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1444 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1445 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	8b d8		 mov	 ebx, eax
  00022	83 cb 0f	 or	 ebx, 15			; 0000000fH

; 1446 : 		if (max_size() < _Newres)

  00025	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00028	57		 push	 edi
  00029	8b f1		 mov	 esi, ecx
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00031	76 04		 jbe	 SHORT $L92838

; 1447 : 			_Newres = _Newsize;	// undo roundup if too big

  00033	8b d8		 mov	 ebx, eax

; 1448 : 		else if (_Newres / 3 < _Myres / 2

  00035	eb 22		 jmp	 SHORT $L92840
$L92838:

; 1449 : 			&& _Myres <= max_size() - _Myres / 2)

  00037	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  0003a	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0003f	f7 e3		 mul	 ebx
  00041	8b cf		 mov	 ecx, edi
  00043	d1 e9		 shr	 ecx, 1
  00045	d1 ea		 shr	 edx, 1
  00047	3b d1		 cmp	 edx, ecx
  00049	73 0e		 jae	 SHORT $L92840
  0004b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00050	2b c1		 sub	 eax, ecx
  00052	3b f8		 cmp	 edi, eax
  00054	77 03		 ja	 SHORT $L92840

; 1450 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00056	8d 1c 39	 lea	 ebx, DWORD PTR [ecx+edi]
$L92840:

; 1451 : 		_Elem *_Ptr;
; 1452 : 
; 1453 : 		_TRY_BEGIN
; 1454 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00059	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  0005c	51		 push	 ecx
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00064	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00069	8b d0		 mov	 edx, eax
  0006b	83 c4 04	 add	 esp, 4
  0006e	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
  00071	eb 29		 jmp	 SHORT $L92842
$L94538:

; 1455 : 		_CATCH_ALL
; 1456 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  00073	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00076	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 1457 : 			_TRY_BEGIN
; 1458 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00079	40		 inc	 eax
  0007a	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0007d	50		 push	 eax
  0007e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00082	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00087	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0008a	83 c4 04	 add	 esp, 4

; 1462 : 			_CATCH_END
; 1463 : 		_CATCH_END

  0008d	b8 00 00 00 00	 mov	 eax, $L94733
  00092	c3		 ret	 0
$L94733:
  00093	8b 5d e8	 mov	 ebx, DWORD PTR __Newres$[ebp]
  00096	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00099	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$L92842:

; 1464 : 
; 1465 : 		if (0 < _Oldlen)

  0009c	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  0009f	85 c9		 test	 ecx, ecx
  000a1	76 24		 jbe	 SHORT $L94658

; 1466 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  000a3	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000a7	72 05		 jb	 SHORT $L94653
  000a9	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000ac	eb 03		 jmp	 SHORT $L94654
$L94653:
  000ae	83 c6 04	 add	 esi, 4
$L94654:
  000b1	8b c1		 mov	 eax, ecx
  000b3	c1 e9 02	 shr	 ecx, 2
  000b6	8b fa		 mov	 edi, edx
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb
  000c1	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000c4	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
$L94658:

; 1467 : 		_Tidy(true);

  000c7	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000cb	72 12		 jb	 SHORT $L94694
  000cd	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000d0	51		 push	 ecx
  000d1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d6	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000d9	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000dc	83 c4 04	 add	 esp, 4
$L94694:

; 1468 : 		_Bx._Ptr = _Ptr;
; 1469 : 		_Myres = _Newres;
; 1470 : 		_Eos(_Oldlen);

  000df	83 fb 10	 cmp	 ebx, 16			; 00000010H
  000e2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000e5	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e8	89 10		 mov	 DWORD PTR [eax], edx
  000ea	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  000ed	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  000f0	72 02		 jb	 SHORT $L94726
  000f2	8b c2		 mov	 eax, edx
$L94726:

; 1471 : 		}

  000f4	5f		 pop	 edi
  000f5	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  000f9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fc	5e		 pop	 esi
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00104	5b		 pop	 ebx
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c2 08 00	 ret	 8
$L94540:

; 1459 : 			_CATCH_ALL
; 1460 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010b	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0010e	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00112	72 0c		 jb	 SHORT $L94633
  00114	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00117	52		 push	 edx
  00118	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0011d	83 c4 04	 add	 esp, 4
$L94633:

; 1461 : 			_RERAISE;

  00120	6a 00		 push	 0
  00122	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00129	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00130	6a 00		 push	 0
  00132	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00136	e8 00 00 00 00	 call	 __CxxThrowException@8
$L94741:
$L94736:
  0013b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T94732
  00005	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?pop@?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAEXXZ ; std::queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >::pop
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\queue
;	COMDAT ?pop@?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?pop@?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAEXXZ PROC NEAR ; std::queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >::pop, COMDAT
; _this$ = ecx

; 71   : 		c.pop_front();

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	85 c0		 test	 eax, eax
  00005	74 27		 je	 SHORT $L94754
  00007	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0000a	57		 push	 edi
  0000b	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  0000e	42		 inc	 edx
  0000f	c1 e7 02	 shl	 edi, 2
  00012	3b fa		 cmp	 edi, edx
  00014	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  00017	5f		 pop	 edi
  00018	77 07		 ja	 SHORT $L94753
  0001a	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$L94753:
  00021	48		 dec	 eax
  00022	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00025	75 07		 jne	 SHORT $L94754
  00027	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$L94754:

; 72   : 		}

  0002e	c3		 ret	 0
?pop@?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAEXXZ ENDP ; std::queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >::pop
_TEXT	ENDS
PUBLIC	??0?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAE@XZ ; std::deque<CPacket *,std::allocator<CPacket *> >::deque<CPacket *,std::allocator<CPacket *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ??0?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAE@XZ PROC NEAR ; std::deque<CPacket *,std::allocator<CPacket *> >::deque<CPacket *,std::allocator<CPacket *> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct empty deque

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00007	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0000d	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 328  : 		}

  00010	c3		 ret	 0
??0?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAE@XZ ENDP ; std::deque<CPacket *,std::allocator<CPacket *> >::deque<CPacket *,std::allocator<CPacket *> >
_TEXT	ENDS
PUBLIC	?front@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAEAAPAVCPacket@@XZ ; std::deque<CPacket *,std::allocator<CPacket *> >::front
; Function compile flags: /Ogty
;	COMDAT ?front@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAEAAPAVCPacket@@XZ
_TEXT	SEGMENT
?front@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAEAAPAVCPacket@@XZ PROC NEAR ; std::deque<CPacket *,std::allocator<CPacket *> >::front, COMDAT
; _this$ = ecx

; 536  : 		return (*begin());

  00000	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00003	8b c2		 mov	 eax, edx
  00005	c1 e8 02	 shr	 eax, 2
  00008	56		 push	 esi
  00009	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00010	2b d6		 sub	 edx, esi
  00012	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00015	3b f0		 cmp	 esi, eax
  00017	77 02		 ja	 SHORT $L94826
  00019	2b c6		 sub	 eax, esi
$L94826:
  0001b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001e	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00021	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00024	5e		 pop	 esi

; 537  : 		}

  00025	c3		 ret	 0
?front@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAEAAPAVCPacket@@XZ ENDP ; std::deque<CPacket *,std::allocator<CPacket *> >::front
_TEXT	ENDS
PUBLIC	?_Tidy@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IAEXXZ ; std::deque<CPacket *,std::allocator<CPacket *> >::_Tidy
; Function compile flags: /Ogty
;	COMDAT ?_Tidy@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IAEXXZ PROC NEAR ; std::deque<CPacket *,std::allocator<CPacket *> >::_Tidy, COMDAT
; _this$ = ecx

; 950  : 		{	// free all storage

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 951  : 		while (!empty())

  00004	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00007	33 db		 xor	 ebx, ebx
  00009	3b c3		 cmp	 eax, ebx
  0000b	74 1a		 je	 SHORT $L93374
  0000d	8d 49 00	 npad	 3
$L93373:

; 952  : 			pop_back();

  00010	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00013	3b c3		 cmp	 eax, ebx
  00015	74 0b		 je	 SHORT $L94843
  00017	48		 dec	 eax
  00018	3b c3		 cmp	 eax, ebx
  0001a	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0001d	75 03		 jne	 SHORT $L94843
  0001f	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
$L94843:
  00022	39 5e 10	 cmp	 DWORD PTR [esi+16], ebx
  00025	75 e9		 jne	 SHORT $L93373
$L93374:
  00027	57		 push	 edi

; 953  : 		for (size_type _Count = _Mapsize; 0 < _Count; )

  00028	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0002b	3b fb		 cmp	 edi, ebx
  0002d	76 1a		 jbe	 SHORT $L93378
  0002f	90		 npad	 1
$L93377:

; 954  : 			{	// free storage for a block and destroy pointer
; 955  : 			if (*(_Map + --_Count) != 0)

  00030	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00033	8b 44 b8 fc	 mov	 eax, DWORD PTR [eax+edi*4-4]
  00037	4f		 dec	 edi
  00038	3b c3		 cmp	 eax, ebx
  0003a	74 09		 je	 SHORT $L94848

; 956  : 				this->_Alval.deallocate(*(_Map + _Count), _DEQUESIZ);

  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00042	83 c4 04	 add	 esp, 4
$L94848:

; 953  : 		for (size_type _Count = _Mapsize; 0 < _Count; )

  00045	3b fb		 cmp	 edi, ebx
  00047	77 e7		 ja	 SHORT $L93377
$L93378:

; 957  : 			this->_Almap.destroy(_Map + _Count);
; 958  : 			}
; 959  : 
; 960  : 		if (_Map)

  00049	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004c	3b c3		 cmp	 eax, ebx
  0004e	5f		 pop	 edi
  0004f	74 09		 je	 SHORT $L94859

; 961  : 			this->_Almap.deallocate(_Map, _Mapsize);	// free storage for map

  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00057	83 c4 04	 add	 esp, 4
$L94859:

; 962  : 		_Mapsize = 0;

  0005a	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 963  : 		_Map = 0;

  0005d	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx

; 964  : 		}

  00062	c3		 ret	 0
?_Tidy@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IAEXXZ ENDP ; std::deque<CPacket *,std::allocator<CPacket *> >::_Tidy
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 456  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 457  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $L94902
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$L94902:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 458  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xlen
; Function compile flags: /Ogty
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1480 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	56		 push	 esi

; 1481 : 		if (max_size() < _Newsize)

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR __Newsize$[esp+4]
  00006	83 fe fe	 cmp	 esi, -2			; fffffffeH
  00009	8b e9		 mov	 ebp, ecx
  0000b	76 05		 jbe	 SHORT $L92801

; 1482 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L92801:

; 1483 : 		if (_Myres < _Newsize)

  00012	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00015	3b c6		 cmp	 eax, esi
  00017	73 19		 jae	 SHORT $L92802

; 1484 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0001c	50		 push	 eax
  0001d	56		 push	 esi
  0001e	8b cd		 mov	 ecx, ebp
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c0		 xor	 eax, eax
  00027	3b c6		 cmp	 eax, esi
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5d		 pop	 ebp

; 1491 : 		}

  0002f	c2 08 00	 ret	 8
$L92802:

; 1485 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	8a 4c 24 10	 mov	 cl, BYTE PTR __Trim$[esp+4]
  00036	84 c9		 test	 cl, cl
  00038	74 5c		 je	 SHORT $L92804
  0003a	83 fe 10	 cmp	 esi, 16			; 00000010H
  0003d	73 57		 jae	 SHORT $L92804
  0003f	53		 push	 ebx

; 1486 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1487 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  00040	8b 5d 14	 mov	 ebx, DWORD PTR [ebp+20]
  00043	3b f3		 cmp	 esi, ebx
  00045	73 02		 jae	 SHORT $L94917
  00047	8b de		 mov	 ebx, esi
$L94917:
  00049	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004c	72 2b		 jb	 SHORT $L94977
  0004e	85 db		 test	 ebx, ebx
  00050	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00053	57		 push	 edi
  00054	8d 7d 04	 lea	 edi, DWORD PTR [ebp+4]
  00057	76 16		 jbe	 SHORT $L94975
  00059	8b cb		 mov	 ecx, ebx
  0005b	8b d1		 mov	 edx, ecx
  0005d	c1 e9 02	 shr	 ecx, 2
  00060	8b f0		 mov	 esi, eax
  00062	f3 a5		 rep movsd
  00064	8b ca		 mov	 ecx, edx
  00066	83 e1 03	 and	 ecx, 3
  00069	f3 a4		 rep movsb
  0006b	8b 74 24 14	 mov	 esi, DWORD PTR __Newsize$[esp+12]
$L94975:
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00075	83 c4 04	 add	 esp, 4
  00078	5f		 pop	 edi
$L94977:
  00079	89 5d 14	 mov	 DWORD PTR [ebp+20], ebx

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  0007c	33 c0		 xor	 eax, eax
  0007e	c7 45 18 0f 00
	00 00		 mov	 DWORD PTR [ebp+24], 15	; 0000000fH
  00085	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0008a	3b c6		 cmp	 eax, esi
  0008c	5b		 pop	 ebx
  0008d	1b c0		 sbb	 eax, eax
  0008f	5e		 pop	 esi
  00090	f7 d8		 neg	 eax
  00092	5d		 pop	 ebp

; 1491 : 		}

  00093	c2 08 00	 ret	 8
$L92804:

; 1488 : 		else if (_Newsize == 0)

  00096	85 f6		 test	 esi, esi
  00098	75 23		 jne	 SHORT $L95008

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

  0009a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0009d	89 75 14	 mov	 DWORD PTR [ebp+20], esi
  000a0	72 14		 jb	 SHORT $L95006
  000a2	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000a5	33 c0		 xor	 eax, eax
  000a7	3b c6		 cmp	 eax, esi
  000a9	1b c0		 sbb	 eax, eax
  000ab	5e		 pop	 esi
  000ac	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
  000b0	f7 d8		 neg	 eax
  000b2	5d		 pop	 ebp

; 1491 : 		}

  000b3	c2 08 00	 ret	 8

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

$L95006:
  000b6	83 c5 04	 add	 ebp, 4
  000b9	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
$L95008:

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000bd	33 c0		 xor	 eax, eax
  000bf	3b c6		 cmp	 eax, esi
  000c1	1b c0		 sbb	 eax, eax
  000c3	5e		 pop	 esi
  000c4	f7 d8		 neg	 eax
  000c6	5d		 pop	 ebp

; 1491 : 		}

  000c7	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?front@?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAEAAPAVCPacket@@XZ ; std::queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >::front
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\queue
;	COMDAT ?front@?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAEAAPAVCPacket@@XZ
_TEXT	SEGMENT
?front@?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAEAAPAVCPacket@@XZ PROC NEAR ; std::queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >::front, COMDAT
; _this$ = ecx

; 46   : 		return (c.front());

  00000	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00003	8b c2		 mov	 eax, edx
  00005	c1 e8 02	 shr	 eax, 2
  00008	56		 push	 esi
  00009	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00010	2b d6		 sub	 edx, esi
  00012	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00015	3b f0		 cmp	 esi, eax
  00017	77 02		 ja	 SHORT $L95060
  00019	2b c6		 sub	 eax, esi
$L95060:
  0001b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001e	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00021	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00024	5e		 pop	 esi

; 47   : 		}

  00025	c3		 ret	 0
?front@?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAEAAPAVCPacket@@XZ ENDP ; std::queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >::front
_TEXT	ENDS
PUBLIC	??1?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAE@XZ ; std::deque<CPacket *,std::allocator<CPacket *> >::~deque<CPacket *,std::allocator<CPacket *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ??1?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAE@XZ PROC NEAR ; std::deque<CPacket *,std::allocator<CPacket *> >::~deque<CPacket *,std::allocator<CPacket *> >, COMDAT
; _this$ = ecx

; 414  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IAEXXZ ; std::deque<CPacket *,std::allocator<CPacket *> >::_Tidy
??1?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAE@XZ ENDP ; std::deque<CPacket *,std::allocator<CPacket *> >::~deque<CPacket *,std::allocator<CPacket *> >
_TEXT	ENDS
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
EXTRN	??1exception@@UAE@XZ:NEAR			; exception::~exception
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:NEAR		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_7logic_error@std@@6B@
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
CONST	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC NEAR			; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 23   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L95132
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L95132:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC NEAR		; std::logic_error::what, COMDAT
; _this$ = ecx

; 27   : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L95160
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  00009	c3		 ret	 0

; 27   : 		return (_Str.c_str());

$L95160:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  0000d	c3		 ret	 0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC NEAR		; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1logic_error@std@@UAE@XZ ; std::logic_error::~logic_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L95166
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L95166:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 590  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 591  : 		if (_Right.size() < _Roff)

  00003	8b 74 24 14	 mov	 esi, DWORD PTR __Roff$[esp+8]
  00007	57		 push	 edi
  00008	8b 7c 24 14	 mov	 edi, DWORD PTR __Right$[esp+12]
  0000c	39 77 14	 cmp	 DWORD PTR [edi+20], esi
  0000f	8b d9		 mov	 ebx, ecx
  00011	73 05		 jae	 SHORT $L92499

; 592  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L92499:

; 593  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 6f 14	 mov	 ebp, DWORD PTR [edi+20]

; 594  : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b ee		 sub	 ebp, esi
  00021	3b c5		 cmp	 eax, ebp
  00023	73 02		 jae	 SHORT $L92501

; 595  : 			_Num = _Count;	// trim _Num to size

  00025	8b e8		 mov	 ebp, eax
$L92501:

; 596  : 
; 597  : 		if (this == &_Right)

  00027	3b df		 cmp	 ebx, edi
  00029	75 1f		 jne	 SHORT $L92502

; 598  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 ee		 add	 ebp, esi
  0002f	55		 push	 ebp
  00030	8b cb		 mov	 ecx, ebx
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	56		 push	 esi
  00038	6a 00		 push	 0
  0003a	8b cb		 mov	 ecx, ebx
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00044	8b c3		 mov	 eax, ebx
  00046	5b		 pop	 ebx

; 605  : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$L92502:

; 599  : 		else if (_Grow(_Num))

  0004a	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  0004d	76 07		 jbe	 SHORT $L95303
  0004f	8b cb		 mov	 ecx, ebx
  00051	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L95303:
  00056	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00059	3b c5		 cmp	 eax, ebp
  0005b	73 21		 jae	 SHORT $L95304
  0005d	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00060	50		 push	 eax
  00061	55		 push	 ebp
  00062	8b cb		 mov	 ecx, ebx
  00064	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00069	85 ed		 test	 ebp, ebp
$L95363:
  0006b	76 6d		 jbe	 SHORT $L95362

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  0006d	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00070	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00075	3b c8		 cmp	 ecx, eax
  00077	72 2f		 jb	 SHORT $L95327
  00079	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0007c	eb 2d		 jmp	 SHORT $L95328

; 599  : 		else if (_Grow(_Num))

$L95304:
  0007e	85 ed		 test	 ebp, ebp
  00080	75 e9		 jne	 SHORT $L95363
  00082	83 f8 10	 cmp	 eax, 16			; 00000010H
  00085	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00088	72 0f		 jb	 SHORT $L95296
  0008a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	c6 00 00	 mov	 BYTE PTR [eax], 0
  00092	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00093	8b c3		 mov	 eax, ebx
  00095	5b		 pop	 ebx

; 605  : 		}

  00096	c2 0c 00	 ret	 12			; 0000000cH

; 599  : 		else if (_Grow(_Num))

$L95296:
  00099	5f		 pop	 edi
  0009a	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  0009d	5e		 pop	 esi
  0009e	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a1	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000a2	8b c3		 mov	 eax, ebx
  000a4	5b		 pop	 ebx

; 605  : 		}

  000a5	c2 0c 00	 ret	 12			; 0000000cH

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

$L95327:
  000a8	8d 57 04	 lea	 edx, DWORD PTR [edi+4]
$L95328:
  000ab	39 43 18	 cmp	 DWORD PTR [ebx+24], eax
  000ae	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000b1	72 04		 jb	 SHORT $L95334
  000b3	8b 38		 mov	 edi, DWORD PTR [eax]
  000b5	eb 02		 jmp	 SHORT $L95335
$L95334:
  000b7	8b f8		 mov	 edi, eax
$L95335:
  000b9	03 f2		 add	 esi, edx
  000bb	8b cd		 mov	 ecx, ebp
  000bd	8b d1		 mov	 edx, ecx
  000bf	c1 e9 02	 shr	 ecx, 2
  000c2	f3 a5		 rep movsd
  000c4	8b ca		 mov	 ecx, edx
  000c6	83 e1 03	 and	 ecx, 3
  000c9	f3 a4		 rep movsb

; 602  : 			_Eos(_Num);

  000cb	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000cf	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000d2	72 02		 jb	 SHORT $L95357
  000d4	8b 00		 mov	 eax, DWORD PTR [eax]
$L95357:
  000d6	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L95362:
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000dd	8b c3		 mov	 eax, ebx
  000df	5b		 pop	 ebx

; 605  : 		}

  000e0	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Num$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 608  : 		{	// assign [_Ptr, _Ptr + _Num)

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 609  : 		if (_Inside(_Ptr))

  00003	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  00006	83 fa 10	 cmp	 edx, 16			; 00000010H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	72 05		 jb	 SHORT $L95384
  0000d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00010	eb 03		 jmp	 SHORT $L95385
$L95384:
  00012	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$L95385:
  00015	8b 74 24 10	 mov	 esi, DWORD PTR __Ptr$[esp+8]
  00019	3b f0		 cmp	 esi, eax
  0001b	72 34		 jb	 SHORT $L92788
  0001d	83 fa 10	 cmp	 edx, 16			; 00000010H
  00020	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00023	72 04		 jb	 SHORT $L95388
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	eb 02		 jmp	 SHORT $L95389
$L95388:
  00029	8b c8		 mov	 ecx, eax
$L95389:
  0002b	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  0002e	03 f9		 add	 edi, ecx
  00030	3b fe		 cmp	 edi, esi
  00032	76 1d		 jbe	 SHORT $L92788

; 610  : 			return (assign(*this, _Ptr - _Myptr(), _Num));	// substring

  00034	83 fa 10	 cmp	 edx, 16			; 00000010H
  00037	72 02		 jb	 SHORT $L95401
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$L95401:
  0003b	8b 4c 24 14	 mov	 ecx, DWORD PTR __Num$[esp+8]
  0003f	51		 push	 ecx
  00040	2b f0		 sub	 esi, eax
  00042	56		 push	 esi
  00043	53		 push	 ebx
  00044	8b cb		 mov	 ecx, ebx
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx

; 618  : 		}

  0004e	c2 08 00	 ret	 8
$L92788:
  00051	55		 push	 ebp

; 611  : 
; 612  : 		if (_Grow(_Num))

  00052	8b 6c 24 18	 mov	 ebp, DWORD PTR __Num$[esp+12]
  00056	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  00059	76 07		 jbe	 SHORT $L95542
  0005b	8b cb		 mov	 ecx, ebx
  0005d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L95542:
  00062	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00065	3b c5		 cmp	 eax, ebp
  00067	73 1b		 jae	 SHORT $L95543
  00069	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  0006c	52		 push	 edx
  0006d	55		 push	 ebp
  0006e	8b cb		 mov	 ecx, ebx
  00070	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00075	85 ed		 test	 ebp, ebp
$L95581:
  00077	76 68		 jbe	 SHORT $L95578

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

  00079	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0007d	72 2f		 jb	 SHORT $L95552
  0007f	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00082	eb 2d		 jmp	 SHORT $L95553

; 611  : 
; 612  : 		if (_Grow(_Num))

$L95543:
  00084	85 ed		 test	 ebp, ebp
  00086	75 ef		 jne	 SHORT $L95581
  00088	83 f8 10	 cmp	 eax, 16			; 00000010H
  0008b	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  0008e	72 0f		 jb	 SHORT $L95535
  00090	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00093	5d		 pop	 ebp
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0
  00098	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  00099	8b c3		 mov	 eax, ebx
  0009b	5b		 pop	 ebx

; 618  : 		}

  0009c	c2 08 00	 ret	 8

; 611  : 
; 612  : 		if (_Grow(_Num))

$L95535:
  0009f	5d		 pop	 ebp
  000a0	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000a3	5f		 pop	 edi
  000a4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a7	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000a8	8b c3		 mov	 eax, ebx
  000aa	5b		 pop	 ebx

; 618  : 		}

  000ab	c2 08 00	 ret	 8

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

$L95552:
  000ae	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
$L95553:
  000b1	8b cd		 mov	 ecx, ebp
  000b3	8b c1		 mov	 eax, ecx
  000b5	c1 e9 02	 shr	 ecx, 2
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb

; 615  : 			_Eos(_Num);

  000c1	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000c5	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000c8	72 10		 jb	 SHORT $L95574
  000ca	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000cd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  000d1	5d		 pop	 ebp
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000d4	8b c3		 mov	 eax, ebx
  000d6	5b		 pop	 ebx

; 618  : 		}

  000d7	c2 08 00	 ret	 8

; 615  : 			_Eos(_Num);

$L95574:
  000da	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000dd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L95578:
  000e1	5d		 pop	 ebp
  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000e4	8b c3		 mov	 eax, ebx
  000e6	5b		 pop	 ebx

; 618  : 		}

  000e7	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??1?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAE@XZ ; std::queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >::~queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >
; Function compile flags: /Ogty
;	COMDAT ??1?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAE@XZ PROC NEAR ; std::queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >::~queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IAEXXZ ; std::deque<CPacket *,std::allocator<CPacket *> >::_Tidy
??1?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAE@XZ ENDP ; std::queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >::~queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >
_TEXT	ENDS
PUBLIC	?Close@CSession@@UAEXXZ				; CSession::Close
EXTRN	?Clear@CPacket@@QAEXXZ:NEAR			; CPacket::Clear
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\session.cpp
;	COMDAT ?Close@CSession@@UAEXXZ
_TEXT	SEGMENT
?Close@CSession@@UAEXXZ PROC NEAR			; CSession::Close, COMDAT
; _this$ = ecx

; 46   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi

; 47   : 	EnterCriticalSection(&m_cs);

  00005	8d 5e 18	 lea	 ebx, DWORD PTR [esi+24]
  00008	53		 push	 ebx
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 48   : 	m_bValid = FALSE;
; 49   : 
; 50   : 	if( INVALID_SOCKET != m_sock )

  0000f	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  00012	33 ff		 xor	 edi, edi
  00014	83 f8 ff	 cmp	 eax, -1
  00017	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  0001a	74 07		 je	 SHORT $L92989

; 51   : 		closesocket(m_sock);

  0001c	50		 push	 eax
  0001d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4
$L92989:

; 52   : 	m_sock = INVALID_SOCKET;

  00023	c7 46 70 ff ff
	ff ff		 mov	 DWORD PTR [esi+112], -1

; 53   : 
; 54   : 	memset( &m_addr, 0, sizeof(SOCKADDR_IN));

  0002a	33 c0		 xor	 eax, eax
  0002c	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  0002f	89 01		 mov	 DWORD PTR [ecx], eax
  00031	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  00034	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00037	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 55   : 	m_Recv.Clear();

  0003a	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  0003d	e8 00 00 00 00	 call	 ?Clear@CPacket@@QAEXXZ	; CPacket::Clear

; 56   : 
; 57   : 	while(!m_qSEND.empty())

  00042	39 7e 6c	 cmp	 DWORD PTR [esi+108], edi
  00045	74 58		 je	 SHORT $L92994
$L92993:

; 58   : 	{
; 59   : 		delete m_qSEND.front();

  00047	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  0004a	8b c1		 mov	 eax, ecx
  0004c	c1 e8 02	 shr	 eax, 2
  0004f	8d 14 85 00 00
	00 00		 lea	 edx, DWORD PTR [eax*4]
  00056	2b ca		 sub	 ecx, edx
  00058	8b 56 64	 mov	 edx, DWORD PTR [esi+100]
  0005b	3b d0		 cmp	 edx, eax
  0005d	77 02		 ja	 SHORT $L95669
  0005f	2b c2		 sub	 eax, edx
$L95669:
  00061	8b 56 60	 mov	 edx, DWORD PTR [esi+96]
  00064	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  00067	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  0006a	3b cf		 cmp	 ecx, edi
  0006c	74 06		 je	 SHORT $L95594
  0006e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00070	6a 01		 push	 1
  00072	ff 12		 call	 DWORD PTR [edx]
$L95594:

; 60   : 		m_qSEND.pop();

  00074	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00077	3b c7		 cmp	 eax, edi
  00079	74 1f		 je	 SHORT $L95691
  0007b	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  0007e	8b 56 64	 mov	 edx, DWORD PTR [esi+100]
  00081	41		 inc	 ecx
  00082	c1 e2 02	 shl	 edx, 2
  00085	3b d1		 cmp	 edx, ecx
  00087	89 4e 68	 mov	 DWORD PTR [esi+104], ecx
  0008a	77 03		 ja	 SHORT $L95690
  0008c	89 7e 68	 mov	 DWORD PTR [esi+104], edi
$L95690:
  0008f	48		 dec	 eax
  00090	3b c7		 cmp	 eax, edi
  00092	89 46 6c	 mov	 DWORD PTR [esi+108], eax
  00095	75 03		 jne	 SHORT $L95691
  00097	89 7e 68	 mov	 DWORD PTR [esi+104], edi
$L95691:
  0009a	39 7e 6c	 cmp	 DWORD PTR [esi+108], edi
  0009d	75 a8		 jne	 SHORT $L92993
$L92994:

; 61   : 	}
; 62   : 	m_bCanSend = TRUE;
; 63   : 
; 64   : 	m_dwBufSize = 0;
; 65   : 	m_dwQRead = 0;
; 66   : 	LeaveCriticalSection(&m_cs);

  0009f	53		 push	 ebx
  000a0	c6 46 0e 01	 mov	 BYTE PTR [esi+14], 1
  000a4	89 be 88 00 08
	00		 mov	 DWORD PTR [esi+524424], edi
  000aa	89 be 8c 00 08
	00		 mov	 DWORD PTR [esi+524428], edi
  000b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  000b6	5f		 pop	 edi
  000b7	5e		 pop	 esi
  000b8	5b		 pop	 ebx

; 67   : }

  000b9	c3		 ret	 0
?Close@CSession@@UAEXXZ ENDP				; CSession::Close
_TEXT	ENDS
PUBLIC	?Post@CSession@@QAEHXZ				; CSession::Post
EXTRN	__imp__WSASend@28:NEAR
; Function compile flags: /Ogty
;	COMDAT ?Post@CSession@@QAEHXZ
_TEXT	SEGMENT
?Post@CSession@@QAEHXZ PROC NEAR			; CSession::Post, COMDAT
; _this$ = ecx

; 264  : {

  00000	55		 push	 ebp
  00001	8b e9		 mov	 ebp, ecx

; 265  : 	if( INVALID_SOCKET == m_sock )

  00003	83 7d 70 ff	 cmp	 DWORD PTR [ebp+112], -1

; 266  : 		return FALSE;

  00007	0f 84 93 01 00
	00		 je	 $L95820

; 267  : 
; 268  : 	if( m_qSEND.empty() && m_dwBufSize == 0 )

  0000d	8b 45 6c	 mov	 eax, DWORD PTR [ebp+108]
  00010	85 c0		 test	 eax, eax
  00012	75 0e		 jne	 SHORT $L93103
  00014	8b 8d 88 00 08
	00		 mov	 ecx, DWORD PTR [ebp+524424]
  0001a	85 c9		 test	 ecx, ecx

; 269  : 		return TRUE;

  0001c	0f 84 82 01 00
	00		 je	 $L93105
$L93103:

; 270  : 
; 271  : 	if( !m_bCanSend || !m_bCanRecv)

  00022	8a 4d 0e	 mov	 cl, BYTE PTR [ebp+14]
  00025	84 c9		 test	 cl, cl
  00027	0f 84 77 01 00
	00		 je	 $L93105
  0002d	8a 4d 0d	 mov	 cl, BYTE PTR [ebp+13]
  00030	84 c9		 test	 cl, cl
  00032	0f 84 6c 01 00
	00		 je	 $L93105

; 273  : 
; 274  : 	while( !m_qSEND.empty() && m_dwBufSize < SEND_BUF_SIZE )

  00038	85 c0		 test	 eax, eax
  0003a	0f 84 0c 01 00
	00		 je	 $L95816
  00040	53		 push	 ebx
  00041	56		 push	 esi
  00042	57		 push	 edi
  00043	eb 0b 8d a4 24
	00 00 00 00 8d
	64 24 00	 npad	 13
$L93107:
  00050	81 bd 88 00 08
	00 00 00 08 00	 cmp	 DWORD PTR [ebp+524424], 524288 ; 00080000H
  0005a	0f 83 e9 00 00
	00		 jae	 $L95817

; 275  : 	{
; 276  : 		CPacket *pPacket = m_qSEND.front();

  00060	8b 4d 68	 mov	 ecx, DWORD PTR [ebp+104]
  00063	8b c1		 mov	 eax, ecx
  00065	c1 e8 02	 shr	 eax, 2
  00068	8d 14 85 00 00
	00 00		 lea	 edx, DWORD PTR [eax*4]
  0006f	2b ca		 sub	 ecx, edx
  00071	8b 55 64	 mov	 edx, DWORD PTR [ebp+100]
  00074	3b d0		 cmp	 edx, eax
  00076	77 02		 ja	 SHORT $L95787
  00078	2b c2		 sub	 eax, edx
$L95787:
  0007a	8b 55 60	 mov	 edx, DWORD PTR [ebp+96]
  0007d	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  00080	8b 1c 88	 mov	 ebx, DWORD PTR [eax+ecx*4]

; 277  : 
; 278  : 		LPBYTE pSRC = pPacket->GetBuffer() + m_dwQRead;

  00083	8b cb		 mov	 ecx, ebx
  00085	e8 00 00 00 00	 call	 ?GetBuffer@CPacket@@QAEPAEXZ ; CPacket::GetBuffer

; 279  : 		LPBYTE pDEST = m_pBUF + m_dwBufSize;

  0008a	8b 8d 88 00 08
	00		 mov	 ecx, DWORD PTR [ebp+524424]
  00090	8b 95 8c 00 08
	00		 mov	 edx, DWORD PTR [ebp+524428]
  00096	8b f0		 mov	 esi, eax
  00098	8d bc 29 88 00
	00 00		 lea	 edi, DWORD PTR [ecx+ebp+136]

; 280  : 
; 281  : 		DWORD dwSRC = pPacket->GetSize() - m_dwQRead;

  0009f	8b cb		 mov	 ecx, ebx
  000a1	03 f2		 add	 esi, edx
  000a3	e8 00 00 00 00	 call	 ?GetSize@CPacket@@QAEGXZ ; CPacket::GetSize
  000a8	8b 8d 8c 00 08
	00		 mov	 ecx, DWORD PTR [ebp+524428]

; 282  : 		DWORD dwDEST = SEND_BUF_SIZE - m_dwBufSize;

  000ae	8b 95 88 00 08
	00		 mov	 edx, DWORD PTR [ebp+524424]
  000b4	0f b7 c0	 movzx	 eax, ax
  000b7	2b c1		 sub	 eax, ecx
  000b9	b9 00 00 08 00	 mov	 ecx, 524288		; 00080000H
  000be	2b ca		 sub	 ecx, edx

; 283  : 		DWORD dwTRANS = min( dwSRC, dwDEST);

  000c0	3b c1		 cmp	 eax, ecx
  000c2	72 02		 jb	 SHORT $L95701
  000c4	8b c1		 mov	 eax, ecx
$L95701:

; 284  : 
; 285  : 		memcpy( pDEST, pSRC, dwTRANS);

  000c6	8b c8		 mov	 ecx, eax
  000c8	8b d1		 mov	 edx, ecx
  000ca	c1 e9 02	 shr	 ecx, 2
  000cd	f3 a5		 rep movsd
  000cf	8b ca		 mov	 ecx, edx
  000d1	83 e1 03	 and	 ecx, 3
  000d4	f3 a4		 rep movsb

; 286  : 		m_dwBufSize += dwTRANS;

  000d6	8b b5 88 00 08
	00		 mov	 esi, DWORD PTR [ebp+524424]

; 287  : 		m_dwQRead += dwTRANS;

  000dc	8b 95 8c 00 08
	00		 mov	 edx, DWORD PTR [ebp+524428]
  000e2	03 f0		 add	 esi, eax
  000e4	03 d0		 add	 edx, eax

; 288  : 
; 289  : 		if( m_dwQRead >= pPacket->GetSize() )

  000e6	8b cb		 mov	 ecx, ebx
  000e8	89 b5 88 00 08
	00		 mov	 DWORD PTR [ebp+524424], esi
  000ee	89 95 8c 00 08
	00		 mov	 DWORD PTR [ebp+524428], edx
  000f4	e8 00 00 00 00	 call	 ?GetSize@CPacket@@QAEGXZ ; CPacket::GetSize
  000f9	8b 8d 8c 00 08
	00		 mov	 ecx, DWORD PTR [ebp+524428]
  000ff	0f b7 c0	 movzx	 eax, ax
  00102	3b c8		 cmp	 ecx, eax
  00104	72 43		 jb	 SHORT $L95817

; 290  : 		{
; 291  : 			m_qSEND.pop();

  00106	8b 45 6c	 mov	 eax, DWORD PTR [ebp+108]
  00109	33 f6		 xor	 esi, esi
  0010b	3b c6		 cmp	 eax, esi
  0010d	74 1f		 je	 SHORT $L95809
  0010f	8b 4d 68	 mov	 ecx, DWORD PTR [ebp+104]
  00112	8b 55 64	 mov	 edx, DWORD PTR [ebp+100]
  00115	41		 inc	 ecx
  00116	c1 e2 02	 shl	 edx, 2
  00119	3b d1		 cmp	 edx, ecx
  0011b	89 4d 68	 mov	 DWORD PTR [ebp+104], ecx
  0011e	77 03		 ja	 SHORT $L95808
  00120	89 75 68	 mov	 DWORD PTR [ebp+104], esi
$L95808:
  00123	48		 dec	 eax
  00124	3b c6		 cmp	 eax, esi
  00126	89 45 6c	 mov	 DWORD PTR [ebp+108], eax
  00129	75 03		 jne	 SHORT $L95809
  0012b	89 75 68	 mov	 DWORD PTR [ebp+104], esi
$L95809:

; 292  : 			m_dwQRead = 0;
; 293  : 
; 294  : 			delete pPacket;

  0012e	3b de		 cmp	 ebx, esi
  00130	89 b5 8c 00 08
	00		 mov	 DWORD PTR [ebp+524428], esi
  00136	74 08		 je	 SHORT $L95704
  00138	8b 03		 mov	 eax, DWORD PTR [ebx]
  0013a	6a 01		 push	 1
  0013c	8b cb		 mov	 ecx, ebx
  0013e	ff 10		 call	 DWORD PTR [eax]
$L95704:
  00140	39 75 6c	 cmp	 DWORD PTR [ebp+108], esi
  00143	0f 85 07 ff ff
	ff		 jne	 $L93107
$L95817:
  00149	5f		 pop	 edi
  0014a	5e		 pop	 esi
  0014b	5b		 pop	 ebx
$L95816:

; 295  : 		}
; 296  : 		else
; 297  : 			break;
; 298  : 	}
; 299  : 
; 300  : 	m_vBUFSEND.buf = (char *) m_pBUF;
; 301  : 	m_vBUFSEND.len = m_dwBufSize;

  0014c	8b 95 88 00 08
	00		 mov	 edx, DWORD PTR [ebp+524424]

; 302  : 
; 303  : 	m_bCanSend = FALSE;
; 304  : 
; 305  : 	if( WSASend( m_sock, &m_vBUFSEND, 1, &m_dwSENT,
; 306  : 		0, (LPOVERLAPPED) &m_ovSEND, NULL) == SOCKET_ERROR )

  00152	6a 00		 push	 0
  00154	8d 8d 88 00 00
	00		 lea	 ecx, DWORD PTR [ebp+136]
  0015a	89 8d 80 00 00
	00		 mov	 DWORD PTR [ebp+128], ecx
  00160	8d 45 7c	 lea	 eax, DWORD PTR [ebp+124]
  00163	8d 8d 90 00 08
	00		 lea	 ecx, DWORD PTR [ebp+524432]
  00169	51		 push	 ecx
  0016a	6a 00		 push	 0
  0016c	89 10		 mov	 DWORD PTR [eax], edx
  0016e	8d 95 84 00 00
	00		 lea	 edx, DWORD PTR [ebp+132]
  00174	52		 push	 edx
  00175	6a 01		 push	 1
  00177	50		 push	 eax
  00178	8b 45 70	 mov	 eax, DWORD PTR [ebp+112]
  0017b	50		 push	 eax
  0017c	c6 45 0e 00	 mov	 BYTE PTR [ebp+14], 0
  00180	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSASend@28
  00186	83 f8 ff	 cmp	 eax, -1
  00189	75 19		 jne	 SHORT $L93105

; 307  : 	{
; 308  : 		int nERROR = WSAGetLastError();

  0018b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__WSAGetLastError@0

; 309  : 
; 310  : 		if( nERROR != WSA_IO_PENDING)

  00191	3d e5 03 00 00	 cmp	 eax, 997		; 000003e5H
  00196	74 0c		 je	 SHORT $L93105

; 311  : 		{
; 312  : 			m_bCanSend = TRUE;

  00198	c6 45 0e 01	 mov	 BYTE PTR [ebp+14], 1

; 313  : 			m_bBufFull = TRUE;

  0019c	c6 45 14 01	 mov	 BYTE PTR [ebp+20], 1
$L95820:

; 314  : 			return FALSE;

  001a0	33 c0		 xor	 eax, eax
  001a2	5d		 pop	 ebp

; 315  : 		}
; 316  : 	}
; 317  : 
; 318  : 	return TRUE;
; 319  : }

  001a3	c3		 ret	 0
$L93105:

; 272  : 		return TRUE;

  001a4	b8 01 00 00 00	 mov	 eax, 1
  001a9	5d		 pop	 ebp

; 315  : 		}
; 316  : 	}
; 317  : 
; 318  : 	return TRUE;
; 319  : }

  001aa	c3		 ret	 0
?Post@CSession@@QAEHXZ ENDP				; CSession::Post
_TEXT	ENDS
PUBLIC	??0?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAE@XZ ; std::queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >::queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\queue
;	COMDAT ??0?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAE@XZ PROC NEAR ; std::queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >::queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >, COMDAT
; _this$ = ecx

; 26   : 		{	// construct with empty container

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00007	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0000d	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 27   : 		}

  00010	c3		 ret	 0
??0?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAE@XZ ENDP ; std::queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >::queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 323  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 324  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 325  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 326  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 621  : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 622  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$L95947:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $L95947
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 623  : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?Say@CSession@@UAEHPAVCPacket@@@Z		; CSession::Say
PUBLIC	??0CSession@@QAE@XZ				; CSession::CSession
PUBLIC	??_7CSession@@6B@				; CSession::`vftable'
PUBLIC	??_GCSession@@UAEPAXI@Z				; CSession::`scalar deleting destructor'
EXTRN	??_ECSession@@UAEPAXI@Z:NEAR			; CSession::`vector deleting destructor'
EXTRN	__imp__InitializeCriticalSectionAndSpinCount@8:NEAR
EXTRN	??0COverlappedEx@@QAE@XZ:NEAR			; COverlappedEx::COverlappedEx
EXTRN	??1COverlappedEx@@UAE@XZ:NEAR			; COverlappedEx::~COverlappedEx
EXTRN	??0CPacket@@QAE@XZ:NEAR				; CPacket::CPacket
EXTRN	??1CPacket@@UAE@XZ:NEAR				; CPacket::~CPacket
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\deque
xdata$x	SEGMENT
$T96133	DD	0ffffffffH
	DD	FLAT:$L95955
	DD	00H
	DD	FLAT:$L95956
	DD	01H
	DD	FLAT:$L95957
	DD	02H
	DD	FLAT:$L95958
$T96130	DD	019930520H
	DD	04H
	DD	FLAT:$T96133
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_7CSession@@6B@
CONST	SEGMENT
??_7CSession@@6B@ DD FLAT:?Say@CSession@@UAEHPAVCPacket@@@Z ; CSession::`vftable'
	DD	FLAT:?Open@CSession@@UAEHIAAVCPacket@@@Z
	DD	FLAT:?Close@CSession@@UAEXXZ
	DD	FLAT:??_ECSession@@UAEPAXI@Z
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\session.cpp
CONST	ENDS
;	COMDAT ??0CSession@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CSession@@QAE@XZ PROC NEAR				; CSession::CSession, COMDAT
; _this$ = ecx

; 8    : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0CSession@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	8b f1		 mov	 esi, ecx
  0001a	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  0001d	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  00021	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CSession@@6B@
  00027	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  0002c	33 db		 xor	 ebx, ebx
  0002e	89 5c 24 14	 mov	 DWORD PTR __$EHRec$[esp+32], ebx
  00032	89 5e 60	 mov	 DWORD PTR [esi+96], ebx
  00035	89 5e 64	 mov	 DWORD PTR [esi+100], ebx
  00038	89 5e 68	 mov	 DWORD PTR [esi+104], ebx
  0003b	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  0003e	8d 8e 90 00 08
	00		 lea	 ecx, DWORD PTR [esi+524432]
  00044	c6 44 24 14 01	 mov	 BYTE PTR __$EHRec$[esp+32], 1
  00049	e8 00 00 00 00	 call	 ??0COverlappedEx@@QAE@XZ ; COverlappedEx::COverlappedEx
  0004e	8d 8e b0 00 08
	00		 lea	 ecx, DWORD PTR [esi+524464]
  00054	c6 44 24 14 02	 mov	 BYTE PTR __$EHRec$[esp+32], 2
  00059	e8 00 00 00 00	 call	 ??0COverlappedEx@@QAE@XZ ; COverlappedEx::COverlappedEx

; 9    : 	memset( &m_addr, 0, sizeof(SOCKADDR_IN));

  0005e	33 c0		 xor	 eax, eax
  00060	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00063	89 01		 mov	 DWORD PTR [ecx], eax
  00065	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 10   : 	InitializeCriticalSectionAndSpinCount(&m_cs, 4000);

  00068	68 a0 0f 00 00	 push	 4000			; 00000fa0H
  0006d	8d 56 18	 lea	 edx, DWORD PTR [esi+24]
  00070	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00073	52		 push	 edx
  00074	c6 44 24 1c 03	 mov	 BYTE PTR __$EHRec$[esp+40], 3
  00079	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSectionAndSpinCount@8

; 11   : 
; 12   : 	m_sock = INVALID_SOCKET;
; 13   : 	m_bValid = FALSE;
; 14   : 	m_dwRecvNumber = 0;
; 15   : 	m_dwSendNumber = 0;
; 16   : 
; 17   : 	while(!m_qSEND.empty())

  00082	39 5e 6c	 cmp	 DWORD PTR [esi+108], ebx
  00085	c7 46 70 ff ff
	ff ff		 mov	 DWORD PTR [esi+112], -1
  0008c	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  0008f	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  00092	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00095	74 58		 je	 SHORT $L92971
$L92970:

; 18   : 	{
; 19   : 		delete m_qSEND.front();

  00097	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  0009a	8b c1		 mov	 eax, ecx
  0009c	c1 e8 02	 shr	 eax, 2
  0009f	8d 14 85 00 00
	00 00		 lea	 edx, DWORD PTR [eax*4]
  000a6	2b ca		 sub	 ecx, edx
  000a8	8b 56 64	 mov	 edx, DWORD PTR [esi+100]
  000ab	3b d0		 cmp	 edx, eax
  000ad	77 02		 ja	 SHORT $L96102
  000af	2b c2		 sub	 eax, edx
$L96102:
  000b1	8b 56 60	 mov	 edx, DWORD PTR [esi+96]
  000b4	8b 04 82	 mov	 eax, DWORD PTR [edx+eax*4]
  000b7	8b 0c 88	 mov	 ecx, DWORD PTR [eax+ecx*4]
  000ba	3b cb		 cmp	 ecx, ebx
  000bc	74 06		 je	 SHORT $L95953
  000be	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c0	6a 01		 push	 1
  000c2	ff 12		 call	 DWORD PTR [edx]
$L95953:

; 20   : 		m_qSEND.pop();

  000c4	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000c7	3b c3		 cmp	 eax, ebx
  000c9	74 1f		 je	 SHORT $L96124
  000cb	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  000ce	8b 56 64	 mov	 edx, DWORD PTR [esi+100]
  000d1	41		 inc	 ecx
  000d2	c1 e2 02	 shl	 edx, 2
  000d5	3b d1		 cmp	 edx, ecx
  000d7	89 4e 68	 mov	 DWORD PTR [esi+104], ecx
  000da	77 03		 ja	 SHORT $L96123
  000dc	89 5e 68	 mov	 DWORD PTR [esi+104], ebx
$L96123:
  000df	48		 dec	 eax
  000e0	3b c3		 cmp	 eax, ebx
  000e2	89 46 6c	 mov	 DWORD PTR [esi+108], eax
  000e5	75 03		 jne	 SHORT $L96124
  000e7	89 5e 68	 mov	 DWORD PTR [esi+104], ebx
$L96124:
  000ea	39 5e 6c	 cmp	 DWORD PTR [esi+108], ebx
  000ed	75 a8		 jne	 SHORT $L92970
$L92971:

; 21   : 	}
; 22   : 
; 23   : 	m_bClosing = FALSE;
; 24   : 	m_bCanRecv = TRUE;
; 25   : 	m_bCanSend = TRUE;
; 26   : 	m_bSessionType = SESSION_SERVER;
; 27   : 	m_dwBufSize = 0;
; 28   : 	m_dwQRead = 0;
; 29   : 	m_bBufFull = FALSE;
; 30   : 	m_Recv.m_bType = PACKET_RECV;
; 31   : 
; 32   : 	m_ovRECV.m_bTYPE = TOV_SSN_RECV;
; 33   : 	m_ovRECV.m_pOBJ = this;
; 34   : 
; 35   : 	m_ovSEND.m_bTYPE = TOV_SSN_SEND;
; 36   : 	m_ovSEND.m_pOBJ = this;
; 37   : }

  000ef	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  000f3	88 5e 0f	 mov	 BYTE PTR [esi+15], bl
  000f6	89 9e 88 00 08
	00		 mov	 DWORD PTR [esi+524424], ebx
  000fc	89 9e 8c 00 08
	00		 mov	 DWORD PTR [esi+524428], ebx
  00102	88 5e 14	 mov	 BYTE PTR [esi+20], bl
  00105	88 5e 58	 mov	 BYTE PTR [esi+88], bl
  00108	c6 46 0d 01	 mov	 BYTE PTR [esi+13], 1
  0010c	c6 46 0e 01	 mov	 BYTE PTR [esi+14], 1
  00110	c6 46 0c 02	 mov	 BYTE PTR [esi+12], 2
  00114	c6 86 cc 00 08
	00 01		 mov	 BYTE PTR [esi+524492], 1
  0011b	89 b6 c8 00 08
	00		 mov	 DWORD PTR [esi+524488], esi
  00121	c6 86 ac 00 08
	00 02		 mov	 BYTE PTR [esi+524460], 2
  00128	89 b6 a8 00 08
	00		 mov	 DWORD PTR [esi+524456], esi
  0012e	8b c6		 mov	 eax, esi
  00130	5e		 pop	 esi
  00131	5b		 pop	 ebx
  00132	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00139	83 c4 10	 add	 esp, 16			; 00000010H
  0013c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L95955:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 40	 add	 ecx, 64			; 00000040H
  00006	e9 00 00 00 00	 jmp	 ??1CPacket@@UAE@XZ	; CPacket::~CPacket
$L95956:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 5c	 add	 ecx, 92			; 0000005cH
  00011	e9 00 00 00 00	 jmp	 ??1?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAE@XZ
$L95957:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 90 00 08
	00		 add	 ecx, 524432		; 00080090H
  0001f	e9 00 00 00 00	 jmp	 ??1COverlappedEx@@UAE@XZ ; COverlappedEx::~COverlappedEx
$L95958:
  00024	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	81 c1 b0 00 08
	00		 add	 ecx, 524464		; 000800b0H
  0002d	e9 00 00 00 00	 jmp	 ??1COverlappedEx@@UAE@XZ ; COverlappedEx::~COverlappedEx
__ehhandler$??0CSession@@QAE@XZ:
  00032	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T96130
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CSession@@QAE@XZ ENDP				; CSession::CSession
PUBLIC	??1CSession@@UAE@XZ				; CSession::~CSession
EXTRN	__imp__DeleteCriticalSection@4:NEAR
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\deque
xdata$x	SEGMENT
$T96154	DD	0ffffffffH
	DD	FLAT:$L96139
	DD	00H
	DD	FLAT:$L96140
	DD	01H
	DD	FLAT:$L96141
	DD	02H
	DD	FLAT:$L96142
$T96152	DD	019930520H
	DD	04H
	DD	FLAT:$T96154
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\session.cpp
xdata$x	ENDS
;	COMDAT ??1CSession@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CSession@@UAE@XZ PROC NEAR				; CSession::~CSession, COMDAT
; _this$ = ecx

; 40   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1CSession@@UAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	89 74 24 04	 mov	 DWORD PTR _this$[esp+20], esi
  0001d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CSession@@6B@
  00023	c7 44 24 10 03
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+28], 3

; 41   : 	Close();

  0002b	e8 00 00 00 00	 call	 ?Close@CSession@@UAEXXZ	; CSession::Close

; 42   : 	DeleteCriticalSection(&m_cs);

  00030	8d 46 18	 lea	 eax, DWORD PTR [esi+24]
  00033	50		 push	 eax
  00034	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 43   : }

  0003a	8d 8e b0 00 08
	00		 lea	 ecx, DWORD PTR [esi+524464]
  00040	c6 44 24 10 02	 mov	 BYTE PTR __$EHRec$[esp+28], 2
  00045	e8 00 00 00 00	 call	 ??1COverlappedEx@@UAE@XZ ; COverlappedEx::~COverlappedEx
  0004a	8d 8e 90 00 08
	00		 lea	 ecx, DWORD PTR [esi+524432]
  00050	c6 44 24 10 01	 mov	 BYTE PTR __$EHRec$[esp+28], 1
  00055	e8 00 00 00 00	 call	 ??1COverlappedEx@@UAE@XZ ; COverlappedEx::~COverlappedEx
  0005a	8d 4e 5c	 lea	 ecx, DWORD PTR [esi+92]
  0005d	e8 00 00 00 00	 call	 ?_Tidy@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IAEXXZ ; std::deque<CPacket *,std::allocator<CPacket *> >::_Tidy
  00062	8d 4e 40	 lea	 ecx, DWORD PTR [esi+64]
  00065	c7 44 24 10 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+28], -1
  0006d	e8 00 00 00 00	 call	 ??1CPacket@@UAE@XZ	; CPacket::~CPacket
  00072	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  00076	5e		 pop	 esi
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0007e	83 c4 10	 add	 esp, 16			; 00000010H
  00081	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L96139:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 40	 add	 ecx, 64			; 00000040H
  00006	e9 00 00 00 00	 jmp	 ??1CPacket@@UAE@XZ	; CPacket::~CPacket
$L96140:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 5c	 add	 ecx, 92			; 0000005cH
  00011	e9 00 00 00 00	 jmp	 ??1?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAE@XZ
$L96141:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 90 00 08
	00		 add	 ecx, 524432		; 00080090H
  0001f	e9 00 00 00 00	 jmp	 ??1COverlappedEx@@UAE@XZ ; COverlappedEx::~COverlappedEx
$L96142:
  00024	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	81 c1 b0 00 08
	00		 add	 ecx, 524464		; 000800b0H
  0002d	e9 00 00 00 00	 jmp	 ??1COverlappedEx@@UAE@XZ ; COverlappedEx::~COverlappedEx
__ehhandler$??1CSession@@UAE@XZ:
  00032	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T96152
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CSession@@UAE@XZ ENDP				; CSession::~CSession
PUBLIC	?OnSendComplete@CSession@@QAEHK@Z		; CSession::OnSendComplete
;	COMDAT xdata$x
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\tnetdef.h
xdata$x	SEGMENT
$T96176	DD	0ffffffffH
	DD	FLAT:$L96162
$T96174	DD	019930520H
	DD	01H
	DD	FLAT:$T96176
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\session.cpp
xdata$x	ENDS
;	COMDAT ?OnSendComplete@CSession@@QAEHK@Z
_TEXT	SEGMENT
_lock_object$ = -20					; size = 8
__$EHRec$ = -12						; size = 12
_dwTRANS$ = 8						; size = 4
?OnSendComplete@CSession@@QAEHK@Z PROC NEAR		; CSession::OnSendComplete, COMDAT
; _this$ = ecx

; 246  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?OnSendComplete@CSession@@QAEHK@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 08	 sub	 esp, 8
  00018	53		 push	 ebx
  00019	55		 push	 ebp
  0001a	8b d9		 mov	 ebx, ecx

; 247  : 	SMART_LOCKCS(&m_cs)

  0001c	8d 6b 18	 lea	 ebp, DWORD PTR [ebx+24]
  0001f	55		 push	 ebp
  00020	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR _lock_object$[esp+32], OFFSET FLAT:??_7CCSLock@@6B@
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
  0002e	89 6c 24 0c	 mov	 DWORD PTR _lock_object$[esp+32], ebp

; 248  : 
; 249  : 	if(m_bCanSend)

  00032	8a 43 0e	 mov	 al, BYTE PTR [ebx+14]
  00035	84 c0		 test	 al, al
  00037	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+36], 0
  0003f	74 1f		 je	 SHORT $L93093

; 250  : 		return TRUE;

  00041	55		 push	 ebp
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00048	5d		 pop	 ebp
  00049	b8 01 00 00 00	 mov	 eax, 1
  0004e	5b		 pop	 ebx

; 261  : }

  0004f	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0005a	83 c4 14	 add	 esp, 20			; 00000014H
  0005d	c2 04 00	 ret	 4
$L93093:

; 251  : 
; 252  : 	if( dwTRANS > 0 )

  00060	8b 44 24 20	 mov	 eax, DWORD PTR _dwTRANS$[esp+24]
  00064	85 c0		 test	 eax, eax
  00066	56		 push	 esi
  00067	76 2d		 jbe	 SHORT $L93096

; 253  : 	{
; 254  : 		m_dwBufSize -= dwTRANS;

  00069	8b 8b 88 00 08
	00		 mov	 ecx, DWORD PTR [ebx+524424]
  0006f	2b c8		 sub	 ecx, eax
  00071	89 8b 88 00 08
	00		 mov	 DWORD PTR [ebx+524424], ecx

; 255  : 		if(m_dwBufSize)

  00077	74 1d		 je	 SHORT $L93096
  00079	57		 push	 edi

; 256  : 			memcpy( m_pBUF, m_pBUF + dwTRANS, m_dwBufSize);

  0007a	8d b4 18 88 00
	00 00		 lea	 esi, DWORD PTR [eax+ebx+136]
  00081	8b c1		 mov	 eax, ecx
  00083	c1 e9 02	 shr	 ecx, 2
  00086	8d bb 88 00 00
	00		 lea	 edi, DWORD PTR [ebx+136]
  0008c	f3 a5		 rep movsd
  0008e	8b c8		 mov	 ecx, eax
  00090	83 e1 03	 and	 ecx, 3
  00093	f3 a4		 rep movsb
  00095	5f		 pop	 edi
$L93096:

; 257  : 	}
; 258  : 	m_bCanSend = TRUE;
; 259  : 
; 260  : 	return Post();

  00096	8b cb		 mov	 ecx, ebx
  00098	c6 43 0e 01	 mov	 BYTE PTR [ebx+14], 1
  0009c	e8 00 00 00 00	 call	 ?Post@CSession@@QAEHXZ	; CSession::Post
  000a1	55		 push	 ebp
  000a2	8b f0		 mov	 esi, eax
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 261  : }

  000aa	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  000ae	8b c6		 mov	 eax, esi
  000b0	5e		 pop	 esi
  000b1	5d		 pop	 ebp
  000b2	5b		 pop	 ebx
  000b3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ba	83 c4 14	 add	 esp, 20			; 00000014H
  000bd	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L96162:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _lock_object$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CCSLock@@UAE@XZ	; CCSLock::~CCSLock
__ehhandler$?OnSendComplete@CSession@@QAEHK@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T96174
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?OnSendComplete@CSession@@QAEHK@Z ENDP			; CSession::OnSendComplete
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 361  : 		_Tidy();
; 362  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$L96253:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $L96253
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 363  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
EXTRN	??0exception@@QAE@XZ:NEAR			; exception::exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T96356	DD	0ffffffffH
	DD	FLAT:$L96257
$T96354	DD	019930520H
	DD	01H
	DD	FLAT:$T96356
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 19   : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	89 74 24 04	 mov	 DWORD PTR _this$[esp+20], esi
  0001d	e8 00 00 00 00	 call	 ??0exception@@QAE@XZ	; exception::exception
  00022	33 c0		 xor	 eax, eax
  00024	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  0002d	6a ff		 push	 -1
  0002f	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00032	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00039	50		 push	 eax
  0003a	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  0003e	88 41 04	 mov	 BYTE PTR [ecx+4], al
  00041	8b 44 24 20	 mov	 eax, DWORD PTR __Message$[esp+24]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 20   : 		}

  0004b	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  0004f	8b c6		 mov	 eax, esi
  00051	5e		 pop	 esi
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L96257:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T96354
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_Glength_error@std@@UAEPAXI@Z			; std::length_error::`scalar deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:NEAR		; std::length_error::`vector deleting destructor'
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 95   : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@

; 96   : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
; Function compile flags: /Ogty
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC NEAR		; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1length_error@std@@UAE@XZ ; std::length_error::~length_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L96366
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L96366:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC NEAR			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 99   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L96454
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L96454:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_GCSession@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCSession@@UAEPAXI@Z PROC NEAR			; CSession::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1CSession@@UAE@XZ	; CSession::~CSession
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L96476
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L96476:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GCSession@@UAEPAXI@Z ENDP				; CSession::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?SendComplete@CSession@@QAEHK@Z			; CSession::SendComplete
;	COMDAT xdata$x
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\tnetdef.h
xdata$x	SEGMENT
$T96496	DD	0ffffffffH
	DD	FLAT:$L96482
$T96494	DD	019930520H
	DD	01H
	DD	FLAT:$T96496
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\session.cpp
xdata$x	ENDS
;	COMDAT ?SendComplete@CSession@@QAEHK@Z
_TEXT	SEGMENT
_lock_object$ = -20					; size = 8
__$EHRec$ = -12						; size = 12
_dwTRANS$ = 8						; size = 4
?SendComplete@CSession@@QAEHK@Z PROC NEAR		; CSession::SendComplete, COMDAT
; _this$ = ecx

; 223  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendComplete@CSession@@QAEHK@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 08	 sub	 esp, 8
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8b f1		 mov	 esi, ecx

; 224  : 	SMART_LOCKCS(&m_cs)

  0001c	8d 7e 18	 lea	 edi, DWORD PTR [esi+24]
  0001f	57		 push	 edi
  00020	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR _lock_object$[esp+32], OFFSET FLAT:??_7CCSLock@@6B@
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
  0002e	89 7c 24 0c	 mov	 DWORD PTR _lock_object$[esp+32], edi

; 225  : 
; 226  : 	OnSendComplete(dwTRANS);

  00032	8b 44 24 20	 mov	 eax, DWORD PTR _dwTRANS$[esp+24]
  00036	50		 push	 eax
  00037	8b ce		 mov	 ecx, esi
  00039	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+40], 0
  00041	e8 00 00 00 00	 call	 ?OnSendComplete@CSession@@QAEHK@Z ; CSession::OnSendComplete

; 227  : 
; 228  : 	if( !m_bValid && m_bCanSend )

  00046	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00049	85 c0		 test	 eax, eax
  0004b	75 2d		 jne	 SHORT $L93081
  0004d	8a 46 0e	 mov	 al, BYTE PTR [esi+14]
  00050	84 c0		 test	 al, al
  00052	74 26		 je	 SHORT $L93081

; 229  : 
; 230  : 	{
; 231  : 		Close();

  00054	8b 16		 mov	 edx, DWORD PTR [esi]
  00056	8b ce		 mov	 ecx, esi
  00058	ff 52 08	 call	 DWORD PTR [edx+8]

; 232  : 		return TRUE;

  0005b	57		 push	 edi
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00062	5f		 pop	 edi
  00063	b8 01 00 00 00	 mov	 eax, 1
  00068	5e		 pop	 esi

; 243  : }

  00069	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  0006d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00074	83 c4 14	 add	 esp, 20			; 00000014H
  00077	c2 04 00	 ret	 4
$L93081:

; 233  : 	}
; 234  : 
; 235  : 	if( !m_bCanRecv && m_bCanSend )

  0007a	8a 46 0d	 mov	 al, BYTE PTR [esi+13]
  0007d	84 c0		 test	 al, al
  0007f	75 1d		 jne	 SHORT $L93083
  00081	8a 46 0e	 mov	 al, BYTE PTR [esi+14]
  00084	84 c0		 test	 al, al
  00086	74 16		 je	 SHORT $L93083

; 236  : 	{
; 237  : 		if( m_sock != INVALID_SOCKET )

  00088	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  0008b	83 f8 ff	 cmp	 eax, -1
  0008e	74 07		 je	 SHORT $L93085

; 238  : 			closesocket(m_sock);

  00090	50		 push	 eax
  00091	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__closesocket@4
$L93085:

; 239  : 		m_sock = INVALID_SOCKET;

  00097	c7 46 70 ff ff
	ff ff		 mov	 DWORD PTR [esi+112], -1
$L93083:

; 240  : 	}
; 241  : 
; 242  : 	return FALSE;

  0009e	57		 push	 edi
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 243  : }

  000a5	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  000a9	5f		 pop	 edi
  000aa	33 c0		 xor	 eax, eax
  000ac	5e		 pop	 esi
  000ad	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000b4	83 c4 14	 add	 esp, 20			; 00000014H
  000b7	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L96482:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _lock_object$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CCSLock@@UAE@XZ	; CCSLock::~CCSLock
__ehhandler$?SendComplete@CSession@@QAEHK@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T96494
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendComplete@CSession@@QAEHK@Z ENDP			; CSession::SendComplete
PUBLIC	?_Xlen@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IBEXXZ ; std::deque<CPacket *,std::allocator<CPacket *> >::_Xlen
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_R0?AVexception@@@8				; exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
EXTRN	??0exception@@QAE@ABV0@@Z:NEAR			; exception::exception
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	SEGMENT
$T96618	DD	0ffffffffH
	DD	FLAT:$L96504
$T96615	DD	019930520H
	DD	01H
	DD	FLAT:$T96618
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT
??_R0?AVexception@@@8 DD FLAT:??_7type_info@@6B@	; exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@@', 00H
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\deque
_DATA	ENDS
;	COMDAT ?_Xlen@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
$T96503 = -80						; size = 28
$T96502 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IBEXXZ PROC NEAR ; std::deque<CPacket *,std::allocator<CPacket *> >::_Xlen, COMDAT
; _this$ = ecx

; 897  : 		{	// report length error

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Xlen@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IBEXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 44	 sub	 esp, 68			; 00000044H

; 898  : 		_THROW(length_error, "deque<T> too long");

  00018	6a 11		 push	 17			; 00000011H
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
  0001f	8d 4c 24 08	 lea	 ecx, DWORD PTR $T96503[esp+88]
  00023	c7 44 24 20 0f
	00 00 00	 mov	 DWORD PTR $T96503[esp+112], 15 ; 0000000fH
  0002b	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T96503[esp+108], 0
  00033	c6 44 24 0c 00	 mov	 BYTE PTR $T96503[esp+92], 0
  00038	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0003d	8d 04 24	 lea	 eax, DWORD PTR $T96503[esp+80]
  00040	50		 push	 eax
  00041	8d 4c 24 20	 lea	 ecx, DWORD PTR $T96502[esp+84]
  00045	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+92], 0
  0004d	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00052	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVlength_error@std@@
  00057	8d 4c 24 20	 lea	 ecx, DWORD PTR $T96502[esp+84]
  0005b	51		 push	 ecx
  0005c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T96502[esp+88], OFFSET FLAT:??_7length_error@std@@6B@
  00064	e8 00 00 00 00	 call	 __CxxThrowException@8
$L96619:
$L96617:
  00069	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L96504:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T96503[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xlen@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IBEXXZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T96615
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Xlen@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IBEXXZ ENDP ; std::deque<CPacket *,std::allocator<CPacket *> >::_Xlen
;	COMDAT xdata$x
xdata$x	SEGMENT
$T96724	DD	0ffffffffH
	DD	FLAT:$L96625
$T96722	DD	019930520H
	DD	01H
	DD	FLAT:$T96724
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC NEAR		; std::logic_error::logic_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 1c	 mov	 edi, DWORD PTR ___that$[esp+20]
  0001c	8b f1		 mov	 esi, ecx
  0001e	57		 push	 edi
  0001f	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00023	e8 00 00 00 00	 call	 ??0exception@@QAE@ABV0@@Z ; exception::exception
  00028	33 c0		 xor	 eax, eax
  0002a	6a ff		 push	 -1
  0002c	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00035	50		 push	 eax
  00036	83 c7 0c	 add	 edi, 12			; 0000000cH
  00039	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00040	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00043	57		 push	 edi
  00044	89 44 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], eax
  00048	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00050	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00054	5f		 pop	 edi
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L96625:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T96722
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Ogty
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC NEAR		; std::length_error::length_error, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	?_Growmap@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IAEXI@Z ; std::deque<CPacket *,std::allocator<CPacket *> >::_Growmap
; Function compile flags: /Ogty
;	COMDAT ?_Growmap@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newmap$ = -12						; size = 4
$T96798 = -8						; size = 4
tv356 = -4						; size = 4
tv349 = -4						; size = 4
__Count$ = 8						; size = 4
?_Growmap@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IAEXI@Z PROC NEAR ; std::deque<CPacket *,std::allocator<CPacket *> >::_Growmap, COMDAT
; _this$ = ecx

; 907  : 		{	// grow map by _Count pointers

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00003	53		 push	 ebx
  00004	8b d9		 mov	 ebx, ecx

; 908  : 		if (max_size() / _DEQUESIZ - _Mapsize < _Count)

  00006	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00009	b9 ff ff ff 0f	 mov	 ecx, 268435455		; 0fffffffH
  0000e	57		 push	 edi
  0000f	8b 7c 24 18	 mov	 edi, DWORD PTR __Count$[esp+16]
  00013	2b c8		 sub	 ecx, eax
  00015	3b cf		 cmp	 ecx, edi
  00017	73 07		 jae	 SHORT $L93394

; 909  : 			_Xlen();	// result too long

  00019	8b cb		 mov	 ecx, ebx
  0001b	e8 00 00 00 00	 call	 ?_Xlen@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IBEXXZ ; std::deque<CPacket *,std::allocator<CPacket *> >::_Xlen
$L96982:
$L93394:

; 910  : 
; 911  : 		size_type _Inc = _Mapsize / 2;	// try to grow by 50%

  00020	8b c8		 mov	 ecx, eax
  00022	d1 e9		 shr	 ecx, 1

; 912  : 		if (_Inc < _DEQUEMAPSIZ)

  00024	83 f9 08	 cmp	 ecx, 8
  00027	73 05		 jae	 SHORT $L93396

; 913  : 			_Inc = _DEQUEMAPSIZ;

  00029	b9 08 00 00 00	 mov	 ecx, 8
$L93396:

; 914  : 		if (_Count < _Inc && _Mapsize <= max_size() / _DEQUESIZ - _Inc)

  0002e	3b f9		 cmp	 edi, ecx
  00030	73 11		 jae	 SHORT $L93397
  00032	ba ff ff ff 0f	 mov	 edx, 268435455		; 0fffffffH
  00037	2b d1		 sub	 edx, ecx
  00039	3b c2		 cmp	 eax, edx
  0003b	77 06		 ja	 SHORT $L93397

; 915  : 			_Count = _Inc;

  0003d	89 4c 24 18	 mov	 DWORD PTR __Count$[esp+16], ecx
  00041	8b f9		 mov	 edi, ecx
$L93397:
  00043	55		 push	 ebp

; 916  : 		size_type _Myboff = _Myoff / _DEQUESIZ;

  00044	8b 6b 0c	 mov	 ebp, DWORD PTR [ebx+12]

; 917  : 		_Mapptr _Newmap = this->_Almap.allocate(_Mapsize + _Count);

  00047	03 c7		 add	 eax, edi
  00049	c1 e0 02	 shl	 eax, 2
  0004c	56		 push	 esi
  0004d	50		 push	 eax
  0004e	c1 ed 02	 shr	 ebp, 2
  00051	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 918  : 		_Mapptr _Myptr = _Newmap + _Myboff;
; 919  : 
; 920  : 		_Myptr = _Uninitialized_copy(_Map + _Myboff,
; 921  : 			_Map + _Mapsize, _Myptr, this->_Almap);	// copy initial to end

  00056	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00059	8b d0		 mov	 edx, eax
  0005b	8d 34 ad 00 00
	00 00		 lea	 esi, DWORD PTR [ebp*4]
  00062	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
  00065	89 44 24 18	 mov	 DWORD PTR $T96798[esp+32], eax
  00069	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0006c	c1 e0 02	 shl	 eax, 2
  0006f	2b 44 24 18	 sub	 eax, DWORD PTR $T96798[esp+32]
  00073	89 54 24 14	 mov	 DWORD PTR __Newmap$[esp+32], edx
  00077	03 c1		 add	 eax, ecx
  00079	8b 4c 24 18	 mov	 ecx, DWORD PTR $T96798[esp+32]
  0007d	c1 f8 02	 sar	 eax, 2
  00080	c1 e0 02	 shl	 eax, 2
  00083	50		 push	 eax
  00084	51		 push	 ecx
  00085	03 d6		 add	 edx, esi
  00087	52		 push	 edx
  00088	89 44 24 28	 mov	 DWORD PTR tv349[esp+44], eax
  0008c	e8 00 00 00 00	 call	 _memmove
  00091	8b 54 24 28	 mov	 edx, DWORD PTR tv349[esp+44]

; 922  : 		if (_Myboff <= _Count)
; 923  : 			{	// increment greater than offset of initial block
; 924  : 			_Myptr = _Uninitialized_copy(_Map,
; 925  : 				_Map + _Myboff, _Myptr, this->_Almap);	// copy rest of old

  00095	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00098	83 c4 10	 add	 esp, 16			; 00000010H
  0009b	03 c2		 add	 eax, edx
  0009d	3b ef		 cmp	 ebp, edi
  0009f	77 3f		 ja	 SHORT $L93410
  000a1	c1 fe 02	 sar	 esi, 2
  000a4	8b d6		 mov	 edx, esi
  000a6	c1 e2 02	 shl	 edx, 2
  000a9	52		 push	 edx
  000aa	51		 push	 ecx

; 926  : 			_Uninitialized_fill_n(_Myptr, _Count - _Myboff,
; 927  : 				(_Tptr)0, this->_Almap);	// clear suffix of new

  000ab	8b f7		 mov	 esi, edi
  000ad	50		 push	 eax
  000ae	2b f5		 sub	 esi, ebp
  000b0	89 54 24 24	 mov	 DWORD PTR tv356[esp+40], edx
  000b4	e8 00 00 00 00	 call	 _memmove
  000b9	8b 4c 24 24	 mov	 ecx, DWORD PTR tv356[esp+40]
  000bd	8b d0		 mov	 edx, eax
  000bf	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c2	03 d1		 add	 edx, ecx
  000c4	85 f6		 test	 esi, esi
  000c6	76 0c		 jbe	 SHORT $L96851
  000c8	8b ce		 mov	 ecx, esi
  000ca	33 c0		 xor	 eax, eax
  000cc	8b fa		 mov	 edi, edx
  000ce	f3 ab		 rep stosd
  000d0	8b 7c 24 20	 mov	 edi, DWORD PTR __Count$[esp+24]
$L96851:

; 928  : 			_Uninitialized_fill_n(_Newmap, _Myboff,
; 929  : 				(_Tptr)0, this->_Almap);	// clear prefix of new

  000d4	85 ed		 test	 ebp, ebp
  000d6	76 52		 jbe	 SHORT $L96979
  000d8	8b 7c 24 10	 mov	 edi, DWORD PTR __Newmap$[esp+28]
  000dc	8b cd		 mov	 ecx, ebp

; 930  : 			}
; 931  : 		else

  000de	eb 42		 jmp	 SHORT $L96981
$L93410:

; 932  : 			{	// increment not greater than offset of initial block
; 933  : 			_Uninitialized_copy(_Map,
; 934  : 				_Map + _Count, _Myptr, this->_Almap);	// copy more old

  000e0	8d 2c bd 00 00
	00 00		 lea	 ebp, DWORD PTR [edi*4]
  000e7	8b d5		 mov	 edx, ebp
  000e9	c1 fa 02	 sar	 edx, 2
  000ec	c1 e2 02	 shl	 edx, 2
  000ef	52		 push	 edx
  000f0	51		 push	 ecx
  000f1	50		 push	 eax
  000f2	e8 00 00 00 00	 call	 _memmove

; 935  : 			_Myptr = _Uninitialized_copy(_Map + _Count,
; 936  : 				_Map + _Myboff, _Newmap, this->_Almap);	// copy rest of old

  000f7	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000fa	8d 0c 28	 lea	 ecx, DWORD PTR [eax+ebp]
  000fd	2b f1		 sub	 esi, ecx
  000ff	03 f0		 add	 esi, eax
  00101	8b 44 24 1c	 mov	 eax, DWORD PTR __Newmap$[esp+40]
  00105	c1 fe 02	 sar	 esi, 2
  00108	c1 e6 02	 shl	 esi, 2
  0010b	56		 push	 esi
  0010c	51		 push	 ecx
  0010d	50		 push	 eax
  0010e	e8 00 00 00 00	 call	 _memmove
  00113	8b d0		 mov	 edx, eax
  00115	83 c4 18	 add	 esp, 24			; 00000018H
  00118	03 d6		 add	 edx, esi

; 937  : 			_Uninitialized_fill_n(_Myptr, _Count,
; 938  : 				(_Tptr)0, this->_Almap);	// clear rest to initial block

  0011a	85 ff		 test	 edi, edi
  0011c	76 0c		 jbe	 SHORT $L96979
  0011e	8b cf		 mov	 ecx, edi
  00120	8b fa		 mov	 edi, edx
$L96981:
  00122	33 c0		 xor	 eax, eax
  00124	f3 ab		 rep stosd
  00126	8b 7c 24 20	 mov	 edi, DWORD PTR __Count$[esp+24]
$L96979:

; 939  : 			}
; 940  : 
; 941  : 		_Destroy_range(_Map + _Myboff, _Map + _Mapsize, this->_Almap);
; 942  : 		if (_Map)

  0012a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0012d	85 c0		 test	 eax, eax
  0012f	5e		 pop	 esi
  00130	5d		 pop	 ebp
  00131	74 09		 je	 SHORT $L96968

; 943  : 			this->_Almap.deallocate(_Map, _Mapsize);	// free storage for old

  00133	50		 push	 eax
  00134	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00139	83 c4 04	 add	 esp, 4
$L96968:

; 944  : 
; 945  : 		_Map = _Newmap;	// point at new
; 946  : 		_Mapsize += _Count;

  0013c	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0013f	8b 4c 24 08	 mov	 ecx, DWORD PTR __Newmap$[esp+20]
  00143	03 c7		 add	 eax, edi
  00145	5f		 pop	 edi
  00146	89 4b 04	 mov	 DWORD PTR [ebx+4], ecx
  00149	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  0014c	5b		 pop	 ebx

; 947  : 		}

  0014d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00150	c2 04 00	 ret	 4
$L96980:
?_Growmap@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IAEXI@Z ENDP ; std::deque<CPacket *,std::allocator<CPacket *> >::_Growmap
_TEXT	ENDS
PUBLIC	?push_back@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAEXABQAVCPacket@@@Z ; std::deque<CPacket *,std::allocator<CPacket *> >::push_back
; Function compile flags: /Ogty
;	COMDAT ?push_back@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAEXABQAVCPacket@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAEXABQAVCPacket@@@Z PROC NEAR ; std::deque<CPacket *,std::allocator<CPacket *> >::push_back, COMDAT
; _this$ = ecx

; 583  : 		{	// insert element at end

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 584  : 		if ((_Myoff + _Mysize) % _DEQUESIZ == 0
; 585  : 			&& _Mapsize <= (_Mysize + _DEQUESIZ) / _DEQUESIZ)

  00003	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00006	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00009	03 c8		 add	 ecx, eax
  0000b	f6 c1 03	 test	 cl, 3
  0000e	75 16		 jne	 SHORT $L93365
  00010	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00013	83 c0 04	 add	 eax, 4
  00016	c1 e8 02	 shr	 eax, 2
  00019	3b c8		 cmp	 ecx, eax
  0001b	77 09		 ja	 SHORT $L93365

; 586  : 			_Growmap(1);

  0001d	6a 01		 push	 1
  0001f	8b ce		 mov	 ecx, esi
  00021	e8 00 00 00 00	 call	 ?_Growmap@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@IAEXI@Z ; std::deque<CPacket *,std::allocator<CPacket *> >::_Growmap
$L93365:

; 587  : 		size_type _Newoff = _Myoff + _Mysize;
; 588  : 		size_type _Block = _Newoff / _DEQUESIZ;
; 589  : 		if (_Mapsize <= _Block)

  00026	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00029	53		 push	 ebx
  0002a	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  0002d	57		 push	 edi
  0002e	8b 7e 0c	 mov	 edi, DWORD PTR [esi+12]
  00031	03 fb		 add	 edi, ebx
  00033	8b df		 mov	 ebx, edi
  00035	c1 eb 02	 shr	 ebx, 2
  00038	3b c3		 cmp	 eax, ebx
  0003a	77 02		 ja	 SHORT $L93368

; 590  : 			_Block -= _Mapsize;

  0003c	2b d8		 sub	 ebx, eax
$L93368:

; 591  : 		if (_Map[_Block] == 0)

  0003e	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00041	83 3c 9a 00	 cmp	 DWORD PTR [edx+ebx*4], 0
  00045	75 10		 jne	 SHORT $L93369

; 592  : 			_Map[_Block] = this->_Alval.allocate(_DEQUESIZ);

  00047	6a 10		 push	 16			; 00000010H
  00049	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0004e	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00051	83 c4 04	 add	 esp, 4
  00054	89 04 99	 mov	 DWORD PTR [ecx+ebx*4], eax
$L93369:

; 593  : 		this->_Alval.construct(_Map[_Block] + _Newoff % _DEQUESIZ, _Val);

  00057	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0005a	8b 04 9a	 mov	 eax, DWORD PTR [edx+ebx*4]
  0005d	83 e7 03	 and	 edi, 3
  00060	8d 04 b8	 lea	 eax, DWORD PTR [eax+edi*4]
  00063	85 c0		 test	 eax, eax
  00065	5f		 pop	 edi
  00066	5b		 pop	 ebx
  00067	74 08		 je	 SHORT $L97019
  00069	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp]
  0006d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006f	89 10		 mov	 DWORD PTR [eax], edx
$L97019:

; 594  : 		++_Mysize;

  00071	ff 46 10	 inc	 DWORD PTR [esi+16]
  00074	5e		 pop	 esi

; 595  : 		}

  00075	c2 04 00	 ret	 4
?push_back@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAEXABQAVCPacket@@@Z ENDP ; std::deque<CPacket *,std::allocator<CPacket *> >::push_back
_TEXT	ENDS
PUBLIC	?push@?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAEXABQAVCPacket@@@Z ; std::queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >::push
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\queue
;	COMDAT ?push@?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAEXABQAVCPacket@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push@?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAEXABQAVCPacket@@@Z PROC NEAR ; std::queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >::push, COMDAT
; _this$ = ecx

; 66   : 		c.push_back(_Val);

  00000	e9 00 00 00 00	 jmp	 ?push_back@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAEXABQAVCPacket@@@Z ; std::deque<CPacket *,std::allocator<CPacket *> >::push_back
?push@?$queue@PAVCPacket@@V?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@@std@@QAEXABQAVCPacket@@@Z ENDP ; std::queue<CPacket *,std::deque<CPacket *,std::allocator<CPacket *> > >::push
_TEXT	ENDS
;	COMDAT xdata$x
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\tnetdef.h
xdata$x	SEGMENT
$T97071	DD	0ffffffffH
	DD	FLAT:$L97032
$T97068	DD	019930520H
	DD	01H
	DD	FLAT:$T97071
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tpatchsvr\session.cpp
xdata$x	ENDS
;	COMDAT ?Say@CSession@@UAEHPAVCPacket@@@Z
_TEXT	SEGMENT
_lock_object$ = -20					; size = 8
__$EHRec$ = -12						; size = 12
_pPacket$ = 8						; size = 4
?Say@CSession@@UAEHPAVCPacket@@@Z PROC NEAR		; CSession::Say, COMDAT
; _this$ = ecx

; 179  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?Say@CSession@@UAEHPAVCPacket@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 08	 sub	 esp, 8
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8b f1		 mov	 esi, ecx

; 180  : 	SMART_LOCKCS(&m_cs)

  0001c	8d 7e 18	 lea	 edi, DWORD PTR [esi+24]
  0001f	57		 push	 edi
  00020	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR _lock_object$[esp+32], OFFSET FLAT:??_7CCSLock@@6B@
  00028	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4
  0002e	89 7c 24 0c	 mov	 DWORD PTR _lock_object$[esp+32], edi

; 181  : 
; 182  : 	if( !m_bCanRecv ||
; 183  : 		!m_bValid ||
; 184  : 		INVALID_SOCKET == m_sock ||
; 185  : 		SendQueueFull())

  00032	8a 4e 0d	 mov	 cl, BYTE PTR [esi+13]
  00035	84 c9		 test	 cl, cl
  00037	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+36], 0
  0003f	b8 01 00 00 00	 mov	 eax, 1
  00044	74 1e		 je	 SHORT $L93055
  00046	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00049	85 c9		 test	 ecx, ecx
  0004b	74 17		 je	 SHORT $L93055
  0004d	83 7e 70 ff	 cmp	 DWORD PTR [esi+112], -1
  00051	74 11		 je	 SHORT $L93055
  00053	38 46 0c	 cmp	 BYTE PTR [esi+12], al
  00056	75 35		 jne	 SHORT $L97054
  00058	81 7e 6c 00 10
	00 00		 cmp	 DWORD PTR [esi+108], 4096 ; 00001000H
  0005f	76 2c		 jbe	 SHORT $L97054
  00061	88 46 14	 mov	 BYTE PTR [esi+20], al
$L93055:

; 186  : 	{
; 187  : 		delete pPacket;

  00064	8b 4c 24 20	 mov	 ecx, DWORD PTR _pPacket$[esp+24]
  00068	85 c9		 test	 ecx, ecx
  0006a	74 05		 je	 SHORT $L97028
  0006c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006e	50		 push	 eax
  0006f	ff 12		 call	 DWORD PTR [edx]
$L97028:

; 188  : 		return FALSE;

  00071	57		 push	 edi
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4
  00078	5f		 pop	 edi
  00079	33 c0		 xor	 eax, eax
  0007b	5e		 pop	 esi

; 194  : }

  0007c	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  00080	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00087	83 c4 14	 add	 esp, 20			; 00000014H
  0008a	c2 04 00	 ret	 4

; 181  : 
; 182  : 	if( !m_bCanRecv ||
; 183  : 		!m_bValid ||
; 184  : 		INVALID_SOCKET == m_sock ||
; 185  : 		SendQueueFull())

$L97054:

; 189  : 	}
; 190  : 
; 191  : 	m_qSEND.push(pPacket);

  0008d	8d 44 24 20	 lea	 eax, DWORD PTR _pPacket$[esp+24]
  00091	50		 push	 eax
  00092	8d 4e 5c	 lea	 ecx, DWORD PTR [esi+92]
  00095	e8 00 00 00 00	 call	 ?push_back@?$deque@PAVCPacket@@V?$allocator@PAVCPacket@@@std@@@std@@QAEXABQAVCPacket@@@Z ; std::deque<CPacket *,std::allocator<CPacket *> >::push_back

; 192  : 
; 193  : 	return Post();

  0009a	8b ce		 mov	 ecx, esi
  0009c	e8 00 00 00 00	 call	 ?Post@CSession@@QAEHXZ	; CSession::Post
  000a1	57		 push	 edi
  000a2	8b f0		 mov	 esi, eax
  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 194  : }

  000aa	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  000ae	5f		 pop	 edi
  000af	8b c6		 mov	 eax, esi
  000b1	5e		 pop	 esi
  000b2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000b9	83 c4 14	 add	 esp, 20			; 00000014H
  000bc	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L97032:
  00000	8d 4d ec	 lea	 ecx, DWORD PTR _lock_object$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CCSLock@@UAE@XZ	; CCSLock::~CCSLock
__ehhandler$?Say@CSession@@UAEHPAVCPacket@@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T97068
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Say@CSession@@UAEHPAVCPacket@@@Z ENDP			; CSession::Say
END
