; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\TUser.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??0CTUser@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTUser@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CTUser@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GtagTCHAR@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1tagTCHAR@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Say@CTUser@@UAEHPAVCPacket@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindCharacterBase@CTUser@@QAEPAUtagTCHAR@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?InsertCharacter@CTUser@@QAEXPAUtagTCHAR@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DeleteCharacter@CTUser@@QAEXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$vector@PAUtagTITEM@@V?$allocator@PAUtagTITEM@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?empty@?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop@?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAEAAPAUtagTCHAR@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAEXABQAUtagTCHAR@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAUtagTITEM@@V?$allocator@PAUtagTITEM@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$deque@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?empty@?$deque@KV?$allocator@K@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop_front@?$deque@KV?$allocator@K@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$deque@KV?$allocator@K@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE?AViterator@12@V312@ABQAUtagTCHAR@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buy@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEXPAPAUtagTCHAR@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEPAPAUtagTCHAR@@PAPAU3@IABQAU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Vector_val@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAE@V?$allocator@PAUtagTCHAR@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAUtagTCHAR@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE@PAPAUtagTCHAR@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEAAPAUtagTCHAR@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@PAUtagTITEM@@V?$allocator@PAUtagTITEM@@@std@@@std@@IAEXPAPAUtagTITEM@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAUtagTITEM@@@std@@QAEXPAPAUtagTITEM@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop_back@?$deque@KV?$allocator@K@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Deque_val@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@K@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@K@std@@QAEXPAKI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@K@std@@QAEXPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAK@std@@QAEXPAPAKI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAK@std@@QAEXPAPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Insert_n@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEXViterator@12@IABQAUtagTCHAR@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xlen@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAUtagTCHAR@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAUtagTCHAR@@@std@@QAEXPAPAUtagTCHAR@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@PAUtagTCHAR@@@std@@QAEPAPAUtagTCHAR@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Giterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEHABVconst_iterator@12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE@PAPAUtagTCHAR@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEABQAUtagTCHAR@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Deque_map@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@K@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAUtagTCHAR@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Gconst_iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEHABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@GIG@std@@YAXPAGIABGAAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagTCASHITEMSALE@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagTCASHITEMSALE@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagTCASHITEMSALE@@IU1@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@YAXPAUtagTCASHITEMSALE@@IABU1@AAV?$allocator@UtagTCASHITEMSALE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagMONREGEN@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagMONREGEN@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagMONREGEN@@IU1@V?$allocator@UtagMONREGEN@@@std@@@std@@YAXPAUtagMONREGEN@@IABU1@AAV?$allocator@UtagMONREGEN@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagLOTTERY@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagLOTTERY@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagLOTTERY@@IU1@V?$allocator@UtagLOTTERY@@@std@@@std@@YAXPAUtagLOTTERY@@IABU1@AAV?$allocator@UtagLOTTERY@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@GV?$allocator@G@std@@@std@@YAXPAG0AAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAGPAGV?$allocator@G@std@@@std@@YAPAGPAG00AAV?$allocator@G@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAGPAG@std@@YAPAGPAG00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@YAXPAUtagTCASHITEMSALE@@0AAV?$allocator@UtagTCASHITEMSALE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAUtagTCASHITEMSALE@@PAU1@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@YAPAUtagTCASHITEMSALE@@PAU1@00AAV?$allocator@UtagTCASHITEMSALE@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUtagTCASHITEMSALE@@PAU1@@std@@YAPAUtagTCASHITEMSALE@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@YAXPAUtagMONREGEN@@0AAV?$allocator@UtagMONREGEN@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAUtagMONREGEN@@PAU1@V?$allocator@UtagMONREGEN@@@std@@@std@@YAPAUtagMONREGEN@@PAU1@00AAV?$allocator@UtagMONREGEN@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUtagMONREGEN@@PAU1@@std@@YAPAUtagMONREGEN@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@YAXPAUtagLOTTERY@@0AAV?$allocator@UtagLOTTERY@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAUtagLOTTERY@@PAU1@V?$allocator@UtagLOTTERY@@@std@@@std@@YAPAUtagLOTTERY@@PAU1@00AAV?$allocator@UtagLOTTERY@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUtagLOTTERY@@PAU1@@std@@YAPAUtagLOTTERY@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$find@Viterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@PAUtagTCHAR@@@std@@YA?AViterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@0@V120@0ABQAUtagTCHAR@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$copy@PAPAUtagTCHAR@@PAPAU1@@std@@YAPAPAUtagTCHAR@@PAPAU1@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@YAXPAPAUtagTCHAR@@0AAV?$allocator@PAUtagTCHAR@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_fill_n@PAPAUtagTCHAR@@IPAU1@V?$allocator@PAUtagTCHAR@@@std@@@std@@YAXPAPAUtagTCHAR@@IABQAU1@AAV?$allocator@PAUtagTCHAR@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagTITEM@@V?$allocator@PAUtagTITEM@@@std@@@std@@YAXPAPAUtagTITEM@@0AAV?$allocator@PAUtagTITEM@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@K@std@@YAXPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAK@std@@YAXPAPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ucopy@PAPAUtagTCHAR@@@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEPAPAUtagTCHAR@@PAPAU2@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill@PAPAUtagTCHAR@@PAU1@@std@@YAXPAPAUtagTCHAR@@0ABQAU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$copy_backward@PAPAUtagTCHAR@@PAPAU1@@std@@YAPAPAUtagTCHAR@@PAPAU1@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAUtagTCHAR@@@std@@YAPAPAUtagTCHAR@@IPAPAU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0K@?$allocator@PAK@std@@QAE@ABV?$allocator@K@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@UtagTCASHITEMSALE@@@std@@QAEXPAUtagTCASHITEMSALE@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagTCASHITEMSALE@@@std@@QAEXPAUtagTCASHITEMSALE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@UtagMONREGEN@@@std@@QAEXPAUtagMONREGEN@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagMONREGEN@@@std@@QAEXPAUtagMONREGEN@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@UtagLOTTERY@@@std@@QAEXPAUtagLOTTERY@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagLOTTERY@@@std@@QAEXPAUtagLOTTERY@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill_n@PAGIG@std@@YAXPAGIABG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@GG@std@@YAPAGPAG00AAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagTCASHITEMSALE@@PAU1@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@YAPAUtagTCASHITEMSALE@@PAU1@00AAV?$allocator@UtagTCASHITEMSALE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagMONREGEN@@PAU1@V?$allocator@UtagMONREGEN@@@std@@@std@@YAPAUtagMONREGEN@@PAU1@00AAV?$allocator@UtagMONREGEN@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagLOTTERY@@PAU1@V?$allocator@UtagLOTTERY@@@std@@@std@@YAPAUtagLOTTERY@@PAU1@00AAV?$allocator@UtagLOTTERY@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagTCHAR@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTCHAR@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAPAUtagTCHAR@@PAPAU1@@std@@YAPAPAUtagTCHAR@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@YAXPAPAUtagTCHAR@@0AAV?$allocator@PAUtagTCHAR@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagTCHAR@@IPAU1@@std@@YAXPAPAUtagTCHAR@@IABQAU1@AAV?$allocator@PAUtagTCHAR@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagTITEM@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTITEM@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagTITEM@@V?$allocator@PAUtagTITEM@@@std@@@std@@YAXPAPAUtagTITEM@@0AAV?$allocator@PAUtagTITEM@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAPAUtagTCHAR@@PAPAU1@V?$allocator@PAUtagTCHAR@@@std@@@std@@YAPAPAUtagTCHAR@@PAPAU1@00AAV?$allocator@PAUtagTCHAR@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAPAUtagTCHAR@@PAPAU1@@std@@YAPAPAUtagTCHAR@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@UtagTCASHITEMSALE@@U1@@std@@YAXPAUtagTCASHITEMSALE@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagTCASHITEMSALE@@@std@@YAXPAUtagTCASHITEMSALE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@UtagMONREGEN@@U1@@std@@YAXPAUtagMONREGEN@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagMONREGEN@@@std@@YAXPAUtagMONREGEN@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@UtagLOTTERY@@U1@@std@@YAXPAUtagLOTTERY@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagLOTTERY@@@std@@YAXPAUtagLOTTERY@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill_n@PAPAUtagTCHAR@@IPAU1@@std@@YAXPAPAUtagTCHAR@@IABQAU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagTCHAR@@PAU1@@std@@YAPAPAUtagTCHAR@@PAPAU1@00AAV?$allocator@PAUtagTCHAR@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@G@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CAtlException@ATL@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __TI1?AVCAtlException@ATL@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA1?AVCAtlException@ATL@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVCAtlException@ATL@@@84
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVCAtlException@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUIAtlStringMgr@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CTUser@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?Say@CTUser@@UAEHPAVCPacket@@@Z			; CTUser::Say
EXTRN	?Say@CSession@@UAEHPAVCPacket@@@Z:NEAR		; CSession::Say
EXTRN	__imp__GetTickCount@0:NEAR
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tloginsvr\tuser.cpp
;	COMDAT ?Say@CTUser@@UAEHPAVCPacket@@@Z
_TEXT	SEGMENT
_pPacket$ = 8						; size = 4
?Say@CTUser@@UAEHPAVCPacket@@@Z PROC NEAR		; CTUser::Say, COMDAT
; _this$ = ecx

; 44   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 45   : 	m_dwSendTick = GetTickCount();

  00003	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0
  00009	89 86 0c 01 01
	00		 mov	 DWORD PTR [esi+65804], eax

; 46   : 	return CSession::Say(pPacket);

  0000f	8b 44 24 08	 mov	 eax, DWORD PTR _pPacket$[esp]
  00013	50		 push	 eax
  00014	8b ce		 mov	 ecx, esi
  00016	e8 00 00 00 00	 call	 ?Say@CSession@@UAEHPAVCPacket@@@Z ; CSession::Say
  0001b	5e		 pop	 esi

; 47   : }

  0001c	c2 04 00	 ret	 4
?Say@CTUser@@UAEHPAVCPacket@@@Z ENDP			; CTUser::Say
_TEXT	ENDS
PUBLIC	?size@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEIXZ ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?size@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::size, COMDAT
; _this$ = ecx

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L106244
  00007	33 c0		 xor	 eax, eax

; 517  : 		}

  00009	c3		 ret	 0
$L106244:

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  0000a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2

; 517  : 		}

  00012	c3		 ret	 0
?size@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::size
_TEXT	ENDS
PUBLIC	?empty@?$deque@KV?$allocator@K@std@@@std@@QBE_NXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::empty
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ?empty@?$deque@KV?$allocator@K@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$deque@KV?$allocator@K@std@@@std@@QBE_NXZ PROC NEAR ; std::deque<unsigned long,std::allocator<unsigned long> >::empty, COMDAT
; _this$ = ecx

; 502  : 		return (_Mysize == 0);

  00000	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00003	33 c0		 xor	 eax, eax
  00005	85 d2		 test	 edx, edx
  00007	0f 94 c0	 sete	 al

; 503  : 		}

  0000a	c3		 ret	 0
?empty@?$deque@KV?$allocator@K@std@@@std@@QBE_NXZ ENDP	; std::deque<unsigned long,std::allocator<unsigned long> >::empty
_TEXT	ENDS
PUBLIC	?capacity@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEIXZ ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::capacity
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?capacity@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::capacity, COMDAT
; _this$ = ecx

; 458  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L106252
  00007	33 c0		 xor	 eax, eax

; 459  : 		}

  00009	c3		 ret	 0
$L106252:

; 458  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  0000a	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2

; 459  : 		}

  00012	c3		 ret	 0
?capacity@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::capacity
_TEXT	ENDS
PUBLIC	??0?$allocator@PAUtagTCHAR@@@std@@QAE@XZ	; std::allocator<tagTCHAR *>::allocator<tagTCHAR *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@PAUtagTCHAR@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAUtagTCHAR@@@std@@QAE@XZ PROC NEAR	; std::allocator<tagTCHAR *>::allocator<tagTCHAR *>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@PAUtagTCHAR@@@std@@QAE@XZ ENDP		; std::allocator<tagTCHAR *>::allocator<tagTCHAR *>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAUtagTITEM@@@std@@QAEXPAPAUtagTITEM@@I@Z ; std::allocator<tagTITEM *>::deallocate
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Ogty
;	COMDAT ?deallocate@?$allocator@PAUtagTITEM@@@std@@QAEXPAPAUtagTITEM@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAUtagTITEM@@@std@@QAEXPAPAUtagTITEM@@I@Z PROC NEAR ; std::allocator<tagTITEM *>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@PAUtagTITEM@@@std@@QAEXPAPAUtagTITEM@@I@Z ENDP ; std::allocator<tagTITEM *>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@K@std@@QAE@XZ			; std::allocator<unsigned long>::allocator<unsigned long>
; Function compile flags: /Ogty
;	COMDAT ??0?$allocator@K@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@K@std@@QAE@XZ PROC NEAR			; std::allocator<unsigned long>::allocator<unsigned long>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@K@std@@QAE@XZ ENDP			; std::allocator<unsigned long>::allocator<unsigned long>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@K@std@@QAEXPAKI@Z	; std::allocator<unsigned long>::deallocate
; Function compile flags: /Ogty
;	COMDAT ?deallocate@?$allocator@K@std@@QAEXPAKI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@K@std@@QAEXPAKI@Z PROC NEAR	; std::allocator<unsigned long>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@K@std@@QAEXPAKI@Z ENDP		; std::allocator<unsigned long>::deallocate
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAK@std@@QAEXPAPAKI@Z	; std::allocator<unsigned long *>::deallocate
; Function compile flags: /Ogty
;	COMDAT ?deallocate@?$allocator@PAK@std@@QAEXPAPAKI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAK@std@@QAEXPAPAKI@Z PROC NEAR	; std::allocator<unsigned long *>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@PAK@std@@QAEXPAPAKI@Z ENDP	; std::allocator<unsigned long *>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@PAUtagTCHAR@@@std@@QAE@ABV01@@Z	; std::allocator<tagTCHAR *>::allocator<tagTCHAR *>
; Function compile flags: /Ogty
;	COMDAT ??0?$allocator@PAUtagTCHAR@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PAUtagTCHAR@@@std@@QAE@ABV01@@Z PROC NEAR ; std::allocator<tagTCHAR *>::allocator<tagTCHAR *>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@PAUtagTCHAR@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<tagTCHAR *>::allocator<tagTCHAR *>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAUtagTCHAR@@@std@@QAEXPAPAUtagTCHAR@@I@Z ; std::allocator<tagTCHAR *>::deallocate
; Function compile flags: /Ogty
;	COMDAT ?deallocate@?$allocator@PAUtagTCHAR@@@std@@QAEXPAPAUtagTCHAR@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAUtagTCHAR@@@std@@QAEXPAPAUtagTCHAR@@I@Z PROC NEAR ; std::allocator<tagTCHAR *>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@PAUtagTCHAR@@@std@@QAEXPAPAUtagTCHAR@@I@Z ENDP ; std::allocator<tagTCHAR *>::deallocate
_TEXT	ENDS
PUBLIC	??Yiterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAEAAV012@H@Z ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::iterator::operator+=
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Yiterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Yiterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::iterator::operator+=, COMDAT
; _this$ = ecx

; 255  : 			{	// increment by integer

  00000	8b c1		 mov	 eax, ecx

; 256  : 			this->_Myptr += _Off;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  0000d	01 10		 add	 DWORD PTR [eax], edx

; 257  : 			return (*this);
; 258  : 			}

  0000f	c2 04 00	 ret	 4
??Yiterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::iterator::operator+=
_TEXT	ENDS
PUBLIC	??0const_iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE@PAPAUtagTCHAR@@@Z ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::const_iterator::const_iterator
; Function compile flags: /Ogty
;	COMDAT ??0const_iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE@PAPAUtagTCHAR@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0const_iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE@PAPAUtagTCHAR@@@Z PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 73   : 		const_iterator(_Tptr _Ptr)

  00000	8b c1		 mov	 eax, ecx

; 74   : 			{	// construct with pointer _Ptr
; 75   : 			_Myptr = _Ptr;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 76   : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE@PAPAUtagTCHAR@@@Z ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEABQAUtagTCHAR@@XZ ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEABQAUtagTCHAR@@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEABQAUtagTCHAR@@XZ PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 80   : 
; 81   : 
; 82   : 			return (*_Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 83   : 			}

  00002	c3		 ret	 0
??Dconst_iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEABQAUtagTCHAR@@XZ ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	??0?$allocator@K@std@@QAE@ABV01@@Z		; std::allocator<unsigned long>::allocator<unsigned long>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@K@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@K@std@@QAE@ABV01@@Z PROC NEAR		; std::allocator<unsigned long>::allocator<unsigned long>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@K@std@@QAE@ABV01@@Z ENDP			; std::allocator<unsigned long>::allocator<unsigned long>
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAUtagTCHAR@@@std@@QBEIXZ	; std::allocator<tagTCHAR *>::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$allocator@PAUtagTCHAR@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAUtagTCHAR@@@std@@QBEIXZ PROC NEAR ; std::allocator<tagTCHAR *>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 159  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PAUtagTCHAR@@@std@@QBEIXZ ENDP	; std::allocator<tagTCHAR *>::max_size
_TEXT	ENDS
PUBLIC	??Gconst_iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEHABV012@@Z ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::const_iterator::operator-
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Gconst_iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEHABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Gconst_iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEHABV012@@Z PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::const_iterator::operator-, COMDAT
; _this$ = ecx

; 141  : 
; 142  : 
; 143  : 			return (_Myptr - _Right._Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	c1 f8 02	 sar	 eax, 2

; 144  : 			}

  0000b	c2 04 00	 ret	 4
??Gconst_iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEHABV012@@Z ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::const_iterator::operator-
_TEXT	ENDS
PUBLIC	??$_Destroy@K@std@@YAXPAK@Z			; std::_Destroy<unsigned long>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy@K@std@@YAXPAK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@K@std@@YAXPAK@Z PROC NEAR			; std::_Destroy<unsigned long>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@K@std@@YAXPAK@Z ENDP			; std::_Destroy<unsigned long>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAK@std@@YAXPAPAK@Z			; std::_Destroy<unsigned long *>
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy@PAK@std@@YAXPAPAK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAK@std@@YAXPAPAK@Z PROC NEAR		; std::_Destroy<unsigned long *>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAK@std@@YAXPAPAK@Z ENDP			; std::_Destroy<unsigned long *>
_TEXT	ENDS
PUBLIC	??$fill@PAPAUtagTCHAR@@PAU1@@std@@YAXPAPAUtagTCHAR@@0ABQAU1@@Z ; std::fill<tagTCHAR * *,tagTCHAR *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$fill@PAPAUtagTCHAR@@PAU1@@std@@YAXPAPAUtagTCHAR@@0ABQAU1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAPAUtagTCHAR@@PAU1@@std@@YAXPAPAUtagTCHAR@@0ABQAU1@@Z PROC NEAR ; std::fill<tagTCHAR * *,tagTCHAR *>, COMDAT

; 1135 : 	for (; _First != _Last; ++_First)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR __Last$[esp-4]
  00008	3b c1		 cmp	 eax, ecx
  0000a	74 11		 je	 SHORT $L105842
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$L105840:

; 1136 : 		*_First = _Val;

  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	3b c1		 cmp	 eax, ecx
  0001a	75 f5		 jne	 SHORT $L105840
  0001c	5e		 pop	 esi
$L105842:

; 1137 : 	}

  0001d	c3		 ret	 0
??$fill@PAPAUtagTCHAR@@PAU1@@std@@YAXPAPAUtagTCHAR@@0ABQAU1@@Z ENDP ; std::fill<tagTCHAR * *,tagTCHAR *>
_TEXT	ENDS
PUBLIC	??$_Allocate@PAUtagTCHAR@@@std@@YAPAPAUtagTCHAR@@IPAPAU1@@Z ; std::_Allocate<tagTCHAR *>
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Allocate@PAUtagTCHAR@@@std@@YAPAPAUtagTCHAR@@IPAPAU1@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAUtagTCHAR@@@std@@YAPAPAUtagTCHAR@@IPAPAU1@@Z PROC NEAR ; std::_Allocate<tagTCHAR *>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 35   : 	}

  00014	c3		 ret	 0
??$_Allocate@PAUtagTCHAR@@@std@@YAPAPAUtagTCHAR@@IPAPAU1@@Z ENDP ; std::_Allocate<tagTCHAR *>
_TEXT	ENDS
PUBLIC	??$?0K@?$allocator@PAK@std@@QAE@ABV?$allocator@K@1@@Z ; std::allocator<unsigned long *>::allocator<unsigned long *><unsigned long>
; Function compile flags: /Ogty
;	COMDAT ??$?0K@?$allocator@PAK@std@@QAE@ABV?$allocator@K@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0K@?$allocator@PAK@std@@QAE@ABV?$allocator@K@1@@Z PROC NEAR ; std::allocator<unsigned long *>::allocator<unsigned long *><unsigned long>, COMDAT
; _this$ = ecx

; 120  : 		allocator(const allocator<_Other>&)

  00000	8b c1		 mov	 eax, ecx

; 121  : 		{	// construct from a related allocator (do nothing)
; 122  : 		}

  00002	c2 04 00	 ret	 4
??$?0K@?$allocator@PAK@std@@QAE@ABV?$allocator@K@1@@Z ENDP ; std::allocator<unsigned long *>::allocator<unsigned long *><unsigned long>
_TEXT	ENDS
PUBLIC	??Eiterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAEAAV012@XZ ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::iterator::operator++
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Eiterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Eiterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::iterator::operator++, COMDAT
; _this$ = ecx

; 229  : 			{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 230  : 			++this->_Myptr;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 231  : 			return (*this);
; 232  : 			}

  00005	c3		 ret	 0
??Eiterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAEAAV012@XZ ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::iterator::operator++
_TEXT	ENDS
PUBLIC	??8const_iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBE_NABV012@@Z ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::const_iterator::operator==
; Function compile flags: /Ogty
;	COMDAT ??8const_iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8const_iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::const_iterator::operator==, COMDAT
; _this$ = ecx

; 153  : 
; 154  : 
; 155  : 			return (_Myptr == _Right._Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	f7 d8		 neg	 eax
  0000a	1b c0		 sbb	 eax, eax
  0000c	40		 inc	 eax

; 156  : 			}

  0000d	c2 04 00	 ret	 4
??8const_iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::const_iterator::operator==
_TEXT	ENDS
PUBLIC	??0CAtlException@ATL@@QAE@J@Z			; ATL::CAtlException::CAtlException
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlexcept.h
;	COMDAT ??0CAtlException@ATL@@QAE@J@Z
_TEXT	SEGMENT
_hr$ = 8						; size = 4
??0CAtlException@ATL@@QAE@J@Z PROC NEAR			; ATL::CAtlException::CAtlException, COMDAT
; _this$ = ecx

; 40   : 	{

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR _hr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 41   : 	}

  00008	c2 04 00	 ret	 4
??0CAtlException@ATL@@QAE@J@Z ENDP			; ATL::CAtlException::CAtlException
_TEXT	ENDS
PUBLIC	?AtlThrow@ATL@@YGXJ@Z				; ATL::AtlThrow
PUBLIC	__TI1?AVCAtlException@ATL@@
PUBLIC	__CTA1?AVCAtlException@ATL@@
PUBLIC	??_R0?AVCAtlException@ATL@@@8			; ATL::CAtlException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVCAtlException@ATL@@@84
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	__CxxThrowException@8:NEAR
;	COMDAT __TI1?AVCAtlException@ATL@@
xdata$x	SEGMENT
__TI1?AVCAtlException@ATL@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1?AVCAtlException@ATL@@
xdata$x	ENDS
;	COMDAT __CTA1?AVCAtlException@ATL@@
xdata$x	SEGMENT
__CTA1?AVCAtlException@ATL@@ DD 01H
	DD	FLAT:__CT??_R0?AVCAtlException@ATL@@@84
xdata$x	ENDS
;	COMDAT __CT??_R0?AVCAtlException@ATL@@@84
xdata$x	SEGMENT
__CT??_R0?AVCAtlException@ATL@@@84 DD 00H
	DD	FLAT:??_R0?AVCAtlException@ATL@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0?AVCAtlException@ATL@@@8
_DATA	SEGMENT
??_R0?AVCAtlException@ATL@@@8 DD FLAT:??_7type_info@@6B@ ; ATL::CAtlException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCAtlException@ATL@@', 00H
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT
$T106324 = 8						; size = 4
_hr$ = 8						; size = 4
?AtlThrow@ATL@@YGXJ@Z PROC NEAR				; ATL::AtlThrow, COMDAT

; 62   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );
; 63   : #ifdef _AFX
; 64   : 	if( hr == E_OUTOFMEMORY )
; 65   : 	{
; 66   : 		AfxThrowMemoryException();
; 67   : 	}
; 68   : 	else
; 69   : 	{
; 70   : 		AfxThrowOleException( hr );
; 71   : 	}
; 72   : #else
; 73   : 	throw CAtlException( hr );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _hr$[esp-4]
  00004	68 00 00 00 00	 push	 OFFSET FLAT:__TI1?AVCAtlException@ATL@@
  00009	8d 4c 24 08	 lea	 ecx, DWORD PTR $T106324[esp]
  0000d	51		 push	 ecx
  0000e	89 44 24 0c	 mov	 DWORD PTR $T106324[esp+4], eax
  00012	e8 00 00 00 00	 call	 __CxxThrowException@8
$L106331:
$L106330:
  00017	cc		 int	 3
?AtlThrow@ATL@@YGXJ@Z ENDP				; ATL::AtlThrow
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UtagTCHAR@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTCHAR@@0@Z ; std::_Ptr_cat<tagTCHAR>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$_Ptr_cat@UtagTCHAR@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTCHAR@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UtagTCHAR@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTCHAR@@0@Z PROC NEAR ; std::_Ptr_cat<tagTCHAR>, COMDAT

; 218  : 	{	// return pointer category from pointer to pointer arguments

  00000	51		 push	 ecx

; 219  : 	_Scalar_ptr_iterator_tag _Cat;
; 220  : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 221  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@UtagTCHAR@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTCHAR@@0@Z ENDP ; std::_Ptr_cat<tagTCHAR>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAPAUtagTCHAR@@PAPAU1@@std@@YAPAPAUtagTCHAR@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Copy_opt<tagTCHAR * *,tagTCHAR * *>
EXTRN	_memmove:NEAR
; Function compile flags: /Ogty
;	COMDAT ??$_Copy_opt@PAPAUtagTCHAR@@PAPAU1@@std@@YAPAPAUtagTCHAR@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_opt@PAPAUtagTCHAR@@PAPAU1@@std@@YAPAPAUtagTCHAR@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Copy_opt<tagTCHAR * *,tagTCHAR * *>, COMDAT

; 1031 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2

; 1032 : 	return ((_OutIt)::memmove(&*_Dest, &*_First,
; 1033 : 		_Off * sizeof (*_First)) + _Off);

  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 1034 : 	}

  00027	c3		 ret	 0
??$_Copy_opt@PAPAUtagTCHAR@@PAPAU1@@std@@YAPAPAUtagTCHAR@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_opt<tagTCHAR * *,tagTCHAR * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@YAXPAPAUtagTCHAR@@0AAV?$allocator@PAUtagTCHAR@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<tagTCHAR *,std::allocator<tagTCHAR *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy_range@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@YAXPAPAUtagTCHAR@@0AAV?$allocator@PAUtagTCHAR@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@YAXPAPAUtagTCHAR@@0AAV?$allocator@PAUtagTCHAR@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Destroy_range<tagTCHAR *,std::allocator<tagTCHAR *> >, COMDAT

; 234  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@YAXPAPAUtagTCHAR@@0AAV?$allocator@PAUtagTCHAR@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<tagTCHAR *,std::allocator<tagTCHAR *> >
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UtagTITEM@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTITEM@@0@Z ; std::_Ptr_cat<tagTITEM>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$_Ptr_cat@UtagTITEM@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTITEM@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UtagTITEM@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTITEM@@0@Z PROC NEAR ; std::_Ptr_cat<tagTITEM>, COMDAT

; 218  : 	{	// return pointer category from pointer to pointer arguments

  00000	51		 push	 ecx

; 219  : 	_Scalar_ptr_iterator_tag _Cat;
; 220  : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 221  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@UtagTITEM@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTITEM@@0@Z ENDP ; std::_Ptr_cat<tagTITEM>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@PAUtagTITEM@@V?$allocator@PAUtagTITEM@@@std@@@std@@YAXPAPAUtagTITEM@@0AAV?$allocator@PAUtagTITEM@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<tagTITEM *,std::allocator<tagTITEM *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy_range@PAUtagTITEM@@V?$allocator@PAUtagTITEM@@@std@@@std@@YAXPAPAUtagTITEM@@0AAV?$allocator@PAUtagTITEM@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@PAUtagTITEM@@V?$allocator@PAUtagTITEM@@@std@@@std@@YAXPAPAUtagTITEM@@0AAV?$allocator@PAUtagTITEM@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Destroy_range<tagTITEM *,std::allocator<tagTITEM *> >, COMDAT

; 234  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@PAUtagTITEM@@V?$allocator@PAUtagTITEM@@@std@@@std@@YAXPAPAUtagTITEM@@0AAV?$allocator@PAUtagTITEM@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<tagTITEM *,std::allocator<tagTITEM *> >
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAPAUtagTCHAR@@PAPAU1@@std@@YAPAPAUtagTCHAR@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Copy_backward_opt<tagTCHAR * *,tagTCHAR * *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAPAUtagTCHAR@@PAPAU1@@std@@YAPAPAUtagTCHAR@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_backward_opt@PAPAUtagTCHAR@@PAPAU1@@std@@YAPAPAUtagTCHAR@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Copy_backward_opt<tagTCHAR * *,tagTCHAR * *>, COMDAT

; 1059 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	c1 f8 02	 sar	 eax, 2

; 1060 : 	return ((_OutIt)memmove(&*_Dest - _Off, &*_First,
; 1061 : 		_Off * sizeof (*_First)));

  0000d	c1 e0 02	 shl	 eax, 2
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	8b 4c 24 14	 mov	 ecx, DWORD PTR __Dest$[esp+4]
  00016	2b c8		 sub	 ecx, eax
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 _memmove
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1062 : 	}

  00021	c3		 ret	 0
??$_Copy_backward_opt@PAPAUtagTCHAR@@PAPAU1@@std@@YAPAPAUtagTCHAR@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<tagTCHAR * *,tagTCHAR * *>
_TEXT	ENDS
PUBLIC	??$fill_n@PAPAUtagTCHAR@@IPAU1@@std@@YAXPAPAUtagTCHAR@@IABQAU1@@Z ; std::fill_n<tagTCHAR * *,unsigned int,tagTCHAR *>
; Function compile flags: /Ogty
;	COMDAT ??$fill_n@PAPAUtagTCHAR@@IPAU1@@std@@YAXPAPAUtagTCHAR@@IABQAU1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill_n@PAPAUtagTCHAR@@IPAU1@@std@@YAXPAPAUtagTCHAR@@IABQAU1@@Z PROC NEAR ; std::fill_n<tagTCHAR * *,unsigned int,tagTCHAR *>, COMDAT

; 1160 : 	for (; 0 < _Count; --_Count, ++_First)

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	76 14		 jbe	 SHORT $L106028
  00008	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  0000c	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00010	56		 push	 esi
$L106026:

; 1161 : 		*_First = _Val;

  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	49		 dec	 ecx
  00019	75 f6		 jne	 SHORT $L106026
  0001b	5e		 pop	 esi
$L106028:

; 1162 : 	}

  0001c	c3		 ret	 0
??$fill_n@PAPAUtagTCHAR@@IPAU1@@std@@YAXPAPAUtagTCHAR@@IABQAU1@@Z ENDP ; std::fill_n<tagTCHAR * *,unsigned int,tagTCHAR *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUtagTCHAR@@PAU1@@std@@YAPAPAUtagTCHAR@@PAPAU1@00AAV?$allocator@PAUtagTCHAR@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<tagTCHAR *,tagTCHAR *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninit_copy@PAUtagTCHAR@@PAU1@@std@@YAPAPAUtagTCHAR@@PAPAU1@00AAV?$allocator@PAUtagTCHAR@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PAUtagTCHAR@@PAU1@@std@@YAPAPAUtagTCHAR@@PAPAU1@00AAV?$allocator@PAUtagTCHAR@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_copy<tagTCHAR *,tagTCHAR *>, COMDAT

; 106  : 	size_t _Count = (size_t)(_Last - _First);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2

; 107  : 	return ((_Ty2 *)memmove(&*_Dest, &*_First,
; 108  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 109  : 	}

  00027	c3		 ret	 0
??$_Uninit_copy@PAUtagTCHAR@@PAU1@@std@@YAPAPAUtagTCHAR@@PAPAU1@00AAV?$allocator@PAUtagTCHAR@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<tagTCHAR *,tagTCHAR *>
_TEXT	ENDS
PUBLIC	?data@CStringData@ATL@@QAEPAXXZ			; ATL::CStringData::data
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT
?data@CStringData@ATL@@QAEPAXXZ PROC NEAR		; ATL::CStringData::data, COMDAT
; _this$ = ecx

; 66   : 		return (this+1);

  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 67   : 	}

  00003	c3		 ret	 0
?data@CStringData@ATL@@QAEPAXXZ ENDP			; ATL::CStringData::data
_TEXT	ENDS
PUBLIC	?IsLocked@CStringData@ATL@@QBE_NXZ		; ATL::CStringData::IsLocked
; Function compile flags: /Ogty
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT
?IsLocked@CStringData@ATL@@QBE_NXZ PROC NEAR		; ATL::CStringData::IsLocked, COMDAT
; _this$ = ecx

; 76   : 		return nRefs < 0;

  00000	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00003	33 c0		 xor	 eax, eax
  00005	85 d2		 test	 edx, edx
  00007	0f 9c c0	 setl	 al

; 77   : 	}

  0000a	c3		 ret	 0
?IsLocked@CStringData@ATL@@QBE_NXZ ENDP			; ATL::CStringData::IsLocked
_TEXT	ENDS
PUBLIC	?Release@CStringData@ATL@@QAEXXZ		; ATL::CStringData::Release
; Function compile flags: /Ogty
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT
?Release@CStringData@ATL@@QAEXXZ PROC NEAR		; ATL::CStringData::Release, COMDAT
; _this$ = ecx

; 93   : 		ATLASSERT( nRefs != 0 );
; 94   : 
; 95   : 		if( _InterlockedDecrement( &nRefs ) <= 0 )

  00000	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  00003	83 ca ff	 or	 edx, -1
  00006	f0 0f c1 10	 lock	  xadd	 DWORD PTR [eax], edx
  0000a	4a		 dec	 edx
  0000b	85 d2		 test	 edx, edx
  0000d	7f 0a		 jg	 SHORT $L73499

; 96   : 		{
; 97   : 			pStringMgr->Free( this );

  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	8b 10		 mov	 edx, DWORD PTR [eax]
  00013	51		 push	 ecx
  00014	8b c8		 mov	 ecx, eax
  00016	ff 52 04	 call	 DWORD PTR [edx+4]
$L73499:

; 98   : 		}
; 99   : 	}

  00019	c3		 ret	 0
?Release@CStringData@ATL@@QAEXXZ ENDP			; ATL::CStringData::Release
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC NEAR	; std::char_traits<char>::assign, COMDAT

; 331  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 332  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogty
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC NEAR		; std::char_traits<char>::length, COMDAT

; 352  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$L106373:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $L106373
  0000e	2b c2		 sub	 eax, edx

; 353  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
; Function compile flags: /Ogty
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::copy, COMDAT

; 358  : 		return ((_Elem *)::memcpy(_First1, _First2, _Count));

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR __First2$[esp]
  00009	57		 push	 edi
  0000a	8b 7c 24 0c	 mov	 edi, DWORD PTR __First1$[esp+4]
  0000e	8b c1		 mov	 eax, ecx
  00010	8b d7		 mov	 edx, edi
  00012	c1 e9 02	 shr	 ecx, 2
  00015	f3 a5		 rep movsd
  00017	8b c8		 mov	 ecx, eax
  00019	83 e1 03	 and	 ecx, 3
  0001c	f3 a4		 rep movsb
  0001e	5f		 pop	 edi
  0001f	8b c2		 mov	 eax, edx
  00021	5e		 pop	 esi

; 359  : 		}

  00022	c3		 ret	 0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
; Function compile flags: /Ogty
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::move, COMDAT

; 370  : 		return ((_Elem *)::memmove(_First1, _First2, _Count));

  00000	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1109 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1110 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?GetDefaultManager@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUIAtlStringMgr@2@XZ ; ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> >::GetDefaultManager
EXTRN	?g_strmgr@ATL@@3VCAtlStringMgr@1@A:BYTE		; ATL::g_strmgr
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlstr.h
;	COMDAT ?GetDefaultManager@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUIAtlStringMgr@2@XZ
_TEXT	SEGMENT
?GetDefaultManager@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUIAtlStringMgr@2@XZ PROC NEAR ; ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> >::GetDefaultManager, COMDAT

; 954  : 		return( &g_strmgr );

  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?g_strmgr@ATL@@3VCAtlStringMgr@1@A ; ATL::g_strmgr

; 955  : 	}

  00005	c3		 ret	 0
?GetDefaultManager@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUIAtlStringMgr@2@XZ ENDP ; ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> >::GetDefaultManager
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L106390
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  00009	c3		 ret	 0
$L106390:

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC NEAR		; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<char,0>::Attach
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::Attach, COMDAT
; _this$ = ecx

; 712  : 		m_pszData = static_cast< PXSTR >( pData->data() );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _pData$[esp-4]
  00004	83 c0 10	 add	 eax, 16			; 00000010H
  00007	89 01		 mov	 DWORD PTR [ecx], eax

; 713  : 	}

  00009	c2 04 00	 ret	 4
?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z ENDP ; ATL::CSimpleStringT<char,0>::Attach
_TEXT	ENDS
PUBLIC	?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<char,0>::GetData
; Function compile flags: /Ogty
;	COMDAT ?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT
?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ PROC NEAR ; ATL::CSimpleStringT<char,0>::GetData, COMDAT
; _this$ = ecx

; 731  : 		return( reinterpret_cast< CStringData* >( m_pszData )-1 );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 e8 10	 sub	 eax, 16			; 00000010H

; 732  : 	}

  00005	c3		 ret	 0
?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ ENDP ; ATL::CSimpleStringT<char,0>::GetData
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L106407
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  00009	c3		 ret	 0
$L106407:

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC NEAR	; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z	; ATL::CSimpleStringT<char,0>::SetLength
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_nLength$ = 8						; size = 4
?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::SetLength, COMDAT
; _this$ = ecx

; 790  : 		ATLASSERT( nLength >= 0 );
; 791  : 		ATLASSERT( nLength <= GetData()->nAllocLength );
; 792  : 
; 793  : 		if( nLength < 0 || nLength > GetData()->nAllocLength)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _nLength$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	7c 13		 jl	 SHORT $L104072
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	3b 42 f8	 cmp	 eax, DWORD PTR [edx-8]
  0000d	7f 0c		 jg	 SHORT $L104072

; 794  : 			AtlThrow(E_INVALIDARG);
; 795  : 			
; 796  : 		GetData()->nDataLength = nLength;

  0000f	89 42 f4	 mov	 DWORD PTR [edx-12], eax

; 797  : 		m_pszData[nLength] = 0;

  00012	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00014	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0

; 798  : 	}

  00018	c2 04 00	 ret	 4
$L104072:
  0001b	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00020	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L106422:
$L106421:
  00025	cc		 int	 3
?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ENDP	; ATL::CSimpleStringT<char,0>::SetLength
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1494 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi

; 1495 : 		if (_Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00001	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  00004	83 fe 10	 cmp	 esi, 16			; 00000010H
  00007	57		 push	 edi
  00008	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0000b	72 04		 jb	 SHORT $L106431
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	eb 02		 jmp	 SHORT $L106432
$L106431:
  00011	8b d0		 mov	 edx, eax
$L106432:
  00013	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00017	3b fa		 cmp	 edi, edx
  00019	72 17		 jb	 SHORT $L104090
  0001b	83 fe 10	 cmp	 esi, 16			; 00000010H
  0001e	72 02		 jb	 SHORT $L106439
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
$L106439:
  00022	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00025	03 c8		 add	 ecx, eax
  00027	3b cf		 cmp	 ecx, edi
  00029	76 07		 jbe	 SHORT $L104090
  0002b	5f		 pop	 edi

; 1497 : 		else
; 1498 : 			return (true);

  0002c	b0 01		 mov	 al, 1
  0002e	5e		 pop	 esi

; 1499 : 		}

  0002f	c2 04 00	 ret	 4
$L104090:
  00032	5f		 pop	 edi

; 1496 : 			return (false);	// don't ask

  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 1499 : 		}

  00036	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ	; ATL::CSimpleStringT<char,0>::Empty
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ
_TEXT	SEGMENT
?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ PROC NEAR	; ATL::CSimpleStringT<char,0>::Empty, COMDAT
; _this$ = ecx

; 421  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 422  : 		CStringData* pOldData = GetData();

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 423  : 		IAtlStringMgr* pStringMgr = pOldData->pStringMgr;
; 424  : 		if( pOldData->nDataLength == 0 )

  00005	8b 51 f4	 mov	 edx, DWORD PTR [ecx-12]
  00008	85 d2		 test	 edx, edx
  0000a	8d 41 f0	 lea	 eax, DWORD PTR [ecx-16]
  0000d	57		 push	 edi
  0000e	8b 38		 mov	 edi, DWORD PTR [eax]
  00010	74 4c		 je	 SHORT $L106473
  00012	53		 push	 ebx

; 425  : 		{
; 426  : 			return;
; 427  : 		}
; 428  : 
; 429  : 		if( pOldData->IsLocked() )

  00013	8b 58 0c	 mov	 ebx, DWORD PTR [eax+12]
  00016	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  00019	85 db		 test	 ebx, ebx
  0001b	5b		 pop	 ebx
  0001c	7d 20		 jge	 SHORT $L104188

; 430  : 		{
; 431  : 			// Don't reallocate a locked buffer that's shrinking
; 432  : 			SetLength( 0 );

  0001e	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00021	85 c0		 test	 eax, eax
  00023	7d 0a		 jge	 SHORT $L106457
  00025	68 57 00 07 80	 push	 -2147024809		; 80070057H
  0002a	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L106478:
$L106457:
  0002f	c7 41 f4 00 00
	00 00		 mov	 DWORD PTR [ecx-12], 0
  00036	8b 06		 mov	 eax, DWORD PTR [esi]
  00038	5f		 pop	 edi
  00039	c6 00 00	 mov	 BYTE PTR [eax], 0
  0003c	5e		 pop	 esi

; 439  : 		}
; 440  : 	}

  0003d	c3		 ret	 0
$L104188:

; 433  : 		}
; 434  : 		else
; 435  : 		{
; 436  : 			pOldData->Release();

  0003e	83 c9 ff	 or	 ecx, -1
  00041	f0 0f c1 0a	 lock	  xadd	 DWORD PTR [edx], ecx
  00045	49		 dec	 ecx
  00046	85 c9		 test	 ecx, ecx
  00048	7f 08		 jg	 SHORT $L106467
  0004a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004e	50		 push	 eax
  0004f	ff 52 04	 call	 DWORD PTR [edx+4]
$L106467:

; 437  : 			CStringData* pNewData = pStringMgr->GetNilString();

  00052	8b 07		 mov	 eax, DWORD PTR [edi]
  00054	8b cf		 mov	 ecx, edi
  00056	ff 50 0c	 call	 DWORD PTR [eax+12]

; 438  : 			Attach( pNewData );

  00059	83 c0 10	 add	 eax, 16			; 00000010H
  0005c	89 06		 mov	 DWORD PTR [esi], eax
$L106473:
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi

; 439  : 		}
; 440  : 	}

  00060	c3		 ret	 0
$L106477:
?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ ENDP		; ATL::CSimpleStringT<char,0>::Empty
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC NEAR		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 159  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC NEAR			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogty
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC NEAR		; std::_Allocate<char>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 35   : 	}

  0000d	c3		 ret	 0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
PUBLIC	?empty@?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QBE_NXZ ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::empty
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\queue
;	COMDAT ?empty@?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QBE_NXZ PROC NEAR ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::empty, COMDAT
; _this$ = ecx

; 36   : 		return (c.empty());

  00000	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00003	33 c0		 xor	 eax, eax
  00005	85 d2		 test	 edx, edx
  00007	0f 94 c0	 sete	 al

; 37   : 		}

  0000a	c3		 ret	 0
?empty@?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QBE_NXZ ENDP ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::empty
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAE@V?$allocator@PAUtagTCHAR@@@1@@Z ; std::_Vector_val<tagTCHAR *,std::allocator<tagTCHAR *> >::_Vector_val<tagTCHAR *,std::allocator<tagTCHAR *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0?$_Vector_val@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAE@V?$allocator@PAUtagTCHAR@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAE@V?$allocator@PAUtagTCHAR@@@1@@Z PROC NEAR ; std::_Vector_val<tagTCHAR *,std::allocator<tagTCHAR *> >::_Vector_val<tagTCHAR *,std::allocator<tagTCHAR *> >, COMDAT
; _this$ = ecx

; 21   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 22   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Vector_val@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAE@V?$allocator@PAUtagTCHAR@@@1@@Z ENDP ; std::_Vector_val<tagTCHAR *,std::allocator<tagTCHAR *> >::_Vector_val<tagTCHAR *,std::allocator<tagTCHAR *> >
_TEXT	ENDS
PUBLIC	??0iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE@PAPAUtagTCHAR@@@Z ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::iterator::iterator
; Function compile flags: /Ogty
;	COMDAT ??0iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE@PAPAUtagTCHAR@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE@PAPAUtagTCHAR@@@Z PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::iterator::iterator, COMDAT
; _this$ = ecx

; 215  : 			{	// construct with pointer _Ptr

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 216  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE@PAPAUtagTCHAR@@@Z ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??Diterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEAAPAUtagTCHAR@@XZ ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Diterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEAAPAUtagTCHAR@@XZ
_TEXT	SEGMENT
??Diterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEAAPAUtagTCHAR@@XZ PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::iterator::operator*, COMDAT
; _this$ = ecx

; 220  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 221  : 			}

  00002	c3		 ret	 0
??Diterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEAAPAUtagTCHAR@@XZ ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::iterator::operator*
_TEXT	ENDS
PUBLIC	??Hiterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBE?AV012@H@Z ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::iterator::operator+
; Function compile flags: /Ogty
;	COMDAT ??Hiterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Hiterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::iterator::operator+, COMDAT
; _this$ = ecx

; 262  : 			iterator _Tmp = *this;
; 263  : 			return (_Tmp += _Off);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 08	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00009	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000d	89 10		 mov	 DWORD PTR [eax], edx

; 264  : 			}

  0000f	c2 08 00	 ret	 8
??Hiterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBE?AV012@H@Z ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::iterator::operator+
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@K@std@@QAEXPAK@Z		; std::allocator<unsigned long>::destroy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?destroy@?$allocator@K@std@@QAEXPAK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@K@std@@QAEXPAK@Z PROC NEAR		; std::allocator<unsigned long>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@K@std@@QAEXPAK@Z ENDP		; std::allocator<unsigned long>::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAK@std@@QAEXPAPAK@Z	; std::allocator<unsigned long *>::destroy
; Function compile flags: /Ogty
;	COMDAT ?destroy@?$allocator@PAK@std@@QAEXPAPAK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAK@std@@QAEXPAPAK@Z PROC NEAR	; std::allocator<unsigned long *>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAK@std@@QAEXPAPAK@Z ENDP		; std::allocator<unsigned long *>::destroy
_TEXT	ENDS
PUBLIC	?max_size@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEIXZ ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?max_size@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::max_size, COMDAT
; _this$ = ecx

; 521  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 522  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAUtagTCHAR@@@std@@QAEPAPAUtagTCHAR@@I@Z ; std::allocator<tagTCHAR *>::allocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@PAUtagTCHAR@@@std@@QAEPAPAUtagTCHAR@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAUtagTCHAR@@@std@@QAEPAPAUtagTCHAR@@I@Z PROC NEAR ; std::allocator<tagTCHAR *>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 138  : 		}

  00014	c2 04 00	 ret	 4
?allocate@?$allocator@PAUtagTCHAR@@@std@@QAEPAPAUtagTCHAR@@I@Z ENDP ; std::allocator<tagTCHAR *>::allocate
_TEXT	ENDS
PUBLIC	??Giterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEHABVconst_iterator@12@@Z ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::iterator::operator-
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Giterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEHABVconst_iterator@12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Giterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEHABVconst_iterator@12@@Z PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::iterator::operator-, COMDAT
; _this$ = ecx

; 279  : 			return ((const_iterator)*this - _Right);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	c1 f8 02	 sar	 eax, 2

; 280  : 			}

  0000b	c2 04 00	 ret	 4
??Giterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBEHABVconst_iterator@12@@Z ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::iterator::operator-
_TEXT	ENDS
PUBLIC	??0?$_Deque_map@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z ; std::_Deque_map<unsigned long,std::allocator<unsigned long> >::_Deque_map<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ??0?$_Deque_map@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Deque_map@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z PROC NEAR ; std::_Deque_map<unsigned long,std::allocator<unsigned long> >::_Deque_map<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 21   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 22   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Deque_map@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z ENDP ; std::_Deque_map<unsigned long,std::allocator<unsigned long> >::_Deque_map<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??$copy@PAPAUtagTCHAR@@PAPAU1@@std@@YAPAPAUtagTCHAR@@PAPAU1@00@Z ; std::copy<tagTCHAR * *,tagTCHAR * *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$copy@PAPAUtagTCHAR@@PAPAU1@@std@@YAPAPAUtagTCHAR@@PAPAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$copy@PAPAUtagTCHAR@@PAPAU1@@std@@YAPAPAUtagTCHAR@@PAPAU1@00@Z PROC NEAR ; std::copy<tagTCHAR * *,tagTCHAR * *>, COMDAT

; 1040 : 	return (_Copy_opt(_First, _Last, _Dest, _Ptr_cat(_First, _Dest)));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 1041 : 	}

  00027	c3		 ret	 0
??$copy@PAPAUtagTCHAR@@PAPAU1@@std@@YAPAPAUtagTCHAR@@PAPAU1@00@Z ENDP ; std::copy<tagTCHAR * *,tagTCHAR * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@YAXPAPAUtagTCHAR@@0AAV?$allocator@PAUtagTCHAR@@@0@@Z ; std::_Destroy_range<tagTCHAR *,std::allocator<tagTCHAR *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy_range@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@YAXPAPAUtagTCHAR@@0AAV?$allocator@PAUtagTCHAR@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@YAXPAPAUtagTCHAR@@0AAV?$allocator@PAUtagTCHAR@@@0@@Z PROC NEAR ; std::_Destroy_range<tagTCHAR *,std::allocator<tagTCHAR *> >, COMDAT

; 217  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 218  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@YAXPAPAUtagTCHAR@@0AAV?$allocator@PAUtagTCHAR@@@0@@Z ENDP ; std::_Destroy_range<tagTCHAR *,std::allocator<tagTCHAR *> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@PAUtagTITEM@@V?$allocator@PAUtagTITEM@@@std@@@std@@YAXPAPAUtagTITEM@@0AAV?$allocator@PAUtagTITEM@@@0@@Z ; std::_Destroy_range<tagTITEM *,std::allocator<tagTITEM *> >
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy_range@PAUtagTITEM@@V?$allocator@PAUtagTITEM@@@std@@@std@@YAXPAPAUtagTITEM@@0AAV?$allocator@PAUtagTITEM@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@PAUtagTITEM@@V?$allocator@PAUtagTITEM@@@std@@@std@@YAXPAPAUtagTITEM@@0AAV?$allocator@PAUtagTITEM@@@0@@Z PROC NEAR ; std::_Destroy_range<tagTITEM *,std::allocator<tagTITEM *> >, COMDAT

; 217  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 218  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@PAUtagTITEM@@V?$allocator@PAUtagTITEM@@@std@@@std@@YAXPAPAUtagTITEM@@0AAV?$allocator@PAUtagTITEM@@@0@@Z ENDP ; std::_Destroy_range<tagTITEM *,std::allocator<tagTITEM *> >
_TEXT	ENDS
PUBLIC	??$copy_backward@PAPAUtagTCHAR@@PAPAU1@@std@@YAPAPAUtagTCHAR@@PAPAU1@00@Z ; std::copy_backward<tagTCHAR * *,tagTCHAR * *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$copy_backward@PAPAUtagTCHAR@@PAPAU1@@std@@YAPAPAUtagTCHAR@@PAPAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$copy_backward@PAPAUtagTCHAR@@PAPAU1@@std@@YAPAPAUtagTCHAR@@PAPAU1@00@Z PROC NEAR ; std::copy_backward<tagTCHAR * *,tagTCHAR * *>, COMDAT

; 1068 : 	return (_Copy_backward_opt(_First, _Last, _Dest,
; 1069 : 		_Ptr_cat(_First, _Dest)));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	c1 f8 02	 sar	 eax, 2
  0000d	c1 e0 02	 shl	 eax, 2
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	8b 4c 24 14	 mov	 ecx, DWORD PTR __Dest$[esp+4]
  00016	2b c8		 sub	 ecx, eax
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 _memmove
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1070 : 	}

  00021	c3		 ret	 0
??$copy_backward@PAPAUtagTCHAR@@PAPAU1@@std@@YAPAPAUtagTCHAR@@PAPAU1@00@Z ENDP ; std::copy_backward<tagTCHAR * *,tagTCHAR * *>
_TEXT	ENDS
PUBLIC	??9const_iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBE_NABV012@@Z ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::const_iterator::operator!=
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??9const_iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9const_iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::const_iterator::operator!=, COMDAT
; _this$ = ecx

; 160  : 			return (!(*this == _Right));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Right$[esp-4]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]
  00009	33 c9		 xor	 ecx, ecx
  0000b	3b c6		 cmp	 eax, esi
  0000d	0f 95 c1	 setne	 cl
  00010	8a c1		 mov	 al, cl
  00012	5e		 pop	 esi

; 161  : 			}

  00013	c2 04 00	 ret	 4
??9const_iterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::const_iterator::operator!=
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUtagTCHAR@@IPAU1@@std@@YAXPAPAUtagTCHAR@@IABQAU1@AAV?$allocator@PAUtagTCHAR@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<tagTCHAR *,unsigned int,tagTCHAR *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninit_fill_n@PAUtagTCHAR@@IPAU1@@std@@YAXPAPAUtagTCHAR@@IABQAU1@AAV?$allocator@PAUtagTCHAR@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_fill_n@PAUtagTCHAR@@IPAU1@@std@@YAXPAPAUtagTCHAR@@IABQAU1@AAV?$allocator@PAUtagTCHAR@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_fill_n<tagTCHAR *,unsigned int,tagTCHAR *>, COMDAT

; 237  : 	fill_n(_First, _Count, _Val);

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  0000a	76 10		 jbe	 SHORT $L106623
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$L106621:
  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	49		 dec	 ecx
  00019	75 f6		 jne	 SHORT $L106621
  0001b	5e		 pop	 esi
$L106623:

; 238  : 	}

  0001c	c3		 ret	 0
??$_Uninit_fill_n@PAUtagTCHAR@@IPAU1@@std@@YAXPAPAUtagTCHAR@@IABQAU1@AAV?$allocator@PAUtagTCHAR@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<tagTCHAR *,unsigned int,tagTCHAR *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@PAPAUtagTCHAR@@PAPAU1@V?$allocator@PAUtagTCHAR@@@std@@@std@@YAPAPAUtagTCHAR@@PAPAU1@00AAV?$allocator@PAUtagTCHAR@@@0@@Z ; std::_Uninitialized_copy<tagTCHAR * *,tagTCHAR * *,std::allocator<tagTCHAR *> >
; Function compile flags: /Ogty
;	COMDAT ??$_Uninitialized_copy@PAPAUtagTCHAR@@PAPAU1@V?$allocator@PAUtagTCHAR@@@std@@@std@@YAPAPAUtagTCHAR@@PAPAU1@00AAV?$allocator@PAUtagTCHAR@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAPAUtagTCHAR@@PAPAU1@V?$allocator@PAUtagTCHAR@@@std@@@std@@YAPAPAUtagTCHAR@@PAPAU1@00AAV?$allocator@PAUtagTCHAR@@@0@@Z PROC NEAR ; std::_Uninitialized_copy<tagTCHAR * *,tagTCHAR * *,std::allocator<tagTCHAR *> >, COMDAT

; 127  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 128  : 		_Ptr_cat(_First, _Dest)));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 129  : 	}

  00027	c3		 ret	 0
??$_Uninitialized_copy@PAPAUtagTCHAR@@PAPAU1@V?$allocator@PAUtagTCHAR@@@std@@@std@@YAPAPAUtagTCHAR@@PAPAU1@00AAV?$allocator@PAUtagTCHAR@@@0@@Z ENDP ; std::_Uninitialized_copy<tagTCHAR * *,tagTCHAR * *,std::allocator<tagTCHAR *> >
_TEXT	ENDS
PUBLIC	??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT
_pStringMgr$ = 8					; size = 4
??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>, COMDAT
; _this$ = ecx

; 210  : 	explicit CSimpleStringT( IAtlStringMgr* pStringMgr ) throw()

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 211  : 	{
; 212  : 		ATLASSERT( pStringMgr != NULL );
; 213  : 		CStringData* pData = pStringMgr->GetNilString();

  00003	8b 4c 24 08	 mov	 ecx, DWORD PTR _pStringMgr$[esp]
  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	ff 50 0c	 call	 DWORD PTR [eax+12]

; 214  : 		Attach( pData );

  0000c	83 c0 10	 add	 eax, 16			; 00000010H
  0000f	89 06		 mov	 DWORD PTR [esi], eax

; 215  : 	}

  00011	8b c6		 mov	 eax, esi
  00013	5e		 pop	 esi
  00014	c2 04 00	 ret	 4
??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ENDP ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>
_TEXT	ENDS
PUBLIC	??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ		; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>
; Function compile flags: /Ogty
;	COMDAT ??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ PROC NEAR		; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>, COMDAT
; _this$ = ecx

; 263  : 		CStringData* pData = GetData();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 e8 10	 sub	 eax, 16			; 00000010H

; 264  : 		pData->Release();

  00005	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00008	83 ca ff	 or	 edx, -1
  0000b	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0000f	4a		 dec	 edx
  00010	85 d2		 test	 edx, edx
  00012	7f 08		 jg	 SHORT $L106660
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	8b 11		 mov	 edx, DWORD PTR [ecx]
  00018	50		 push	 eax
  00019	ff 52 04	 call	 DWORD PTR [edx+4]
$L106660:

; 265  : 	}

  0001c	c3		 ret	 0
??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ ENDP		; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC NEAR ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 34   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 35   : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogty
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $L106675
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1476 : 		}

  00014	c2 04 00	 ret	 4

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$L106675:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 1476 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1114 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1115 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1116 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC NEAR	; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 138  : 		}

  0000d	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::begin
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?begin@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::begin, COMDAT
; _this$ = ecx

; 463  : 		return (iterator(_Myfirst));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 464  : 		}

  00009	c2 04 00	 ret	 4
?begin@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::end
; Function compile flags: /Ogty
;	COMDAT ?end@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::end, COMDAT
; _this$ = ecx

; 473  : 		return (iterator(_Mylast));

  00000	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 474  : 		}

  00009	c2 04 00	 ret	 4
?end@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::end
_TEXT	ENDS
PUBLIC	??A?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAEAAPAUtagTCHAR@@I@Z ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::operator[]
; Function compile flags: /Ogty
;	COMDAT ??A?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAEAAPAUtagTCHAR@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAEAAPAUtagTCHAR@@I@Z PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::operator[], COMDAT
; _this$ = ecx

; 555  : 		return (*(begin() + _Pos));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pos$[esp-4]
  00007	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 556  : 		}

  0000a	c2 04 00	 ret	 4
??A?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAEAAPAUtagTCHAR@@I@Z ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::operator[]
_TEXT	ENDS
PUBLIC	?pop_front@?$deque@KV?$allocator@K@std@@@std@@QAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::pop_front
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ?pop_front@?$deque@KV?$allocator@K@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?pop_front@?$deque@KV?$allocator@K@std@@@std@@QAEXXZ PROC NEAR ; std::deque<unsigned long,std::allocator<unsigned long> >::pop_front, COMDAT
; _this$ = ecx

; 571  : 		if (!empty())

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	85 c0		 test	 eax, eax
  00005	74 27		 je	 SHORT $L105196

; 572  : 			{	// something to erase, do it
; 573  : 			size_type _Block = _Myoff / _DEQUESIZ;
; 574  : 			this->_Alval.destroy(_Map[_Block] + _Myoff % _DEQUESIZ);
; 575  : 			if (_Mapsize * _DEQUESIZ <= ++_Myoff)

  00007	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0000a	57		 push	 edi
  0000b	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  0000e	42		 inc	 edx
  0000f	c1 e7 02	 shl	 edi, 2
  00012	3b fa		 cmp	 edi, edx
  00014	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  00017	5f		 pop	 edi
  00018	77 07		 ja	 SHORT $L105195

; 576  : 				_Myoff = 0;

  0001a	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$L105195:

; 577  : 			if (--_Mysize == 0)

  00021	48		 dec	 eax
  00022	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00025	75 07		 jne	 SHORT $L105196

; 578  : 				_Myoff = 0;

  00027	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$L105196:

; 579  : 			}
; 580  : 		}

  0002e	c3		 ret	 0
?pop_front@?$deque@KV?$allocator@K@std@@@std@@QAEXXZ ENDP ; std::deque<unsigned long,std::allocator<unsigned long> >::pop_front
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEXPAPAUtagTCHAR@@0@Z ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Destroy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?_Destroy@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEXPAPAUtagTCHAR@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEXPAPAUtagTCHAR@@0@Z PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Destroy, COMDAT
; _this$ = ecx

; 787  : 		_Destroy_range(_First, _Last, this->_Alval);
; 788  : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEXPAPAUtagTCHAR@@0@Z ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEXXZ ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Tidy
; Function compile flags: /Ogty
;	COMDAT ?_Tidy@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEXXZ PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Tidy, COMDAT
; _this$ = ecx

; 791  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 792  : 		if (_Myfirst != 0)

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L106776

; 793  : 			{	// something to free, destroy and deallocate it
; 794  : 			_Destroy(_Myfirst, _Mylast);
; 795  : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L106776:

; 796  : 			}
; 797  : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 798  : 		}

  00029	c3		 ret	 0
?_Tidy@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEXXZ ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@PAUtagTITEM@@V?$allocator@PAUtagTITEM@@@std@@@std@@IAEXPAPAUtagTITEM@@0@Z ; std::vector<tagTITEM *,std::allocator<tagTITEM *> >::_Destroy
; Function compile flags: /Ogty
;	COMDAT ?_Destroy@?$vector@PAUtagTITEM@@V?$allocator@PAUtagTITEM@@@std@@@std@@IAEXPAPAUtagTITEM@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAUtagTITEM@@V?$allocator@PAUtagTITEM@@@std@@@std@@IAEXPAPAUtagTITEM@@0@Z PROC NEAR ; std::vector<tagTITEM *,std::allocator<tagTITEM *> >::_Destroy, COMDAT
; _this$ = ecx

; 787  : 		_Destroy_range(_First, _Last, this->_Alval);
; 788  : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PAUtagTITEM@@V?$allocator@PAUtagTITEM@@@std@@@std@@IAEXPAPAUtagTITEM@@0@Z ENDP ; std::vector<tagTITEM *,std::allocator<tagTITEM *> >::_Destroy
_TEXT	ENDS
PUBLIC	?pop_back@?$deque@KV?$allocator@K@std@@@std@@QAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::pop_back
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ?pop_back@?$deque@KV?$allocator@K@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?pop_back@?$deque@KV?$allocator@K@std@@@std@@QAEXXZ PROC NEAR ; std::deque<unsigned long,std::allocator<unsigned long> >::pop_back, COMDAT
; _this$ = ecx

; 599  : 		if (!empty())

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	85 c0		 test	 eax, eax
  00005	74 0d		 je	 SHORT $L105279

; 600  : 			{	// something to erase, do it
; 601  : 			size_type _Newoff = _Mysize + _Myoff - 1;
; 602  : 			size_type _Block = _Newoff / _DEQUESIZ;
; 603  : 			if (_Mapsize <= _Block)
; 604  : 				_Block -= _Mapsize;
; 605  : 			this->_Alval.destroy(_Map[_Block] + _Newoff % _DEQUESIZ);
; 606  : 			if (--_Mysize == 0)

  00007	48		 dec	 eax
  00008	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000b	75 07		 jne	 SHORT $L105279

; 607  : 				_Myoff = 0;

  0000d	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$L105279:

; 608  : 			}
; 609  : 		}

  00014	c3		 ret	 0
?pop_back@?$deque@KV?$allocator@K@std@@@std@@QAEXXZ ENDP ; std::deque<unsigned long,std::allocator<unsigned long> >::pop_back
_TEXT	ENDS
PUBLIC	??0?$_Deque_val@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z ; std::_Deque_val<unsigned long,std::allocator<unsigned long> >::_Deque_val<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogty
;	COMDAT ??0?$_Deque_val@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Deque_val@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z PROC NEAR ; std::_Deque_val<unsigned long,std::allocator<unsigned long> >::_Deque_val<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 40   : 		{	// construct allocator and base from _Al

  00000	8b c1		 mov	 eax, ecx

; 41   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Deque_val@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z ENDP ; std::_Deque_val<unsigned long,std::allocator<unsigned long> >::_Deque_val<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??$find@Viterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@PAUtagTCHAR@@@std@@YA?AViterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@0@V120@0ABQAUtagTCHAR@@@Z ; std::find<std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::iterator,tagTCHAR *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\algorithm
;	COMDAT ??$find@Viterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@PAUtagTCHAR@@@std@@YA?AViterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@0@V120@0ABQAUtagTCHAR@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Val$ = 20						; size = 4
??$find@Viterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@PAUtagTCHAR@@@std@@YA?AViterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@0@V120@0ABQAUtagTCHAR@@@Z PROC NEAR ; std::find<std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::iterator,tagTCHAR *>, COMDAT

; 30   : 	for (; _First != _Last; ++_First)

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 0c	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	3b c8		 cmp	 ecx, eax
  0000a	74 18		 je	 SHORT $L106833
  0000c	8b 54 24 10	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	8b 12		 mov	 edx, DWORD PTR [edx]
$L106812:

; 31   : 		if (*_First == _Val)

  00012	39 11		 cmp	 DWORD PTR [ecx], edx
  00014	74 07		 je	 SHORT $L106832
  00016	83 c1 04	 add	 ecx, 4
  00019	3b c8		 cmp	 ecx, eax
  0001b	75 f5		 jne	 SHORT $L106812
$L106832:

; 32   : 			break;
; 33   : 	return (_First);

  0001d	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00021	89 08		 mov	 DWORD PTR [eax], ecx

; 34   : 	}

  00023	c3		 ret	 0
$L106833:

; 32   : 			break;
; 33   : 	return (_First);

  00024	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00028	89 08		 mov	 DWORD PTR [eax], ecx

; 34   : 	}

  0002a	c3		 ret	 0
??$find@Viterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@PAUtagTCHAR@@@std@@YA?AViterator@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@0@V120@0ABQAUtagTCHAR@@@Z ENDP ; std::find<std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::iterator,tagTCHAR *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_fill_n@PAPAUtagTCHAR@@IPAU1@V?$allocator@PAUtagTCHAR@@@std@@@std@@YAXPAPAUtagTCHAR@@IABQAU1@AAV?$allocator@PAUtagTCHAR@@@0@@Z ; std::_Uninitialized_fill_n<tagTCHAR * *,unsigned int,tagTCHAR *,std::allocator<tagTCHAR *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninitialized_fill_n@PAPAUtagTCHAR@@IPAU1@V?$allocator@PAUtagTCHAR@@@std@@@std@@YAXPAPAUtagTCHAR@@IABQAU1@AAV?$allocator@PAUtagTCHAR@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_fill_n@PAPAUtagTCHAR@@IPAU1@V?$allocator@PAUtagTCHAR@@@std@@@std@@YAXPAPAUtagTCHAR@@IABQAU1@AAV?$allocator@PAUtagTCHAR@@@0@@Z PROC NEAR ; std::_Uninitialized_fill_n<tagTCHAR * *,unsigned int,tagTCHAR *,std::allocator<tagTCHAR *> >, COMDAT

; 256  : 	_Uninit_fill_n(_First, _Count, _Val, _Al,
; 257  : 		_Ptr_cat(_First, _First));

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  0000a	76 10		 jbe	 SHORT $L106857
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$L106855:
  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	49		 dec	 ecx
  00019	75 f6		 jne	 SHORT $L106855
  0001b	5e		 pop	 esi
$L106857:

; 258  : 	}

  0001c	c3		 ret	 0
??$_Uninitialized_fill_n@PAPAUtagTCHAR@@IPAU1@V?$allocator@PAUtagTCHAR@@@std@@@std@@YAXPAPAUtagTCHAR@@IABQAU1@AAV?$allocator@PAUtagTCHAR@@@0@@Z ENDP ; std::_Uninitialized_fill_n<tagTCHAR * *,unsigned int,tagTCHAR *,std::allocator<tagTCHAR *> >
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAPAUtagTCHAR@@@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEPAPAUtagTCHAR@@PAPAU2@00@Z ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Ucopy<tagTCHAR * *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??$_Ucopy@PAPAUtagTCHAR@@@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEPAPAUtagTCHAR@@PAPAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAPAUtagTCHAR@@@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEPAPAUtagTCHAR@@PAPAU2@00@Z PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Ucopy<tagTCHAR * *>, COMDAT
; _this$ = ecx

; 802  : 		{	// copy initializing [_First, _Last), using allocator
; 803  : 		return (_Uninitialized_copy(_First, _Last,
; 804  : 			_Ptr, this->_Alval));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Ptr$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 805  : 		}

  00027	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAPAUtagTCHAR@@@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEPAPAUtagTCHAR@@PAPAU2@00@Z ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Ucopy<tagTCHAR * *>
_TEXT	ENDS
PUBLIC	??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >, COMDAT
; _this$ = ecx

; 796  : 	{

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_strmgr@ATL@@3VCAtlStringMgr@1@A
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_strmgr@ATL@@3VCAtlStringMgr@1@A ; ATL::g_strmgr
  0000d	ff 50 0c	 call	 DWORD PTR [eax+12]
  00010	83 c0 10	 add	 eax, 16			; 00000010H
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 797  : 	}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c3		 ret	 0
??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
_TEXT	ENDS
PUBLIC	??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
; Function compile flags: /Ogty
;	COMDAT ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >, COMDAT
; _this$ = ecx

; 963  : 	}

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 e8 10	 sub	 eax, 16			; 00000010H
  00005	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00008	83 ca ff	 or	 edx, -1
  0000b	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0000f	4a		 dec	 edx
  00010	85 d2		 test	 edx, edx
  00012	7f 08		 jg	 SHORT $L106921
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	8b 11		 mov	 edx, DWORD PTR [ecx]
  00018	50		 push	 eax
  00019	ff 52 04	 call	 DWORD PTR [edx+4]
$L106921:
  0001c	c3		 ret	 0
??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1510 : 		if (!_Built)

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Built$[esp-4]
  00004	84 c0		 test	 al, al
  00006	53		 push	 ebx
  00007	55		 push	 ebp
  00008	8b 6c 24 10	 mov	 ebp, DWORD PTR __Newsize$[esp+4]
  0000c	8b d9		 mov	 ebx, ecx
  0000e	74 2f		 je	 SHORT $L106931

; 1511 : 			;
; 1512 : 		else if (_BUF_SIZE <= _Myres)

  00010	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  00014	72 29		 jb	 SHORT $L106931

; 1513 : 			{	// copy any leftovers to small buffer and deallocate
; 1514 : 			_Elem *_Ptr = _Bx._Ptr;
; 1515 : 			if (0 < _Newsize)

  00016	85 ed		 test	 ebp, ebp
  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	57		 push	 edi
  0001c	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  0001f	76 14		 jbe	 SHORT $L106929
  00021	56		 push	 esi

; 1516 : 				_Traits::copy(_Bx._Buf, _Ptr, _Newsize);

  00022	8b cd		 mov	 ecx, ebp
  00024	8b d1		 mov	 edx, ecx
  00026	c1 e9 02	 shr	 ecx, 2
  00029	8b f0		 mov	 esi, eax
  0002b	f3 a5		 rep movsd
  0002d	8b ca		 mov	 ecx, edx
  0002f	83 e1 03	 and	 ecx, 3
  00032	f3 a4		 rep movsb
  00034	5e		 pop	 esi
$L106929:

; 1517 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4
  0003e	5f		 pop	 edi
$L106931:

; 1518 : 			}
; 1519 : 		_Myres = _BUF_SIZE - 1;
; 1520 : 		_Eos(_Newsize);

  0003f	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00042	c7 43 18 0f 00
	00 00		 mov	 DWORD PTR [ebx+24], 15	; 0000000fH
  00049	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0004e	5d		 pop	 ebp
  0004f	5b		 pop	 ebx

; 1521 : 		}

  00050	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
EXTRN	?_Xran@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xran
; Function compile flags: /Ogty
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 792  : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp

; 793  : 		if (_Mysize < _Off)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	39 6e 14	 cmp	 DWORD PTR [esi+20], ebp
  0000b	57		 push	 edi
  0000c	73 05		 jae	 SHORT $L103754

; 794  : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L103754:

; 795  : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c5		 sub	 eax, ebp
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $L103755

; 796  : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$L103755:

; 797  : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 47		 jbe	 SHORT $L106997

; 798  : 			{	// move elements down
; 799  : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 800  : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0002c	53		 push	 ebx
  0002d	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  00030	72 04		 jb	 SHORT $L106963
  00032	8b 13		 mov	 edx, DWORD PTR [ebx]
  00034	eb 02		 jmp	 SHORT $L106964
$L106963:
  00036	8b d3		 mov	 edx, ebx
$L106964:
  00038	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0003b	72 04		 jb	 SHORT $L106970
  0003d	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0003f	eb 02		 jmp	 SHORT $L106971
$L106970:
  00041	8b cb		 mov	 ecx, ebx
$L106971:
  00043	2b c7		 sub	 eax, edi

; 803  : 			}
; 804  : 		return (*this);

  00045	03 d5		 add	 edx, ebp
  00047	50		 push	 eax
  00048	03 d7		 add	 edx, edi
  0004a	52		 push	 edx
  0004b	03 cd		 add	 ecx, ebp
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 _memmove
  00053	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00056	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00059	2b c7		 sub	 eax, edi
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005e	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00061	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00064	72 02		 jb	 SHORT $L106994

; 801  : 			size_type _Newsize = _Mysize - _Count;
; 802  : 			_Eos(_Newsize);

  00066	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$L106994:
  00068	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0
  0006c	5b		 pop	 ebx
$L106997:
  0006d	5f		 pop	 edi

; 803  : 			}
; 804  : 		return (*this);

  0006e	8b c6		 mov	 eax, esi
  00070	5e		 pop	 esi
  00071	5d		 pop	 ebp

; 805  : 		}

  00072	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T107204 DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
$T107206 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L107004
$T107207 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L107002
$T107205 DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T107206
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:$T107207
$T107198 DD	019930520H
	DD	04H
	DD	FLAT:$T107204
	DD	02H
	DD	FLAT:$T107205
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1444 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1445 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	8b d8		 mov	 ebx, eax
  00022	83 cb 0f	 or	 ebx, 15			; 0000000fH

; 1446 : 		if (max_size() < _Newres)

  00025	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00028	57		 push	 edi
  00029	8b f1		 mov	 esi, ecx
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00031	76 04		 jbe	 SHORT $L104080

; 1447 : 			_Newres = _Newsize;	// undo roundup if too big

  00033	8b d8		 mov	 ebx, eax

; 1448 : 		else if (_Newres / 3 < _Myres / 2

  00035	eb 22		 jmp	 SHORT $L104082
$L104080:

; 1449 : 			&& _Myres <= max_size() - _Myres / 2)

  00037	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  0003a	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0003f	f7 e3		 mul	 ebx
  00041	8b cf		 mov	 ecx, edi
  00043	d1 e9		 shr	 ecx, 1
  00045	d1 ea		 shr	 edx, 1
  00047	3b d1		 cmp	 edx, ecx
  00049	73 0e		 jae	 SHORT $L104082
  0004b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00050	2b c1		 sub	 eax, ecx
  00052	3b f8		 cmp	 edi, eax
  00054	77 03		 ja	 SHORT $L104082

; 1450 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00056	8d 1c 39	 lea	 ebx, DWORD PTR [ecx+edi]
$L104082:

; 1451 : 		_Elem *_Ptr;
; 1452 : 
; 1453 : 		_TRY_BEGIN
; 1454 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00059	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  0005c	51		 push	 ecx
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00064	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00069	8b d0		 mov	 edx, eax
  0006b	83 c4 04	 add	 esp, 4
  0006e	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
  00071	eb 29		 jmp	 SHORT $L104084
$L107002:

; 1455 : 		_CATCH_ALL
; 1456 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  00073	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00076	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 1457 : 			_TRY_BEGIN
; 1458 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00079	40		 inc	 eax
  0007a	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0007d	50		 push	 eax
  0007e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00082	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00087	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0008a	83 c4 04	 add	 esp, 4

; 1462 : 			_CATCH_END
; 1463 : 		_CATCH_END

  0008d	b8 00 00 00 00	 mov	 eax, $L107199
  00092	c3		 ret	 0
$L107199:
  00093	8b 5d e8	 mov	 ebx, DWORD PTR __Newres$[ebp]
  00096	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00099	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$L104084:

; 1464 : 
; 1465 : 		if (0 < _Oldlen)

  0009c	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  0009f	85 c9		 test	 ecx, ecx
  000a1	76 24		 jbe	 SHORT $L107121

; 1466 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  000a3	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000a7	72 05		 jb	 SHORT $L107118
  000a9	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000ac	eb 03		 jmp	 SHORT $L107119
$L107118:
  000ae	83 c6 04	 add	 esi, 4
$L107119:
  000b1	8b c1		 mov	 eax, ecx
  000b3	c1 e9 02	 shr	 ecx, 2
  000b6	8b fa		 mov	 edi, edx
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb
  000c1	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000c4	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
$L107121:

; 1467 : 		_Tidy(true);

  000c7	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000cb	72 12		 jb	 SHORT $L107157
  000cd	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000d0	51		 push	 ecx
  000d1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d6	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000d9	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000dc	83 c4 04	 add	 esp, 4
$L107157:

; 1468 : 		_Bx._Ptr = _Ptr;
; 1469 : 		_Myres = _Newres;
; 1470 : 		_Eos(_Oldlen);

  000df	83 fb 10	 cmp	 ebx, 16			; 00000010H
  000e2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000e5	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e8	89 10		 mov	 DWORD PTR [eax], edx
  000ea	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  000ed	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  000f0	72 02		 jb	 SHORT $L107192
  000f2	8b c2		 mov	 eax, edx
$L107192:

; 1471 : 		}

  000f4	5f		 pop	 edi
  000f5	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  000f9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fc	5e		 pop	 esi
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00104	5b		 pop	 ebx
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c2 08 00	 ret	 8
$L107004:

; 1459 : 			_CATCH_ALL
; 1460 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010b	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0010e	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00112	72 0c		 jb	 SHORT $L107096
  00114	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00117	52		 push	 edx
  00118	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0011d	83 c4 04	 add	 esp, 4
$L107096:

; 1461 : 			_RERAISE;

  00120	6a 00		 push	 0
  00122	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00129	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00130	6a 00		 push	 0
  00132	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00136	e8 00 00 00 00	 call	 __CxxThrowException@8
$L107209:
$L107203:
  0013b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T107198
  00005	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?FindCharacterBase@CTUser@@QAEPAUtagTCHAR@@K@Z	; CTUser::FindCharacterBase
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tloginsvr\tuser.cpp
;	COMDAT ?FindCharacterBase@CTUser@@QAEPAUtagTCHAR@@K@Z
_TEXT	SEGMENT
_pCharID$ = 8						; size = 4
?FindCharacterBase@CTUser@@QAEPAUtagTCHAR@@K@Z PROC NEAR ; CTUser::FindCharacterBase, COMDAT
; _this$ = ecx

; 56   : {

  00000	56		 push	 esi
  00001	8b b1 30 01 01
	00		 mov	 esi, DWORD PTR [ecx+65840]
  00007	57		 push	 edi

; 57   : 	for(DWORD i=0; i < m_vCHAR.size(); i++)

  00008	8b 7c 24 0c	 mov	 edi, DWORD PTR _pCharID$[esp+4]
  0000c	33 d2		 xor	 edx, edx
  0000e	8b ff		 npad	 2
$L104983:
  00010	85 f6		 test	 esi, esi
  00012	74 31		 je	 SHORT $L104985
  00014	8b 81 34 01 01
	00		 mov	 eax, DWORD PTR [ecx+65844]
  0001a	2b c6		 sub	 eax, esi
  0001c	c1 f8 02	 sar	 eax, 2
  0001f	3b d0		 cmp	 edx, eax
  00021	73 22		 jae	 SHORT $L104985
  00023	8b 81 30 01 01
	00		 mov	 eax, DWORD PTR [ecx+65840]
  00029	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]

; 58   : 	{
; 59   : 		if( m_vCHAR[i]->m_dwCharID  == pCharID )

  0002c	8b 00		 mov	 eax, DWORD PTR [eax]
  0002e	39 38		 cmp	 DWORD PTR [eax], edi
  00030	74 03		 je	 SHORT $L107333

; 57   : 	for(DWORD i=0; i < m_vCHAR.size(); i++)

  00032	42		 inc	 edx
  00033	eb db		 jmp	 SHORT $L104983
$L107333:

; 60   : 			return m_vCHAR[i];

  00035	8b 89 30 01 01
	00		 mov	 ecx, DWORD PTR [ecx+65840]
  0003b	5f		 pop	 edi
  0003c	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  0003f	8b 00		 mov	 eax, DWORD PTR [eax]
  00041	5e		 pop	 esi

; 64   : }

  00042	c2 04 00	 ret	 4
$L104985:
  00045	5f		 pop	 edi
  00046	5e		 pop	 esi

; 61   : 	}
; 62   : 
; 63   : 	return NULL;

  00047	33 c0		 xor	 eax, eax

; 64   : }

  00049	c2 04 00	 ret	 4
?FindCharacterBase@CTUser@@QAEPAUtagTCHAR@@K@Z ENDP	; CTUser::FindCharacterBase
_TEXT	ENDS
PUBLIC	?pop@?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAEXXZ ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::pop
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\queue
;	COMDAT ?pop@?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?pop@?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAEXXZ PROC NEAR ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::pop, COMDAT
; _this$ = ecx

; 71   : 		c.pop_front();

  00000	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00003	85 c0		 test	 eax, eax
  00005	74 27		 je	 SHORT $L107346
  00007	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0000a	57		 push	 edi
  0000b	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  0000e	42		 inc	 edx
  0000f	c1 e7 02	 shl	 edi, 2
  00012	3b fa		 cmp	 edi, edx
  00014	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  00017	5f		 pop	 edi
  00018	77 07		 ja	 SHORT $L107345
  0001a	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$L107345:
  00021	48		 dec	 eax
  00022	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  00025	75 07		 jne	 SHORT $L107346
  00027	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$L107346:

; 72   : 		}

  0002e	c3		 ret	 0
?pop@?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAEXXZ ENDP ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::pop
_TEXT	ENDS
PUBLIC	??1?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE@XZ ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::~vector<tagTCHAR *,std::allocator<tagTCHAR *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??1?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE@XZ PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::~vector<tagTCHAR *,std::allocator<tagTCHAR *> >, COMDAT
; _this$ = ecx

; 387  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 388  : 		_Tidy();

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L107363
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L107363:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 389  : 		}

  00029	c3		 ret	 0
??1?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE@XZ ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::~vector<tagTCHAR *,std::allocator<tagTCHAR *> >
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE?AViterator@12@V312@@Z ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::erase
; Function compile flags: /Ogty
;	COMDAT ?erase@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE?AViterator@12@V312@@Z PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::erase, COMDAT
; _this$ = ecx

; 723  : 		{	// erase element at where

  00000	56		 push	 esi
  00001	57		 push	 edi

; 724  : 		copy(_ITER_BASE(_Where) + 1, _Mylast, _ITER_BASE(_Where));

  00002	8b 7c 24 10	 mov	 edi, DWORD PTR __Where$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000b	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  0000e	2b c8		 sub	 ecx, eax
  00010	c1 f9 02	 sar	 ecx, 2
  00013	c1 e1 02	 shl	 ecx, 2
  00016	51		 push	 ecx
  00017	50		 push	 eax
  00018	57		 push	 edi
  00019	e8 00 00 00 00	 call	 _memmove

; 725  : 		_Destroy(_Mylast - 1, _Mylast);
; 726  : 		--_Mylast;

  0001e	83 46 08 fc	 add	 DWORD PTR [esi+8], -4	; fffffffcH

; 727  : 		return (_Where);

  00022	8b 44 24 18	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+16]
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	89 38		 mov	 DWORD PTR [eax], edi
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi

; 728  : 		}

  0002d	c2 08 00	 ret	 8
?erase@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE?AViterator@12@V312@@Z ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::erase
_TEXT	ENDS
PUBLIC	?clear@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAEXXZ ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::clear
; Function compile flags: /Ogty
;	COMDAT ?clear@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAEXXZ PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::clear, COMDAT
; _this$ = ecx

; 743  : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 744  : 		_Tidy();

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L107401
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L107401:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 745  : 		}

  00029	c3		 ret	 0
?clear@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAEXXZ ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::clear
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@PAUtagTITEM@@V?$allocator@PAUtagTITEM@@@std@@@std@@IAEXXZ ; std::vector<tagTITEM *,std::allocator<tagTITEM *> >::_Tidy
; Function compile flags: /Ogty
;	COMDAT ?_Tidy@?$vector@PAUtagTITEM@@V?$allocator@PAUtagTITEM@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAUtagTITEM@@V?$allocator@PAUtagTITEM@@@std@@@std@@IAEXXZ PROC NEAR ; std::vector<tagTITEM *,std::allocator<tagTITEM *> >::_Tidy, COMDAT
; _this$ = ecx

; 791  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 792  : 		if (_Myfirst != 0)

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L107406

; 793  : 			{	// something to free, destroy and deallocate it
; 794  : 			_Destroy(_Myfirst, _Mylast);
; 795  : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L107406:

; 796  : 			}
; 797  : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 798  : 		}

  00029	c3		 ret	 0
?_Tidy@?$vector@PAUtagTITEM@@V?$allocator@PAUtagTITEM@@@std@@@std@@IAEXXZ ENDP ; std::vector<tagTITEM *,std::allocator<tagTITEM *> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$deque@KV?$allocator@K@std@@@std@@QAE@XZ	; std::deque<unsigned long,std::allocator<unsigned long> >::deque<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ??0?$deque@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$deque@KV?$allocator@K@std@@@std@@QAE@XZ PROC NEAR	; std::deque<unsigned long,std::allocator<unsigned long> >::deque<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 327  : 		{	// construct empty deque

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00007	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0000d	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 328  : 		}

  00010	c3		 ret	 0
??0?$deque@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::deque<unsigned long,std::allocator<unsigned long> >::deque<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$deque@KV?$allocator@K@std@@@std@@IAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
; Function compile flags: /Ogty
;	COMDAT ?_Tidy@?$deque@KV?$allocator@K@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$deque@KV?$allocator@K@std@@@std@@IAEXXZ PROC NEAR ; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy, COMDAT
; _this$ = ecx

; 950  : 		{	// free all storage

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 951  : 		while (!empty())

  00004	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00007	33 db		 xor	 ebx, ebx
  00009	3b c3		 cmp	 eax, ebx
  0000b	74 1a		 je	 SHORT $L105201
  0000d	8d 49 00	 npad	 3
$L105200:

; 952  : 			pop_back();

  00010	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00013	3b c3		 cmp	 eax, ebx
  00015	74 0b		 je	 SHORT $L107461
  00017	48		 dec	 eax
  00018	3b c3		 cmp	 eax, ebx
  0001a	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0001d	75 03		 jne	 SHORT $L107461
  0001f	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
$L107461:
  00022	39 5e 10	 cmp	 DWORD PTR [esi+16], ebx
  00025	75 e9		 jne	 SHORT $L105200
$L105201:
  00027	57		 push	 edi

; 953  : 		for (size_type _Count = _Mapsize; 0 < _Count; )

  00028	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0002b	3b fb		 cmp	 edi, ebx
  0002d	76 1a		 jbe	 SHORT $L105205
  0002f	90		 npad	 1
$L105204:

; 954  : 			{	// free storage for a block and destroy pointer
; 955  : 			if (*(_Map + --_Count) != 0)

  00030	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00033	8b 44 b8 fc	 mov	 eax, DWORD PTR [eax+edi*4-4]
  00037	4f		 dec	 edi
  00038	3b c3		 cmp	 eax, ebx
  0003a	74 09		 je	 SHORT $L107466

; 956  : 				this->_Alval.deallocate(*(_Map + _Count), _DEQUESIZ);

  0003c	50		 push	 eax
  0003d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00042	83 c4 04	 add	 esp, 4
$L107466:

; 953  : 		for (size_type _Count = _Mapsize; 0 < _Count; )

  00045	3b fb		 cmp	 edi, ebx
  00047	77 e7		 ja	 SHORT $L105204
$L105205:

; 957  : 			this->_Almap.destroy(_Map + _Count);
; 958  : 			}
; 959  : 
; 960  : 		if (_Map)

  00049	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004c	3b c3		 cmp	 eax, ebx
  0004e	5f		 pop	 edi
  0004f	74 09		 je	 SHORT $L107477

; 961  : 			this->_Almap.deallocate(_Map, _Mapsize);	// free storage for map

  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00057	83 c4 04	 add	 esp, 4
$L107477:

; 962  : 		_Mapsize = 0;

  0005a	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 963  : 		_Map = 0;

  0005d	89 5e 04	 mov	 DWORD PTR [esi+4], ebx
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx

; 964  : 		}

  00062	c3		 ret	 0
?_Tidy@?$deque@KV?$allocator@K@std@@@std@@IAEXXZ ENDP	; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEPAPAUtagTCHAR@@PAPAU3@IABQAU3@@Z ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Ufill
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?_Ufill@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEPAPAUtagTCHAR@@PAPAU3@IABQAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEPAPAUtagTCHAR@@PAPAU3@IABQAU3@@Z PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Ufill, COMDAT
; _this$ = ecx

; 877  : 		{	// copy initializing _Count * _Val, using allocator

  00000	56		 push	 esi

; 878  : 		_Uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

  00001	8b 74 24 0c	 mov	 esi, DWORD PTR __Count$[esp]
  00005	85 f6		 test	 esi, esi
  00007	57		 push	 edi
  00008	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  0000c	8b c7		 mov	 eax, edi
  0000e	76 12		 jbe	 SHORT $L107518
  00010	8b 54 24 14	 mov	 edx, DWORD PTR __Val$[esp+4]
  00014	8b ce		 mov	 ecx, esi
  00016	53		 push	 ebx
$L107512:
  00017	8b 1a		 mov	 ebx, DWORD PTR [edx]
  00019	89 18		 mov	 DWORD PTR [eax], ebx
  0001b	83 c0 04	 add	 eax, 4
  0001e	49		 dec	 ecx
  0001f	75 f6		 jne	 SHORT $L107512
  00021	5b		 pop	 ebx
$L107518:

; 879  : 		return (_Ptr + _Count);

  00022	8d 04 b7	 lea	 eax, DWORD PTR [edi+esi*4]
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 880  : 		}

  00027	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEPAPAUtagTCHAR@@PAPAU3@IABQAU3@@Z ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Ufill
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 456  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 457  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $L107556
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$L107556:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 458  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xlen
; Function compile flags: /Ogty
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1480 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	56		 push	 esi

; 1481 : 		if (max_size() < _Newsize)

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR __Newsize$[esp+4]
  00006	83 fe fe	 cmp	 esi, -2			; fffffffeH
  00009	8b e9		 mov	 ebp, ecx
  0000b	76 05		 jbe	 SHORT $L103763

; 1482 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L103763:

; 1483 : 		if (_Myres < _Newsize)

  00012	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00015	3b c6		 cmp	 eax, esi
  00017	73 19		 jae	 SHORT $L103764

; 1484 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0001c	50		 push	 eax
  0001d	56		 push	 esi
  0001e	8b cd		 mov	 ecx, ebp
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c0		 xor	 eax, eax
  00027	3b c6		 cmp	 eax, esi
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5d		 pop	 ebp

; 1491 : 		}

  0002f	c2 08 00	 ret	 8
$L103764:

; 1485 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	8a 4c 24 10	 mov	 cl, BYTE PTR __Trim$[esp+4]
  00036	84 c9		 test	 cl, cl
  00038	74 5c		 je	 SHORT $L103766
  0003a	83 fe 10	 cmp	 esi, 16			; 00000010H
  0003d	73 57		 jae	 SHORT $L103766
  0003f	53		 push	 ebx

; 1486 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1487 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  00040	8b 5d 14	 mov	 ebx, DWORD PTR [ebp+20]
  00043	3b f3		 cmp	 esi, ebx
  00045	73 02		 jae	 SHORT $L107576
  00047	8b de		 mov	 ebx, esi
$L107576:
  00049	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004c	72 2b		 jb	 SHORT $L107631
  0004e	85 db		 test	 ebx, ebx
  00050	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00053	57		 push	 edi
  00054	8d 7d 04	 lea	 edi, DWORD PTR [ebp+4]
  00057	76 16		 jbe	 SHORT $L107629
  00059	8b cb		 mov	 ecx, ebx
  0005b	8b d1		 mov	 edx, ecx
  0005d	c1 e9 02	 shr	 ecx, 2
  00060	8b f0		 mov	 esi, eax
  00062	f3 a5		 rep movsd
  00064	8b ca		 mov	 ecx, edx
  00066	83 e1 03	 and	 ecx, 3
  00069	f3 a4		 rep movsb
  0006b	8b 74 24 14	 mov	 esi, DWORD PTR __Newsize$[esp+12]
$L107629:
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00075	83 c4 04	 add	 esp, 4
  00078	5f		 pop	 edi
$L107631:
  00079	89 5d 14	 mov	 DWORD PTR [ebp+20], ebx

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  0007c	33 c0		 xor	 eax, eax
  0007e	c7 45 18 0f 00
	00 00		 mov	 DWORD PTR [ebp+24], 15	; 0000000fH
  00085	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0008a	3b c6		 cmp	 eax, esi
  0008c	5b		 pop	 ebx
  0008d	1b c0		 sbb	 eax, eax
  0008f	5e		 pop	 esi
  00090	f7 d8		 neg	 eax
  00092	5d		 pop	 ebp

; 1491 : 		}

  00093	c2 08 00	 ret	 8
$L103766:

; 1488 : 		else if (_Newsize == 0)

  00096	85 f6		 test	 esi, esi
  00098	75 23		 jne	 SHORT $L107667

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

  0009a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0009d	89 75 14	 mov	 DWORD PTR [ebp+20], esi
  000a0	72 14		 jb	 SHORT $L107663
  000a2	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000a5	33 c0		 xor	 eax, eax
  000a7	3b c6		 cmp	 eax, esi
  000a9	1b c0		 sbb	 eax, eax
  000ab	5e		 pop	 esi
  000ac	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
  000b0	f7 d8		 neg	 eax
  000b2	5d		 pop	 ebp

; 1491 : 		}

  000b3	c2 08 00	 ret	 8

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

$L107663:
  000b6	83 c5 04	 add	 ebp, 4
  000b9	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
$L107667:

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000bd	33 c0		 xor	 eax, eax
  000bf	3b c6		 cmp	 eax, esi
  000c1	1b c0		 sbb	 eax, eax
  000c3	5e		 pop	 esi
  000c4	f7 d8		 neg	 eax
  000c6	5d		 pop	 ebp

; 1491 : 		}

  000c7	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?DeleteCharacter@CTUser@@QAEXK@Z		; CTUser::DeleteCharacter
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tloginsvr\tuser.cpp
;	COMDAT ?DeleteCharacter@CTUser@@QAEXK@Z
_TEXT	SEGMENT
_pCharID$ = 8						; size = 4
?DeleteCharacter@CTUser@@QAEXK@Z PROC NEAR		; CTUser::DeleteCharacter, COMDAT
; _this$ = ecx

; 75   : 	LPTCHARACTER pChar = FindCharacterBase(pCharID);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _pCharID$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ?FindCharacterBase@CTUser@@QAEPAUtagTCHAR@@K@Z ; CTUser::FindCharacterBase

; 76   : 
; 77   : 	if(pChar != NULL)

  0000d	85 c0		 test	 eax, eax
  0000f	74 46		 je	 SHORT $L107778

; 78   : 	{
; 79   : 		vector<LPTCHARACTER>::iterator where = find(m_vCHAR.begin(), m_vCHAR.end(), pChar);

  00011	8b 96 34 01 01
	00		 mov	 edx, DWORD PTR [esi+65844]
  00017	8b 8e 30 01 01
	00		 mov	 ecx, DWORD PTR [esi+65840]
  0001d	3b ca		 cmp	 ecx, edx
  0001f	74 0b		 je	 SHORT $L107782
$L107735:
  00021	39 01		 cmp	 DWORD PTR [ecx], eax
  00023	74 07		 je	 SHORT $L107784
  00025	83 c1 04	 add	 ecx, 4
  00028	3b ca		 cmp	 ecx, edx
  0002a	75 f5		 jne	 SHORT $L107735
$L107784:
$L107782:

; 80   :         m_vCHAR.erase( where);	

  0002c	8b 96 34 01 01
	00		 mov	 edx, DWORD PTR [esi+65844]
  00032	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00035	2b d0		 sub	 edx, eax
  00037	c1 fa 02	 sar	 edx, 2
  0003a	c1 e2 02	 shl	 edx, 2
  0003d	52		 push	 edx
  0003e	50		 push	 eax
  0003f	51		 push	 ecx
  00040	e8 00 00 00 00	 call	 _memmove
  00045	8b 86 34 01 01
	00		 mov	 eax, DWORD PTR [esi+65844]
  0004b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00051	89 86 34 01 01
	00		 mov	 DWORD PTR [esi+65844], eax
$L107778:
  00057	5e		 pop	 esi

; 81   : 	}
; 82   : 	
; 83   : }

  00058	c2 04 00	 ret	 4
?DeleteCharacter@CTUser@@QAEXK@Z ENDP			; CTUser::DeleteCharacter
_TEXT	ENDS
PUBLIC	??1?$vector@PAUtagTITEM@@V?$allocator@PAUtagTITEM@@@std@@@std@@QAE@XZ ; std::vector<tagTITEM *,std::allocator<tagTITEM *> >::~vector<tagTITEM *,std::allocator<tagTITEM *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??1?$vector@PAUtagTITEM@@V?$allocator@PAUtagTITEM@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAUtagTITEM@@V?$allocator@PAUtagTITEM@@@std@@@std@@QAE@XZ PROC NEAR ; std::vector<tagTITEM *,std::allocator<tagTITEM *> >::~vector<tagTITEM *,std::allocator<tagTITEM *> >, COMDAT
; _this$ = ecx

; 387  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 388  : 		_Tidy();

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L107796
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L107796:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 389  : 		}

  00029	c3		 ret	 0
??1?$vector@PAUtagTITEM@@V?$allocator@PAUtagTITEM@@@std@@@std@@QAE@XZ ENDP ; std::vector<tagTITEM *,std::allocator<tagTITEM *> >::~vector<tagTITEM *,std::allocator<tagTITEM *> >
_TEXT	ENDS
PUBLIC	??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ	; std::deque<unsigned long,std::allocator<unsigned long> >::~deque<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\deque
;	COMDAT ??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ PROC NEAR	; std::deque<unsigned long,std::allocator<unsigned long> >::~deque<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 414  : 		_Tidy();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$deque@KV?$allocator@K@std@@@std@@IAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::deque<unsigned long,std::allocator<unsigned long> >::~deque<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:NEAR		; std::logic_error::`vector deleting destructor'
EXTRN	??1exception@@UAE@XZ:NEAR			; exception::~exception
;	COMDAT ??_7logic_error@std@@6B@
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
CONST	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC NEAR			; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 23   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L107863
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L107863:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC NEAR		; std::logic_error::what, COMDAT
; _this$ = ecx

; 27   : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L107895
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  00009	c3		 ret	 0

; 27   : 		return (_Str.c_str());

$L107895:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  0000d	c3		 ret	 0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC NEAR		; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1logic_error@std@@UAE@XZ ; std::logic_error::~logic_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L107903
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L107903:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 590  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 591  : 		if (_Right.size() < _Roff)

  00003	8b 74 24 14	 mov	 esi, DWORD PTR __Roff$[esp+8]
  00007	57		 push	 edi
  00008	8b 7c 24 14	 mov	 edi, DWORD PTR __Right$[esp+12]
  0000c	39 77 14	 cmp	 DWORD PTR [edi+20], esi
  0000f	8b d9		 mov	 ebx, ecx
  00011	73 05		 jae	 SHORT $L103255

; 592  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L103255:

; 593  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 6f 14	 mov	 ebp, DWORD PTR [edi+20]

; 594  : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b ee		 sub	 ebp, esi
  00021	3b c5		 cmp	 eax, ebp
  00023	73 02		 jae	 SHORT $L103257

; 595  : 			_Num = _Count;	// trim _Num to size

  00025	8b e8		 mov	 ebp, eax
$L103257:

; 596  : 
; 597  : 		if (this == &_Right)

  00027	3b df		 cmp	 ebx, edi
  00029	75 1f		 jne	 SHORT $L103258

; 598  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 ee		 add	 ebp, esi
  0002f	55		 push	 ebp
  00030	8b cb		 mov	 ecx, ebx
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	56		 push	 esi
  00038	6a 00		 push	 0
  0003a	8b cb		 mov	 ecx, ebx
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00044	8b c3		 mov	 eax, ebx
  00046	5b		 pop	 ebx

; 605  : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$L103258:

; 599  : 		else if (_Grow(_Num))

  0004a	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  0004d	76 07		 jbe	 SHORT $L108012
  0004f	8b cb		 mov	 ecx, ebx
  00051	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L108012:
  00056	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00059	3b c5		 cmp	 eax, ebp
  0005b	73 21		 jae	 SHORT $L108013
  0005d	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00060	50		 push	 eax
  00061	55		 push	 ebp
  00062	8b cb		 mov	 ecx, ebx
  00064	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00069	85 ed		 test	 ebp, ebp
$L108100:
  0006b	76 6d		 jbe	 SHORT $L108099

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  0006d	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00070	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00075	3b c8		 cmp	 ecx, eax
  00077	72 2f		 jb	 SHORT $L108064
  00079	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0007c	eb 2d		 jmp	 SHORT $L108065

; 599  : 		else if (_Grow(_Num))

$L108013:
  0007e	85 ed		 test	 ebp, ebp
  00080	75 e9		 jne	 SHORT $L108100
  00082	83 f8 10	 cmp	 eax, 16			; 00000010H
  00085	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00088	72 0f		 jb	 SHORT $L108056
  0008a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	c6 00 00	 mov	 BYTE PTR [eax], 0
  00092	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00093	8b c3		 mov	 eax, ebx
  00095	5b		 pop	 ebx

; 605  : 		}

  00096	c2 0c 00	 ret	 12			; 0000000cH

; 599  : 		else if (_Grow(_Num))

$L108056:
  00099	5f		 pop	 edi
  0009a	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  0009d	5e		 pop	 esi
  0009e	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a1	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000a2	8b c3		 mov	 eax, ebx
  000a4	5b		 pop	 ebx

; 605  : 		}

  000a5	c2 0c 00	 ret	 12			; 0000000cH

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

$L108064:
  000a8	8d 57 04	 lea	 edx, DWORD PTR [edi+4]
$L108065:
  000ab	39 43 18	 cmp	 DWORD PTR [ebx+24], eax
  000ae	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000b1	72 04		 jb	 SHORT $L108072
  000b3	8b 38		 mov	 edi, DWORD PTR [eax]
  000b5	eb 02		 jmp	 SHORT $L108073
$L108072:
  000b7	8b f8		 mov	 edi, eax
$L108073:
  000b9	03 f2		 add	 esi, edx
  000bb	8b cd		 mov	 ecx, ebp
  000bd	8b d1		 mov	 edx, ecx
  000bf	c1 e9 02	 shr	 ecx, 2
  000c2	f3 a5		 rep movsd
  000c4	8b ca		 mov	 ecx, edx
  000c6	83 e1 03	 and	 ecx, 3
  000c9	f3 a4		 rep movsb

; 602  : 			_Eos(_Num);

  000cb	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000cf	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000d2	72 02		 jb	 SHORT $L108096
  000d4	8b 00		 mov	 eax, DWORD PTR [eax]
$L108096:
  000d6	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L108099:
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000dd	8b c3		 mov	 eax, ebx
  000df	5b		 pop	 ebx

; 605  : 		}

  000e0	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Num$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 608  : 		{	// assign [_Ptr, _Ptr + _Num)

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 609  : 		if (_Inside(_Ptr))

  00003	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  00006	83 fa 10	 cmp	 edx, 16			; 00000010H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	72 05		 jb	 SHORT $L108122
  0000d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00010	eb 03		 jmp	 SHORT $L108123
$L108122:
  00012	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$L108123:
  00015	8b 74 24 10	 mov	 esi, DWORD PTR __Ptr$[esp+8]
  00019	3b f0		 cmp	 esi, eax
  0001b	72 34		 jb	 SHORT $L103750
  0001d	83 fa 10	 cmp	 edx, 16			; 00000010H
  00020	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00023	72 04		 jb	 SHORT $L108126
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	eb 02		 jmp	 SHORT $L108127
$L108126:
  00029	8b c8		 mov	 ecx, eax
$L108127:
  0002b	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  0002e	03 f9		 add	 edi, ecx
  00030	3b fe		 cmp	 edi, esi
  00032	76 1d		 jbe	 SHORT $L103750

; 610  : 			return (assign(*this, _Ptr - _Myptr(), _Num));	// substring

  00034	83 fa 10	 cmp	 edx, 16			; 00000010H
  00037	72 02		 jb	 SHORT $L108139
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$L108139:
  0003b	8b 4c 24 14	 mov	 ecx, DWORD PTR __Num$[esp+8]
  0003f	51		 push	 ecx
  00040	2b f0		 sub	 esi, eax
  00042	56		 push	 esi
  00043	53		 push	 ebx
  00044	8b cb		 mov	 ecx, ebx
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx

; 618  : 		}

  0004e	c2 08 00	 ret	 8
$L103750:
  00051	55		 push	 ebp

; 611  : 
; 612  : 		if (_Grow(_Num))

  00052	8b 6c 24 18	 mov	 ebp, DWORD PTR __Num$[esp+12]
  00056	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  00059	76 07		 jbe	 SHORT $L108237
  0005b	8b cb		 mov	 ecx, ebx
  0005d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L108237:
  00062	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00065	3b c5		 cmp	 eax, ebp
  00067	73 1b		 jae	 SHORT $L108238
  00069	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  0006c	52		 push	 edx
  0006d	55		 push	 ebp
  0006e	8b cb		 mov	 ecx, ebx
  00070	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00075	85 ed		 test	 ebp, ebp
$L108318:
  00077	76 68		 jbe	 SHORT $L108315

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

  00079	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0007d	72 2f		 jb	 SHORT $L108290
  0007f	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00082	eb 2d		 jmp	 SHORT $L108291

; 611  : 
; 612  : 		if (_Grow(_Num))

$L108238:
  00084	85 ed		 test	 ebp, ebp
  00086	75 ef		 jne	 SHORT $L108318
  00088	83 f8 10	 cmp	 eax, 16			; 00000010H
  0008b	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  0008e	72 0f		 jb	 SHORT $L108281
  00090	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00093	5d		 pop	 ebp
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0
  00098	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  00099	8b c3		 mov	 eax, ebx
  0009b	5b		 pop	 ebx

; 618  : 		}

  0009c	c2 08 00	 ret	 8

; 611  : 
; 612  : 		if (_Grow(_Num))

$L108281:
  0009f	5d		 pop	 ebp
  000a0	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000a3	5f		 pop	 edi
  000a4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a7	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000a8	8b c3		 mov	 eax, ebx
  000aa	5b		 pop	 ebx

; 618  : 		}

  000ab	c2 08 00	 ret	 8

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

$L108290:
  000ae	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
$L108291:
  000b1	8b cd		 mov	 ecx, ebp
  000b3	8b c1		 mov	 eax, ecx
  000b5	c1 e9 02	 shr	 ecx, 2
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb

; 615  : 			_Eos(_Num);

  000c1	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000c5	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000c8	72 10		 jb	 SHORT $L108313
  000ca	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000cd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  000d1	5d		 pop	 ebp
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000d4	8b c3		 mov	 eax, ebx
  000d6	5b		 pop	 ebx

; 618  : 		}

  000d7	c2 08 00	 ret	 8

; 615  : 			_Eos(_Num);

$L108313:
  000da	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000dd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L108315:
  000e1	5d		 pop	 ebp
  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000e4	8b c3		 mov	 eax, ebx
  000e6	5b		 pop	 ebx

; 618  : 		}

  000e7	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??1?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAE@XZ ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::~queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogty
;	COMDAT ??1?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAE@XZ PROC NEAR ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::~queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ?_Tidy@?$deque@KV?$allocator@K@std@@@std@@IAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
??1?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAE@XZ ENDP ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::~queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
PUBLIC	??1tagTCHAR@@QAE@XZ				; tagTCHAR::~tagTCHAR
; Function compile flags: /Ogty
;	COMDAT ??1tagTCHAR@@QAE@XZ
_TEXT	SEGMENT
??1tagTCHAR@@QAE@XZ PROC NEAR				; tagTCHAR::~tagTCHAR, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L108350
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L108350:
  00013	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0
  0001a	c7 46 30 00 00
	00 00		 mov	 DWORD PTR [esi+48], 0
  00021	c7 46 34 00 00
	00 00		 mov	 DWORD PTR [esi+52], 0
  00028	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0002b	83 e8 10	 sub	 eax, 16			; 00000010H
  0002e	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00031	83 ca ff	 or	 edx, -1
  00034	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00038	4a		 dec	 edx
  00039	85 d2		 test	 edx, edx
  0003b	7f 08		 jg	 SHORT $L108375
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00041	50		 push	 eax
  00042	ff 52 04	 call	 DWORD PTR [edx+4]
$L108375:
  00045	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00048	83 ee 10	 sub	 esi, 16			; 00000010H
  0004b	8d 46 0c	 lea	 eax, DWORD PTR [esi+12]
  0004e	83 c9 ff	 or	 ecx, -1
  00051	f0 0f c1 08	 lock	  xadd	 DWORD PTR [eax], ecx
  00055	49		 dec	 ecx
  00056	85 c9		 test	 ecx, ecx
  00058	7f 08		 jg	 SHORT $L108404
  0005a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0005c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005e	56		 push	 esi
  0005f	ff 52 04	 call	 DWORD PTR [edx+4]
$L108404:
  00062	5e		 pop	 esi
  00063	c3		 ret	 0
??1tagTCHAR@@QAE@XZ ENDP				; tagTCHAR::~tagTCHAR
_TEXT	ENDS
PUBLIC	??0?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAE@XZ ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\queue
;	COMDAT ??0?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAE@XZ PROC NEAR ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx

; 26   : 		{	// construct with empty container

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00007	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0000d	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 27   : 		}

  00010	c3		 ret	 0
??0?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAE@XZ ENDP ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 323  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 324  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 325  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 326  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 621  : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 622  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$L108532:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $L108532
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 623  : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 361  : 		_Tidy();
; 362  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$L108607:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $L108607
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 363  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??_GtagTCHAR@@QAEPAXI@Z				; tagTCHAR::`scalar deleting destructor'
; Function compile flags: /Ogty
;	COMDAT ??_GtagTCHAR@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GtagTCHAR@@QAEPAXI@Z PROC NEAR			; tagTCHAR::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1tagTCHAR@@QAE@XZ
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L108611
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L108611:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GtagTCHAR@@QAEPAXI@Z ENDP				; tagTCHAR::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
EXTRN	??0exception@@QAE@XZ:NEAR			; exception::exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T108714 DD	0ffffffffH
	DD	FLAT:$L108615
$T108712 DD	019930520H
	DD	01H
	DD	FLAT:$T108714
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 19   : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	89 74 24 04	 mov	 DWORD PTR _this$[esp+20], esi
  0001d	e8 00 00 00 00	 call	 ??0exception@@QAE@XZ	; exception::exception
  00022	33 c0		 xor	 eax, eax
  00024	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  0002d	6a ff		 push	 -1
  0002f	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00032	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00039	50		 push	 eax
  0003a	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  0003e	88 41 04	 mov	 BYTE PTR [ecx+4], al
  00041	8b 44 24 20	 mov	 eax, DWORD PTR __Message$[esp+24]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 20   : 		}

  0004b	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  0004f	8b c6		 mov	 eax, esi
  00051	5e		 pop	 esi
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L108615:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T108712
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_Glength_error@std@@UAEPAXI@Z			; std::length_error::`scalar deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:NEAR		; std::length_error::`vector deleting destructor'
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 95   : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@

; 96   : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
; Function compile flags: /Ogty
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC NEAR		; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1length_error@std@@UAE@XZ ; std::length_error::~length_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L108724
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L108724:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC NEAR			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 99   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L108812
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L108812:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
_TEXT	ENDS
PUBLIC	??_7CTUser@@6B@					; CTUser::`vftable'
PUBLIC	??_GCTUser@@UAEPAXI@Z				; CTUser::`scalar deleting destructor'
PUBLIC	??1CTUser@@UAE@XZ				; CTUser::~CTUser
EXTRN	?Open@CSession@@UAEHIAAVCPacket@@@Z:NEAR	; CSession::Open
EXTRN	?Close@CSession@@UAEXXZ:NEAR			; CSession::Close
EXTRN	??_ECTUser@@UAEPAXI@Z:NEAR			; CTUser::`vector deleting destructor'
EXTRN	??1CTLoginSession@@UAE@XZ:NEAR			; CTLoginSession::~CTLoginSession
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
xdata$x	SEGMENT
$T109017 DD	0ffffffffH
	DD	FLAT:$L108838
	DD	00H
	DD	FLAT:$L108839
	DD	01H
	DD	FLAT:$L108840
	DD	02H
	DD	FLAT:$L108841
	DD	03H
	DD	FLAT:$L108842
$T109013 DD	019930520H
	DD	05H
	DD	FLAT:$T109017
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_7CTUser@@6B@
CONST	SEGMENT
??_7CTUser@@6B@ DD FLAT:?Say@CTUser@@UAEHPAVCPacket@@@Z	; CTUser::`vftable'
	DD	FLAT:?Open@CSession@@UAEHIAAVCPacket@@@Z
	DD	FLAT:?Close@CSession@@UAEXXZ
	DD	FLAT:??_ECTUser@@UAEPAXI@Z
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tloginsvr\tuser.cpp
CONST	ENDS
;	COMDAT ??1CTUser@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CTUser@@UAE@XZ PROC NEAR				; CTUser::~CTUser, COMDAT
; _this$ = ecx

; 31   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1CTUser@@UAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	53		 push	 ebx
  00017	55		 push	 ebp
  00018	56		 push	 esi
  00019	8b f1		 mov	 esi, ecx
  0001b	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  0001f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CTUser@@6B@

; 32   : #ifdef DEF_UDPLOG
; 33   : 
; 34   : 	//	Delete the Char List Memory
; 35   : 	for(DWORD i=0; i < m_vCHAR.size(); i++)

  00025	33 db		 xor	 ebx, ebx
  00027	c7 44 24 18 04
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+36], 4
  0002f	33 ed		 xor	 ebp, ebp
  00031	57		 push	 edi
$L104963:
  00032	8b 8e 30 01 01
	00		 mov	 ecx, DWORD PTR [esi+65840]
  00038	3b cb		 cmp	 ecx, ebx
  0003a	74 2e		 je	 SHORT $L109015
  0003c	8b 86 34 01 01
	00		 mov	 eax, DWORD PTR [esi+65844]
  00042	2b c1		 sub	 eax, ecx
  00044	c1 f8 02	 sar	 eax, 2
  00047	3b e8		 cmp	 ebp, eax
  00049	73 1f		 jae	 SHORT $L109015
  0004b	8b c1		 mov	 eax, ecx

; 36   : 		delete m_vCHAR[i];

  0004d	8b 3c a8	 mov	 edi, DWORD PTR [eax+ebp*4]
  00050	3b fb		 cmp	 edi, ebx
  00052	8d 04 a8	 lea	 eax, DWORD PTR [eax+ebp*4]
  00055	74 10		 je	 SHORT $L104964
  00057	8b cf		 mov	 ecx, edi
  00059	e8 00 00 00 00	 call	 ??1tagTCHAR@@QAE@XZ
  0005e	57		 push	 edi
  0005f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00064	83 c4 04	 add	 esp, 4
$L104964:

; 32   : #ifdef DEF_UDPLOG
; 33   : 
; 34   : 	//	Delete the Char List Memory
; 35   : 	for(DWORD i=0; i < m_vCHAR.size(); i++)

  00067	45		 inc	 ebp
  00068	eb c8		 jmp	 SHORT $L104963
$L109015:

; 37   : 
; 38   : 	m_vCHAR.clear();

  0006a	8b 86 30 01 01
	00		 mov	 eax, DWORD PTR [esi+65840]
  00070	3b c3		 cmp	 eax, ebx
  00072	5f		 pop	 edi
  00073	74 09		 je	 SHORT $L108925
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0007b	83 c4 04	 add	 esp, 4
$L108925:

; 39   : 
; 40   : #endif
; 41   : }

  0007e	8b c3		 mov	 eax, ebx
  00080	3b c3		 cmp	 eax, ebx
  00082	89 9e 30 01 01
	00		 mov	 DWORD PTR [esi+65840], ebx
  00088	89 9e 34 01 01
	00		 mov	 DWORD PTR [esi+65844], ebx
  0008e	89 9e 38 01 01
	00		 mov	 DWORD PTR [esi+65848], ebx
  00094	74 09		 je	 SHORT $L108945
  00096	50		 push	 eax
  00097	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0009c	83 c4 04	 add	 esp, 4
$L108945:
  0009f	8d 8e 18 01 01
	00		 lea	 ecx, DWORD PTR [esi+65816]
  000a5	89 9e 30 01 01
	00		 mov	 DWORD PTR [esi+65840], ebx
  000ab	89 9e 34 01 01
	00		 mov	 DWORD PTR [esi+65844], ebx
  000b1	89 9e 38 01 01
	00		 mov	 DWORD PTR [esi+65848], ebx
  000b7	e8 00 00 00 00	 call	 ?_Tidy@?$deque@KV?$allocator@K@std@@@std@@IAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
  000bc	8b 86 00 01 01
	00		 mov	 eax, DWORD PTR [esi+65792]
  000c2	83 e8 10	 sub	 eax, 16			; 00000010H
  000c5	c6 44 24 18 01	 mov	 BYTE PTR __$EHRec$[esp+36], 1
  000ca	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  000cd	83 ca ff	 or	 edx, -1
  000d0	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  000d4	4a		 dec	 edx
  000d5	85 d2		 test	 edx, edx
  000d7	7f 08		 jg	 SHORT $L108981
  000d9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000db	8b 11		 mov	 edx, DWORD PTR [ecx]
  000dd	50		 push	 eax
  000de	ff 52 04	 call	 DWORD PTR [edx+4]
$L108981:
  000e1	8b 86 fc 00 01
	00		 mov	 eax, DWORD PTR [esi+65788]
  000e7	83 e8 10	 sub	 eax, 16			; 00000010H
  000ea	88 5c 24 18	 mov	 BYTE PTR __$EHRec$[esp+36], bl
  000ee	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  000f1	83 ca ff	 or	 edx, -1
  000f4	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  000f8	4a		 dec	 edx
  000f9	85 d2		 test	 edx, edx
  000fb	7f 08		 jg	 SHORT $L109008
  000fd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ff	8b 11		 mov	 edx, DWORD PTR [ecx]
  00101	50		 push	 eax
  00102	ff 52 04	 call	 DWORD PTR [edx+4]
$L109008:
  00105	8b ce		 mov	 ecx, esi
  00107	c7 44 24 18 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+36], -1
  0010f	e8 00 00 00 00	 call	 ??1CTLoginSession@@UAE@XZ ; CTLoginSession::~CTLoginSession
  00114	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  00118	5e		 pop	 esi
  00119	5d		 pop	 ebp
  0011a	5b		 pop	 ebx
  0011b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00122	83 c4 10	 add	 esp, 16			; 00000010H
  00125	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L108838:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CTLoginSession@@UAE@XZ ; CTLoginSession::~CTLoginSession
$L108839:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 fc 00 01
	00		 add	 ecx, 65788		; 000100fcH
  00011	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L108840:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 00 01 01
	00		 add	 ecx, 65792		; 00010100H
  0001f	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L108841:
  00024	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	81 c1 18 01 01
	00		 add	 ecx, 65816		; 00010118H
  0002d	e9 00 00 00 00	 jmp	 ??1?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAE@XZ
$L108842:
  00032	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00035	81 c1 2c 01 01
	00		 add	 ecx, 65836		; 0001012cH
  0003b	e9 00 00 00 00	 jmp	 ??1?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE@XZ ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::~vector<tagTCHAR *,std::allocator<tagTCHAR *> >
__ehhandler$??1CTUser@@UAE@XZ:
  00040	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T109013
  00045	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CTUser@@UAE@XZ ENDP					; CTUser::~CTUser
PUBLIC	?_Xlen@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IBEXXZ ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Xlen
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVexception@@@8				; exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
EXTRN	??0exception@@QAE@ABV0@@Z:NEAR			; exception::exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	SEGMENT
$T109139 DD	0ffffffffH
	DD	FLAT:$L109025
$T109136 DD	019930520H
	DD	01H
	DD	FLAT:$T109139
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT
??_R0?AVexception@@@8 DD FLAT:??_7type_info@@6B@	; exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@@', 00H
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
_DATA	ENDS
;	COMDAT ?_Xlen@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
$T109024 = -80						; size = 28
$T109023 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IBEXXZ PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Xlen, COMDAT
; _this$ = ecx

; 883  : 		{	// report a length_error

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Xlen@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IBEXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 44	 sub	 esp, 68			; 00000044H

; 884  : 		_THROW(length_error, "vector<T> too long");

  00018	6a 12		 push	 18			; 00000012H
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001f	8d 4c 24 08	 lea	 ecx, DWORD PTR $T109024[esp+88]
  00023	c7 44 24 20 0f
	00 00 00	 mov	 DWORD PTR $T109024[esp+112], 15 ; 0000000fH
  0002b	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T109024[esp+108], 0
  00033	c6 44 24 0c 00	 mov	 BYTE PTR $T109024[esp+92], 0
  00038	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0003d	8d 04 24	 lea	 eax, DWORD PTR $T109024[esp+80]
  00040	50		 push	 eax
  00041	8d 4c 24 20	 lea	 ecx, DWORD PTR $T109023[esp+84]
  00045	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+92], 0
  0004d	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00052	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVlength_error@std@@
  00057	8d 4c 24 20	 lea	 ecx, DWORD PTR $T109023[esp+84]
  0005b	51		 push	 ecx
  0005c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T109023[esp+88], OFFSET FLAT:??_7length_error@std@@6B@
  00064	e8 00 00 00 00	 call	 __CxxThrowException@8
$L109140:
$L109138:
  00069	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L109025:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T109024[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xlen@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IBEXXZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T109136
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Xlen@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IBEXXZ ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Xlen
;	COMDAT xdata$x
xdata$x	SEGMENT
$T109245 DD	0ffffffffH
	DD	FLAT:$L109146
$T109243 DD	019930520H
	DD	01H
	DD	FLAT:$T109245
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC NEAR		; std::logic_error::logic_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 1c	 mov	 edi, DWORD PTR ___that$[esp+20]
  0001c	8b f1		 mov	 esi, ecx
  0001e	57		 push	 edi
  0001f	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00023	e8 00 00 00 00	 call	 ??0exception@@QAE@ABV0@@Z ; exception::exception
  00028	33 c0		 xor	 eax, eax
  0002a	6a ff		 push	 -1
  0002c	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00035	50		 push	 eax
  00036	83 c7 0c	 add	 edi, 12			; 0000000cH
  00039	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00040	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00043	57		 push	 edi
  00044	89 44 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], eax
  00048	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00050	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00054	5f		 pop	 edi
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L109146:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T109243
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Ogty
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC NEAR		; std::length_error::length_error, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_GCTUser@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCTUser@@UAEPAXI@Z PROC NEAR				; CTUser::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1CTUser@@UAE@XZ	; CTUser::~CTUser
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L109255
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L109255:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GCTUser@@UAEPAXI@Z ENDP				; CTUser::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAE_NI@Z ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Buy
; Function compile flags: /Ogty
;	COMDAT ?_Buy@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAE_NI@Z PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Buy, COMDAT
; _this$ = ecx

; 771  : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;
; 772  : 		if (_Capacity == 0)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Capacity$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	33 c9		 xor	 ecx, ecx
  00009	3b c1		 cmp	 eax, ecx
  0000b	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0000e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00011	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00014	75 06		 jne	 SHORT $L105220

; 773  : 			return (false);

  00016	32 c0		 xor	 al, al
  00018	5e		 pop	 esi

; 783  : 		}

  00019	c2 04 00	 ret	 4
$L105220:

; 774  : 		else if (max_size() < _Capacity)

  0001c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00021	76 07		 jbe	 SHORT $L105222

; 775  : 			_Xlen();	// result too long

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Xlen@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IBEXXZ ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Xlen
$L109284:
$L105222:
  0002a	57		 push	 edi

; 776  : 		else
; 777  : 			{	// nonempty array, allocate storage
; 778  : 			_Myfirst = this->_Alval.allocate(_Capacity);

  0002b	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  00032	57		 push	 edi
  00033	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 779  : 			_Mylast = _Myfirst;
; 780  : 			_Myend = _Myfirst + _Capacity;

  00038	03 f8		 add	 edi, eax
  0003a	83 c4 04	 add	 esp, 4
  0003d	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  00040	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00043	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00046	5f		 pop	 edi

; 781  : 			}
; 782  : 		return (true);

  00047	b0 01		 mov	 al, 1
  00049	5e		 pop	 esi

; 783  : 		}

  0004a	c2 04 00	 ret	 4
$L109283:
?_Buy@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Buy
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEXViterator@12@IABQAUtagTCHAR@@@Z ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Insert_n
; Function compile flags: /Ogty
;	COMDAT ?_Insert_n@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEXViterator@12@IABQAUtagTCHAR@@@Z
_TEXT	SEGMENT
__Newvec$105313 = -4					; size = 4
tv393 = 8						; size = 4
__Where$ = 8						; size = 4
tv382 = 12						; size = 4
__Count$ = 12						; size = 4
__Tmp$ = 16						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEXViterator@12@IABQAUtagTCHAR@@@Z PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Insert_n, COMDAT
; _this$ = ecx

; 809  : 		{	// insert _Count * _Val at _Where

  00000	51		 push	 ecx

; 810  : 		_Ty _Tmp = _Val;	// in case _Val is in sequence

  00001	8b 44 24 10	 mov	 eax, DWORD PTR __Val$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 811  : 		size_type _Capacity = capacity();

  00008	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000b	85 d2		 test	 edx, edx
  0000d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000f	57		 push	 edi
  00010	89 4c 24 18	 mov	 DWORD PTR __Tmp$[esp+8], ecx
  00014	75 04		 jne	 SHORT $L109298
  00016	33 c0		 xor	 eax, eax
  00018	eb 08		 jmp	 SHORT $L109299
$L109298:
  0001a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0001d	2b c2		 sub	 eax, edx
  0001f	c1 f8 02	 sar	 eax, 2
$L109299:

; 812  : 
; 813  : 		if (_Count == 0)

  00022	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  00026	85 ff		 test	 edi, edi
  00028	0f 84 ac 01 00
	00		 je	 $L105333

; 814  : 			;
; 815  : 		else if (max_size() - size() < _Count)

  0002e	85 d2		 test	 edx, edx
  00030	75 04		 jne	 SHORT $L109322
  00032	33 c9		 xor	 ecx, ecx
  00034	eb 08		 jmp	 SHORT $L109323
$L109322:
  00036	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00039	2b ca		 sub	 ecx, edx
  0003b	c1 f9 02	 sar	 ecx, 2
$L109323:
  0003e	53		 push	 ebx
  0003f	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH
  00044	2b d9		 sub	 ebx, ecx
  00046	3b df		 cmp	 ebx, edi
  00048	73 07		 jae	 SHORT $L105309

; 816  : 			_Xlen();	// result too long

  0004a	8b ce		 mov	 ecx, esi
  0004c	e8 00 00 00 00	 call	 ?_Xlen@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IBEXXZ ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Xlen
$L109453:
$L105309:

; 817  : 		else if (_Capacity < size() + _Count)

  00051	85 d2		 test	 edx, edx
  00053	75 04		 jne	 SHORT $L109329
  00055	33 c9		 xor	 ecx, ecx
  00057	eb 08		 jmp	 SHORT $L109330
$L109329:
  00059	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0005c	2b ca		 sub	 ecx, edx
  0005e	c1 f9 02	 sar	 ecx, 2
$L109330:
  00061	03 cf		 add	 ecx, edi
  00063	3b c1		 cmp	 eax, ecx
  00065	55		 push	 ebp
  00066	0f 83 d6 00 00
	00		 jae	 $L105311

; 818  : 			{	// not enough room, reallocate
; 819  : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 820  : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0006c	8b c8		 mov	 ecx, eax
  0006e	d1 e9		 shr	 ecx, 1
  00070	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH
  00075	2b d9		 sub	 ebx, ecx
  00077	3b d8		 cmp	 ebx, eax
  00079	73 04		 jae	 SHORT $L109288
  0007b	33 c0		 xor	 eax, eax
  0007d	eb 02		 jmp	 SHORT $L109289
$L109288:
  0007f	03 c1		 add	 eax, ecx
$L109289:

; 821  : 			if (_Capacity < size() + _Count)

  00081	85 d2		 test	 edx, edx
  00083	75 04		 jne	 SHORT $L109352
  00085	33 c9		 xor	 ecx, ecx
  00087	eb 08		 jmp	 SHORT $L109353
$L109352:
  00089	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0008c	2b ca		 sub	 ecx, edx
  0008e	c1 f9 02	 sar	 ecx, 2
$L109353:
  00091	03 cf		 add	 ecx, edi
  00093	3b c1		 cmp	 eax, ecx
  00095	73 12		 jae	 SHORT $L105312

; 822  : 				_Capacity = size() + _Count;

  00097	85 d2		 test	 edx, edx
  00099	75 04		 jne	 SHORT $L109359
  0009b	33 c0		 xor	 eax, eax
  0009d	eb 08		 jmp	 SHORT $L109360
$L109359:
  0009f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000a2	2b c2		 sub	 eax, edx
  000a4	c1 f8 02	 sar	 eax, 2
$L109360:
  000a7	03 c7		 add	 eax, edi
$L105312:

; 823  : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

  000a9	c1 e0 02	 shl	 eax, 2
  000ac	50		 push	 eax
  000ad	89 44 24 20	 mov	 DWORD PTR tv382[esp+20], eax
  000b1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 824  : 			pointer _Ptr = _Newvec;
; 825  : 
; 826  : 			_TRY_BEGIN
; 827  : 			_Ptr = _Ucopy(_Myfirst, _ITER_BASE(_Where),
; 828  : 				_Newvec);	// copy prefix

  000b6	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000b9	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Where$[esp+20]
  000bd	8b d0		 mov	 edx, eax
  000bf	8b c3		 mov	 eax, ebx
  000c1	2b c1		 sub	 eax, ecx
  000c3	c1 f8 02	 sar	 eax, 2
  000c6	8d 2c 85 00 00
	00 00		 lea	 ebp, DWORD PTR [eax*4]
  000cd	55		 push	 ebp
  000ce	51		 push	 ecx
  000cf	52		 push	 edx
  000d0	89 54 24 20	 mov	 DWORD PTR __Newvec$105313[esp+36], edx
  000d4	e8 00 00 00 00	 call	 _memmove
  000d9	83 c4 10	 add	 esp, 16			; 00000010H

; 829  : 			_Ptr = _Ufill(_Ptr, _Count, _Tmp);	// add new stuff

  000dc	8d 54 24 20	 lea	 edx, DWORD PTR __Tmp$[esp+16]
  000e0	52		 push	 edx
  000e1	03 c5		 add	 eax, ebp
  000e3	57		 push	 edi
  000e4	50		 push	 eax
  000e5	8b ce		 mov	 ecx, esi
  000e7	e8 00 00 00 00	 call	 ?_Ufill@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEPAPAUtagTCHAR@@PAPAU3@IABQAU3@@Z ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Ufill

; 830  : 			_Ucopy(_ITER_BASE(_Where), _Mylast, _Ptr);	// copy suffix

  000ec	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000ef	2b cb		 sub	 ecx, ebx
  000f1	c1 f9 02	 sar	 ecx, 2
  000f4	c1 e1 02	 shl	 ecx, 2
  000f7	51		 push	 ecx
  000f8	53		 push	 ebx
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 _memmove

; 831  : 			_CATCH_ALL
; 832  : 			_Destroy(_Newvec, _Ptr);
; 833  : 			this->_Alval.deallocate(_Newvec, _Capacity);
; 834  : 			_RERAISE;
; 835  : 			_CATCH_END
; 836  : 
; 837  : 			_Count += size();

  000ff	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00102	83 c4 0c	 add	 esp, 12			; 0000000cH
  00105	85 c0		 test	 eax, eax
  00107	75 04		 jne	 SHORT $L109441
  00109	33 c9		 xor	 ecx, ecx
  0010b	eb 08		 jmp	 SHORT $L109442
$L109441:
  0010d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00110	2b c8		 sub	 ecx, eax
  00112	c1 f9 02	 sar	 ecx, 2
$L109442:
  00115	03 f9		 add	 edi, ecx

; 838  : 			if (_Myfirst != 0)

  00117	85 c0		 test	 eax, eax
  00119	74 09		 je	 SHORT $L109445

; 839  : 				{	// destroy and deallocate old array
; 840  : 				_Destroy(_Myfirst, _Mylast);
; 841  : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00121	83 c4 04	 add	 esp, 4
$L109445:

; 842  : 				}
; 843  : 			_Myend = _Newvec + _Capacity;

  00124	8b 44 24 10	 mov	 eax, DWORD PTR __Newvec$105313[esp+20]
  00128	8b 54 24 1c	 mov	 edx, DWORD PTR tv382[esp+16]
  0012c	5d		 pop	 ebp
  0012d	5b		 pop	 ebx

; 844  : 			_Mylast = _Newvec + _Count;

  0012e	8d 0c b8	 lea	 ecx, DWORD PTR [eax+edi*4]
  00131	03 d0		 add	 edx, eax
  00133	5f		 pop	 edi
  00134	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  00137	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 845  : 			_Myfirst = _Newvec;

  0013a	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0013d	5e		 pop	 esi

; 873  : 			}
; 874  : 		}

  0013e	59		 pop	 ecx
  0013f	c2 0c 00	 ret	 12			; 0000000cH
$L105311:

; 846  : 			}
; 847  : 		else if ((size_type)(_Mylast - _ITER_BASE(_Where)) < _Count)

  00142	8b 6e 08	 mov	 ebp, DWORD PTR [esi+8]
  00145	8b 5c 24 18	 mov	 ebx, DWORD PTR __Where$[esp+16]
  00149	8b d5		 mov	 edx, ebp
  0014b	2b d3		 sub	 edx, ebx
  0014d	c1 fa 02	 sar	 edx, 2
  00150	3b d7		 cmp	 edx, edi

; 848  : 			{	// new stuff spills off end
; 849  : 			_Ucopy(_ITER_BASE(_Where), _Mylast,
; 850  : 				_ITER_BASE(_Where) + _Count);	// copy suffix

  00152	8d 04 bd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*4]
  00159	8b ce		 mov	 ecx, esi
  0015b	89 44 24 18	 mov	 DWORD PTR tv393[esp+16], eax
  0015f	73 4b		 jae	 SHORT $L105324
  00161	03 c3		 add	 eax, ebx
  00163	50		 push	 eax
  00164	55		 push	 ebp
  00165	53		 push	 ebx
  00166	e8 00 00 00 00	 call	 ??$_Ucopy@PAPAUtagTCHAR@@@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEPAPAUtagTCHAR@@PAPAU2@00@Z ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Ucopy<tagTCHAR * *>

; 851  : 
; 852  : 			_TRY_BEGIN
; 853  : 			_Ufill(_Mylast, _Count - (_Mylast - _ITER_BASE(_Where)),
; 854  : 				_Tmp);	// insert new stuff off end

  0016b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0016e	8b d0		 mov	 edx, eax
  00170	2b d3		 sub	 edx, ebx
  00172	8d 4c 24 20	 lea	 ecx, DWORD PTR __Tmp$[esp+16]
  00176	51		 push	 ecx
  00177	c1 fa 02	 sar	 edx, 2
  0017a	2b fa		 sub	 edi, edx
  0017c	57		 push	 edi
  0017d	50		 push	 eax
  0017e	8b ce		 mov	 ecx, esi
  00180	e8 00 00 00 00	 call	 ?_Ufill@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEPAPAUtagTCHAR@@PAPAU3@IABQAU3@@Z ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Ufill

; 855  : 			_CATCH_ALL
; 856  : 			_Destroy(_ITER_BASE(_Where) + _Count, _Mylast + _Count);
; 857  : 			_RERAISE;
; 858  : 			_CATCH_END
; 859  : 
; 860  : 			_Mylast += _Count;

  00185	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00188	8b 44 24 18	 mov	 eax, DWORD PTR tv393[esp+16]
  0018c	03 c8		 add	 ecx, eax
  0018e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00191	8b f1		 mov	 esi, ecx

; 861  : 			fill(_ITER_BASE(_Where), _Mylast - _Count,
; 862  : 				_Tmp);	// insert up to old end

  00193	8d 4c 24 20	 lea	 ecx, DWORD PTR __Tmp$[esp+16]
  00197	51		 push	 ecx
  00198	2b f0		 sub	 esi, eax
  0019a	56		 push	 esi
  0019b	53		 push	 ebx
  0019c	e8 00 00 00 00	 call	 ??$fill@PAPAUtagTCHAR@@PAU1@@std@@YAXPAPAUtagTCHAR@@0ABQAU1@@Z ; std::fill<tagTCHAR * *,tagTCHAR *>
  001a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a4	5d		 pop	 ebp
  001a5	5b		 pop	 ebx
  001a6	5f		 pop	 edi
  001a7	5e		 pop	 esi

; 873  : 			}
; 874  : 		}

  001a8	59		 pop	 ecx
  001a9	c2 0c 00	 ret	 12			; 0000000cH
$L105324:

; 863  : 			}
; 864  : 		else
; 865  : 			{	// new stuff can all be assigned
; 866  : 			pointer _Oldend = _Mylast;
; 867  : 			_Mylast = _Ucopy(_Oldend - _Count, _Oldend,
; 868  : 				_Mylast);	// copy suffix

  001ac	55		 push	 ebp
  001ad	8b fd		 mov	 edi, ebp
  001af	2b f8		 sub	 edi, eax
  001b1	55		 push	 ebp
  001b2	57		 push	 edi
  001b3	e8 00 00 00 00	 call	 ??$_Ucopy@PAPAUtagTCHAR@@@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEPAPAUtagTCHAR@@PAPAU2@00@Z ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Ucopy<tagTCHAR * *>

; 869  : 			copy_backward(_ITER_BASE(_Where), _Oldend - _Count,
; 870  : 				_Oldend);	// copy hole

  001b8	55		 push	 ebp
  001b9	57		 push	 edi
  001ba	53		 push	 ebx
  001bb	89 46 08	 mov	 DWORD PTR [esi+8], eax
  001be	e8 00 00 00 00	 call	 ??$copy_backward@PAPAUtagTCHAR@@PAPAU1@@std@@YAPAPAUtagTCHAR@@PAPAU1@00@Z ; std::copy_backward<tagTCHAR * *,tagTCHAR * *>

; 871  : 			fill(_ITER_BASE(_Where), _ITER_BASE(_Where) + _Count,
; 872  : 				_Tmp);	// insert into hole

  001c3	8b 44 24 24	 mov	 eax, DWORD PTR tv393[esp+28]
  001c7	8d 54 24 2c	 lea	 edx, DWORD PTR __Tmp$[esp+28]
  001cb	52		 push	 edx
  001cc	03 c3		 add	 eax, ebx
  001ce	50		 push	 eax
  001cf	53		 push	 ebx
  001d0	e8 00 00 00 00	 call	 ??$fill@PAPAUtagTCHAR@@PAU1@@std@@YAXPAPAUtagTCHAR@@0ABQAU1@@Z ; std::fill<tagTCHAR * *,tagTCHAR *>
  001d5	83 c4 18	 add	 esp, 24			; 00000018H
  001d8	5d		 pop	 ebp
  001d9	5b		 pop	 ebx
$L105333:
  001da	5f		 pop	 edi
  001db	5e		 pop	 esi

; 873  : 			}
; 874  : 		}

  001dc	59		 pop	 ecx
  001dd	c2 0c 00	 ret	 12			; 0000000cH
$L109452:
?_Insert_n@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEXViterator@12@IABQAUtagTCHAR@@@Z ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Insert_n
_TEXT	ENDS
PUBLIC	??0?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE@XZ ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::vector<tagTCHAR *,std::allocator<tagTCHAR *> >
; Function compile flags: /Ogty
;	COMDAT ??0?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE@XZ PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::vector<tagTCHAR *,std::allocator<tagTCHAR *> >, COMDAT
; _this$ = ecx

; 299  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx

; 300  : 		_Buy(0);

  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00007	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 301  : 		}

  0000d	c3		 ret	 0
??0?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE@XZ ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::vector<tagTCHAR *,std::allocator<tagTCHAR *> >
_TEXT	ENDS
PUBLIC	?insert@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE?AViterator@12@V312@ABQAUtagTCHAR@@@Z ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::insert
; Function compile flags: /Ogty
;	COMDAT ?insert@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE?AViterator@12@V312@ABQAUtagTCHAR@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE?AViterator@12@V312@ABQAUtagTCHAR@@@Z PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::insert, COMDAT
; _this$ = ecx

; 621  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Where$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 0c		 je	 SHORT $L109578
  0000f	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00012	2b c1		 sub	 eax, ecx
  00014	c1 f8 02	 sar	 eax, 2
  00017	85 c0		 test	 eax, eax
  00019	75 04		 jne	 SHORT $L109517
$L109578:
  0001b	33 f6		 xor	 esi, esi
  0001d	eb 07		 jmp	 SHORT $L109518
$L109517:
  0001f	8b f2		 mov	 esi, edx
  00021	2b f1		 sub	 esi, ecx
  00023	c1 fe 02	 sar	 esi, 2
$L109518:

; 622  : 		_Insert_n(_Where, (size_type)1, _Val);

  00026	8b 44 24 14	 mov	 eax, DWORD PTR __Val$[esp+4]
  0002a	50		 push	 eax
  0002b	6a 01		 push	 1
  0002d	52		 push	 edx
  0002e	8b cf		 mov	 ecx, edi
  00030	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEXViterator@12@IABQAUtagTCHAR@@@Z ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Insert_n

; 623  : 		return (begin() + _Off);

  00035	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00038	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  0003c	8d 14 b1	 lea	 edx, DWORD PTR [ecx+esi*4]
  0003f	5f		 pop	 edi
  00040	89 10		 mov	 DWORD PTR [eax], edx
  00042	5e		 pop	 esi

; 624  : 		}

  00043	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAE?AViterator@12@V312@ABQAUtagTCHAR@@@Z ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::insert
_TEXT	ENDS
PUBLIC	??0CTUser@@QAE@XZ				; CTUser::CTUser
EXTRN	??0CTLoginSession@@QAE@XZ:NEAR			; CTLoginSession::CTLoginSession
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
xdata$x	SEGMENT
$T109862 DD	0ffffffffH
	DD	FLAT:$L109582
	DD	00H
	DD	FLAT:$L109583
	DD	01H
	DD	FLAT:$L109584
	DD	02H
	DD	FLAT:$L109585
$T109859 DD	019930520H
	DD	04H
	DD	FLAT:$T109862
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tloginsvr\tuser.cpp
xdata$x	ENDS
;	COMDAT ??0CTUser@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CTUser@@QAE@XZ PROC NEAR				; CTUser::CTUser, COMDAT
; _this$ = ecx

; 8    : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0CTUser@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	53		 push	 ebx
  00017	55		 push	 ebp
  00018	56		 push	 esi
  00019	8b f1		 mov	 esi, ecx
  0001b	57		 push	 edi
  0001c	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  00020	e8 00 00 00 00	 call	 ??0CTLoginSession@@QAE@XZ ; CTLoginSession::CTLoginSession
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CTUser@@6B@
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_strmgr@ATL@@3VCAtlStringMgr@1@A
  00030	33 db		 xor	 ebx, ebx
  00032	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_strmgr@ATL@@3VCAtlStringMgr@1@A ; ATL::g_strmgr
  00037	89 5c 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], ebx
  0003b	8d be fc 00 01
	00		 lea	 edi, DWORD PTR [esi+65788]
  00041	ff 50 0c	 call	 DWORD PTR [eax+12]
  00044	83 c0 10	 add	 eax, 16			; 00000010H
  00047	89 07		 mov	 DWORD PTR [edi], eax
  00049	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_strmgr@ATL@@3VCAtlStringMgr@1@A
  0004f	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_strmgr@ATL@@3VCAtlStringMgr@1@A ; ATL::g_strmgr
  00054	c6 44 24 1c 01	 mov	 BYTE PTR __$EHRec$[esp+40], 1
  00059	8d ae 00 01 01
	00		 lea	 ebp, DWORD PTR [esi+65792]
  0005f	ff 52 0c	 call	 DWORD PTR [edx+12]
  00062	83 c0 10	 add	 eax, 16			; 00000010H
  00065	89 45 00	 mov	 DWORD PTR [ebp], eax
  00068	89 9e 1c 01 01
	00		 mov	 DWORD PTR [esi+65820], ebx
  0006e	89 9e 20 01 01
	00		 mov	 DWORD PTR [esi+65824], ebx
  00074	89 9e 24 01 01
	00		 mov	 DWORD PTR [esi+65828], ebx
  0007a	89 9e 28 01 01
	00		 mov	 DWORD PTR [esi+65832], ebx

; 9    : 	m_strUserID.Empty();

  00080	8b cf		 mov	 ecx, edi
  00082	89 9e 30 01 01
	00		 mov	 DWORD PTR [esi+65840], ebx
  00088	89 9e 34 01 01
	00		 mov	 DWORD PTR [esi+65844], ebx
  0008e	89 9e 38 01 01
	00		 mov	 DWORD PTR [esi+65848], ebx
  00094	e8 00 00 00 00	 call	 ?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ ; ATL::CSimpleStringT<char,0>::Empty

; 10   : 	m_strPasswd.Empty();

  00099	8b cd		 mov	 ecx, ebp
  0009b	e8 00 00 00 00	 call	 ?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ ; ATL::CSimpleStringT<char,0>::Empty

; 11   : 
; 12   : 	m_bLogout	= FALSE;
; 13   : 	m_dwID		= 0;
; 14   : 	m_bCreateCnt = 0;
; 15   : 	m_bAgreement = TRUE;
; 16   : 	m_bGroupID = 0;
; 17   : 
; 18   : 	m_dwAcceptTick = 0;
; 19   : 	m_dwSendTick = 0;
; 20   : 	m_dlCheckKey = 0;
; 21   : 	
; 22   : 	while(!m_qCheckPoint.empty())

  000a0	39 9e 28 01 01
	00		 cmp	 DWORD PTR [esi+65832], ebx
  000a6	88 9e 09 01 01
	00		 mov	 BYTE PTR [esi+65801], bl
  000ac	89 9e 04 01 01
	00		 mov	 DWORD PTR [esi+65796], ebx
  000b2	88 9e 0a 01 01
	00		 mov	 BYTE PTR [esi+65802], bl
  000b8	c6 86 0b 01 01
	00 01		 mov	 BYTE PTR [esi+65803], 1
  000bf	88 9e 08 01 01
	00		 mov	 BYTE PTR [esi+65800], bl
  000c5	89 5e 1c	 mov	 DWORD PTR [esi+28], ebx
  000c8	89 9e 0c 01 01
	00		 mov	 DWORD PTR [esi+65804], ebx
  000ce	89 9e 10 01 01
	00		 mov	 DWORD PTR [esi+65808], ebx
  000d4	89 9e 14 01 01
	00		 mov	 DWORD PTR [esi+65812], ebx
  000da	74 47		 je	 SHORT $L104952
  000dc	8d 64 24 00	 npad	 4
$L104951:

; 23   : 		m_qCheckPoint.pop();

  000e0	8b 86 28 01 01
	00		 mov	 eax, DWORD PTR [esi+65832]
  000e6	3b c3		 cmp	 eax, ebx
  000e8	74 31		 je	 SHORT $L109835
  000ea	8b 8e 24 01 01
	00		 mov	 ecx, DWORD PTR [esi+65828]
  000f0	8b 96 20 01 01
	00		 mov	 edx, DWORD PTR [esi+65824]
  000f6	41		 inc	 ecx
  000f7	c1 e2 02	 shl	 edx, 2
  000fa	3b d1		 cmp	 edx, ecx
  000fc	89 8e 24 01 01
	00		 mov	 DWORD PTR [esi+65828], ecx
  00102	77 06		 ja	 SHORT $L109834
  00104	89 9e 24 01 01
	00		 mov	 DWORD PTR [esi+65828], ebx
$L109834:
  0010a	48		 dec	 eax
  0010b	3b c3		 cmp	 eax, ebx
  0010d	89 86 28 01 01
	00		 mov	 DWORD PTR [esi+65832], eax
  00113	75 06		 jne	 SHORT $L109835
  00115	89 9e 24 01 01
	00		 mov	 DWORD PTR [esi+65828], ebx
$L109835:
  0011b	39 9e 28 01 01
	00		 cmp	 DWORD PTR [esi+65832], ebx
  00121	75 bd		 jne	 SHORT $L104951
$L104952:

; 24   : 
; 25   : #ifdef DEF_UDPLOG
; 26   :     m_vCHAR.clear();

  00123	8b 86 30 01 01
	00		 mov	 eax, DWORD PTR [esi+65840]
  00129	3b c3		 cmp	 eax, ebx
  0012b	74 09		 je	 SHORT $L109853
  0012d	50		 push	 eax
  0012e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00133	83 c4 04	 add	 esp, 4
$L109853:

; 27   : #endif
; 28   : }

  00136	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  0013a	5f		 pop	 edi
  0013b	89 9e 30 01 01
	00		 mov	 DWORD PTR [esi+65840], ebx
  00141	89 9e 34 01 01
	00		 mov	 DWORD PTR [esi+65844], ebx
  00147	89 9e 38 01 01
	00		 mov	 DWORD PTR [esi+65848], ebx
  0014d	8b c6		 mov	 eax, esi
  0014f	5e		 pop	 esi
  00150	5d		 pop	 ebp
  00151	5b		 pop	 ebx
  00152	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00159	83 c4 10	 add	 esp, 16			; 00000010H
  0015c	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L109582:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CTLoginSession@@UAE@XZ ; CTLoginSession::~CTLoginSession
$L109583:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 fc 00 01
	00		 add	 ecx, 65788		; 000100fcH
  00011	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L109584:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 00 01 01
	00		 add	 ecx, 65792		; 00010100H
  0001f	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L109585:
  00024	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00027	81 c1 18 01 01
	00		 add	 ecx, 65816		; 00010118H
  0002d	e9 00 00 00 00	 jmp	 ??1?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAE@XZ
__ehhandler$??0CTUser@@QAE@XZ:
  00032	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T109859
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CTUser@@QAE@XZ ENDP					; CTUser::CTUser
PUBLIC	?push_back@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAEXABQAUtagTCHAR@@@Z ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::push_back
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?push_back@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAEXABQAUtagTCHAR@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAEXABQAUtagTCHAR@@@Z PROC NEAR ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::push_back, COMDAT
; _this$ = ecx

; 579  : 		{	// insert element at end

  00000	56		 push	 esi

; 580  : 		if (size() < capacity())

  00001	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00004	85 f6		 test	 esi, esi
  00006	75 04		 jne	 SHORT $L109874
  00008	33 d2		 xor	 edx, edx
  0000a	eb 08		 jmp	 SHORT $L109875
$L109874:
  0000c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0000f	2b d6		 sub	 edx, esi
  00011	c1 fa 02	 sar	 edx, 2
$L109875:
  00014	85 f6		 test	 esi, esi
  00016	74 21		 je	 SHORT $L105162
  00018	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0001b	2b c6		 sub	 eax, esi
  0001d	c1 f8 02	 sar	 eax, 2
  00020	3b d0		 cmp	 edx, eax
  00022	73 15		 jae	 SHORT $L105162

; 581  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

  00024	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00027	8b 54 24 08	 mov	 edx, DWORD PTR __Val$[esp]
  0002b	8b 12		 mov	 edx, DWORD PTR [edx]
  0002d	89 10		 mov	 DWORD PTR [eax], edx
  0002f	83 c0 04	 add	 eax, 4
  00032	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00035	5e		 pop	 esi

; 584  : 		}

  00036	c2 04 00	 ret	 4
$L105162:

; 582  : 		else
; 583  : 			insert(end(), _Val);

  00039	8b 54 24 08	 mov	 edx, DWORD PTR __Val$[esp]
  0003d	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00040	52		 push	 edx
  00041	6a 01		 push	 1
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEXViterator@12@IABQAUtagTCHAR@@@Z ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Insert_n
  00049	5e		 pop	 esi

; 584  : 		}

  0004a	c2 04 00	 ret	 4
?push_back@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@QAEXABQAUtagTCHAR@@@Z ENDP ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::push_back
_TEXT	ENDS
PUBLIC	?InsertCharacter@CTUser@@QAEXPAUtagTCHAR@@@Z	; CTUser::InsertCharacter
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tloginsvr\tuser.cpp
;	COMDAT ?InsertCharacter@CTUser@@QAEXPAUtagTCHAR@@@Z
_TEXT	SEGMENT
_pChar$ = 8						; size = 4
?InsertCharacter@CTUser@@QAEXPAUtagTCHAR@@@Z PROC NEAR	; CTUser::InsertCharacter, COMDAT
; _this$ = ecx

; 69   : 	m_vCHAR.push_back(pChar);

  00000	81 c1 2c 01 01
	00		 add	 ecx, 65836		; 0001012cH
  00006	56		 push	 esi
  00007	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0000a	85 f6		 test	 esi, esi
  0000c	75 04		 jne	 SHORT $L110240
  0000e	33 d2		 xor	 edx, edx
  00010	eb 08		 jmp	 SHORT $L110241
$L110240:
  00012	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00015	2b d6		 sub	 edx, esi
  00017	c1 fa 02	 sar	 edx, 2
$L110241:
  0001a	85 f6		 test	 esi, esi
  0001c	74 1f		 je	 SHORT $L110302
  0001e	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00021	2b c6		 sub	 eax, esi
  00023	c1 f8 02	 sar	 eax, 2
  00026	3b d0		 cmp	 edx, eax
  00028	73 13		 jae	 SHORT $L110302
  0002a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0002d	8b 54 24 08	 mov	 edx, DWORD PTR _pChar$[esp]
  00031	89 10		 mov	 DWORD PTR [eax], edx
  00033	83 c0 04	 add	 eax, 4
  00036	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00039	5e		 pop	 esi

; 70   : 
; 71   : }

  0003a	c2 04 00	 ret	 4

; 69   : 	m_vCHAR.push_back(pChar);

$L110302:
  0003d	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00040	8d 54 24 08	 lea	 edx, DWORD PTR _pChar$[esp]
  00044	52		 push	 edx
  00045	6a 01		 push	 1
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@PAUtagTCHAR@@V?$allocator@PAUtagTCHAR@@@std@@@std@@IAEXViterator@12@IABQAUtagTCHAR@@@Z ; std::vector<tagTCHAR *,std::allocator<tagTCHAR *> >::_Insert_n
  0004d	5e		 pop	 esi

; 70   : 
; 71   : }

  0004e	c2 04 00	 ret	 4
?InsertCharacter@CTUser@@QAEXPAUtagTCHAR@@@Z ENDP	; CTUser::InsertCharacter
_TEXT	ENDS
END
