; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\TPlayer.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_02EMFKHFLK@?$CFX?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??0CTPlayer@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTPlayer@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$map@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CTPlayer@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPartyID@CTPlayer@@QAEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetCorpsID@CTPlayer@@QAEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetGuildID@CTPlayer@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPartyChiefID@CTPlayer@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckProtected@CTPlayer@@QAEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddProtected@CTPlayer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DelProtected@CTPlayer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CheckChat@CTPlayer@@QAEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CanTalk@CTPlayer@@QAEEPAV1@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Left@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$map@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAEAAUtagTCHATLOG@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAEXABUtagTCHATLOG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBEAAU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@QAE@ABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetManager@?$CSimpleStringT@D$0A@@ATL@@QBEPAUIAtlStringMgr@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Color@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@1@ABV?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Insert@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Max@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Kfn@?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@SAABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@QBE_NABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE?AViterator@12@V312@ABUtagTCHATLOG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buy@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEPAUtagTCHATLOG@@PAU3@IABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Vector_val@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAE@V?$allocator@UtagTCHATLOG@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@UtagTCHATLOG@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Fiterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBEABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@3@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@1@AB_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEAAUtagTCHATLOG@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??MATL@@YA_NABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myval@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAAU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Init@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lbound@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@ABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree_val@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@1@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEXPAUtagTCHATLOG@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Insert_n@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEXViterator@12@IABUtagTCHATLOG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xlen@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@UtagTCHATLOG@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@UtagTCHATLOG@@@std@@QAEXPAUtagTCHATLOG@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@UtagTCHATLOG@@@std@@QAEPAUtagTCHATLOG@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Fconst_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE@PAUtagTCHATLOG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Giterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEHABVconst_iterator@12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEABUtagTCHATLOG@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compare@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree_ptr@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@1@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@UtagTCHATLOG@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE@PAUtagTCHATLOG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Gconst_iterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEHABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@QAE@ABU01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringCompare@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@1@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@QAE@U?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_fill_n@PAUtagTCHATLOG@@IU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAXPAUtagTCHATLOG@@IABU1@AAV?$allocator@UtagTCHATLOG@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAXPAUtagTCHATLOG@@0AAV?$allocator@UtagTCHATLOG@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ucopy@PAUtagTCHATLOG@@@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEPAUtagTCHATLOG@@PAU2@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill@PAUtagTCHATLOG@@U1@@std@@YAXPAUtagTCHATLOG@@0ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$copy_backward@PAUtagTCHATLOG@@PAU1@@std@@YAPAUtagTCHATLOG@@PAU1@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@UtagTCHATLOG@@@std@@YAPAUtagTCHATLOG@@IPAU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_G_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagTCHATLOG@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagTCHATLOG@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagTCHATLOG@@IU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAXPAUtagTCHATLOG@@IABU1@AAV?$allocator@UtagTCHATLOG@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAXPAUtagTCHATLOG@@0AAV?$allocator@UtagTCHATLOG@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAUtagTCHATLOG@@PAU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAPAUtagTCHATLOG@@PAU1@00AAV?$allocator@UtagTCHATLOG@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUtagTCHATLOG@@PAU1@@std@@YAPAUtagTCHATLOG@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@UtagTCHATLOG@@@std@@QAEXPAUtagTCHATLOG@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagTCHATLOG@@@std@@QAEXPAUtagTCHATLOG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagTCHATLOG@@PAU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAPAUtagTCHATLOG@@PAU1@00AAV?$allocator@UtagTCHATLOG@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@UtagTCHATLOG@@U1@@std@@YAXPAUtagTCHATLOG@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagTCHATLOG@@@std@@YAXPAUtagTCHATLOG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@G@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CopyChars@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CAtlException@ATL@@QAE@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __TI1?AVCAtlException@ATL@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA1?AVCAtlException@ATL@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVCAtlException@ATL@@@84
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVCAtlException@ATL@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetLength@?$CSimpleStringT@D$0A@@ATL@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?reset@tagTCHATLOG@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0tagTCHATLOG@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetDefaultManager@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUIAtlStringMgr@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CTPlayer@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?GetPartyID@CTPlayer@@QAEGXZ			; CTPlayer::GetPartyID
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\trelaysvr\tplayer.cpp
;	COMDAT ?GetPartyID@CTPlayer@@QAEGXZ
_TEXT	SEGMENT
?GetPartyID@CTPlayer@@QAEGXZ PROC NEAR			; CTPlayer::GetPartyID, COMDAT
; _this$ = ecx

; 44   : 	return m_wPartyID;

  00000	66 8b 81 1a 01
	01 00		 mov	 ax, WORD PTR [ecx+65818]

; 45   : }

  00007	c3		 ret	 0
?GetPartyID@CTPlayer@@QAEGXZ ENDP			; CTPlayer::GetPartyID
_TEXT	ENDS
PUBLIC	?GetCorpsID@CTPlayer@@QAEGXZ			; CTPlayer::GetCorpsID
; Function compile flags: /Ogty
;	COMDAT ?GetCorpsID@CTPlayer@@QAEGXZ
_TEXT	SEGMENT
?GetCorpsID@CTPlayer@@QAEGXZ PROC NEAR			; CTPlayer::GetCorpsID, COMDAT
; _this$ = ecx

; 49   : 	return m_wCorpsID;

  00000	66 8b 81 1c 01
	01 00		 mov	 ax, WORD PTR [ecx+65820]

; 50   : }

  00007	c3		 ret	 0
?GetCorpsID@CTPlayer@@QAEGXZ ENDP			; CTPlayer::GetCorpsID
_TEXT	ENDS
PUBLIC	?GetGuildID@CTPlayer@@QAEKXZ			; CTPlayer::GetGuildID
; Function compile flags: /Ogty
;	COMDAT ?GetGuildID@CTPlayer@@QAEKXZ
_TEXT	SEGMENT
?GetGuildID@CTPlayer@@QAEKXZ PROC NEAR			; CTPlayer::GetGuildID, COMDAT
; _this$ = ecx

; 54   : 	return m_dwGuildID;

  00000	8b 81 04 01 01
	00		 mov	 eax, DWORD PTR [ecx+65796]

; 55   : }

  00006	c3		 ret	 0
?GetGuildID@CTPlayer@@QAEKXZ ENDP			; CTPlayer::GetGuildID
_TEXT	ENDS
PUBLIC	?GetPartyChiefID@CTPlayer@@QAEKXZ		; CTPlayer::GetPartyChiefID
; Function compile flags: /Ogty
;	COMDAT ?GetPartyChiefID@CTPlayer@@QAEKXZ
_TEXT	SEGMENT
?GetPartyChiefID@CTPlayer@@QAEKXZ PROC NEAR		; CTPlayer::GetPartyChiefID, COMDAT
; _this$ = ecx

; 59   : 	return m_dwPartyChiefID;

  00000	8b 81 08 01 01
	00		 mov	 eax, DWORD PTR [ecx+65800]

; 60   : }

  00006	c3		 ret	 0
?GetPartyChiefID@CTPlayer@@QAEKXZ ENDP			; CTPlayer::GetPartyChiefID
_TEXT	ENDS
PUBLIC	?CanTalk@CTPlayer@@QAEEPAV1@E@Z			; CTPlayer::CanTalk
; Function compile flags: /Ogty
;	COMDAT ?CanTalk@CTPlayer@@QAEEPAV1@E@Z
_TEXT	SEGMENT
_pTarget$ = 8						; size = 4
_bChatType$ = 12					; size = 1
?CanTalk@CTPlayer@@QAEEPAV1@E@Z PROC NEAR		; CTPlayer::CanTalk, COMDAT
; _this$ = ecx

; 161  : 	if(m_bCountry == TCONTRY_PEACE ||
; 162  :         pTarget->m_bCountry == TCONTRY_PEACE)

  00000	8a 81 22 01 01
	00		 mov	 al, BYTE PTR [ecx+65826]
  00006	3c 04		 cmp	 al, 4
  00008	53		 push	 ebx
  00009	56		 push	 esi
  0000a	74 57		 je	 SHORT $L104215
  0000c	8b 74 24 0c	 mov	 esi, DWORD PTR _pTarget$[esp+4]
  00010	8a 9e 22 01 01
	00		 mov	 bl, BYTE PTR [esi+65826]
  00016	80 fb 04	 cmp	 bl, 4
  00019	74 48		 je	 SHORT $L104215

; 164  : 
; 165  : 	switch(bChatType)

  0001b	0f b6 54 24 10	 movzx	 edx, BYTE PTR _bChatType$[esp+4]
  00020	83 fa 09	 cmp	 edx, 9
  00023	77 62		 ja	 SHORT $L104225
  00025	0f b6 92 00 00
	00 00		 movzx	 edx, BYTE PTR $L105492[edx]
  0002c	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $L105493[edx*4]
$L104220:

; 166  : 	{
; 167  : 	case CHAT_NEAR:
; 168  : 		{
; 169  : 			if(	(m_bCountry == TCONTRY_B ||
; 170  : 				pTarget->m_bCountry == TCONTRY_B) &&
; 171  : 				m_wUnitID == 3)

  00033	3c 02		 cmp	 al, 2
  00035	74 05		 je	 SHORT $L104222
  00037	80 fb 02	 cmp	 bl, 2
  0003a	75 0a		 jne	 SHORT $L104221
$L104222:
  0003c	66 83 b9 20 01
	01 00 03	 cmp	 WORD PTR [ecx+65824], 3

; 172  : 				return TRUE;

  00044	74 1d		 je	 SHORT $L104215
$L104221:

; 173  : 
; 174  : 			if((m_bAidCountry != TCONTRY_N ? m_bAidCountry : m_bCountry) == (pTarget->m_bAidCountry != TCONTRY_N ? pTarget->m_bAidCountry : pTarget->m_bCountry))

  00046	8a 89 23 01 01
	00		 mov	 cl, BYTE PTR [ecx+65827]
  0004c	80 f9 03	 cmp	 cl, 3
  0004f	75 02		 jne	 SHORT $L105485
  00051	8a c8		 mov	 cl, al
$L105485:
  00053	8a 86 23 01 01
	00		 mov	 al, BYTE PTR [esi+65827]
  00059	3c 03		 cmp	 al, 3
  0005b	75 02		 jne	 SHORT $L105487
  0005d	8a c3		 mov	 al, bl
$L105487:
  0005f	3a c8		 cmp	 cl, al
  00061	75 24		 jne	 SHORT $L104225
$L104215:
  00063	5e		 pop	 esi

; 163  : 		return TRUE;

  00064	b0 01		 mov	 al, 1
  00066	5b		 pop	 ebx

; 190  : }

  00067	c2 08 00	 ret	 8
$L104224:

; 175  : 				return TRUE;
; 176  : 		}
; 177  : 		break;
; 178  : 	case CHAT_WHISPER:
; 179  : 	case CHAT_SHOW:
; 180  : 	case CHAT_MAP:
; 181  : 	case CHAT_WORLD:
; 182  : 		{
; 183  : 			if((m_bAidCountry != TCONTRY_N ? m_bAidCountry : m_bCountry) == (pTarget->m_bAidCountry != TCONTRY_N ? pTarget->m_bAidCountry : pTarget->m_bCountry))

  0006a	8a 89 23 01 01
	00		 mov	 cl, BYTE PTR [ecx+65827]
  00070	80 f9 03	 cmp	 cl, 3
  00073	75 02		 jne	 SHORT $L105489
  00075	8a c8		 mov	 cl, al
$L105489:
  00077	8a 86 23 01 01
	00		 mov	 al, BYTE PTR [esi+65827]
  0007d	3c 03		 cmp	 al, 3
  0007f	75 02		 jne	 SHORT $L105491
  00081	8a c3		 mov	 al, bl
$L105491:
  00083	3a c8		 cmp	 cl, al

; 184  : 				return TRUE;

  00085	74 dc		 je	 SHORT $L104215
$L104225:
  00087	5e		 pop	 esi

; 185  : 		}
; 186  : 		break;
; 187  : 	}
; 188  : 
; 189  : 	return FALSE;

  00088	32 c0		 xor	 al, al
  0008a	5b		 pop	 ebx

; 190  : }

  0008b	c2 08 00	 ret	 8
  0008e	8b ff		 npad	 2
$L105493:
  00090	00 00 00 00	 DD	 $L104224
  00094	00 00 00 00	 DD	 $L104220
  00098	00 00 00 00	 DD	 $L104225
$L105492:
  0009c	00		 DB	 0
  0009d	01		 DB	 1
  0009e	00		 DB	 0
  0009f	00		 DB	 0
  000a0	02		 DB	 2
  000a1	02		 DB	 2
  000a2	02		 DB	 2
  000a3	02		 DB	 2
  000a4	02		 DB	 2
  000a5	00		 DB	 0
?CanTalk@CTPlayer@@QAEEPAV1@E@Z ENDP			; CTPlayer::CanTalk
_TEXT	ENDS
PUBLIC	?size@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEIXZ ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?size@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::size, COMDAT
; _this$ = ecx

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L105497
  00007	33 c0		 xor	 eax, eax

; 517  : 		}

  00009	c3		 ret	 0
$L105497:

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  0000a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 03	 sar	 eax, 3

; 517  : 		}

  00012	c3		 ret	 0
?size@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::size
_TEXT	ENDS
PUBLIC	?_Color@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Color
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Color@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Color, COMDAT

; 132  : 		return ((_Charref)(*_Pnode)._Color);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 14	 add	 eax, 20			; 00000014H

; 133  : 		}

  00007	c3		 ret	 0
?_Color@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Color
_TEXT	ENDS
PUBLIC	?_Isnil@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Isnil
; Function compile flags: /Ogty
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Isnil, COMDAT

; 137  : 		return ((_Charref)(*_Pnode)._Isnil);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 15	 add	 eax, 21			; 00000015H

; 138  : 		}

  00007	c3		 ret	 0
?_Isnil@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Isnil
_TEXT	ENDS
PUBLIC	?_Left@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Left
; Function compile flags: /Ogty
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Left, COMDAT

; 147  : 		return ((_Nodepref)(*_Pnode)._Left);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 148  : 		}

  00004	c3		 ret	 0
?_Left@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Left
_TEXT	ENDS
PUBLIC	?_Parent@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Parent
; Function compile flags: /Ogty
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Parent, COMDAT

; 152  : 		return ((_Nodepref)(*_Pnode)._Parent);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 153  : 		}

  00007	c3		 ret	 0
?_Parent@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Parent
_TEXT	ENDS
PUBLIC	?_Right@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Right
; Function compile flags: /Ogty
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Right, COMDAT

; 157  : 		return ((_Nodepref)(*_Pnode)._Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 08	 add	 eax, 8

; 158  : 		}

  00007	c3		 ret	 0
?_Right@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Right
_TEXT	ENDS
PUBLIC	?_Lmost@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Lmost
; Function compile flags: /Ogty
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 1005 : 		return (_Left(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1006 : 		}

  00003	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Lmost
_TEXT	ENDS
PUBLIC	?_Max@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Max
; Function compile flags: /Ogty
;	COMDAT ?_Max@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Max, COMDAT

; 1035 : 		while (!_Isnil(_Right(_Pnode)))

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00007	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  0000a	84 d2		 test	 dl, dl
  0000c	75 0e		 jne	 SHORT $L104600
  0000e	8b ff		 npad	 2
$L104599:

; 1036 : 			_Pnode = _Right(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00015	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00018	84 d2		 test	 dl, dl
  0001a	74 f4		 je	 SHORT $L104599
$L104600:

; 1037 : 		return (_Pnode);
; 1038 : 		}

  0001c	c3		 ret	 0
?_Max@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Max
_TEXT	ENDS
PUBLIC	?_Min@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Min
; Function compile flags: /Ogty
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Min, COMDAT

; 1042 : 		while (!_Isnil(_Left(_Pnode)))

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	8b 08		 mov	 ecx, DWORD PTR [eax]
  00006	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00009	84 d2		 test	 dl, dl
  0000b	75 0e		 jne	 SHORT $L104604
  0000d	8d 49 00	 npad	 3
$L104603:

; 1043 : 			_Pnode = _Left(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00017	84 d2		 test	 dl, dl
  00019	74 f5		 je	 SHORT $L104603
$L104604:

; 1044 : 		return (_Pnode);
; 1045 : 		}

  0001b	c3		 ret	 0
?_Min@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Min
_TEXT	ENDS
PUBLIC	?_Rmost@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Rmost
; Function compile flags: /Ogty
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 1049 : 		return (_Right(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 08	 add	 eax, 8

; 1050 : 		}

  00006	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Rmost
_TEXT	ENDS
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Root
; Function compile flags: /Ogty
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Root, COMDAT
; _this$ = ecx

; 1059 : 		return (_Parent(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 04	 add	 eax, 4

; 1060 : 		}

  00006	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Root
_TEXT	ENDS
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Rrotate
; Function compile flags: /Ogty
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 1069 : 		_Nodeptr _Pnode = _Left(_Wherenode);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Wherenode$[esp-4]
  00004	8b 02		 mov	 eax, DWORD PTR [edx]
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 1070 : 		_Left(_Wherenode) = _Right(_Pnode);

  00008	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0000b	89 32		 mov	 DWORD PTR [edx], esi

; 1071 : 
; 1072 : 		if (!_Isnil(_Right(_Pnode)))

  0000d	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00010	8a 5e 15	 mov	 bl, BYTE PTR [esi+21]
  00013	84 db		 test	 bl, bl
  00015	75 03		 jne	 SHORT $L104612

; 1073 : 			_Parent(_Right(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$L104612:

; 1074 : 		_Parent(_Pnode) = _Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1075 : 
; 1076 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00026	75 0e		 jne	 SHORT $L104613

; 1077 : 			_Root() = _Pnode;

  00028	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0002b	5e		 pop	 esi

; 1082 : 
; 1083 : 		_Right(_Pnode) = _Wherenode;

  0002c	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1084 : 		_Parent(_Wherenode) = _Pnode;

  0002f	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00032	5b		 pop	 ebx

; 1085 : 		}

  00033	c2 04 00	 ret	 4
$L104613:

; 1078 : 		else if (_Wherenode == _Right(_Parent(_Wherenode)))

  00036	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00039	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003c	75 0e		 jne	 SHORT $L104615

; 1079 : 			_Right(_Parent(_Wherenode)) = _Pnode;

  0003e	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00041	5e		 pop	 esi

; 1082 : 
; 1083 : 		_Right(_Pnode) = _Wherenode;

  00042	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1084 : 		_Parent(_Wherenode) = _Pnode;

  00045	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00048	5b		 pop	 ebx

; 1085 : 		}

  00049	c2 04 00	 ret	 4
$L104615:

; 1080 : 		else
; 1081 : 			_Left(_Parent(_Wherenode)) = _Pnode;

  0004c	89 01		 mov	 DWORD PTR [ecx], eax
  0004e	5e		 pop	 esi

; 1082 : 
; 1083 : 		_Right(_Pnode) = _Wherenode;

  0004f	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1084 : 		_Parent(_Wherenode) = _Pnode;

  00052	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00055	5b		 pop	 ebx

; 1085 : 		}

  00056	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Rrotate
_TEXT	ENDS
PUBLIC	?_Kfn@?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@SAABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@@Z ; std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0>::_Kfn
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\map
;	COMDAT ?_Kfn@?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@SAABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@SAABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@@Z PROC NEAR ; std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0>::_Kfn, COMDAT

; 64   : 		return (_Val.first);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val$[esp-4]

; 65   : 		}

  00004	c3		 ret	 0
?_Kfn@?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@SAABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@@Z ENDP ; std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0>::_Kfn
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@std@@QAE@XZ ; std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@std@@QAE@XZ PROC NEAR ; std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@std@@QAE@XZ ENDP ; std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node>::deallocate
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Ogty
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@I@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	?capacity@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEIXZ ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::capacity
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?capacity@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::capacity, COMDAT
; _this$ = ecx

; 458  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L105647
  00007	33 c0		 xor	 eax, eax

; 459  : 		}

  00009	c3		 ret	 0
$L105647:

; 458  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  0000a	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 03	 sar	 eax, 3

; 459  : 		}

  00012	c3		 ret	 0
?capacity@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::capacity
_TEXT	ENDS
PUBLIC	??0CAtlException@ATL@@QAE@J@Z			; ATL::CAtlException::CAtlException
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlexcept.h
;	COMDAT ??0CAtlException@ATL@@QAE@J@Z
_TEXT	SEGMENT
_hr$ = 8						; size = 4
??0CAtlException@ATL@@QAE@J@Z PROC NEAR			; ATL::CAtlException::CAtlException, COMDAT
; _this$ = ecx

; 40   : 	{

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR _hr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 41   : 	}

  00008	c2 04 00	 ret	 4
??0CAtlException@ATL@@QAE@J@Z ENDP			; ATL::CAtlException::CAtlException
_TEXT	ENDS
PUBLIC	?AtlThrow@ATL@@YGXJ@Z				; ATL::AtlThrow
PUBLIC	__TI1?AVCAtlException@ATL@@
PUBLIC	__CTA1?AVCAtlException@ATL@@
PUBLIC	??_R0?AVCAtlException@ATL@@@8			; ATL::CAtlException `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVCAtlException@ATL@@@84
EXTRN	__CxxThrowException@8:NEAR
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
;	COMDAT __TI1?AVCAtlException@ATL@@
xdata$x	SEGMENT
__TI1?AVCAtlException@ATL@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1?AVCAtlException@ATL@@
xdata$x	ENDS
;	COMDAT __CTA1?AVCAtlException@ATL@@
xdata$x	SEGMENT
__CTA1?AVCAtlException@ATL@@ DD 01H
	DD	FLAT:__CT??_R0?AVCAtlException@ATL@@@84
xdata$x	ENDS
;	COMDAT __CT??_R0?AVCAtlException@ATL@@@84
xdata$x	SEGMENT
__CT??_R0?AVCAtlException@ATL@@@84 DD 00H
	DD	FLAT:??_R0?AVCAtlException@ATL@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT ??_R0?AVCAtlException@ATL@@@8
_DATA	SEGMENT
??_R0?AVCAtlException@ATL@@@8 DD FLAT:??_7type_info@@6B@ ; ATL::CAtlException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCAtlException@ATL@@', 00H
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?AtlThrow@ATL@@YGXJ@Z
_TEXT	SEGMENT
$T105655 = 8						; size = 4
_hr$ = 8						; size = 4
?AtlThrow@ATL@@YGXJ@Z PROC NEAR				; ATL::AtlThrow, COMDAT

; 62   : 	ATLTRACE(atlTraceException, 0, _T("AtlThrow: hr = 0x%x\n"), hr );
; 63   : #ifdef _AFX
; 64   : 	if( hr == E_OUTOFMEMORY )
; 65   : 	{
; 66   : 		AfxThrowMemoryException();
; 67   : 	}
; 68   : 	else
; 69   : 	{
; 70   : 		AfxThrowOleException( hr );
; 71   : 	}
; 72   : #else
; 73   : 	throw CAtlException( hr );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _hr$[esp-4]
  00004	68 00 00 00 00	 push	 OFFSET FLAT:__TI1?AVCAtlException@ATL@@
  00009	8d 4c 24 08	 lea	 ecx, DWORD PTR $T105655[esp]
  0000d	51		 push	 ecx
  0000e	89 44 24 0c	 mov	 DWORD PTR $T105655[esp+4], eax
  00012	e8 00 00 00 00	 call	 __CxxThrowException@8
$L105662:
$L105661:
  00017	cc		 int	 3
?AtlThrow@ATL@@YGXJ@Z ENDP				; ATL::AtlThrow
_TEXT	ENDS
PUBLIC	??0?$allocator@UtagTCHATLOG@@@std@@QAE@XZ	; std::allocator<tagTCHATLOG>::allocator<tagTCHATLOG>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@UtagTCHATLOG@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@UtagTCHATLOG@@@std@@QAE@XZ PROC NEAR	; std::allocator<tagTCHATLOG>::allocator<tagTCHATLOG>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@UtagTCHATLOG@@@std@@QAE@XZ ENDP		; std::allocator<tagTCHATLOG>::allocator<tagTCHATLOG>
_TEXT	ENDS
PUBLIC	??8const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::operator==
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::operator==, COMDAT
; _this$ = ecx

; 241  : 			return (_Ptr == _Right._Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	f7 d8		 neg	 eax
  0000a	1b c0		 sbb	 eax, eax
  0000c	40		 inc	 eax

; 242  : 			}

  0000d	c2 04 00	 ret	 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::operator==
_TEXT	ENDS
PUBLIC	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::_Mynode
; Function compile flags: /Ogty
;	COMDAT ?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@3@XZ
_TEXT	SEGMENT
?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@3@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::_Mynode, COMDAT
; _this$ = ecx

; 284  : 			return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 285  : 			}

  00002	c3		 ret	 0
?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@3@XZ ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::_Mynode
_TEXT	ENDS
PUBLIC	??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@1@AB_N@Z ; std::pair<std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::iterator,bool>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\utility
;	COMDAT ??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@1@AB_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@1@AB_N@Z PROC NEAR ; std::pair<std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::iterator,bool>, COMDAT
; _this$ = ecx

; 34   : 		{	// construct from specified values

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Val1$[esp-4]
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val2$[esp-4]
  0000c	89 10		 mov	 DWORD PTR [eax], edx
  0000e	8a 11		 mov	 dl, BYTE PTR [ecx]
  00010	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 35   : 		}

  00013	c2 08 00	 ret	 8
??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@1@AB_N@Z ENDP ; std::pair<std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::iterator,bool>
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC NEAR			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?_Myval@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAAU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Myval
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Myval@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAAU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAAU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Myval, COMDAT

; 162  : 		return ((_Vref)(*_Pnode)._Myval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 0c	 add	 eax, 12			; 0000000cH

; 163  : 		}

  00007	c3		 ret	 0
?_Myval@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAAAU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Myval
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@std@@QAE@ABV01@@Z PROC NEAR ; std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >
_TEXT	ENDS
PUBLIC	??0?$allocator@UtagTCHATLOG@@@std@@QAE@ABV01@@Z	; std::allocator<tagTCHATLOG>::allocator<tagTCHATLOG>
; Function compile flags: /Ogty
;	COMDAT ??0?$allocator@UtagTCHATLOG@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@UtagTCHATLOG@@@std@@QAE@ABV01@@Z PROC NEAR ; std::allocator<tagTCHATLOG>::allocator<tagTCHATLOG>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@UtagTCHATLOG@@@std@@QAE@ABV01@@Z ENDP	; std::allocator<tagTCHATLOG>::allocator<tagTCHATLOG>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@UtagTCHATLOG@@@std@@QAEXPAUtagTCHATLOG@@I@Z ; std::allocator<tagTCHATLOG>::deallocate
; Function compile flags: /Ogty
;	COMDAT ?deallocate@?$allocator@UtagTCHATLOG@@@std@@QAEXPAUtagTCHATLOG@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@UtagTCHATLOG@@@std@@QAEXPAUtagTCHATLOG@@I@Z PROC NEAR ; std::allocator<tagTCHATLOG>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@UtagTCHATLOG@@@std@@QAEXPAUtagTCHATLOG@@I@Z ENDP ; std::allocator<tagTCHATLOG>::deallocate
_TEXT	ENDS
PUBLIC	??0const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::const_iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 200  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 201  : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??Yiterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAEAAV012@H@Z ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::iterator::operator+=
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Yiterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Yiterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::iterator::operator+=, COMDAT
; _this$ = ecx

; 255  : 			{	// increment by integer

  00000	8b c1		 mov	 eax, ecx

; 256  : 			this->_Myptr += _Off;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 cd 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*8]
  0000d	01 10		 add	 DWORD PTR [eax], edx

; 257  : 			return (*this);
; 258  : 			}

  0000f	c2 04 00	 ret	 4
??Yiterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::iterator::operator+=
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEABUtagTCHATLOG@@XZ ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEABUtagTCHATLOG@@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEABUtagTCHATLOG@@XZ PROC NEAR ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 80   : 
; 81   : 
; 82   : 			return (*_Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 83   : 			}

  00002	c3		 ret	 0
??Dconst_iterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEABUtagTCHATLOG@@XZ ENDP ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Root
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Root, COMDAT
; _this$ = ecx

; 1064 : 		return (_Parent(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 04	 add	 eax, 4

; 1065 : 		}

  00006	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IBEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Root
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@std@@QBEIXZ ; std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?max_size@?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@std@@QBEIXZ PROC NEAR ; std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 159  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@std@@QBEIXZ ENDP ; std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@UtagTCHATLOG@@@std@@QBEIXZ ; std::allocator<tagTCHATLOG>::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$allocator@UtagTCHATLOG@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@UtagTCHATLOG@@@std@@QBEIXZ PROC NEAR ; std::allocator<tagTCHATLOG>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 159  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@UtagTCHATLOG@@@std@@QBEIXZ ENDP	; std::allocator<tagTCHATLOG>::max_size
_TEXT	ENDS
PUBLIC	?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::_Dec
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::_Dec, COMDAT
; _this$ = ecx

; 251  : 			if (_Isnil(_Ptr))

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00005	84 d2		 test	 dl, dl
  00007	74 06		 je	 SHORT $L104898

; 252  : 				_Ptr = _Right(_Ptr);	// end() ==> rightmost

  00009	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000c	89 01		 mov	 DWORD PTR [ecx], eax

; 263  : 				}
; 264  : 			}

  0000e	c3		 ret	 0
$L104898:

; 253  : 			else if (!_Isnil(_Left(_Ptr)))

  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	53		 push	 ebx
  00012	8a 5a 15	 mov	 bl, BYTE PTR [edx+21]
  00015	84 db		 test	 bl, bl
  00017	75 1a		 jne	 SHORT $L105769

; 254  : 				_Ptr = _Max(_Left(_Ptr));	// ==> largest of left subtree

  00019	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001c	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  0001f	84 db		 test	 bl, bl
  00021	75 0c		 jne	 SHORT $L105747
$L105746:
  00023	8b d0		 mov	 edx, eax
  00025	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00028	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  0002b	84 db		 test	 bl, bl
  0002d	74 f4		 je	 SHORT $L105746
$L105747:
  0002f	89 11		 mov	 DWORD PTR [ecx], edx
  00031	5b		 pop	 ebx

; 263  : 				}
; 264  : 			}

  00032	c3		 ret	 0
$L105769:

; 255  : 			else
; 256  : 				{	// climb looking for left subtree
; 257  : 				_Nodeptr _Pnode;
; 258  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 259  : 					&& _Ptr == _Left(_Pnode))

  00033	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00036	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00039	84 d2		 test	 dl, dl
  0003b	75 1e		 jne	 SHORT $L105772
  0003d	8d 49 00	 npad	 3
$L104904:
  00040	8b 11		 mov	 edx, DWORD PTR [ecx]
  00042	3b 10		 cmp	 edx, DWORD PTR [eax]
  00044	75 0c		 jne	 SHORT $L104905

; 260  : 					_Ptr = _Pnode;	// ==> parent while left subtree

  00046	89 01		 mov	 DWORD PTR [ecx], eax
  00048	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004b	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0004e	84 d2		 test	 dl, dl
  00050	74 ee		 je	 SHORT $L104904
$L104905:

; 261  : 				if (!_Isnil(_Pnode))

  00052	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00055	84 d2		 test	 dl, dl
  00057	75 02		 jne	 SHORT $L105772

; 262  : 					_Ptr = _Pnode;	// ==> parent if not head

  00059	89 01		 mov	 DWORD PTR [ecx], eax
$L105772:
  0005b	5b		 pop	 ebx

; 263  : 				}
; 264  : 			}

  0005c	c3		 ret	 0
?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::_Dec
_TEXT	ENDS
PUBLIC	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::_Inc
; Function compile flags: /Ogty
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::_Inc, COMDAT
; _this$ = ecx

; 268  : 			if (_Isnil(_Ptr))

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00005	84 d2		 test	 dl, dl
  00007	75 4d		 jne	 SHORT $L104912

; 269  : 				;	// end() shouldn't be incremented, don't move
; 270  : 			else if (!_Isnil(_Right(_Ptr)))

  00009	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0000c	53		 push	 ebx
  0000d	8a 5a 15	 mov	 bl, BYTE PTR [edx+21]
  00010	84 db		 test	 bl, bl
  00012	75 1b		 jne	 SHORT $L105820

; 271  : 				_Ptr = _Min(_Right(_Ptr));	// ==> smallest of right subtree

  00014	8b 02		 mov	 eax, DWORD PTR [edx]
  00016	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  00019	84 db		 test	 bl, bl
  0001b	75 0e		 jne	 SHORT $L105801
  0001d	8d 49 00	 npad	 3
$L105800:
  00020	8b d0		 mov	 edx, eax
  00022	8b 02		 mov	 eax, DWORD PTR [edx]
  00024	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  00027	84 db		 test	 bl, bl
  00029	74 f5		 je	 SHORT $L105800
$L105801:
  0002b	89 11		 mov	 DWORD PTR [ecx], edx
  0002d	5b		 pop	 ebx

; 279  : 				}
; 280  : 			}

  0002e	c3		 ret	 0
$L105820:

; 272  : 			else
; 273  : 				{	// climb looking for right subtree
; 274  : 				_Nodeptr _Pnode;
; 275  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 276  : 					&& _Ptr == _Right(_Pnode))

  0002f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00032	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00035	84 d2		 test	 dl, dl
  00037	75 1a		 jne	 SHORT $L104916
  00039	8d a4 24 00 00
	00 00		 npad	 7
$L104915:
  00040	8b 11		 mov	 edx, DWORD PTR [ecx]
  00042	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00045	75 0c		 jne	 SHORT $L104916

; 277  : 					_Ptr = _Pnode;	// ==> parent while right subtree

  00047	89 01		 mov	 DWORD PTR [ecx], eax
  00049	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0004f	84 d2		 test	 dl, dl
  00051	74 ed		 je	 SHORT $L104915
$L104916:

; 278  : 				_Ptr = _Pnode;	// ==> parent (head if end())

  00053	89 01		 mov	 DWORD PTR [ecx], eax
  00055	5b		 pop	 ebx
$L104912:

; 279  : 				}
; 280  : 			}

  00056	c3		 ret	 0
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::_Inc
_TEXT	ENDS
PUBLIC	??0const_iterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE@PAUtagTCHATLOG@@@Z ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::const_iterator::const_iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0const_iterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE@PAUtagTCHATLOG@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0const_iterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE@PAUtagTCHATLOG@@@Z PROC NEAR ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 73   : 		const_iterator(_Tptr _Ptr)

  00000	8b c1		 mov	 eax, ecx

; 74   : 			{	// construct with pointer _Ptr
; 75   : 			_Myptr = _Ptr;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 76   : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE@PAUtagTCHATLOG@@@Z ENDP ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??Gconst_iterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEHABV012@@Z ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::const_iterator::operator-
; Function compile flags: /Ogty
;	COMDAT ??Gconst_iterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEHABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Gconst_iterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEHABV012@@Z PROC NEAR ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::const_iterator::operator-, COMDAT
; _this$ = ecx

; 141  : 
; 142  : 
; 143  : 			return (_Myptr - _Right._Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	c1 f8 03	 sar	 eax, 3

; 144  : 			}

  0000b	c2 04 00	 ret	 4
??Gconst_iterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEHABV012@@Z ENDP ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::const_iterator::operator-
_TEXT	ENDS
PUBLIC	?StringCompare@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z	; ATL::ChTraitsCRT<char>::StringCompare
EXTRN	__mbscmp:NEAR
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?StringCompare@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z
_TEXT	SEGMENT
_pszA$ = 8						; size = 4
_pszB$ = 12						; size = 4
?StringCompare@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z PROC NEAR	; ATL::ChTraitsCRT<char>::StringCompare, COMDAT

; 336  : 		return _mbscmp( reinterpret_cast< const unsigned char* >( pszA ), reinterpret_cast< const unsigned char* >( pszB ) );

  00000	e9 00 00 00 00	 jmp	 __mbscmp
?StringCompare@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z ENDP	; ATL::ChTraitsCRT<char>::StringCompare
_TEXT	ENDS
PUBLIC	??0?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@QAE@U?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@1@@Z ; std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0>::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\map
;	COMDAT ??0?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@QAE@U?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 1
??0?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@QAE@U?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@1@@Z PROC NEAR ; std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0>::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0>, COMDAT
; _this$ = ecx

; 38   : 		{	// construct with specified comparator

  00000	8b c1		 mov	 eax, ecx

; 39   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@QAE@U?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@1@@Z ENDP ; std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0>::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0>
_TEXT	ENDS
PUBLIC	??$swap@D@std@@YAXAAD0@Z			; std::swap<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\utility
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@D@std@@YAXAAD0@Z PROC NEAR			; std::swap<char>, COMDAT

; 15   : 	_Ty _Tmp = _Left;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	56		 push	 esi

; 16   : 	_Left = _Right, _Right = _Tmp;

  00007	8b 74 24 0c	 mov	 esi, DWORD PTR __Right$[esp]
  0000b	8a 16		 mov	 dl, BYTE PTR [esi]
  0000d	88 10		 mov	 BYTE PTR [eax], dl
  0000f	88 0e		 mov	 BYTE PTR [esi], cl
  00011	5e		 pop	 esi

; 17   : 	}

  00012	c3		 ret	 0
??$swap@D@std@@YAXAAD0@Z ENDP				; std::swap<char>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@0@@Z ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@0@@Z PROC NEAR ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node *>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@0@@Z ENDP ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node *>
_TEXT	ENDS
PUBLIC	??$fill@PAUtagTCHATLOG@@U1@@std@@YAXPAUtagTCHATLOG@@0ABU1@@Z ; std::fill<tagTCHATLOG *,tagTCHATLOG>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$fill@PAUtagTCHATLOG@@U1@@std@@YAXPAUtagTCHATLOG@@0ABU1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAUtagTCHATLOG@@U1@@std@@YAXPAUtagTCHATLOG@@0ABU1@@Z PROC NEAR ; std::fill<tagTCHATLOG *,tagTCHATLOG>, COMDAT

; 1135 : 	for (; _First != _Last; ++_First)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00008	3b c2		 cmp	 eax, edx
  0000a	74 17		 je	 SHORT $L105096
  0000c	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$L105094:

; 1136 : 		*_First = _Val;

  00011	8b 31		 mov	 esi, DWORD PTR [ecx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00018	89 70 04	 mov	 DWORD PTR [eax+4], esi
  0001b	83 c0 08	 add	 eax, 8
  0001e	3b c2		 cmp	 eax, edx
  00020	75 ef		 jne	 SHORT $L105094
  00022	5e		 pop	 esi
$L105096:

; 1137 : 	}

  00023	c3		 ret	 0
??$fill@PAUtagTCHATLOG@@U1@@std@@YAXPAUtagTCHATLOG@@0ABU1@@Z ENDP ; std::fill<tagTCHATLOG *,tagTCHATLOG>
_TEXT	ENDS
PUBLIC	??$_Allocate@UtagTCHATLOG@@@std@@YAPAUtagTCHATLOG@@IPAU1@@Z ; std::_Allocate<tagTCHATLOG>
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Allocate@UtagTCHATLOG@@@std@@YAPAUtagTCHATLOG@@IPAU1@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@UtagTCHATLOG@@@std@@YAPAUtagTCHATLOG@@IPAU1@@Z PROC NEAR ; std::_Allocate<tagTCHATLOG>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 35   : 	}

  00014	c3		 ret	 0
??$_Allocate@UtagTCHATLOG@@@std@@YAPAUtagTCHATLOG@@IPAU1@@Z ENDP ; std::_Allocate<tagTCHATLOG>
_TEXT	ENDS
PUBLIC	??$?0U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node *><std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >
; Function compile flags: /Ogty
;	COMDAT ??$?0U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node *><std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >, COMDAT
; _this$ = ecx

; 120  : 		allocator(const allocator<_Other>&)

  00000	8b c1		 mov	 eax, ecx

; 121  : 		{	// construct from a related allocator (do nothing)
; 122  : 		}

  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node *><std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node>
; Function compile flags: /Ogty
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@0@IPAU120@@Z PROC NEAR ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00007	c1 e0 03	 shl	 eax, 3
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	83 c4 04	 add	 esp, 4

; 35   : 	}

  00013	c3		 ret	 0
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node>
_TEXT	ENDS
PUBLIC	??$?0U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node><std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >
; Function compile flags: /Ogty
;	COMDAT ??$?0U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node><std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >, COMDAT
; _this$ = ecx

; 120  : 		allocator(const allocator<_Other>&)

  00000	8b c1		 mov	 eax, ecx

; 121  : 		{	// construct from a related allocator (do nothing)
; 122  : 		}

  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node><std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAUtagTCHATLOG@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagTCHATLOG@@0@Z ; std::_Ptr_cat<tagTCHATLOG *,tagTCHATLOG *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$_Ptr_cat@PAUtagTCHATLOG@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagTCHATLOG@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAUtagTCHATLOG@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagTCHATLOG@@0@Z PROC NEAR ; std::_Ptr_cat<tagTCHATLOG *,tagTCHATLOG *>, COMDAT

; 211  : 	{	// return pointer category from arbitrary arguments

  00000	51		 push	 ecx

; 212  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 213  : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 214  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@PAUtagTCHATLOG@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagTCHATLOG@@0@Z ENDP ; std::_Ptr_cat<tagTCHATLOG *,tagTCHATLOG *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAUtagTCHATLOG@@PAU1@@std@@YAPAUtagTCHATLOG@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_backward_opt<tagTCHATLOG *,tagTCHATLOG *>
; Function compile flags: /Ogty
;	COMDAT ??$_Copy_backward_opt@PAUtagTCHATLOG@@PAU1@@std@@YAPAUtagTCHATLOG@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_backward_opt@PAUtagTCHATLOG@@PAU1@@std@@YAPAUtagTCHATLOG@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Copy_backward_opt<tagTCHATLOG *,tagTCHATLOG *>, COMDAT

; 1049 : 	while (_First != _Last)

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR __Last$[esp-4]
  00008	3b d1		 cmp	 edx, ecx
  0000a	8b 44 24 0c	 mov	 eax, DWORD PTR __Dest$[esp-4]
  0000e	74 17		 je	 SHORT $L105193
  00010	56		 push	 esi
$L105192:

; 1050 : 		*--_Dest = *--_Last;

  00011	8b 71 f8	 mov	 esi, DWORD PTR [ecx-8]
  00014	83 e9 08	 sub	 ecx, 8
  00017	83 e8 08	 sub	 eax, 8
  0001a	3b ca		 cmp	 ecx, edx
  0001c	89 30		 mov	 DWORD PTR [eax], esi
  0001e	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00021	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00024	75 eb		 jne	 SHORT $L105192
  00026	5e		 pop	 esi
$L105193:

; 1051 : 	return (_Dest);
; 1052 : 	}

  00027	c3		 ret	 0
??$_Copy_backward_opt@PAUtagTCHATLOG@@PAU1@@std@@YAPAUtagTCHATLOG@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<tagTCHATLOG *,tagTCHATLOG *>
_TEXT	ENDS
PUBLIC	??$_Destroy@UtagTCHATLOG@@@std@@YAXPAUtagTCHATLOG@@@Z ; std::_Destroy<tagTCHATLOG>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy@UtagTCHATLOG@@@std@@YAXPAUtagTCHATLOG@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@UtagTCHATLOG@@@std@@YAXPAUtagTCHATLOG@@@Z PROC NEAR ; std::_Destroy<tagTCHATLOG>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@UtagTCHATLOG@@@std@@YAXPAUtagTCHATLOG@@@Z ENDP ; std::_Destroy<tagTCHATLOG>
_TEXT	ENDS
PUBLIC	?data@CStringData@ATL@@QAEPAXXZ			; ATL::CStringData::data
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?data@CStringData@ATL@@QAEPAXXZ
_TEXT	SEGMENT
?data@CStringData@ATL@@QAEPAXXZ PROC NEAR		; ATL::CStringData::data, COMDAT
; _this$ = ecx

; 66   : 		return (this+1);

  00000	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 67   : 	}

  00003	c3		 ret	 0
?data@CStringData@ATL@@QAEPAXXZ ENDP			; ATL::CStringData::data
_TEXT	ENDS
PUBLIC	?AddRef@CStringData@ATL@@QAEXXZ			; ATL::CStringData::AddRef
; Function compile flags: /Ogty
;	COMDAT ?AddRef@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT
?AddRef@CStringData@ATL@@QAEXXZ PROC NEAR		; ATL::CStringData::AddRef, COMDAT
; _this$ = ecx

; 71   : 		ATLASSERT(nRefs > 0);
; 72   : 		_InterlockedIncrement(&nRefs);

  00000	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00003	b8 01 00 00 00	 mov	 eax, 1
  00008	f0 0f c1 01	 lock	  xadd	 DWORD PTR [ecx], eax

; 73   : 	}

  0000c	c3		 ret	 0
?AddRef@CStringData@ATL@@QAEXXZ ENDP			; ATL::CStringData::AddRef
_TEXT	ENDS
PUBLIC	?IsLocked@CStringData@ATL@@QBE_NXZ		; ATL::CStringData::IsLocked
; Function compile flags: /Ogty
;	COMDAT ?IsLocked@CStringData@ATL@@QBE_NXZ
_TEXT	SEGMENT
?IsLocked@CStringData@ATL@@QBE_NXZ PROC NEAR		; ATL::CStringData::IsLocked, COMDAT
; _this$ = ecx

; 76   : 		return nRefs < 0;

  00000	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00003	33 c0		 xor	 eax, eax
  00005	85 d2		 test	 edx, edx
  00007	0f 9c c0	 setl	 al

; 77   : 	}

  0000a	c3		 ret	 0
?IsLocked@CStringData@ATL@@QBE_NXZ ENDP			; ATL::CStringData::IsLocked
_TEXT	ENDS
PUBLIC	?Release@CStringData@ATL@@QAEXXZ		; ATL::CStringData::Release
; Function compile flags: /Ogty
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT
?Release@CStringData@ATL@@QAEXXZ PROC NEAR		; ATL::CStringData::Release, COMDAT
; _this$ = ecx

; 93   : 		ATLASSERT( nRefs != 0 );
; 94   : 
; 95   : 		if( _InterlockedDecrement( &nRefs ) <= 0 )

  00000	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  00003	83 ca ff	 or	 edx, -1
  00006	f0 0f c1 10	 lock	  xadd	 DWORD PTR [eax], edx
  0000a	4a		 dec	 edx
  0000b	85 d2		 test	 edx, edx
  0000d	7f 0a		 jg	 SHORT $L73499

; 96   : 		{
; 97   : 			pStringMgr->Free( this );

  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	8b 10		 mov	 edx, DWORD PTR [eax]
  00013	51		 push	 ecx
  00014	8b c8		 mov	 ecx, eax
  00016	ff 52 04	 call	 DWORD PTR [edx+4]
$L73499:

; 98   : 		}
; 99   : 	}

  00019	c3		 ret	 0
?Release@CStringData@ATL@@QAEXXZ ENDP			; ATL::CStringData::Release
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__P$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC NEAR				; operator new, COMDAT

; 109  :         {return (_P); }

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __P$[esp-4]
  00004	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogty
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC NEAR					; operator delete, COMDAT

; 112  :         {return; }

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC NEAR	; std::char_traits<char>::assign, COMDAT

; 331  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 332  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogty
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC NEAR		; std::char_traits<char>::length, COMDAT

; 352  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$L105896:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $L105896
  0000e	2b c2		 sub	 eax, edx

; 353  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
; Function compile flags: /Ogty
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::copy, COMDAT

; 358  : 		return ((_Elem *)::memcpy(_First1, _First2, _Count));

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR __First2$[esp]
  00009	57		 push	 edi
  0000a	8b 7c 24 0c	 mov	 edi, DWORD PTR __First1$[esp+4]
  0000e	8b c1		 mov	 eax, ecx
  00010	8b d7		 mov	 edx, edi
  00012	c1 e9 02	 shr	 ecx, 2
  00015	f3 a5		 rep movsd
  00017	8b c8		 mov	 ecx, eax
  00019	83 e1 03	 and	 ecx, 3
  0001c	f3 a4		 rep movsb
  0001e	5f		 pop	 edi
  0001f	8b c2		 mov	 eax, edx
  00021	5e		 pop	 esi

; 359  : 		}

  00022	c3		 ret	 0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	_memmove:NEAR
; Function compile flags: /Ogty
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::move, COMDAT

; 370  : 		return ((_Elem *)::memmove(_First1, _First2, _Count));

  00000	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	??0tagTCHATLOG@@QAE@XZ				; tagTCHATLOG::tagTCHATLOG
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\trelaysvr\trelaytype.h
;	COMDAT ??0tagTCHATLOG@@QAE@XZ
_TEXT	SEGMENT
??0tagTCHATLOG@@QAE@XZ PROC NEAR			; tagTCHATLOG::tagTCHATLOG, COMDAT
; _this$ = ecx

; 86   : 	tagTCHATLOG()

  00000	8b c1		 mov	 eax, ecx

; 87   : 	{
; 88   : 		m_dwRecent = 0;

  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 89   : 		m_dwSize = 0;

  00008	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 90   : 	};

  0000f	c3		 ret	 0
??0tagTCHATLOG@@QAE@XZ ENDP				; tagTCHATLOG::tagTCHATLOG
_TEXT	ENDS
PUBLIC	?reset@tagTCHATLOG@@QAEXXZ			; tagTCHATLOG::reset
; Function compile flags: /Ogty
;	COMDAT ?reset@tagTCHATLOG@@QAEXXZ
_TEXT	SEGMENT
?reset@tagTCHATLOG@@QAEXXZ PROC NEAR			; tagTCHATLOG::reset, COMDAT
; _this$ = ecx

; 94   : 		m_dwRecent = 0;

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0

; 95   : 		m_dwSize = 0;

  00006	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0

; 96   : 	};

  0000d	c3		 ret	 0
?reset@tagTCHATLOG@@QAEXXZ ENDP				; tagTCHATLOG::reset
_TEXT	ENDS
PUBLIC	??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ		; ATL::CSimpleStringT<char,0>::operator char const *
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT
??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ PROC NEAR	; ATL::CSimpleStringT<char,0>::operator char const *, COMDAT
; _this$ = ecx

; 379  : 		return( m_pszData );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 380  : 	}

  00002	c3		 ret	 0
??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ ENDP		; ATL::CSimpleStringT<char,0>::operator char const *
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1109 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1110 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?GetDefaultManager@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUIAtlStringMgr@2@XZ ; ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> >::GetDefaultManager
EXTRN	?g_strmgr@ATL@@3VCAtlStringMgr@1@A:BYTE		; ATL::g_strmgr
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlstr.h
;	COMDAT ?GetDefaultManager@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUIAtlStringMgr@2@XZ
_TEXT	SEGMENT
?GetDefaultManager@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUIAtlStringMgr@2@XZ PROC NEAR ; ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> >::GetDefaultManager, COMDAT

; 954  : 		return( &g_strmgr );

  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?g_strmgr@ATL@@3VCAtlStringMgr@1@A ; ATL::g_strmgr

; 955  : 	}

  00005	c3		 ret	 0
?GetDefaultManager@?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@SAPAUIAtlStringMgr@2@XZ ENDP ; ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> >::GetDefaultManager
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L105922
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  00009	c3		 ret	 0
$L105922:

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC NEAR		; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z ; ATL::CSimpleStringT<char,0>::Attach
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::Attach, COMDAT
; _this$ = ecx

; 712  : 		m_pszData = static_cast< PXSTR >( pData->data() );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _pData$[esp-4]
  00004	83 c0 10	 add	 eax, 16			; 00000010H
  00007	89 01		 mov	 DWORD PTR [ecx], eax

; 713  : 	}

  00009	c2 04 00	 ret	 4
?Attach@?$CSimpleStringT@D$0A@@ATL@@AAEXPAUCStringData@2@@Z ENDP ; ATL::CSimpleStringT<char,0>::Attach
_TEXT	ENDS
PUBLIC	?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<char,0>::GetData
; Function compile flags: /Ogty
;	COMDAT ?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT
?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ PROC NEAR ; ATL::CSimpleStringT<char,0>::GetData, COMDAT
; _this$ = ecx

; 731  : 		return( reinterpret_cast< CStringData* >( m_pszData )-1 );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 e8 10	 sub	 eax, 16			; 00000010H

; 732  : 	}

  00005	c3		 ret	 0
?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ ENDP ; ATL::CSimpleStringT<char,0>::GetData
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L105939
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  00009	c3		 ret	 0
$L105939:

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC NEAR	; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?CopyChars@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z ; ATL::CSimpleStringT<char,0>::CopyChars
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?CopyChars@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z
_TEXT	SEGMENT
_pchDest$ = 8						; size = 4
_pchSrc$ = 12						; size = 4
_nChars$ = 16						; size = 4
?CopyChars@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::CopyChars, COMDAT

; 653  : 		memcpy( pchDest, pchSrc, nChars*sizeof( XCHAR ) );

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR _nChars$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR _pchSrc$[esp]
  00009	8b c1		 mov	 eax, ecx
  0000b	57		 push	 edi
  0000c	8b 7c 24 0c	 mov	 edi, DWORD PTR _pchDest$[esp+4]
  00010	c1 e9 02	 shr	 ecx, 2
  00013	f3 a5		 rep movsd
  00015	8b c8		 mov	 ecx, eax
  00017	83 e1 03	 and	 ecx, 3
  0001a	f3 a4		 rep movsb
  0001c	5f		 pop	 edi
  0001d	5e		 pop	 esi

; 654  : 	}

  0001e	c3		 ret	 0
?CopyChars@?$CSimpleStringT@D$0A@@ATL@@SAXPADPBDH@Z ENDP ; ATL::CSimpleStringT<char,0>::CopyChars
_TEXT	ENDS
PUBLIC	?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<char,0>::ThrowMemoryException
; Function compile flags: /Ogty
;	COMDAT ?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ
_TEXT	SEGMENT
?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ PROC NEAR ; ATL::CSimpleStringT<char,0>::ThrowMemoryException, COMDAT

; 705  : 		AtlThrow( E_OUTOFMEMORY );

  00000	68 0e 00 07 80	 push	 -2147024882		; 8007000eH
  00005	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L105951:
$L105950:
  0000a	cc		 int	 3
?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ ENDP ; ATL::CSimpleStringT<char,0>::ThrowMemoryException
_TEXT	ENDS
PUBLIC	?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z	; ATL::CSimpleStringT<char,0>::SetLength
; Function compile flags: /Ogty
;	COMDAT ?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z
_TEXT	SEGMENT
_nLength$ = 8						; size = 4
?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::SetLength, COMDAT
; _this$ = ecx

; 790  : 		ATLASSERT( nLength >= 0 );
; 791  : 		ATLASSERT( nLength <= GetData()->nAllocLength );
; 792  : 
; 793  : 		if( nLength < 0 || nLength > GetData()->nAllocLength)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _nLength$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	7c 13		 jl	 SHORT $L103842
  00008	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000a	3b 42 f8	 cmp	 eax, DWORD PTR [edx-8]
  0000d	7f 0c		 jg	 SHORT $L103842

; 794  : 			AtlThrow(E_INVALIDARG);
; 795  : 			
; 796  : 		GetData()->nDataLength = nLength;

  0000f	89 42 f4	 mov	 DWORD PTR [edx-12], eax

; 797  : 		m_pszData[nLength] = 0;

  00012	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00014	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0

; 798  : 	}

  00018	c2 04 00	 ret	 4
$L103842:
  0001b	68 57 00 07 80	 push	 -2147024809		; 80070057H
  00020	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L105962:
$L105961:
  00025	cc		 int	 3
?SetLength@?$CSimpleStringT@D$0A@@ATL@@AAEXH@Z ENDP	; ATL::CSimpleStringT<char,0>::SetLength
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1494 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi

; 1495 : 		if (_Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00001	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  00004	83 fe 10	 cmp	 esi, 16			; 00000010H
  00007	57		 push	 edi
  00008	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0000b	72 04		 jb	 SHORT $L105971
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	eb 02		 jmp	 SHORT $L105972
$L105971:
  00011	8b d0		 mov	 edx, eax
$L105972:
  00013	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00017	3b fa		 cmp	 edi, edx
  00019	72 17		 jb	 SHORT $L103860
  0001b	83 fe 10	 cmp	 esi, 16			; 00000010H
  0001e	72 02		 jb	 SHORT $L105979
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
$L105979:
  00022	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00025	03 c8		 add	 ecx, eax
  00027	3b cf		 cmp	 ecx, edi
  00029	76 07		 jbe	 SHORT $L103860
  0002b	5f		 pop	 edi

; 1497 : 		else
; 1498 : 			return (true);

  0002c	b0 01		 mov	 al, 1
  0002e	5e		 pop	 esi

; 1499 : 		}

  0002f	c2 04 00	 ret	 4
$L103860:
  00032	5f		 pop	 edi

; 1496 : 			return (false);	// don't ask

  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 1499 : 		}

  00036	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC NEAR		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 159  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ	; ATL::CSimpleStringT<char,0>::Empty
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ
_TEXT	SEGMENT
?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ PROC NEAR	; ATL::CSimpleStringT<char,0>::Empty, COMDAT
; _this$ = ecx

; 421  : 	{

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 422  : 		CStringData* pOldData = GetData();

  00003	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 423  : 		IAtlStringMgr* pStringMgr = pOldData->pStringMgr;
; 424  : 		if( pOldData->nDataLength == 0 )

  00005	8b 51 f4	 mov	 edx, DWORD PTR [ecx-12]
  00008	85 d2		 test	 edx, edx
  0000a	8d 41 f0	 lea	 eax, DWORD PTR [ecx-16]
  0000d	57		 push	 edi
  0000e	8b 38		 mov	 edi, DWORD PTR [eax]
  00010	74 4c		 je	 SHORT $L106018
  00012	53		 push	 ebx

; 425  : 		{
; 426  : 			return;
; 427  : 		}
; 428  : 
; 429  : 		if( pOldData->IsLocked() )

  00013	8b 58 0c	 mov	 ebx, DWORD PTR [eax+12]
  00016	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  00019	85 db		 test	 ebx, ebx
  0001b	5b		 pop	 ebx
  0001c	7d 20		 jge	 SHORT $L103893

; 430  : 		{
; 431  : 			// Don't reallocate a locked buffer that's shrinking
; 432  : 			SetLength( 0 );

  0001e	8b 41 f8	 mov	 eax, DWORD PTR [ecx-8]
  00021	85 c0		 test	 eax, eax
  00023	7d 0a		 jge	 SHORT $L106002
  00025	68 57 00 07 80	 push	 -2147024809		; 80070057H
  0002a	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L106023:
$L106002:
  0002f	c7 41 f4 00 00
	00 00		 mov	 DWORD PTR [ecx-12], 0
  00036	8b 06		 mov	 eax, DWORD PTR [esi]
  00038	5f		 pop	 edi
  00039	c6 00 00	 mov	 BYTE PTR [eax], 0
  0003c	5e		 pop	 esi

; 439  : 		}
; 440  : 	}

  0003d	c3		 ret	 0
$L103893:

; 433  : 		}
; 434  : 		else
; 435  : 		{
; 436  : 			pOldData->Release();

  0003e	83 c9 ff	 or	 ecx, -1
  00041	f0 0f c1 0a	 lock	  xadd	 DWORD PTR [edx], ecx
  00045	49		 dec	 ecx
  00046	85 c9		 test	 ecx, ecx
  00048	7f 08		 jg	 SHORT $L106013
  0004a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004e	50		 push	 eax
  0004f	ff 52 04	 call	 DWORD PTR [edx+4]
$L106013:

; 437  : 			CStringData* pNewData = pStringMgr->GetNilString();

  00052	8b 07		 mov	 eax, DWORD PTR [edi]
  00054	8b cf		 mov	 ecx, edi
  00056	ff 50 0c	 call	 DWORD PTR [eax+12]

; 438  : 			Attach( pNewData );

  00059	83 c0 10	 add	 eax, 16			; 00000010H
  0005c	89 06		 mov	 DWORD PTR [esi], eax
$L106018:
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi

; 439  : 		}
; 440  : 	}

  00060	c3		 ret	 0
$L106022:
?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ ENDP		; ATL::CSimpleStringT<char,0>::Empty
_TEXT	ENDS
PUBLIC	?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ	; ATL::CSimpleStringT<char,0>::GetString
; Function compile flags: /Ogty
;	COMDAT ?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT
?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ PROC NEAR ; ATL::CSimpleStringT<char,0>::GetString, COMDAT
; _this$ = ecx

; 510  : 		return( m_pszData );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 511  : 	}

  00002	c3		 ret	 0
?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ ENDP	; ATL::CSimpleStringT<char,0>::GetString
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC NEAR		; std::_Allocate<char>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 35   : 	}

  0000d	c3		 ret	 0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
PUBLIC	??9const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::operator!=
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::operator!=, COMDAT
; _this$ = ecx

; 246  : 			return (!(*this == _Right));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Right$[esp-4]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]
  00009	33 c9		 xor	 ecx, ecx
  0000b	3b c6		 cmp	 eax, esi
  0000d	0f 95 c1	 setne	 cl
  00010	8a c1		 mov	 al, cl
  00012	5e		 pop	 esi

; 247  : 			}

  00013	c2 04 00	 ret	 4
??9const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::operator!=
_TEXT	ENDS
PUBLIC	?GetManager@?$CSimpleStringT@D$0A@@ATL@@QBEPAUIAtlStringMgr@2@XZ ; ATL::CSimpleStringT<char,0>::GetManager
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?GetManager@?$CSimpleStringT@D$0A@@ATL@@QBEPAUIAtlStringMgr@2@XZ
_TEXT	SEGMENT
?GetManager@?$CSimpleStringT@D$0A@@ATL@@QBEPAUIAtlStringMgr@2@XZ PROC NEAR ; ATL::CSimpleStringT<char,0>::GetManager, COMDAT
; _this$ = ecx

; 505  : 		return( GetData()->pStringMgr->Clone() );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 48 f0	 mov	 ecx, DWORD PTR [eax-16]
  00005	8b 11		 mov	 edx, DWORD PTR [ecx]
  00007	ff 62 10	 jmp	 DWORD PTR [edx+16]
?GetManager@?$CSimpleStringT@D$0A@@ATL@@QBEPAUIAtlStringMgr@2@XZ ENDP ; ATL::CSimpleStringT<char,0>::GetManager
_TEXT	ENDS
PUBLIC	?_Key@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Key
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Key, COMDAT

; 142  : 		return (_Mybase::_Kfn(_Myval(_Pnode)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 0c	 add	 eax, 12			; 0000000cH

; 143  : 		}

  00007	c3		 ret	 0
?_Key@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Key
_TEXT	ENDS
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Lrotate
; Function compile flags: /Ogty
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 1015 : 		_Nodeptr _Pnode = _Right(_Wherenode);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Wherenode$[esp-4]
  00004	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00007	53		 push	 ebx
  00008	56		 push	 esi

; 1016 : 		_Right(_Wherenode) = _Left(_Pnode);

  00009	8b 30		 mov	 esi, DWORD PTR [eax]
  0000b	89 72 08	 mov	 DWORD PTR [edx+8], esi

; 1017 : 
; 1018 : 		if (!_Isnil(_Left(_Pnode)))

  0000e	8b 30		 mov	 esi, DWORD PTR [eax]
  00010	8a 5e 15	 mov	 bl, BYTE PTR [esi+21]
  00013	84 db		 test	 bl, bl
  00015	75 03		 jne	 SHORT $L104592

; 1019 : 			_Parent(_Left(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$L104592:

; 1020 : 		_Parent(_Pnode) = _Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1021 : 
; 1022 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00026	75 0d		 jne	 SHORT $L104593

; 1023 : 			_Root() = _Pnode;

  00028	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0002b	5e		 pop	 esi

; 1028 : 
; 1029 : 		_Left(_Pnode) = _Wherenode;

  0002c	89 10		 mov	 DWORD PTR [eax], edx

; 1030 : 		_Parent(_Wherenode) = _Pnode;

  0002e	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00031	5b		 pop	 ebx

; 1031 : 		}

  00032	c2 04 00	 ret	 4
$L104593:

; 1024 : 		else if (_Wherenode == _Left(_Parent(_Wherenode)))

  00035	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00038	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0003a	75 0c		 jne	 SHORT $L104595

; 1025 : 			_Left(_Parent(_Wherenode)) = _Pnode;

  0003c	89 01		 mov	 DWORD PTR [ecx], eax
  0003e	5e		 pop	 esi

; 1028 : 
; 1029 : 		_Left(_Pnode) = _Wherenode;

  0003f	89 10		 mov	 DWORD PTR [eax], edx

; 1030 : 		_Parent(_Wherenode) = _Pnode;

  00041	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00044	5b		 pop	 ebx

; 1031 : 		}

  00045	c2 04 00	 ret	 4
$L104595:

; 1026 : 		else
; 1027 : 			_Right(_Parent(_Wherenode)) = _Pnode;

  00048	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0004b	5e		 pop	 esi

; 1028 : 
; 1029 : 		_Left(_Pnode) = _Wherenode;

  0004c	89 10		 mov	 DWORD PTR [eax], edx

; 1030 : 		_Parent(_Wherenode) = _Pnode;

  0004e	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00051	5b		 pop	 ebx

; 1031 : 		}

  00052	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Lrotate
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAE@V?$allocator@UtagTCHATLOG@@@1@@Z ; std::_Vector_val<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Vector_val<tagTCHATLOG,std::allocator<tagTCHATLOG> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0?$_Vector_val@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAE@V?$allocator@UtagTCHATLOG@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAE@V?$allocator@UtagTCHATLOG@@@1@@Z PROC NEAR ; std::_Vector_val<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Vector_val<tagTCHATLOG,std::allocator<tagTCHATLOG> >, COMDAT
; _this$ = ecx

; 21   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 22   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Vector_val@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAE@V?$allocator@UtagTCHATLOG@@@1@@Z ENDP ; std::_Vector_val<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Vector_val<tagTCHATLOG,std::allocator<tagTCHATLOG> >
_TEXT	ENDS
PUBLIC	??0iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::iterator::iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::iterator::iterator, COMDAT
; _this$ = ecx

; 312  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 313  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBEABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@XZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBEABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBEABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 205  : 			return (_Myval(_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 206  : 			}

  00005	c3		 ret	 0
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBEABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	??Diterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEAAUtagTCHATLOG@@XZ ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::iterator::operator*
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Diterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEAAUtagTCHATLOG@@XZ
_TEXT	SEGMENT
??Diterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEAAUtagTCHATLOG@@XZ PROC NEAR ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::iterator::operator*, COMDAT
; _this$ = ecx

; 220  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 221  : 			}

  00002	c3		 ret	 0
??Diterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEAAUtagTCHATLOG@@XZ ENDP ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::iterator::operator*
_TEXT	ENDS
PUBLIC	??Hiterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBE?AV012@H@Z ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::iterator::operator+
; Function compile flags: /Ogty
;	COMDAT ??Hiterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Hiterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::iterator::operator+, COMDAT
; _this$ = ecx

; 262  : 			iterator _Tmp = *this;
; 263  : 			return (_Tmp += _Off);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 08	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 c8	 lea	 edx, DWORD PTR [eax+ecx*8]
  00009	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000d	89 10		 mov	 DWORD PTR [eax], edx

; 264  : 			}

  0000f	c2 08 00	 ret	 8
??Hiterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBE?AV012@H@Z ENDP ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::iterator::operator+
_TEXT	ENDS
PUBLIC	??0?$CSimpleStringT@D$0A@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT
_pchSrc$ = 8						; size = 4
_nLength$ = 12						; size = 4
_pStringMgr$ = 16					; size = 4
??0?$CSimpleStringT@D$0A@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>, COMDAT
; _this$ = ecx

; 245  : 	CSimpleStringT( const XCHAR* pchSrc, int nLength, IAtlStringMgr* pStringMgr )

  00000	53		 push	 ebx
  00001	56		 push	 esi

; 246  : 	{
; 247  : 		ATLASSERT( pStringMgr != NULL );
; 248  : 		
; 249  : 		if(pchSrc == NULL && nLength != 0)

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR _pchSrc$[esp+4]
  00006	85 f6		 test	 esi, esi
  00008	57		 push	 edi
  00009	8b 7c 24 14	 mov	 edi, DWORD PTR _nLength$[esp+8]
  0000d	8b d9		 mov	 ebx, ecx
  0000f	75 0e		 jne	 SHORT $L104712
  00011	85 ff		 test	 edi, edi
  00013	74 0a		 je	 SHORT $L104712

; 258  : 		SetLength( nLength );

$L106176:
  00015	68 57 00 07 80	 push	 -2147024809		; 80070057H
  0001a	e8 00 00 00 00	 call	 ?AtlThrow@ATL@@YGXJ@Z	; ATL::AtlThrow
$L106188:
$L104712:

; 250  : 			AtlThrow(E_INVALIDARG);
; 251  : 
; 252  : 		CStringData* pData = pStringMgr->Allocate( nLength, sizeof( XCHAR ) );

  0001f	8b 4c 24 18	 mov	 ecx, DWORD PTR _pStringMgr$[esp+8]
  00023	8b 01		 mov	 eax, DWORD PTR [ecx]
  00025	6a 01		 push	 1
  00027	57		 push	 edi
  00028	ff 10		 call	 DWORD PTR [eax]

; 253  : 		if( pData == NULL )

  0002a	85 c0		 test	 eax, eax
  0002c	75 05		 jne	 SHORT $L104716

; 254  : 		{
; 255  : 			ThrowMemoryException();

  0002e	e8 00 00 00 00	 call	 ?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<char,0>::ThrowMemoryException
$L106189:
$L104716:

; 256  : 		}
; 257  : 		Attach( pData );

  00033	83 c0 10	 add	 eax, 16			; 00000010H

; 258  : 		SetLength( nLength );

  00036	85 ff		 test	 edi, edi
  00038	89 03		 mov	 DWORD PTR [ebx], eax
  0003a	7c d9		 jl	 SHORT $L106176
  0003c	3b 78 f8	 cmp	 edi, DWORD PTR [eax-8]
  0003f	7f d4		 jg	 SHORT $L106176
  00041	89 78 f4	 mov	 DWORD PTR [eax-12], edi
  00044	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00046	c6 04 0f 00	 mov	 BYTE PTR [edi+ecx], 0

; 259  : 		CopyChars( m_pszData, pchSrc, nLength );

  0004a	8b cf		 mov	 ecx, edi
  0004c	8b 3b		 mov	 edi, DWORD PTR [ebx]
  0004e	8b d1		 mov	 edx, ecx
  00050	c1 e9 02	 shr	 ecx, 2
  00053	f3 a5		 rep movsd
  00055	8b ca		 mov	 ecx, edx
  00057	83 e1 03	 and	 ecx, 3
  0005a	f3 a4		 rep movsb
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi

; 260  : 	}

  0005e	8b c3		 mov	 eax, ebx
  00060	5b		 pop	 ebx
  00061	c2 0c 00	 ret	 12			; 0000000cH
$L106187:
??0?$CSimpleStringT@D$0A@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z ENDP ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>
_TEXT	ENDS
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBEIXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::max_size, COMDAT
; _this$ = ecx

; 453  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 454  : 		}

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::max_size
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node *>::destroy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node *>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node *>::destroy
_TEXT	ENDS
PUBLIC	?max_size@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEIXZ ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?max_size@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::max_size, COMDAT
; _this$ = ecx

; 521  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 522  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@UtagTCHATLOG@@@std@@QAEPAUtagTCHATLOG@@I@Z ; std::allocator<tagTCHATLOG>::allocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@UtagTCHATLOG@@@std@@QAEPAUtagTCHATLOG@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@UtagTCHATLOG@@@std@@QAEPAUtagTCHATLOG@@I@Z PROC NEAR ; std::allocator<tagTCHATLOG>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 0c c5 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*8]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 138  : 		}

  00014	c2 04 00	 ret	 4
?allocate@?$allocator@UtagTCHATLOG@@@std@@QAEPAUtagTCHATLOG@@I@Z ENDP ; std::allocator<tagTCHATLOG>::allocate
_TEXT	ENDS
PUBLIC	??Econst_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::operator++
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Econst_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::operator++, COMDAT
; _this$ = ecx

; 214  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 215  : 			_Inc();

  00003	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::_Inc

; 216  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 217  : 			}

  0000b	c3		 ret	 0
??Econst_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::operator++
_TEXT	ENDS
PUBLIC	??Fconst_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::operator--
; Function compile flags: /Ogty
;	COMDAT ??Fconst_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Fconst_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::operator--, COMDAT
; _this$ = ecx

; 227  : 			{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 228  : 			_Dec();

  00003	e8 00 00 00 00	 call	 ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::_Dec

; 229  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 230  : 			}

  0000b	c3		 ret	 0
??Fconst_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::operator--
_TEXT	ENDS
PUBLIC	??0iterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE@PAUtagTCHATLOG@@@Z ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::iterator::iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0iterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE@PAUtagTCHATLOG@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0iterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE@PAUtagTCHATLOG@@@Z PROC NEAR ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::iterator::iterator, COMDAT
; _this$ = ecx

; 215  : 			{	// construct with pointer _Ptr

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 216  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE@PAUtagTCHATLOG@@@Z ENDP ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??Giterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEHABVconst_iterator@12@@Z ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::iterator::operator-
; Function compile flags: /Ogty
;	COMDAT ??Giterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEHABVconst_iterator@12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Giterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEHABVconst_iterator@12@@Z PROC NEAR ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::iterator::operator-, COMDAT
; _this$ = ecx

; 279  : 			return ((const_iterator)*this - _Right);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	c1 f8 03	 sar	 eax, 3

; 280  : 			}

  0000b	c2 04 00	 ret	 4
??Giterator@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QBEHABVconst_iterator@12@@Z ENDP ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::iterator::operator-
_TEXT	ENDS
PUBLIC	?Compare@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBEHPBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Compare
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?Compare@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBEHPBD@Z
_TEXT	SEGMENT
_psz$ = 8						; size = 4
?Compare@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBEHPBD@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Compare, COMDAT
; _this$ = ecx

; 1088 : 		ATLASSERT( AtlIsValidString( psz ) );
; 1089 : 		return( StringTraits::StringCompare( GetString(), psz ) );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _psz$[esp-4]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	50		 push	 eax
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 __mbscmp
  0000d	83 c4 08	 add	 esp, 8

; 1090 : 	}

  00010	c2 04 00	 ret	 4
?Compare@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBEHPBD@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Compare
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node>::allocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@I@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00007	c1 e0 03	 shl	 eax, 3
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	83 c4 04	 add	 esp, 4

; 138  : 		}

  00013	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	??0?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@1@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z ; std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@1@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@1@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z PROC NEAR ; std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >, COMDAT
; _this$ = ecx

; 54   : 		{	// construct traits from _Parg and allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 55   : 		}

  00002	c2 08 00	 ret	 8
??0?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@1@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >
_TEXT	ENDS
PUBLIC	??$copy_backward@PAUtagTCHATLOG@@PAU1@@std@@YAPAUtagTCHATLOG@@PAU1@00@Z ; std::copy_backward<tagTCHATLOG *,tagTCHATLOG *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$copy_backward@PAUtagTCHATLOG@@PAU1@@std@@YAPAUtagTCHATLOG@@PAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$copy_backward@PAUtagTCHATLOG@@PAU1@@std@@YAPAUtagTCHATLOG@@PAU1@00@Z PROC NEAR ; std::copy_backward<tagTCHATLOG *,tagTCHATLOG *>, COMDAT

; 1068 : 	return (_Copy_backward_opt(_First, _Last, _Dest,
; 1069 : 		_Ptr_cat(_First, _Dest)));

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Last$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00008	3b d1		 cmp	 edx, ecx
  0000a	8b 44 24 0c	 mov	 eax, DWORD PTR __Dest$[esp-4]
  0000e	74 17		 je	 SHORT $L106279
  00010	56		 push	 esi
$L106278:
  00011	8b 71 f8	 mov	 esi, DWORD PTR [ecx-8]
  00014	83 e9 08	 sub	 ecx, 8
  00017	83 e8 08	 sub	 eax, 8
  0001a	3b ca		 cmp	 ecx, edx
  0001c	89 30		 mov	 DWORD PTR [eax], esi
  0001e	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00021	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00024	75 eb		 jne	 SHORT $L106278
  00026	5e		 pop	 esi
$L106279:

; 1070 : 	}

  00027	c3		 ret	 0
??$copy_backward@PAUtagTCHATLOG@@PAU1@@std@@YAPAUtagTCHATLOG@@PAU1@00@Z ENDP ; std::copy_backward<tagTCHATLOG *,tagTCHATLOG *>
_TEXT	ENDS
PUBLIC	??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@0@ABQAU120@@Z ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@0@ABQAU120@@Z PROC NEAR ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node *>, COMDAT

; 42   : 	new ((void _FARQ *)_Ptr) _T1(_Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $L106291
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$L106291:

; 43   : 	}

  00010	c3		 ret	 0
??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@0@ABQAU120@@Z ENDP ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node *>
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@UtagTCHATLOG@@@std@@QAEXPAUtagTCHATLOG@@@Z ; std::allocator<tagTCHATLOG>::destroy
; Function compile flags: /Ogty
;	COMDAT ?destroy@?$allocator@UtagTCHATLOG@@@std@@QAEXPAUtagTCHATLOG@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@UtagTCHATLOG@@@std@@QAEXPAUtagTCHATLOG@@@Z PROC NEAR ; std::allocator<tagTCHATLOG>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@UtagTCHATLOG@@@std@@QAEXPAUtagTCHATLOG@@@Z ENDP ; std::allocator<tagTCHATLOG>::destroy
_TEXT	ENDS
PUBLIC	??$_Construct@UtagTCHATLOG@@U1@@std@@YAXPAUtagTCHATLOG@@ABU1@@Z ; std::_Construct<tagTCHATLOG,tagTCHATLOG>
; Function compile flags: /Ogty
;	COMDAT ??$_Construct@UtagTCHATLOG@@U1@@std@@YAXPAUtagTCHATLOG@@ABU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@UtagTCHATLOG@@U1@@std@@YAXPAUtagTCHATLOG@@ABU1@@Z PROC NEAR ; std::_Construct<tagTCHATLOG,tagTCHATLOG>, COMDAT

; 42   : 	new ((void _FARQ *)_Ptr) _T1(_Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 0e		 je	 SHORT $L106306
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
  00010	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00013	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$L106306:

; 43   : 	}

  00016	c3		 ret	 0
??$_Construct@UtagTCHATLOG@@U1@@std@@YAXPAUtagTCHATLOG@@ABU1@@Z ENDP ; std::_Construct<tagTCHATLOG,tagTCHATLOG>
_TEXT	ENDS
PUBLIC	??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT
_pStringMgr$ = 8					; size = 4
??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>, COMDAT
; _this$ = ecx

; 210  : 	explicit CSimpleStringT( IAtlStringMgr* pStringMgr ) throw()

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 211  : 	{
; 212  : 		ATLASSERT( pStringMgr != NULL );
; 213  : 		CStringData* pData = pStringMgr->GetNilString();

  00003	8b 4c 24 08	 mov	 ecx, DWORD PTR _pStringMgr$[esp]
  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	ff 50 0c	 call	 DWORD PTR [eax+12]

; 214  : 		Attach( pData );

  0000c	83 c0 10	 add	 eax, 16			; 00000010H
  0000f	89 06		 mov	 DWORD PTR [esi], eax

; 215  : 	}

  00011	8b c6		 mov	 eax, esi
  00013	5e		 pop	 esi
  00014	c2 04 00	 ret	 4
??0?$CSimpleStringT@D$0A@@ATL@@QAE@PAUIAtlStringMgr@1@@Z ENDP ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>
_TEXT	ENDS
PUBLIC	??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ		; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>
; Function compile flags: /Ogty
;	COMDAT ??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ PROC NEAR		; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>, COMDAT
; _this$ = ecx

; 263  : 		CStringData* pData = GetData();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 e8 10	 sub	 eax, 16			; 00000010H

; 264  : 		pData->Release();

  00005	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00008	83 ca ff	 or	 edx, -1
  0000b	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0000f	4a		 dec	 edx
  00010	85 d2		 test	 edx, edx
  00012	7f 08		 jg	 SHORT $L106330
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	8b 11		 mov	 edx, DWORD PTR [ecx]
  00018	50		 push	 eax
  00019	ff 52 04	 call	 DWORD PTR [edx+4]
$L106330:

; 265  : 	}

  0001c	c3		 ret	 0
??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ ENDP		; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC NEAR ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 34   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 35   : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?GetLength@?$CSimpleStringT@D$0A@@ATL@@QBEHXZ	; ATL::CSimpleStringT<char,0>::GetLength
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?GetLength@?$CSimpleStringT@D$0A@@ATL@@QBEHXZ
_TEXT	SEGMENT
?GetLength@?$CSimpleStringT@D$0A@@ATL@@QBEHXZ PROC NEAR	; ATL::CSimpleStringT<char,0>::GetLength, COMDAT
; _this$ = ecx

; 501  : 		return( GetData()->nDataLength );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 40 f4	 mov	 eax, DWORD PTR [eax-12]

; 502  : 	}

  00005	c3		 ret	 0
?GetLength@?$CSimpleStringT@D$0A@@ATL@@QBEHXZ ENDP	; ATL::CSimpleStringT<char,0>::GetLength
_TEXT	ENDS
PUBLIC	?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData
; Function compile flags: /Ogty
;	COMDAT ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z PROC NEAR ; ATL::CSimpleStringT<char,0>::CloneData, COMDAT

; 801  : 	{

  00000	56		 push	 esi

; 802  : 		CStringData* pNewData = NULL;
; 803  : 
; 804  : 		IAtlStringMgr* pNewStringMgr = pData->pStringMgr->Clone();

  00001	8b 74 24 08	 mov	 esi, DWORD PTR _pData$[esp]
  00005	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	ff 50 10	 call	 DWORD PTR [eax+16]

; 805  : 		if( !pData->IsLocked() && (pNewStringMgr == pData->pStringMgr) )

  0000c	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0000f	85 d2		 test	 edx, edx
  00011	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00014	7c 11		 jl	 SHORT $L103761
  00016	3b 06		 cmp	 eax, DWORD PTR [esi]
  00018	75 0d		 jne	 SHORT $L103761

; 806  : 		{
; 807  : 			pNewData = pData;

  0001a	8b c6		 mov	 eax, esi

; 808  : 			pNewData->AddRef();

  0001c	ba 01 00 00 00	 mov	 edx, 1
  00021	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00025	5e		 pop	 esi

; 819  : 		}
; 820  : 
; 821  : 		return( pNewData );
; 822  : 	}

  00026	c3		 ret	 0
$L103761:

; 809  : 		}
; 810  : 		else
; 811  : 		{
; 812  : 			pNewData = pNewStringMgr->Allocate( pData->nDataLength, sizeof( XCHAR ) );

  00027	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0002a	8b 10		 mov	 edx, DWORD PTR [eax]
  0002c	6a 01		 push	 1
  0002e	51		 push	 ecx
  0002f	8b c8		 mov	 ecx, eax
  00031	ff 12		 call	 DWORD PTR [edx]

; 813  : 			if( pNewData == NULL )

  00033	85 c0		 test	 eax, eax
  00035	75 05		 jne	 SHORT $L103764

; 814  : 			{
; 815  : 				ThrowMemoryException();

  00037	e9 00 00 00 00	 jmp	 ?ThrowMemoryException@?$CSimpleStringT@D$0A@@ATL@@KAXXZ ; ATL::CSimpleStringT<char,0>::ThrowMemoryException
$L103764:

; 816  : 			}
; 817  : 			pNewData->nDataLength = pData->nDataLength;

  0003c	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0003f	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 818  : 			CopyChars( PXSTR( pNewData->data() ), PCXSTR( pData->data() ), pData->nDataLength+1 );  // Copy '\0'

  00042	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00045	41		 inc	 ecx
  00046	8b d1		 mov	 edx, ecx
  00048	57		 push	 edi
  00049	c1 e9 02	 shr	 ecx, 2
  0004c	83 c6 10	 add	 esi, 16			; 00000010H
  0004f	8d 78 10	 lea	 edi, DWORD PTR [eax+16]
  00052	f3 a5		 rep movsd
  00054	8b ca		 mov	 ecx, edx
  00056	83 e1 03	 and	 ecx, 3
  00059	f3 a4		 rep movsb
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi

; 819  : 		}
; 820  : 
; 821  : 		return( pNewData );
; 822  : 	}

  0005d	c3		 ret	 0
?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ENDP ; ATL::CSimpleStringT<char,0>::CloneData
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $L106373
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1476 : 		}

  00014	c2 04 00	 ret	 4

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$L106373:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 1476 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1114 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1115 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1116 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC NEAR	; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 138  : 		}

  0000d	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::end
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::end, COMDAT
; _this$ = ecx

; 418  : 		return (_TREE_ITERATOR(_Myhead));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 419  : 		}

  00009	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::end
_TEXT	ENDS
PUBLIC	??Diterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBEAAU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@XZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Diterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBEAAU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@XZ
_TEXT	SEGMENT
??Diterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBEAAU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::iterator::operator*, COMDAT
; _this$ = ecx

; 317  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 318  : 			}

  00005	c3		 ret	 0
??Diterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QBEAAU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::iterator::operator*
_TEXT	ENDS
PUBLIC	??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z
_TEXT	SEGMENT
_pch$ = 8						; size = 4
_nLength$ = 12						; size = 4
_pStringMgr$ = 16					; size = 4
??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >, COMDAT
; _this$ = ecx

; 923  : 	{

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR _pStringMgr$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR _pch$[esp-4]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	8b 4c 24 0c	 mov	 ecx, DWORD PTR _nLength$[esp]
  0000f	50		 push	 eax
  00010	51		 push	 ecx
  00011	52		 push	 edx
  00012	8b ce		 mov	 ecx, esi
  00014	e8 00 00 00 00	 call	 ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>

; 924  : 	}

  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 0c 00	 ret	 12			; 0000000cH
??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
_TEXT	ENDS
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::begin
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::begin, COMDAT
; _this$ = ecx

; 408  : 		return (_TREE_ITERATOR(_Lmost()));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 08		 mov	 ecx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 409  : 		}

  0000b	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::begin
_TEXT	ENDS
PUBLIC	?begin@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::begin
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?begin@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::begin, COMDAT
; _this$ = ecx

; 463  : 		return (iterator(_Myfirst));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 464  : 		}

  00009	c2 04 00	 ret	 4
?begin@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::end
; Function compile flags: /Ogty
;	COMDAT ?end@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::end, COMDAT
; _this$ = ecx

; 473  : 		return (iterator(_Mylast));

  00000	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 474  : 		}

  00009	c2 04 00	 ret	 4
?end@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::end
_TEXT	ENDS
PUBLIC	??Eiterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::iterator::operator++
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Eiterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::iterator::operator++, COMDAT
; _this$ = ecx

; 326  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 327  : 			++(*(const_iterator *)this);

  00003	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::_Inc

; 328  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 329  : 			}

  0000b	c3		 ret	 0
??Eiterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::iterator::operator++
_TEXT	ENDS
PUBLIC	??Fiterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::iterator::operator--
; Function compile flags: /Ogty
;	COMDAT ??Fiterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Fiterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::iterator::operator--, COMDAT
; _this$ = ecx

; 339  : 			{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 340  : 			--(*(const_iterator *)this);

  00003	e8 00 00 00 00	 call	 ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::_Dec

; 341  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 342  : 			}

  0000b	c3		 ret	 0
??Fiterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::iterator::operator--
_TEXT	ENDS
PUBLIC	??MATL@@YA_NABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@0@0@Z ; ATL::operator<
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??MATL@@YA_NABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@0@0@Z
_TEXT	SEGMENT
_str1$ = 8						; size = 4
_str2$ = 12						; size = 4
??MATL@@YA_NABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@0@0@Z PROC NEAR ; ATL::operator<, COMDAT

; 2149 : 		return( str1.Compare( str2 ) < 0 );

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _str2$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]
  00006	8b 4c 24 04	 mov	 ecx, DWORD PTR _str1$[esp-4]
  0000a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000c	50		 push	 eax
  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 __mbscmp
  00013	33 d2		 xor	 edx, edx
  00015	83 c4 08	 add	 esp, 8
  00018	85 c0		 test	 eax, eax
  0001a	0f 9c c2	 setl	 dl
  0001d	8a c2		 mov	 al, dl

; 2150 : 	}

  0001f	c3		 ret	 0
??MATL@@YA_NABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@0@0@Z ENDP ; ATL::operator<
_TEXT	ENDS
PUBLIC	??0?$_Tree_ptr@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@1@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z ; std::_Tree_ptr<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Tree_ptr<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0?$_Tree_ptr@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@1@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_ptr@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@1@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z PROC NEAR ; std::_Tree_ptr<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Tree_ptr<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >, COMDAT
; _this$ = ecx

; 76   : 		{	// construct base, and allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 77   : 		}

  00002	c2 08 00	 ret	 8
??0?$_Tree_ptr@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@1@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z ENDP ; std::_Tree_ptr<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Tree_ptr<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >
_TEXT	ENDS
PUBLIC	??Eiterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AV012@H@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::iterator::operator++
; Function compile flags: /Ogty
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??Eiterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AV012@H@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::iterator::operator++, COMDAT
; _this$ = ecx

; 332  : 			{	// postincrement

  00000	56		 push	 esi

; 333  : 			iterator _Tmp = *this;

  00001	8b 31		 mov	 esi, DWORD PTR [ecx]

; 334  : 			++*this;

  00003	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::_Inc

; 335  : 			return (_Tmp);

  00008	8b 44 24 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  0000c	89 30		 mov	 DWORD PTR [eax], esi
  0000e	5e		 pop	 esi

; 336  : 			}

  0000f	c2 08 00	 ret	 8
??Eiterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AV012@H@Z ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::iterator::operator++
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@ABQAU342@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node *>::construct
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@ABQAU342@@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node *>::construct, COMDAT
; _this$ = ecx

; 147  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $L106549
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$L106549:

; 148  : 		}

  00010	c2 08 00	 ret	 8
?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@ABQAU342@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node *>::construct
_TEXT	ENDS
PUBLIC	??$_Destroy_range@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAXPAUtagTCHATLOG@@0AAV?$allocator@UtagTCHATLOG@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<tagTCHATLOG,std::allocator<tagTCHATLOG> >
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy_range@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAXPAUtagTCHATLOG@@0AAV?$allocator@UtagTCHATLOG@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAXPAUtagTCHATLOG@@0AAV?$allocator@UtagTCHATLOG@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Destroy_range<tagTCHATLOG,std::allocator<tagTCHATLOG> >, COMDAT

; 225  : 	for (; _First != _Last; ++_First)
; 226  : 		_Al.destroy(_First);
; 227  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAXPAUtagTCHATLOG@@0AAV?$allocator@UtagTCHATLOG@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<tagTCHATLOG,std::allocator<tagTCHATLOG> >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@UtagTCHATLOG@@@std@@QAEXPAUtagTCHATLOG@@ABU3@@Z ; std::allocator<tagTCHATLOG>::construct
; Function compile flags: /Ogty
;	COMDAT ?construct@?$allocator@UtagTCHATLOG@@@std@@QAEXPAUtagTCHATLOG@@ABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@UtagTCHATLOG@@@std@@QAEXPAUtagTCHATLOG@@ABU3@@Z PROC NEAR ; std::allocator<tagTCHATLOG>::construct, COMDAT
; _this$ = ecx

; 147  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 0e		 je	 SHORT $L106571
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
  00010	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00013	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$L106571:

; 148  : 		}

  00016	c2 08 00	 ret	 8
?construct@?$allocator@UtagTCHATLOG@@@std@@QAEXPAUtagTCHATLOG@@ABU3@@Z ENDP ; std::allocator<tagTCHATLOG>::construct
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUtagTCHATLOG@@PAU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAPAUtagTCHATLOG@@PAU1@00AAV?$allocator@UtagTCHATLOG@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<tagTCHATLOG *,tagTCHATLOG *,std::allocator<tagTCHATLOG> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninit_copy@PAUtagTCHATLOG@@PAU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAPAUtagTCHATLOG@@PAU1@00AAV?$allocator@UtagTCHATLOG@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PAUtagTCHATLOG@@PAU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAPAUtagTCHATLOG@@PAU1@00AAV?$allocator@UtagTCHATLOG@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_copy<tagTCHATLOG *,tagTCHATLOG *,std::allocator<tagTCHATLOG> >, COMDAT

; 78   : 	_FwdIt _Next = _Dest;
; 79   : 
; 80   : 	_TRY_BEGIN
; 81   : 	for (; _First != _Last; ++_Dest, ++_First)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00008	3b ca		 cmp	 ecx, edx
  0000a	8b 44 24 0c	 mov	 eax, DWORD PTR __Dest$[esp-4]
  0000e	74 1a		 je	 SHORT $L105213
  00010	56		 push	 esi
$L105211:

; 82   : 		_Al.construct(_Dest, *_First);

  00011	85 c0		 test	 eax, eax
  00013	74 0a		 je	 SHORT $L105212
  00015	8b 31		 mov	 esi, DWORD PTR [ecx]
  00017	89 30		 mov	 DWORD PTR [eax], esi
  00019	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0001c	89 70 04	 mov	 DWORD PTR [eax+4], esi
$L105212:
  0001f	83 c1 08	 add	 ecx, 8
  00022	83 c0 08	 add	 eax, 8
  00025	3b ca		 cmp	 ecx, edx
  00027	75 e8		 jne	 SHORT $L105211
  00029	5e		 pop	 esi
$L105213:

; 83   : 	_CATCH_ALL
; 84   : 	for (; _Next != _Dest; ++_Next)
; 85   : 		_Al.destroy(_Next);
; 86   : 	_RERAISE;
; 87   : 	_CATCH_END
; 88   : 	return (_Dest);
; 89   : 	}

  0002a	c3		 ret	 0
??$_Uninit_copy@PAUtagTCHATLOG@@PAU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAPAUtagTCHATLOG@@PAU1@00AAV?$allocator@UtagTCHATLOG@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<tagTCHATLOG *,tagTCHATLOG *,std::allocator<tagTCHATLOG> >
_TEXT	ENDS
PUBLIC	??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >, COMDAT
; _this$ = ecx

; 796  : 	{

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_strmgr@ATL@@3VCAtlStringMgr@1@A
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_strmgr@ATL@@3VCAtlStringMgr@1@A ; ATL::g_strmgr
  0000d	ff 50 0c	 call	 DWORD PTR [eax+12]
  00010	83 c0 10	 add	 eax, 16			; 00000010H
  00013	89 06		 mov	 DWORD PTR [esi], eax

; 797  : 	}

  00015	8b c6		 mov	 eax, esi
  00017	5e		 pop	 esi
  00018	c3		 ret	 0
??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
_TEXT	ENDS
PUBLIC	??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
; Function compile flags: /Ogty
;	COMDAT ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >, COMDAT
; _this$ = ecx

; 963  : 	}

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 e8 10	 sub	 eax, 16			; 00000010H
  00005	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00008	83 ca ff	 or	 edx, -1
  0000b	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0000f	4a		 dec	 edx
  00010	85 d2		 test	 edx, edx
  00012	7f 08		 jg	 SHORT $L106652
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	8b 11		 mov	 edx, DWORD PTR [ecx]
  00018	50		 push	 eax
  00019	ff 52 04	 call	 DWORD PTR [edx+4]
$L106652:
  0001c	c3		 ret	 0
??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
_TEXT	ENDS
PUBLIC	??0?$CSimpleStringT@D$0A@@ATL@@QAE@ABV01@@Z	; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ??0?$CSimpleStringT@D$0A@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT
_strSrc$ = 8						; size = 4
??0?$CSimpleStringT@D$0A@@ATL@@QAE@ABV01@@Z PROC NEAR	; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>, COMDAT
; _this$ = ecx

; 218  : 	{
; 219  : 		CStringData* pSrcData = strSrc.GetData();

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _strSrc$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]
  00006	56		 push	 esi
  00007	83 e8 10	 sub	 eax, 16			; 00000010H

; 220  : 		CStringData* pNewData = CloneData( pSrcData );

  0000a	50		 push	 eax
  0000b	8b f1		 mov	 esi, ecx
  0000d	e8 00 00 00 00	 call	 ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData

; 221  : 		Attach( pNewData );

  00012	83 c0 10	 add	 eax, 16			; 00000010H
  00015	89 06		 mov	 DWORD PTR [esi], eax
  00017	83 c4 04	 add	 esp, 4

; 222  : 	}

  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	c2 04 00	 ret	 4
??0?$CSimpleStringT@D$0A@@ATL@@QAE@ABV01@@Z ENDP	; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1510 : 		if (!_Built)

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Built$[esp-4]
  00004	84 c0		 test	 al, al
  00006	53		 push	 ebx
  00007	55		 push	 ebp
  00008	8b 6c 24 10	 mov	 ebp, DWORD PTR __Newsize$[esp+4]
  0000c	8b d9		 mov	 ebx, ecx
  0000e	74 2f		 je	 SHORT $L106675

; 1511 : 			;
; 1512 : 		else if (_BUF_SIZE <= _Myres)

  00010	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  00014	72 29		 jb	 SHORT $L106675

; 1513 : 			{	// copy any leftovers to small buffer and deallocate
; 1514 : 			_Elem *_Ptr = _Bx._Ptr;
; 1515 : 			if (0 < _Newsize)

  00016	85 ed		 test	 ebp, ebp
  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	57		 push	 edi
  0001c	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  0001f	76 14		 jbe	 SHORT $L106672
  00021	56		 push	 esi

; 1516 : 				_Traits::copy(_Bx._Buf, _Ptr, _Newsize);

  00022	8b cd		 mov	 ecx, ebp
  00024	8b d1		 mov	 edx, ecx
  00026	c1 e9 02	 shr	 ecx, 2
  00029	8b f0		 mov	 esi, eax
  0002b	f3 a5		 rep movsd
  0002d	8b ca		 mov	 ecx, edx
  0002f	83 e1 03	 and	 ecx, 3
  00032	f3 a4		 rep movsb
  00034	5e		 pop	 esi
$L106672:

; 1517 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4
  0003e	5f		 pop	 edi
$L106675:

; 1518 : 			}
; 1519 : 		_Myres = _BUF_SIZE - 1;
; 1520 : 		_Eos(_Newsize);

  0003f	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00042	c7 43 18 0f 00
	00 00		 mov	 DWORD PTR [ebx+24], 15	; 0000000fH
  00049	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0004e	5d		 pop	 ebp
  0004f	5b		 pop	 ebx

; 1521 : 		}

  00050	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
EXTRN	?_Xran@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xran
; Function compile flags: /Ogty
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 792  : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp

; 793  : 		if (_Mysize < _Off)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	39 6e 14	 cmp	 DWORD PTR [esi+20], ebp
  0000b	57		 push	 edi
  0000c	73 05		 jae	 SHORT $L103775

; 794  : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L103775:

; 795  : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c5		 sub	 eax, ebp
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $L103776

; 796  : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$L103776:

; 797  : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 47		 jbe	 SHORT $L106740

; 798  : 			{	// move elements down
; 799  : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 800  : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0002c	53		 push	 ebx
  0002d	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  00030	72 04		 jb	 SHORT $L106705
  00032	8b 13		 mov	 edx, DWORD PTR [ebx]
  00034	eb 02		 jmp	 SHORT $L106706
$L106705:
  00036	8b d3		 mov	 edx, ebx
$L106706:
  00038	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0003b	72 04		 jb	 SHORT $L106712
  0003d	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0003f	eb 02		 jmp	 SHORT $L106713
$L106712:
  00041	8b cb		 mov	 ecx, ebx
$L106713:
  00043	2b c7		 sub	 eax, edi

; 803  : 			}
; 804  : 		return (*this);

  00045	03 d5		 add	 edx, ebp
  00047	50		 push	 eax
  00048	03 d7		 add	 edx, edi
  0004a	52		 push	 edx
  0004b	03 cd		 add	 ecx, ebp
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 _memmove
  00053	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00056	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00059	2b c7		 sub	 eax, edi
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005e	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00061	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00064	72 02		 jb	 SHORT $L106735

; 801  : 			size_type _Newsize = _Mysize - _Count;
; 802  : 			_Eos(_Newsize);

  00066	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$L106735:
  00068	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0
  0006c	5b		 pop	 ebx
$L106740:
  0006d	5f		 pop	 edi

; 803  : 			}
; 804  : 		return (*this);

  0006e	8b c6		 mov	 eax, esi
  00070	5e		 pop	 esi
  00071	5d		 pop	 ebp

; 805  : 		}

  00072	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T106945 DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
$T106947 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L106747
$T106948 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L106745
$T106946 DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T106947
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:$T106948
$T106939 DD	019930520H
	DD	04H
	DD	FLAT:$T106945
	DD	02H
	DD	FLAT:$T106946
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1444 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1445 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	8b d8		 mov	 ebx, eax
  00022	83 cb 0f	 or	 ebx, 15			; 0000000fH

; 1446 : 		if (max_size() < _Newres)

  00025	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00028	57		 push	 edi
  00029	8b f1		 mov	 esi, ecx
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00031	76 04		 jbe	 SHORT $L103850

; 1447 : 			_Newres = _Newsize;	// undo roundup if too big

  00033	8b d8		 mov	 ebx, eax

; 1448 : 		else if (_Newres / 3 < _Myres / 2

  00035	eb 22		 jmp	 SHORT $L103852
$L103850:

; 1449 : 			&& _Myres <= max_size() - _Myres / 2)

  00037	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  0003a	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0003f	f7 e3		 mul	 ebx
  00041	8b cf		 mov	 ecx, edi
  00043	d1 e9		 shr	 ecx, 1
  00045	d1 ea		 shr	 edx, 1
  00047	3b d1		 cmp	 edx, ecx
  00049	73 0e		 jae	 SHORT $L103852
  0004b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00050	2b c1		 sub	 eax, ecx
  00052	3b f8		 cmp	 edi, eax
  00054	77 03		 ja	 SHORT $L103852

; 1450 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00056	8d 1c 39	 lea	 ebx, DWORD PTR [ecx+edi]
$L103852:

; 1451 : 		_Elem *_Ptr;
; 1452 : 
; 1453 : 		_TRY_BEGIN
; 1454 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00059	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  0005c	51		 push	 ecx
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00064	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00069	8b d0		 mov	 edx, eax
  0006b	83 c4 04	 add	 esp, 4
  0006e	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
  00071	eb 29		 jmp	 SHORT $L103854
$L106745:

; 1455 : 		_CATCH_ALL
; 1456 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  00073	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00076	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 1457 : 			_TRY_BEGIN
; 1458 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00079	40		 inc	 eax
  0007a	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0007d	50		 push	 eax
  0007e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00082	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00087	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0008a	83 c4 04	 add	 esp, 4

; 1462 : 			_CATCH_END
; 1463 : 		_CATCH_END

  0008d	b8 00 00 00 00	 mov	 eax, $L106940
  00092	c3		 ret	 0
$L106940:
  00093	8b 5d e8	 mov	 ebx, DWORD PTR __Newres$[ebp]
  00096	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00099	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$L103854:

; 1464 : 
; 1465 : 		if (0 < _Oldlen)

  0009c	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  0009f	85 c9		 test	 ecx, ecx
  000a1	76 24		 jbe	 SHORT $L106865

; 1466 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  000a3	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000a7	72 05		 jb	 SHORT $L106860
  000a9	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000ac	eb 03		 jmp	 SHORT $L106861
$L106860:
  000ae	83 c6 04	 add	 esi, 4
$L106861:
  000b1	8b c1		 mov	 eax, ecx
  000b3	c1 e9 02	 shr	 ecx, 2
  000b6	8b fa		 mov	 edi, edx
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb
  000c1	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000c4	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
$L106865:

; 1467 : 		_Tidy(true);

  000c7	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000cb	72 12		 jb	 SHORT $L106906
  000cd	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000d0	51		 push	 ecx
  000d1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d6	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000d9	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000dc	83 c4 04	 add	 esp, 4
$L106906:

; 1468 : 		_Bx._Ptr = _Ptr;
; 1469 : 		_Myres = _Newres;
; 1470 : 		_Eos(_Oldlen);

  000df	83 fb 10	 cmp	 ebx, 16			; 00000010H
  000e2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000e5	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e8	89 10		 mov	 DWORD PTR [eax], edx
  000ea	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  000ed	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  000f0	72 02		 jb	 SHORT $L106935
  000f2	8b c2		 mov	 eax, edx
$L106935:

; 1471 : 		}

  000f4	5f		 pop	 edi
  000f5	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  000f9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fc	5e		 pop	 esi
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00104	5b		 pop	 ebx
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c2 08 00	 ret	 8
$L106747:

; 1459 : 			_CATCH_ALL
; 1460 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010b	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0010e	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00112	72 0c		 jb	 SHORT $L106846
  00114	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00117	52		 push	 edx
  00118	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0011d	83 c4 04	 add	 esp, 4
$L106846:

; 1461 : 			_RERAISE;

  00120	6a 00		 push	 0
  00122	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00129	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00130	6a 00		 push	 0
  00132	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00136	e8 00 00 00 00	 call	 __CxxThrowException@8
$L106950:
$L106944:
  0013b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T106939
  00005	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	??1?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@QAE@XZ ; std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char>::~pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char>
; Function compile flags: /Ogty
;	COMDAT ??1?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@QAE@XZ
_TEXT	SEGMENT
??1?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@QAE@XZ PROC NEAR ; std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char>::~pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char>, COMDAT
; _this$ = ecx
  00000	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
??1?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@QAE@XZ ENDP ; std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char>::~pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char>
_TEXT	ENDS
PUBLIC	??A?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAEAAUtagTCHATLOG@@I@Z ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::operator[]
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??A?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAEAAUtagTCHATLOG@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAEAAUtagTCHATLOG@@I@Z PROC NEAR ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::operator[], COMDAT
; _this$ = ecx

; 555  : 		return (*(begin() + _Pos));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pos$[esp-4]
  00007	8d 04 c8	 lea	 eax, DWORD PTR [eax+ecx*8]

; 556  : 		}

  0000a	c2 04 00	 ret	 4
??A?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAEAAUtagTCHATLOG@@I@Z ENDP ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::operator[]
_TEXT	ENDS
PUBLIC	??R?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@QBE_NABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@0@Z ; std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >::operator()
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\functional
;	COMDAT ??R?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@QBE_NABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@QBE_NABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@0@Z PROC NEAR ; std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >::operator(), COMDAT
; _this$ = ecx

; 139  : 		return (_Left < _Right);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]
  00006	8b 4c 24 04	 mov	 ecx, DWORD PTR __Left$[esp-4]
  0000a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000c	50		 push	 eax
  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 __mbscmp
  00013	33 d2		 xor	 edx, edx
  00015	83 c4 08	 add	 esp, 8
  00018	85 c0		 test	 eax, eax
  0001a	0f 9c c2	 setl	 dl
  0001d	8a c2		 mov	 al, dl

; 140  : 		}

  0001f	c2 08 00	 ret	 8
??R?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@QBE_NABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@0@Z ENDP ; std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >::operator()
_TEXT	ENDS
PUBLIC	?_Lbound@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@ABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Lbound
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Lbound@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@ABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
_TEXT	SEGMENT
__Keyval$ = 8						; size = 4
?_Lbound@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@ABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Lbound, COMDAT
; _this$ = ecx

; 988  : 		_Nodeptr _Pnode = _Root();

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	56		 push	 esi
  00004	8b 70 04	 mov	 esi, DWORD PTR [eax+4]
  00007	57		 push	 edi

; 989  : 		_Nodeptr _Wherenode = _Myhead;	// end() if search fails

  00008	8b f8		 mov	 edi, eax

; 990  : 
; 991  : 		while (!_Isnil(_Pnode))

  0000a	8a 46 15	 mov	 al, BYTE PTR [esi+21]
  0000d	84 c0		 test	 al, al
  0000f	75 29		 jne	 SHORT $L107101
  00011	53		 push	 ebx
  00012	8b 5c 24 10	 mov	 ebx, DWORD PTR __Keyval$[esp+8]
$L104743:

; 992  : 			if (this->comp(_Key(_Pnode), _Keyval))

  00016	8b 03		 mov	 eax, DWORD PTR [ebx]
  00018	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  0001b	50		 push	 eax
  0001c	51		 push	 ecx
  0001d	e8 00 00 00 00	 call	 __mbscmp
  00022	83 c4 08	 add	 esp, 8
  00025	85 c0		 test	 eax, eax
  00027	7d 05		 jge	 SHORT $L104745

; 993  : 				_Pnode = _Right(_Pnode);	// descend right subtree

  00029	8b 76 08	 mov	 esi, DWORD PTR [esi+8]

; 994  : 			else

  0002c	eb 04		 jmp	 SHORT $L104746
$L104745:

; 995  : 				{	// _Pnode not less than _Keyval, remember it
; 996  : 				_Wherenode = _Pnode;

  0002e	8b fe		 mov	 edi, esi

; 997  : 				_Pnode = _Left(_Pnode);	// descend left subtree

  00030	8b 36		 mov	 esi, DWORD PTR [esi]
$L104746:
  00032	8a 46 15	 mov	 al, BYTE PTR [esi+21]
  00035	84 c0		 test	 al, al
  00037	74 dd		 je	 SHORT $L104743
  00039	5b		 pop	 ebx
$L107101:

; 998  : 				}
; 999  : 
; 1000 : 		return (_Wherenode);	// return best remembered candidate

  0003a	8b c7		 mov	 eax, edi
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi

; 1001 : 		}

  0003e	c2 04 00	 ret	 4
?_Lbound@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@ABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Lbound
_TEXT	ENDS
PUBLIC	??0?$_Tree_val@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@1@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Tree_val<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >
; Function compile flags: /Ogty
;	COMDAT ??0?$_Tree_val@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@1@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_val@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@1@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z PROC NEAR ; std::_Tree_val<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Tree_val<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >, COMDAT
; _this$ = ecx

; 95   : 		{	// construct base, and allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 96   : 		}

  00002	c2 08 00	 ret	 8
??0?$_Tree_val@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAE@ABU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@1@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Tree_val<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Buynode
; Function compile flags: /Ogty
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Buynode@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 1106 : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

  00000	6a 18		 push	 24			; 00000018H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 1107 : 		int _Linkcnt = 0;
; 1108 : 
; 1109 : 		_TRY_BEGIN
; 1110 : 		this->_Alptr.construct(&_Left(_Wherenode), 0);

  0000a	85 c0		 test	 eax, eax
  0000c	74 06		 je	 SHORT $L107186
  0000e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$L107186:

; 1111 : 		++_Linkcnt;
; 1112 : 		this->_Alptr.construct(&_Parent(_Wherenode), 0);

  00014	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00017	85 c9		 test	 ecx, ecx
  00019	74 06		 je	 SHORT $L107214
  0001b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$L107214:

; 1113 : 		++_Linkcnt;
; 1114 : 		this->_Alptr.construct(&_Right(_Wherenode), 0);

  00021	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
  00024	85 c9		 test	 ecx, ecx
  00026	74 06		 je	 SHORT $L107241
  00028	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$L107241:

; 1115 : 		_CATCH_ALL
; 1116 : 		if (1 < _Linkcnt)
; 1117 : 			this->_Alptr.destroy(&_Parent(_Wherenode));
; 1118 : 		if (0 < _Linkcnt)
; 1119 : 			this->_Alptr.destroy(&_Left(_Wherenode));
; 1120 : 		this->_Alnod.deallocate(_Wherenode, 1);
; 1121 : 		_RERAISE;
; 1122 : 		_CATCH_END
; 1123 : 		_Color(_Wherenode) = _Black;

  0002e	c6 40 14 01	 mov	 BYTE PTR [eax+20], 1

; 1124 : 		_Isnil(_Wherenode) = false;

  00032	c6 40 15 00	 mov	 BYTE PTR [eax+21], 0

; 1125 : 		return (_Wherenode);
; 1126 : 		}

  00036	c3		 ret	 0
?_Buynode@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Buynode
_TEXT	ENDS
PUBLIC	??$_Destroy_range@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAXPAUtagTCHATLOG@@0AAV?$allocator@UtagTCHATLOG@@@0@@Z ; std::_Destroy_range<tagTCHATLOG,std::allocator<tagTCHATLOG> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy_range@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAXPAUtagTCHATLOG@@0AAV?$allocator@UtagTCHATLOG@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAXPAUtagTCHATLOG@@0AAV?$allocator@UtagTCHATLOG@@@0@@Z PROC NEAR ; std::_Destroy_range<tagTCHATLOG,std::allocator<tagTCHATLOG> >, COMDAT

; 217  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 218  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAXPAUtagTCHATLOG@@0AAV?$allocator@UtagTCHATLOG@@@0@@Z ENDP ; std::_Destroy_range<tagTCHATLOG,std::allocator<tagTCHATLOG> >
_TEXT	ENDS
PUBLIC	??1_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node::~_Node
; Function compile flags: /Ogty
;	COMDAT ??1_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@XZ PROC NEAR ; std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node::~_Node, COMDAT
; _this$ = ecx
  00000	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00003	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@QAE@XZ
??1_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node::~_Node
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUtagTCHATLOG@@IU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAXPAUtagTCHATLOG@@IABU1@AAV?$allocator@UtagTCHATLOG@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<tagTCHATLOG *,unsigned int,tagTCHATLOG,std::allocator<tagTCHATLOG> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninit_fill_n@PAUtagTCHATLOG@@IU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAXPAUtagTCHATLOG@@IABU1@AAV?$allocator@UtagTCHATLOG@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_fill_n@PAUtagTCHATLOG@@IU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAXPAUtagTCHATLOG@@IABU1@AAV?$allocator@UtagTCHATLOG@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_fill_n<tagTCHATLOG *,unsigned int,tagTCHATLOG,std::allocator<tagTCHATLOG> >, COMDAT

; 208  : 	_FwdIt _Next = _First;
; 209  : 
; 210  : 	_TRY_BEGIN
; 211  : 	for (; 0 < _Count; --_Count, ++_First)

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	76 20		 jbe	 SHORT $L105142
  00008	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b d0		 mov	 edx, eax
  0000e	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00012	56		 push	 esi
$L105140:

; 212  : 		_Al.construct(_First, _Val);

  00013	85 c0		 test	 eax, eax
  00015	74 0a		 je	 SHORT $L105141
  00017	8b 31		 mov	 esi, DWORD PTR [ecx]
  00019	89 30		 mov	 DWORD PTR [eax], esi
  0001b	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  0001e	89 70 04	 mov	 DWORD PTR [eax+4], esi
$L105141:
  00021	83 c0 08	 add	 eax, 8
  00024	4a		 dec	 edx
  00025	75 ec		 jne	 SHORT $L105140
  00027	5e		 pop	 esi
$L105142:

; 213  : 	_CATCH_ALL
; 214  : 	for (; _Next != _First; ++_Next)
; 215  : 		_Al.destroy(_Next);
; 216  : 	_RERAISE;
; 217  : 	_CATCH_END
; 218  : 	}

  00028	c3		 ret	 0
??$_Uninit_fill_n@PAUtagTCHATLOG@@IU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAXPAUtagTCHATLOG@@IABU1@AAV?$allocator@UtagTCHATLOG@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<tagTCHATLOG *,unsigned int,tagTCHATLOG,std::allocator<tagTCHATLOG> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@PAUtagTCHATLOG@@PAU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAPAUtagTCHATLOG@@PAU1@00AAV?$allocator@UtagTCHATLOG@@@0@@Z ; std::_Uninitialized_copy<tagTCHATLOG *,tagTCHATLOG *,std::allocator<tagTCHATLOG> >
; Function compile flags: /Ogty
;	COMDAT ??$_Uninitialized_copy@PAUtagTCHATLOG@@PAU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAPAUtagTCHATLOG@@PAU1@00AAV?$allocator@UtagTCHATLOG@@@0@@Z
_TEXT	SEGMENT
__Cat$107312 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAUtagTCHATLOG@@PAU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAPAUtagTCHATLOG@@PAU1@00AAV?$allocator@UtagTCHATLOG@@@0@@Z PROC NEAR ; std::_Uninitialized_copy<tagTCHATLOG *,tagTCHATLOG *,std::allocator<tagTCHATLOG> >, COMDAT

; 126  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 127  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 128  : 		_Ptr_cat(_First, _Dest)));

  00001	8b 04 24	 mov	 eax, DWORD PTR __Cat$107312[esp+4]
  00004	8b 4c 24 14	 mov	 ecx, DWORD PTR __Al$[esp]
  00008	8b 54 24 10	 mov	 edx, DWORD PTR __Dest$[esp]
  0000c	50		 push	 eax
  0000d	8b 44 24 10	 mov	 eax, DWORD PTR __Last$[esp+4]
  00011	51		 push	 ecx
  00012	8b 4c 24 10	 mov	 ecx, DWORD PTR __First$[esp+8]
  00016	52		 push	 edx
  00017	50		 push	 eax
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUtagTCHATLOG@@PAU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAPAUtagTCHATLOG@@PAU1@00AAV?$allocator@UtagTCHATLOG@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<tagTCHATLOG *,tagTCHATLOG *,std::allocator<tagTCHATLOG> >

; 129  : 	}

  0001e	83 c4 18	 add	 esp, 24			; 00000018H
  00021	c3		 ret	 0
??$_Uninitialized_copy@PAUtagTCHATLOG@@PAU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAPAUtagTCHATLOG@@PAU1@00AAV?$allocator@UtagTCHATLOG@@@0@@Z ENDP ; std::_Uninitialized_copy<tagTCHATLOG *,tagTCHATLOG *,std::allocator<tagTCHATLOG> >
_TEXT	ENDS
PUBLIC	??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@ABV01@@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@ABV01@@Z
_TEXT	SEGMENT
_strSrc$ = 8						; size = 4
??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@ABV01@@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >, COMDAT
; _this$ = ecx

; 814  : 	{

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _strSrc$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]
  00006	56		 push	 esi
  00007	83 e8 10	 sub	 eax, 16			; 00000010H
  0000a	50		 push	 eax
  0000b	8b f1		 mov	 esi, ecx
  0000d	e8 00 00 00 00	 call	 ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData
  00012	83 c0 10	 add	 eax, 16			; 00000010H
  00015	89 06		 mov	 DWORD PTR [esi], eax
  00017	83 c4 04	 add	 esp, 4

; 815  : 	}

  0001a	8b c6		 mov	 eax, esi
  0001c	5e		 pop	 esi
  0001d	c2 04 00	 ret	 4
??0?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@ABV01@@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 456  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 457  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $L107382
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$L107382:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 458  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xlen
; Function compile flags: /Ogty
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1480 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	56		 push	 esi

; 1481 : 		if (max_size() < _Newsize)

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR __Newsize$[esp+4]
  00006	83 fe fe	 cmp	 esi, -2			; fffffffeH
  00009	8b e9		 mov	 ebp, ecx
  0000b	76 05		 jbe	 SHORT $L103784

; 1482 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L103784:

; 1483 : 		if (_Myres < _Newsize)

  00012	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00015	3b c6		 cmp	 eax, esi
  00017	73 19		 jae	 SHORT $L103785

; 1484 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0001c	50		 push	 eax
  0001d	56		 push	 esi
  0001e	8b cd		 mov	 ecx, ebp
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c0		 xor	 eax, eax
  00027	3b c6		 cmp	 eax, esi
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5d		 pop	 ebp

; 1491 : 		}

  0002f	c2 08 00	 ret	 8
$L103785:

; 1485 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	8a 4c 24 10	 mov	 cl, BYTE PTR __Trim$[esp+4]
  00036	84 c9		 test	 cl, cl
  00038	74 5c		 je	 SHORT $L103787
  0003a	83 fe 10	 cmp	 esi, 16			; 00000010H
  0003d	73 57		 jae	 SHORT $L103787
  0003f	53		 push	 ebx

; 1486 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1487 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  00040	8b 5d 14	 mov	 ebx, DWORD PTR [ebp+20]
  00043	3b f3		 cmp	 esi, ebx
  00045	73 02		 jae	 SHORT $L107397
  00047	8b de		 mov	 ebx, esi
$L107397:
  00049	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004c	72 2b		 jb	 SHORT $L107457
  0004e	85 db		 test	 ebx, ebx
  00050	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00053	57		 push	 edi
  00054	8d 7d 04	 lea	 edi, DWORD PTR [ebp+4]
  00057	76 16		 jbe	 SHORT $L107455
  00059	8b cb		 mov	 ecx, ebx
  0005b	8b d1		 mov	 edx, ecx
  0005d	c1 e9 02	 shr	 ecx, 2
  00060	8b f0		 mov	 esi, eax
  00062	f3 a5		 rep movsd
  00064	8b ca		 mov	 ecx, edx
  00066	83 e1 03	 and	 ecx, 3
  00069	f3 a4		 rep movsb
  0006b	8b 74 24 14	 mov	 esi, DWORD PTR __Newsize$[esp+12]
$L107455:
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00075	83 c4 04	 add	 esp, 4
  00078	5f		 pop	 edi
$L107457:
  00079	89 5d 14	 mov	 DWORD PTR [ebp+20], ebx

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  0007c	33 c0		 xor	 eax, eax
  0007e	c7 45 18 0f 00
	00 00		 mov	 DWORD PTR [ebp+24], 15	; 0000000fH
  00085	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0008a	3b c6		 cmp	 eax, esi
  0008c	5b		 pop	 ebx
  0008d	1b c0		 sbb	 eax, eax
  0008f	5e		 pop	 esi
  00090	f7 d8		 neg	 eax
  00092	5d		 pop	 ebp

; 1491 : 		}

  00093	c2 08 00	 ret	 8
$L103787:

; 1488 : 		else if (_Newsize == 0)

  00096	85 f6		 test	 esi, esi
  00098	75 23		 jne	 SHORT $L107488

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

  0009a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0009d	89 75 14	 mov	 DWORD PTR [ebp+20], esi
  000a0	72 14		 jb	 SHORT $L107486
  000a2	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000a5	33 c0		 xor	 eax, eax
  000a7	3b c6		 cmp	 eax, esi
  000a9	1b c0		 sbb	 eax, eax
  000ab	5e		 pop	 esi
  000ac	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
  000b0	f7 d8		 neg	 eax
  000b2	5d		 pop	 ebp

; 1491 : 		}

  000b3	c2 08 00	 ret	 8

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

$L107486:
  000b6	83 c5 04	 add	 ebp, 4
  000b9	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
$L107488:

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000bd	33 c0		 xor	 eax, eax
  000bf	3b c6		 cmp	 eax, esi
  000c1	1b c0		 sbb	 eax, eax
  000c3	5e		 pop	 esi
  000c4	f7 d8		 neg	 eax
  000c6	5d		 pop	 ebp

; 1491 : 		}

  000c7	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?Left@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Left
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?Left@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z
_TEXT	SEGMENT
$T107495 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_nCount$ = 12						; size = 4
?Left@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Left, COMDAT
; _this$ = ecx

; 1759 : 	{

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 1760 : 		// nCount is in XCHARs
; 1761 : 		if (nCount < 0)

  00003	8b 7c 24 14	 mov	 edi, DWORD PTR _nCount$[esp+8]
  00007	85 ff		 test	 edi, edi
  00009	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR $T107495[esp+12], 0
  00011	7d 02		 jge	 SHORT $L104229

; 1762 : 			nCount = 0;

  00013	33 ff		 xor	 edi, edi
$L104229:

; 1763 : 
; 1764 : 		int nLength = GetLength();

  00015	8b 31		 mov	 esi, DWORD PTR [ecx]

; 1765 : 		if( nCount >= nLength )

  00017	3b 7e f4	 cmp	 edi, DWORD PTR [esi-12]
  0001a	7c 1d		 jl	 SHORT $L104231

; 1766 : 		{
; 1767 : 			return( *this );

  0001c	8d 46 f0	 lea	 eax, DWORD PTR [esi-16]
  0001f	50		 push	 eax
  00020	e8 00 00 00 00	 call	 ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData
  00025	83 c4 04	 add	 esp, 4
  00028	8b c8		 mov	 ecx, eax
  0002a	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  0002e	83 c1 10	 add	 ecx, 16			; 00000010H
  00031	5f		 pop	 edi
  00032	89 08		 mov	 DWORD PTR [eax], ecx
  00034	5e		 pop	 esi

; 1771 : 	}

  00035	59		 pop	 ecx
  00036	c2 08 00	 ret	 8
$L104231:

; 1768 : 		}
; 1769 : 
; 1770 : 		return( CStringT( GetString(), nCount, GetManager() ) );

  00039	8b 4e f0	 mov	 ecx, DWORD PTR [esi-16]
  0003c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003e	ff 52 10	 call	 DWORD PTR [edx+16]
  00041	50		 push	 eax
  00042	57		 push	 edi
  00043	56		 push	 esi
  00044	8b 74 24 1c	 mov	 esi, DWORD PTR ___$ReturnUdt$[esp+20]
  00048	8b ce		 mov	 ecx, esi
  0004a	e8 00 00 00 00	 call	 ??0?$CSimpleStringT@D$0A@@ATL@@QAE@PBDHPAUIAtlStringMgr@1@@Z ; ATL::CSimpleStringT<char,0>::CSimpleStringT<char,0>
  0004f	5f		 pop	 edi
  00050	8b c6		 mov	 eax, esi
  00052	5e		 pop	 esi

; 1771 : 	}

  00053	59		 pop	 ecx
  00054	c2 08 00	 ret	 8
?Left@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Left
_TEXT	ENDS
PUBLIC	??0?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@QAE@ABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABE@Z ; std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char>::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\utility
;	COMDAT ??0?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@QAE@ABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABE@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@QAE@ABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABE@Z PROC NEAR ; std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char>::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char>, COMDAT
; _this$ = ecx

; 34   : 		{	// construct from specified values

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val1$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]
  00006	56		 push	 esi
  00007	83 e8 10	 sub	 eax, 16			; 00000010H
  0000a	50		 push	 eax
  0000b	8b f1		 mov	 esi, ecx
  0000d	e8 00 00 00 00	 call	 ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData
  00012	8b 4c 24 10	 mov	 ecx, DWORD PTR __Val2$[esp+4]
  00016	83 c0 10	 add	 eax, 16			; 00000010H
  00019	89 06		 mov	 DWORD PTR [esi], eax
  0001b	8a 11		 mov	 dl, BYTE PTR [ecx]
  0001d	83 c4 04	 add	 esp, 4
  00020	88 56 04	 mov	 BYTE PTR [esi+4], dl

; 35   : 		}

  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 08 00	 ret	 8
??0?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@QAE@ABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@ABE@Z ENDP ; std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char>::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char>
_TEXT	ENDS
PUBLIC	?lower_bound@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::lower_bound
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?lower_bound@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
?lower_bound@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::lower_bound, COMDAT
; _this$ = ecx

; 810  : 		return (_TREE_ITERATOR(_Lbound(_Keyval)));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Keyval$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ?_Lbound@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@ABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Lbound
  0000a	8b 4c 24 04	 mov	 ecx, DWORD PTR ___$ReturnUdt$[esp-4]
  0000e	89 01		 mov	 DWORD PTR [ecx], eax
  00010	8b c1		 mov	 eax, ecx

; 811  : 		}

  00012	c2 08 00	 ret	 8
?lower_bound@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::lower_bound
_TEXT	ENDS
PUBLIC	?_Init@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Init
; Function compile flags: /Ogty
;	COMDAT ?_Init@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Init, COMDAT
; _this$ = ecx

; 901  : 		{	// create head/nil node and make tree empty

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 902  : 		_Myhead = _Buynode();

  00003	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Buynode
  00008	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 903  : 		_Isnil(_Myhead) = true;

  0000b	c6 40 15 01	 mov	 BYTE PTR [eax+21], 1

; 904  : 		_Root() = _Myhead;

  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00012	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 905  : 		_Lmost() = _Myhead, _Rmost() = _Myhead;

  00015	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00018	89 00		 mov	 DWORD PTR [eax], eax
  0001a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001d	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 906  : 		_Mysize = 0;

  00020	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00027	5e		 pop	 esi

; 907  : 		}

  00028	c3		 ret	 0
?_Init@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Init
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEXPAUtagTCHATLOG@@0@Z ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Destroy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?_Destroy@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEXPAUtagTCHATLOG@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEXPAUtagTCHATLOG@@0@Z PROC NEAR ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Destroy, COMDAT
; _this$ = ecx

; 787  : 		_Destroy_range(_First, _Last, this->_Alval);
; 788  : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEXPAUtagTCHATLOG@@0@Z ENDP ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Destroy
_TEXT	ENDS
PUBLIC	??0?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@QAE@ABU01@@Z ; std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char>::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char>
; Function compile flags: /Ogty
;	COMDAT ??0?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@QAE@ABU01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@QAE@ABU01@@Z PROC NEAR ; std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char>::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char>, COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR ___that$[esp+4]
  00006	8b 07		 mov	 eax, DWORD PTR [edi]
  00008	83 e8 10	 sub	 eax, 16			; 00000010H
  0000b	50		 push	 eax
  0000c	8b f1		 mov	 esi, ecx
  0000e	e8 00 00 00 00	 call	 ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData
  00013	83 c0 10	 add	 eax, 16			; 00000010H
  00016	89 06		 mov	 DWORD PTR [esi], eax
  00018	8a 47 04	 mov	 al, BYTE PTR [edi+4]
  0001b	83 c4 04	 add	 esp, 4
  0001e	88 46 04	 mov	 BYTE PTR [esi+4], al
  00021	5f		 pop	 edi
  00022	8b c6		 mov	 eax, esi
  00024	5e		 pop	 esi
  00025	c2 04 00	 ret	 4
??0?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@QAE@ABU01@@Z ENDP ; std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char>::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_fill_n@PAUtagTCHATLOG@@IU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAXPAUtagTCHATLOG@@IABU1@AAV?$allocator@UtagTCHATLOG@@@0@@Z ; std::_Uninitialized_fill_n<tagTCHATLOG *,unsigned int,tagTCHATLOG,std::allocator<tagTCHATLOG> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninitialized_fill_n@PAUtagTCHATLOG@@IU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAXPAUtagTCHATLOG@@IABU1@AAV?$allocator@UtagTCHATLOG@@@0@@Z
_TEXT	SEGMENT
__Cat$107691 = -4					; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_fill_n@PAUtagTCHATLOG@@IU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAXPAUtagTCHATLOG@@IABU1@AAV?$allocator@UtagTCHATLOG@@@0@@Z PROC NEAR ; std::_Uninitialized_fill_n<tagTCHATLOG *,unsigned int,tagTCHATLOG,std::allocator<tagTCHATLOG> >, COMDAT

; 255  : 	{	// copy _Count *_Val to raw _First, using _Al

  00000	51		 push	 ecx

; 256  : 	_Uninit_fill_n(_First, _Count, _Val, _Al,
; 257  : 		_Ptr_cat(_First, _First));

  00001	8b 04 24	 mov	 eax, DWORD PTR __Cat$107691[esp+4]
  00004	8b 4c 24 14	 mov	 ecx, DWORD PTR __Al$[esp]
  00008	8b 54 24 10	 mov	 edx, DWORD PTR __Val$[esp]
  0000c	50		 push	 eax
  0000d	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp+4]
  00011	51		 push	 ecx
  00012	8b 4c 24 10	 mov	 ecx, DWORD PTR __First$[esp+8]
  00016	52		 push	 edx
  00017	50		 push	 eax
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUtagTCHATLOG@@IU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAXPAUtagTCHATLOG@@IABU1@AAV?$allocator@UtagTCHATLOG@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<tagTCHATLOG *,unsigned int,tagTCHATLOG,std::allocator<tagTCHATLOG> >

; 258  : 	}

  0001e	83 c4 18	 add	 esp, 24			; 00000018H
  00021	c3		 ret	 0
??$_Uninitialized_fill_n@PAUtagTCHATLOG@@IU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAXPAUtagTCHATLOG@@IABU1@AAV?$allocator@UtagTCHATLOG@@@0@@Z ENDP ; std::_Uninitialized_fill_n<tagTCHATLOG *,unsigned int,tagTCHATLOG,std::allocator<tagTCHATLOG> >
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAUtagTCHATLOG@@@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEPAUtagTCHATLOG@@PAU2@00@Z ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Ucopy<tagTCHATLOG *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??$_Ucopy@PAUtagTCHATLOG@@@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEPAUtagTCHATLOG@@PAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$107705 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@PAUtagTCHATLOG@@@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEPAUtagTCHATLOG@@PAU2@00@Z PROC NEAR ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Ucopy<tagTCHATLOG *>, COMDAT
; _this$ = ecx

; 802  : 		{	// copy initializing [_First, _Last), using allocator
; 803  : 		return (_Uninitialized_copy(_First, _Last,
; 804  : 			_Ptr, this->_Alval));

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __Cat$107705[esp-4]
  00004	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00008	50		 push	 eax
  00009	8b 44 24 08	 mov	 eax, DWORD PTR __First$[esp]
  0000d	51		 push	 ecx
  0000e	8b 4c 24 14	 mov	 ecx, DWORD PTR __Ptr$[esp+4]
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUtagTCHATLOG@@PAU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAPAUtagTCHATLOG@@PAU1@00AAV?$allocator@UtagTCHATLOG@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<tagTCHATLOG *,tagTCHATLOG *,std::allocator<tagTCHATLOG> >
  0001a	83 c4 14	 add	 esp, 20			; 00000014H

; 805  : 		}

  0001d	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAUtagTCHATLOG@@@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEPAUtagTCHATLOG@@PAU2@00@Z ENDP ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Ucopy<tagTCHATLOG *>
_TEXT	ENDS
PUBLIC	??_G_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEPAXI@Z ; std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node::`scalar deleting destructor'
; Function compile flags: /Ogty
;	COMDAT ??_G_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEPAXI@Z PROC NEAR ; std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@XZ
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L107712
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L107712:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_G_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEPAXI@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:NEAR		; std::logic_error::`vector deleting destructor'
EXTRN	??1exception@@UAE@XZ:NEAR			; exception::~exception
;	COMDAT ??_7logic_error@std@@6B@
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
CONST	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC NEAR			; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 23   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L107780
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L107780:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC NEAR		; std::logic_error::what, COMDAT
; _this$ = ecx

; 27   : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L107807
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  00009	c3		 ret	 0

; 27   : 		return (_Str.c_str());

$L107807:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  0000d	c3		 ret	 0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC NEAR		; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1logic_error@std@@UAE@XZ ; std::logic_error::~logic_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L107814
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L107814:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 590  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 591  : 		if (_Right.size() < _Roff)

  00003	8b 74 24 14	 mov	 esi, DWORD PTR __Roff$[esp+8]
  00007	57		 push	 edi
  00008	8b 7c 24 14	 mov	 edi, DWORD PTR __Right$[esp+12]
  0000c	39 77 14	 cmp	 DWORD PTR [edi+20], esi
  0000f	8b d9		 mov	 ebx, ecx
  00011	73 05		 jae	 SHORT $L103440

; 592  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L103440:

; 593  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 6f 14	 mov	 ebp, DWORD PTR [edi+20]

; 594  : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b ee		 sub	 ebp, esi
  00021	3b c5		 cmp	 eax, ebp
  00023	73 02		 jae	 SHORT $L103442

; 595  : 			_Num = _Count;	// trim _Num to size

  00025	8b e8		 mov	 ebp, eax
$L103442:

; 596  : 
; 597  : 		if (this == &_Right)

  00027	3b df		 cmp	 ebx, edi
  00029	75 1f		 jne	 SHORT $L103443

; 598  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 ee		 add	 ebp, esi
  0002f	55		 push	 ebp
  00030	8b cb		 mov	 ecx, ebx
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	56		 push	 esi
  00038	6a 00		 push	 0
  0003a	8b cb		 mov	 ecx, ebx
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00044	8b c3		 mov	 eax, ebx
  00046	5b		 pop	 ebx

; 605  : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$L103443:

; 599  : 		else if (_Grow(_Num))

  0004a	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  0004d	76 07		 jbe	 SHORT $L107938
  0004f	8b cb		 mov	 ecx, ebx
  00051	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L107938:
  00056	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00059	3b c5		 cmp	 eax, ebp
  0005b	73 21		 jae	 SHORT $L107940
  0005d	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00060	50		 push	 eax
  00061	55		 push	 ebp
  00062	8b cb		 mov	 ecx, ebx
  00064	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00069	85 ed		 test	 ebp, ebp
$L108011:
  0006b	76 6d		 jbe	 SHORT $L108010

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  0006d	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00070	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00075	3b c8		 cmp	 ecx, eax
  00077	72 2f		 jb	 SHORT $L107976
  00079	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0007c	eb 2d		 jmp	 SHORT $L107977

; 599  : 		else if (_Grow(_Num))

$L107940:
  0007e	85 ed		 test	 ebp, ebp
  00080	75 e9		 jne	 SHORT $L108011
  00082	83 f8 10	 cmp	 eax, 16			; 00000010H
  00085	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00088	72 0f		 jb	 SHORT $L107967
  0008a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	c6 00 00	 mov	 BYTE PTR [eax], 0
  00092	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00093	8b c3		 mov	 eax, ebx
  00095	5b		 pop	 ebx

; 605  : 		}

  00096	c2 0c 00	 ret	 12			; 0000000cH

; 599  : 		else if (_Grow(_Num))

$L107967:
  00099	5f		 pop	 edi
  0009a	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  0009d	5e		 pop	 esi
  0009e	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a1	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000a2	8b c3		 mov	 eax, ebx
  000a4	5b		 pop	 ebx

; 605  : 		}

  000a5	c2 0c 00	 ret	 12			; 0000000cH

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

$L107976:
  000a8	8d 57 04	 lea	 edx, DWORD PTR [edi+4]
$L107977:
  000ab	39 43 18	 cmp	 DWORD PTR [ebx+24], eax
  000ae	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000b1	72 04		 jb	 SHORT $L107983
  000b3	8b 38		 mov	 edi, DWORD PTR [eax]
  000b5	eb 02		 jmp	 SHORT $L107984
$L107983:
  000b7	8b f8		 mov	 edi, eax
$L107984:
  000b9	03 f2		 add	 esi, edx
  000bb	8b cd		 mov	 ecx, ebp
  000bd	8b d1		 mov	 edx, ecx
  000bf	c1 e9 02	 shr	 ecx, 2
  000c2	f3 a5		 rep movsd
  000c4	8b ca		 mov	 ecx, edx
  000c6	83 e1 03	 and	 ecx, 3
  000c9	f3 a4		 rep movsb

; 602  : 			_Eos(_Num);

  000cb	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000cf	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000d2	72 02		 jb	 SHORT $L108007
  000d4	8b 00		 mov	 eax, DWORD PTR [eax]
$L108007:
  000d6	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L108010:
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000dd	8b c3		 mov	 eax, ebx
  000df	5b		 pop	 ebx

; 605  : 		}

  000e0	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Num$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 608  : 		{	// assign [_Ptr, _Ptr + _Num)

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 609  : 		if (_Inside(_Ptr))

  00003	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  00006	83 fa 10	 cmp	 edx, 16			; 00000010H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	72 05		 jb	 SHORT $L108037
  0000d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00010	eb 03		 jmp	 SHORT $L108038
$L108037:
  00012	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$L108038:
  00015	8b 74 24 10	 mov	 esi, DWORD PTR __Ptr$[esp+8]
  00019	3b f0		 cmp	 esi, eax
  0001b	72 34		 jb	 SHORT $L103771
  0001d	83 fa 10	 cmp	 edx, 16			; 00000010H
  00020	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00023	72 04		 jb	 SHORT $L108041
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	eb 02		 jmp	 SHORT $L108042
$L108041:
  00029	8b c8		 mov	 ecx, eax
$L108042:
  0002b	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  0002e	03 f9		 add	 edi, ecx
  00030	3b fe		 cmp	 edi, esi
  00032	76 1d		 jbe	 SHORT $L103771

; 610  : 			return (assign(*this, _Ptr - _Myptr(), _Num));	// substring

  00034	83 fa 10	 cmp	 edx, 16			; 00000010H
  00037	72 02		 jb	 SHORT $L108050
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$L108050:
  0003b	8b 4c 24 14	 mov	 ecx, DWORD PTR __Num$[esp+8]
  0003f	51		 push	 ecx
  00040	2b f0		 sub	 esi, eax
  00042	56		 push	 esi
  00043	53		 push	 ebx
  00044	8b cb		 mov	 ecx, ebx
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx

; 618  : 		}

  0004e	c2 08 00	 ret	 8
$L103771:
  00051	55		 push	 ebp

; 611  : 
; 612  : 		if (_Grow(_Num))

  00052	8b 6c 24 18	 mov	 ebp, DWORD PTR __Num$[esp+12]
  00056	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  00059	76 07		 jbe	 SHORT $L108148
  0005b	8b cb		 mov	 ecx, ebx
  0005d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L108148:
  00062	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00065	3b c5		 cmp	 eax, ebp
  00067	73 1b		 jae	 SHORT $L108149
  00069	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  0006c	52		 push	 edx
  0006d	55		 push	 ebp
  0006e	8b cb		 mov	 ecx, ebx
  00070	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00075	85 ed		 test	 ebp, ebp
$L108229:
  00077	76 68		 jbe	 SHORT $L108226

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

  00079	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0007d	72 2f		 jb	 SHORT $L108201
  0007f	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00082	eb 2d		 jmp	 SHORT $L108202

; 611  : 
; 612  : 		if (_Grow(_Num))

$L108149:
  00084	85 ed		 test	 ebp, ebp
  00086	75 ef		 jne	 SHORT $L108229
  00088	83 f8 10	 cmp	 eax, 16			; 00000010H
  0008b	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  0008e	72 0f		 jb	 SHORT $L108192
  00090	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00093	5d		 pop	 ebp
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0
  00098	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  00099	8b c3		 mov	 eax, ebx
  0009b	5b		 pop	 ebx

; 618  : 		}

  0009c	c2 08 00	 ret	 8

; 611  : 
; 612  : 		if (_Grow(_Num))

$L108192:
  0009f	5d		 pop	 ebp
  000a0	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000a3	5f		 pop	 edi
  000a4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a7	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000a8	8b c3		 mov	 eax, ebx
  000aa	5b		 pop	 ebx

; 618  : 		}

  000ab	c2 08 00	 ret	 8

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

$L108201:
  000ae	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
$L108202:
  000b1	8b cd		 mov	 ecx, ebp
  000b3	8b c1		 mov	 eax, ecx
  000b5	c1 e9 02	 shr	 ecx, 2
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb

; 615  : 			_Eos(_Num);

  000c1	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000c5	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000c8	72 10		 jb	 SHORT $L108224
  000ca	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000cd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  000d1	5d		 pop	 ebp
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000d4	8b c3		 mov	 eax, ebx
  000d6	5b		 pop	 ebx

; 618  : 		}

  000d7	c2 08 00	 ret	 8

; 615  : 			_Eos(_Num);

$L108224:
  000da	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000dd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L108226:
  000e1	5d		 pop	 ebp
  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000e4	8b c3		 mov	 eax, ebx
  000e6	5b		 pop	 ebx

; 618  : 		}

  000e7	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?find@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::find
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?find@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
_TEXT	SEGMENT
$T108236 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Keyval$ = 12						; size = 4
?find@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::find, COMDAT
; _this$ = ecx

; 787  : 		{	// find an element in mutable sequence that matches _Keyval

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 788  : 		iterator _Where = lower_bound(_Keyval);

  00003	8b 7c 24 14	 mov	 edi, DWORD PTR __Keyval$[esp+8]
  00007	57		 push	 edi
  00008	8b f1		 mov	 esi, ecx
  0000a	e8 00 00 00 00	 call	 ?_Lbound@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@ABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Lbound

; 789  : 		return (_Where == end() || this->comp(_Keyval, _Key(_Where._Mynode()))
; 790  : 			? end() : _Where);

  0000f	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  00012	89 44 24 14	 mov	 DWORD PTR __Where$[esp+8], eax
  00016	74 25		 je	 SHORT $L108235
  00018	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0001b	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0001d	50		 push	 eax
  0001e	51		 push	 ecx
  0001f	e8 00 00 00 00	 call	 __mbscmp
  00024	83 c4 08	 add	 esp, 8
  00027	85 c0		 test	 eax, eax
  00029	7c 12		 jl	 SHORT $L108235
  0002b	8d 44 24 14	 lea	 eax, DWORD PTR __Where$[esp+8]
  0002f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00031	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  00035	5f		 pop	 edi
  00036	89 08		 mov	 DWORD PTR [eax], ecx
  00038	5e		 pop	 esi

; 791  : 		}

  00039	59		 pop	 ecx
  0003a	c2 08 00	 ret	 8
$L108235:

; 789  : 		return (_Where == end() || this->comp(_Keyval, _Key(_Where._Mynode()))
; 790  : 			? end() : _Where);

  0003d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00040	89 44 24 08	 mov	 DWORD PTR $T108236[esp+12], eax
  00044	8d 44 24 08	 lea	 eax, DWORD PTR $T108236[esp+12]
  00048	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004a	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  0004e	5f		 pop	 edi
  0004f	89 08		 mov	 DWORD PTR [eax], ecx
  00051	5e		 pop	 esi

; 791  : 		}

  00052	59		 pop	 ecx
  00053	c2 08 00	 ret	 8
?find@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@ABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::find
_TEXT	ENDS
PUBLIC	??0?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@1@ABV?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >
; Function compile flags: /Ogty
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@1@ABV?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@1@ABV?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >, COMDAT
; _this$ = ecx

; 361  : 		{	// construct empty tree

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 362  : 		_Init();

  00003	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Buynode
  00008	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000b	c6 40 15 01	 mov	 BYTE PTR [eax+21], 1
  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00012	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00015	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00018	89 00		 mov	 DWORD PTR [eax], eax
  0001a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001d	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00020	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 363  : 		}

  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	c2 08 00	 ret	 8
??0?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@ABU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@1@ABV?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEXXZ ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Tidy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?_Tidy@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEXXZ PROC NEAR ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Tidy, COMDAT
; _this$ = ecx

; 791  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 792  : 		if (_Myfirst != 0)

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L108469

; 793  : 			{	// something to free, destroy and deallocate it
; 794  : 			_Destroy(_Myfirst, _Mylast);
; 795  : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L108469:

; 796  : 			}
; 797  : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 798  : 		}

  00029	c3		 ret	 0
?_Tidy@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEXXZ ENDP ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEPAUtagTCHATLOG@@PAU3@IABU3@@Z ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Ufill
; Function compile flags: /Ogty
;	COMDAT ?_Ufill@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEPAUtagTCHATLOG@@PAU3@IABU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Cat$108486 = 16					; size = 1
__Val$ = 16						; size = 4
?_Ufill@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEPAUtagTCHATLOG@@PAU3@IABU3@@Z PROC NEAR ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Ufill, COMDAT
; _this$ = ecx

; 878  : 		_Uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __Cat$108486[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR __Count$[esp]
  00009	57		 push	 edi
  0000a	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  0000e	50		 push	 eax
  0000f	51		 push	 ecx
  00010	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Val$[esp+12]
  00014	51		 push	 ecx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUtagTCHATLOG@@IU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAXPAUtagTCHATLOG@@IABU1@AAV?$allocator@UtagTCHATLOG@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<tagTCHATLOG *,unsigned int,tagTCHATLOG,std::allocator<tagTCHATLOG> >
  0001c	83 c4 14	 add	 esp, 20			; 00000014H

; 879  : 		return (_Ptr + _Count);

  0001f	8d 04 f7	 lea	 eax, DWORD PTR [edi+esi*8]
  00022	5f		 pop	 edi
  00023	5e		 pop	 esi

; 880  : 		}

  00024	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEPAUtagTCHATLOG@@PAU3@IABU3@@Z ENDP ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Ufill
_TEXT	ENDS
PUBLIC	??0_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@D@Z ; std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node::_Node
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@D@Z
_TEXT	SEGMENT
__Larg$ = 8						; size = 4
__Parg$ = 12						; size = 4
__Rarg$ = 16						; size = 4
__Val$ = 20						; size = 4
__Carg$ = 24						; size = 1
??0_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@D@Z PROC NEAR ; std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node::_Node, COMDAT
; _this$ = ecx

; 40   : 			{	// construct a node with value

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Larg$[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __Rarg$[esp-4]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Parg$[esp]
  0000f	57		 push	 edi
  00010	8b 7c 24 18	 mov	 edi, DWORD PTR __Val$[esp+4]
  00014	89 06		 mov	 DWORD PTR [esi], eax
  00016	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00019	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0001c	8b 07		 mov	 eax, DWORD PTR [edi]
  0001e	83 e8 10	 sub	 eax, 16			; 00000010H
  00021	50		 push	 eax
  00022	e8 00 00 00 00	 call	 ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData
  00027	8a 4c 24 20	 mov	 cl, BYTE PTR __Carg$[esp+8]
  0002b	83 c0 10	 add	 eax, 16			; 00000010H
  0002e	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00031	8a 47 04	 mov	 al, BYTE PTR [edi+4]
  00034	83 c4 04	 add	 esp, 4
  00037	88 46 10	 mov	 BYTE PTR [esi+16], al
  0003a	5f		 pop	 edi
  0003b	88 4e 14	 mov	 BYTE PTR [esi+20], cl
  0003e	c6 46 15 00	 mov	 BYTE PTR [esi+21], 0

; 41   : 			}

  00042	8b c6		 mov	 eax, esi
  00044	5e		 pop	 esi
  00045	c2 14 00	 ret	 20			; 00000014H
??0_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@D@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node::_Node
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@0@@Z ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@0@@Z PROC NEAR ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	e9 00 00 00 00	 jmp	 ??1_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@XZ
??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@0@@Z ENDP ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node>
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 323  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 324  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 325  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 326  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 621  : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 622  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$L108625:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $L108625
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 623  : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?CheckProtected@CTPlayer@@QAEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@Z ; CTPlayer::CheckProtected
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\trelaysvr\tplayer.cpp
;	COMDAT ?CheckProtected@CTPlayer@@QAEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@Z
_TEXT	SEGMENT
__Where$108796 = -4					; size = 4
$T108753 = 8						; size = 4
_strTarget$ = 8						; size = 4
_bOption$ = 12						; size = 1
?CheckProtected@CTPlayer@@QAEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@Z PROC NEAR ; CTPlayer::CheckProtected, COMDAT
; _this$ = ecx

; 63   : {

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	56		 push	 esi
  00003	57		 push	 edi
  00004	8b f9		 mov	 edi, ecx

; 64   : 	MAPTSTRBYTE::iterator it = m_mapTPROTECTED.find(strTarget);

  00006	8d 44 24 14	 lea	 eax, DWORD PTR _strTarget$[esp+12]
  0000a	8d b7 38 01 01
	00		 lea	 esi, DWORD PTR [edi+65848]
  00010	50		 push	 eax
  00011	8b ce		 mov	 ecx, esi
  00013	e8 00 00 00 00	 call	 ?_Lbound@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@ABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Lbound
  00018	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  0001b	8b 5c 24 14	 mov	 ebx, DWORD PTR _strTarget$[esp+12]
  0001f	89 44 24 0c	 mov	 DWORD PTR __Where$108796[esp+16], eax
  00023	74 17		 je	 SHORT $L108752
  00025	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00028	50		 push	 eax
  00029	53		 push	 ebx
  0002a	e8 00 00 00 00	 call	 __mbscmp
  0002f	83 c4 08	 add	 esp, 8
  00032	85 c0		 test	 eax, eax
  00034	7c 06		 jl	 SHORT $L108752
  00036	8d 44 24 0c	 lea	 eax, DWORD PTR __Where$108796[esp+16]
  0003a	eb 0b		 jmp	 SHORT $L108754
$L108752:
  0003c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0003f	89 4c 24 14	 mov	 DWORD PTR $T108753[esp+12], ecx
  00043	8d 44 24 14	 lea	 eax, DWORD PTR $T108753[esp+12]
$L108754:
  00047	8b 00		 mov	 eax, DWORD PTR [eax]

; 65   : 	if(it!=m_mapTPROTECTED.end() &&
; 66   : 		((*it).second & bOption))

  00049	3b 87 3c 01 01
	00		 cmp	 eax, DWORD PTR [edi+65852]
  0004f	74 2e		 je	 SHORT $L104134
  00051	8a 54 24 18	 mov	 dl, BYTE PTR _bOption$[esp+12]
  00055	84 50 10	 test	 BYTE PTR [eax+16], dl
  00058	74 25		 je	 SHORT $L104134

; 67   : 		return FALSE;

  0005a	8d 43 f0	 lea	 eax, DWORD PTR [ebx-16]
  0005d	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00060	ba ff ff ff ff	 mov	 edx, -1
  00065	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00069	4a		 dec	 edx
  0006a	85 d2		 test	 edx, edx
  0006c	7f 08		 jg	 SHORT $L108862
  0006e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00070	8b 11		 mov	 edx, DWORD PTR [ecx]
  00072	50		 push	 eax
  00073	ff 52 04	 call	 DWORD PTR [edx+4]
$L108862:
  00076	5f		 pop	 edi
  00077	5e		 pop	 esi
  00078	32 c0		 xor	 al, al
  0007a	5b		 pop	 ebx

; 70   : }

  0007b	59		 pop	 ecx
  0007c	c2 08 00	 ret	 8
$L104134:

; 68   : 
; 69   : 	return TRUE;

  0007f	8d 43 f0	 lea	 eax, DWORD PTR [ebx-16]
  00082	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00085	83 ca ff	 or	 edx, -1
  00088	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0008c	4a		 dec	 edx
  0008d	85 d2		 test	 edx, edx
  0008f	7f 08		 jg	 SHORT $L108889
  00091	8b 08		 mov	 ecx, DWORD PTR [eax]
  00093	8b 11		 mov	 edx, DWORD PTR [ecx]
  00095	50		 push	 eax
  00096	ff 52 04	 call	 DWORD PTR [edx+4]
$L108889:
  00099	5f		 pop	 edi
  0009a	5e		 pop	 esi
  0009b	b0 01		 mov	 al, 1
  0009d	5b		 pop	 ebx

; 70   : }

  0009e	59		 pop	 ecx
  0009f	c2 08 00	 ret	 8
?CheckProtected@CTPlayer@@QAEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@Z ENDP ; CTPlayer::CheckProtected
_TEXT	ENDS
PUBLIC	??1?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE@XZ ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::~vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??1?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE@XZ PROC NEAR ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::~vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >, COMDAT
; _this$ = ecx

; 387  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 388  : 		_Tidy();

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L108904
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L108904:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 389  : 		}

  00029	c3		 ret	 0
??1?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE@XZ ENDP ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::~vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAEXXZ ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::clear
; Function compile flags: /Ogty
;	COMDAT ?clear@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAEXXZ PROC NEAR ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::clear, COMDAT
; _this$ = ecx

; 743  : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 744  : 		_Tidy();

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L108918
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L108918:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 745  : 		}

  00029	c3		 ret	 0
?clear@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAEXXZ ENDP ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::clear
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 361  : 		_Tidy();
; 362  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$L108993:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $L108993
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 363  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node>::destroy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00004	e8 00 00 00 00	 call	 ??1_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@XZ

; 153  : 		}

  00009	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@D@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Buynode
;	COMDAT xdata$x
xdata$x	SEGMENT
$T109106 DD	0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:$L109016
	DD	0ffffffffH
	DD	00H
$T109108 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L109015
$T109107 DD	00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:$T109108
$T109103 DD	019930520H
	DD	03H
	DD	FLAT:$T109106
	DD	01H
	DD	FLAT:$T109107
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
xdata$x	ENDS
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@D@Z
_TEXT	SEGMENT
$T109011 = -24						; size = 4
__Wherenode$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Larg$ = 8						; size = 4
__Parg$ = 12						; size = 4
__Rarg$ = 16						; size = 4
__Val$ = 20						; size = 4
__Carg$ = 24						; size = 1
?_Buynode@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@D@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 1130 : 		{	// allocate a node with pointers, value, and color

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Buynode@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@D@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0001b	53		 push	 ebx
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 1131 : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

  00021	6a 18		 push	 24			; 00000018H
  00023	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00028	8b f0		 mov	 esi, eax
  0002a	83 c4 04	 add	 esp, 4
  0002d	89 75 ec	 mov	 DWORD PTR __Wherenode$[ebp], esi

; 1132 : 		_TRY_BEGIN

  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 1133 : 		new (_Wherenode) _Node(_Larg, _Parg, _Rarg, _Val, _Carg);

  00037	89 75 e8	 mov	 DWORD PTR $T109011[ebp], esi
  0003a	85 f6		 test	 esi, esi
  0003c	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00040	74 38		 je	 SHORT $L109012
  00042	8b 45 08	 mov	 eax, DWORD PTR __Larg$[ebp]
  00045	8b 4d 0c	 mov	 ecx, DWORD PTR __Parg$[ebp]
  00048	8b 55 10	 mov	 edx, DWORD PTR __Rarg$[ebp]
  0004b	8b 7d 14	 mov	 edi, DWORD PTR __Val$[ebp]
  0004e	89 06		 mov	 DWORD PTR [esi], eax
  00050	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  00053	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00056	8b 07		 mov	 eax, DWORD PTR [edi]
  00058	83 e8 10	 sub	 eax, 16			; 00000010H
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData
  00061	8a 4d 18	 mov	 cl, BYTE PTR __Carg$[ebp]
  00064	83 c4 04	 add	 esp, 4
  00067	83 c0 10	 add	 eax, 16			; 00000010H
  0006a	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  0006d	8a 47 04	 mov	 al, BYTE PTR [edi+4]
  00070	88 46 10	 mov	 BYTE PTR [esi+16], al
  00073	88 4e 14	 mov	 BYTE PTR [esi+20], cl
  00076	c6 46 15 00	 mov	 BYTE PTR [esi+21], 0
$L109012:

; 1137 : 		_CATCH_END
; 1138 : 		return (_Wherenode);
; 1139 : 		}

  0007a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0007d	5f		 pop	 edi
  0007e	8b c6		 mov	 eax, esi
  00080	5e		 pop	 esi
  00081	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00088	5b		 pop	 ebx
  00089	8b e5		 mov	 esp, ebp
  0008b	5d		 pop	 ebp
  0008c	c2 14 00	 ret	 20			; 00000014H
$L109015:

; 1134 : 		_CATCH_ALL
; 1135 : 		this->_Alnod.deallocate(_Wherenode, 1);

  0008f	8b 55 ec	 mov	 edx, DWORD PTR __Wherenode$[ebp]
  00092	52		 push	 edx
  00093	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00098	83 c4 04	 add	 esp, 4

; 1136 : 		_RERAISE;

  0009b	6a 00		 push	 0
  0009d	6a 00		 push	 0
  0009f	e8 00 00 00 00	 call	 __CxxThrowException@8
$L109109:
$L109105:
  000a4	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L109016:
  00000	8b 45 ec	 mov	 eax, DWORD PTR __Wherenode$[ebp]
  00003	50		 push	 eax
  00004	8b 4d e8	 mov	 ecx, DWORD PTR $T109011[ebp]
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 ??3@YAXPAX0@Z		; operator delete
  0000d	83 c4 08	 add	 esp, 8
  00010	c3		 ret	 0
__ehhandler$?_Buynode@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@D@Z:
  00011	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T109103
  00016	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Buynode@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@D@Z ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Buynode
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Erase
; Function compile flags: /Ogty
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 890  : 		{	// free entire subtree, recursively

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 891  : 		for (_Nodeptr _Pnode = _Rootnode; !_Isnil(_Pnode); _Rootnode = _Pnode)

  00003	8b 7c 24 10	 mov	 edi, DWORD PTR __Rootnode$[esp+8]
  00007	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  0000a	84 c0		 test	 al, al
  0000c	8b d9		 mov	 ebx, ecx
  0000e	8b f7		 mov	 esi, edi
  00010	75 26		 jne	 SHORT $L104938
$L104936:

; 892  : 			{	// free subtrees, then node
; 893  : 			_Erase(_Right(_Pnode));

  00012	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00015	50		 push	 eax
  00016	8b cb		 mov	 ecx, ebx
  00018	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Erase

; 894  : 			_Pnode = _Left(_Pnode);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]

; 895  : 			this->_Alnod.destroy(_Rootnode);	// destroy, free erased node

  0001f	8b cf		 mov	 ecx, edi
  00021	e8 00 00 00 00	 call	 ??1_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@XZ

; 896  : 			this->_Alnod.deallocate(_Rootnode, 1);

  00026	57		 push	 edi
  00027	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002c	8a 46 15	 mov	 al, BYTE PTR [esi+21]
  0002f	83 c4 04	 add	 esp, 4
  00032	84 c0		 test	 al, al
  00034	8b fe		 mov	 edi, esi
  00036	74 da		 je	 SHORT $L104936
$L104938:
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx

; 897  : 			}
; 898  : 		}

  0003b	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Erase
_TEXT	ENDS
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
EXTRN	??0exception@@QAE@XZ:NEAR			; exception::exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T109248 DD	0ffffffffH
	DD	FLAT:$L109149
$T109246 DD	019930520H
	DD	01H
	DD	FLAT:$T109248
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 19   : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	89 74 24 04	 mov	 DWORD PTR _this$[esp+20], esi
  0001d	e8 00 00 00 00	 call	 ??0exception@@QAE@XZ	; exception::exception
  00022	33 c0		 xor	 eax, eax
  00024	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  0002d	6a ff		 push	 -1
  0002f	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00032	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00039	50		 push	 eax
  0003a	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  0003e	88 41 04	 mov	 BYTE PTR [ecx+4], al
  00041	8b 44 24 20	 mov	 eax, DWORD PTR __Message$[esp+24]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 20   : 		}

  0004b	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  0004f	8b c6		 mov	 eax, esi
  00051	5e		 pop	 esi
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L109149:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T109246
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_Glength_error@std@@UAEPAXI@Z			; std::length_error::`scalar deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:NEAR		; std::length_error::`vector deleting destructor'
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 95   : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@

; 96   : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
; Function compile flags: /Ogty
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC NEAR		; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1length_error@std@@UAE@XZ ; std::length_error::~length_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L109258
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L109258:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC NEAR			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 99   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L109353
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L109353:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
_TEXT	ENDS
PUBLIC	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
PUBLIC	??_7out_of_range@std@@6B@			; std::out_of_range::`vftable'
PUBLIC	??_Gout_of_range@std@@UAEPAXI@Z			; std::out_of_range::`scalar deleting destructor'
EXTRN	??_Eout_of_range@std@@UAEPAXI@Z:NEAR		; std::out_of_range::`vector deleting destructor'
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT
??_7out_of_range@std@@6B@ DD FLAT:??_Eout_of_range@std@@UAEPAXI@Z ; std::out_of_range::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx

; 118  : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7out_of_range@std@@6B@

; 119  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::out_of_range::out_of_range
_TEXT	ENDS
PUBLIC	??1out_of_range@std@@UAE@XZ			; std::out_of_range::~out_of_range
; Function compile flags: /Ogty
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gout_of_range@std@@UAEPAXI@Z PROC NEAR		; std::out_of_range::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1out_of_range@std@@UAE@XZ ; std::out_of_range::~out_of_range
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L109372
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L109372:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Gout_of_range@std@@UAEPAXI@Z ENDP			; std::out_of_range::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT
??1out_of_range@std@@UAE@XZ PROC NEAR			; std::out_of_range::~out_of_range, COMDAT
; _this$ = ecx

; 122  : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L109467
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L109467:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1out_of_range@std@@UAE@XZ ENDP			; std::out_of_range::~out_of_range
_TEXT	ENDS
PUBLIC	??_R0?AVexception@@@8				; exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??0out_of_range@std@@QAE@ABV01@@Z		; std::out_of_range::out_of_range
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::erase
PUBLIC	__TI3?AVout_of_range@std@@
PUBLIC	__CTA3?AVout_of_range@std@@
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ ; `string'
EXTRN	??0exception@@QAE@ABV0@@Z:NEAR			; exception::exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
xdata$x	SEGMENT
$T110088 DD	0ffffffffH
	DD	FLAT:$L109488
$T110080 DD	019930520H
	DD	01H
	DD	FLAT:$T110088
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
CONST	SEGMENT
??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ DB 'invalid '
	DB	'map/set<T> iterator', 00H			; `string'
CONST	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT
__TI3?AVout_of_range@std@@ DD 00H
	DD	FLAT:??1out_of_range@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVout_of_range@std@@
xdata$x	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT
__CTA3?AVout_of_range@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT
??_R0?AVexception@@@8 DD FLAT:??_7type_info@@6B@	; exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@@', 00H
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
_DATA	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT
__Erasednode$ = -84					; size = 4
$T109483 = -80						; size = 28
$T109482 = -52						; size = 40
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::erase, COMDAT
; _this$ = ecx

; 590  : 		{	// erase element at _Where

  00000	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00006	6a ff		 push	 -1
  00008	68 00 00 00 00	 push	 __ehhandler$?erase@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z
  0000d	50		 push	 eax

; 591  : 		if (_Isnil(_Where._Mynode()))

  0000e	8b 44 24 14	 mov	 eax, DWORD PTR __Where$[esp+8]
  00012	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00019	83 ec 48	 sub	 esp, 72			; 00000048H
  0001c	55		 push	 ebp
  0001d	8b e9		 mov	 ebp, ecx
  0001f	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  00022	84 c9		 test	 cl, cl
  00024	56		 push	 esi
  00025	74 4c		 je	 SHORT $L104281

; 592  : 			_THROW(out_of_range, "invalid map/set<T> iterator");

  00027	6a 1b		 push	 27			; 0000001bH
  00029	33 f6		 xor	 esi, esi
  0002b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
  00030	8d 4c 24 14	 lea	 ecx, DWORD PTR $T109483[esp+100]
  00034	c7 44 24 2c 0f
	00 00 00	 mov	 DWORD PTR $T109483[esp+124], 15 ; 0000000fH
  0003c	89 74 24 28	 mov	 DWORD PTR $T109483[esp+120], esi
  00040	c6 44 24 18 00	 mov	 BYTE PTR $T109483[esp+104], 0
  00045	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004a	8d 44 24 0c	 lea	 eax, DWORD PTR $T109483[esp+92]
  0004e	50		 push	 eax
  0004f	8d 4c 24 2c	 lea	 ecx, DWORD PTR $T109482[esp+96]
  00053	89 74 24 5c	 mov	 DWORD PTR __$EHRec$[esp+104], esi
  00057	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0005c	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVout_of_range@std@@
  00061	8d 4c 24 2c	 lea	 ecx, DWORD PTR $T109482[esp+96]
  00065	51		 push	 ecx
  00066	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR $T109482[esp+100], OFFSET FLAT:??_7out_of_range@std@@6B@
  0006e	e8 00 00 00 00	 call	 __CxxThrowException@8
$L110089:
$L104281:
  00073	53		 push	 ebx

; 593  : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase

  00074	8b d8		 mov	 ebx, eax
  00076	57		 push	 edi

; 594  : 		++_Where;	// save successor iterator for return

  00077	8d 4c 24 6c	 lea	 ecx, DWORD PTR __Where$[esp+96]
  0007b	89 5c 24 10	 mov	 DWORD PTR __Erasednode$[esp+100], ebx
  0007f	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::_Inc

; 595  : 
; 596  : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 597  : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 598  : 		_Nodeptr _Pnode = _Erasednode;
; 599  : 
; 600  : 		if (_Isnil(_Left(_Pnode)))

  00084	8b 03		 mov	 eax, DWORD PTR [ebx]
  00086	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  00089	84 c9		 test	 cl, cl
  0008b	74 05		 je	 SHORT $L104296

; 601  : 			_Fixnode = _Right(_Pnode);	// must stitch up right subtree

  0008d	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]

; 602  : 		else if (_Isnil(_Right(_Pnode)))

  00090	eb 19		 jmp	 SHORT $L110083
$L104296:
  00092	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00095	8a 4a 15	 mov	 cl, BYTE PTR [edx+21]
  00098	84 c9		 test	 cl, cl
  0009a	74 04		 je	 SHORT $L104298

; 603  : 			_Fixnode = _Left(_Pnode);	// must stitch up left subtree

  0009c	8b f8		 mov	 edi, eax

; 604  : 		else

  0009e	eb 0b		 jmp	 SHORT $L110083
$L104298:

; 605  : 			{	// two subtrees, must lift successor node to replace erased
; 606  : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 607  : 			_Fixnode = _Right(_Pnode);	// _Fixnode is its only subtree

  000a0	8b 4c 24 6c	 mov	 ecx, DWORD PTR __Where$[esp+96]

; 608  : 			}
; 609  : 
; 610  : 		if (_Pnode == _Erasednode)

  000a4	3b cb		 cmp	 ecx, ebx
  000a6	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  000a9	75 6e		 jne	 SHORT $L104300
$L110083:

; 611  : 			{	// at most one subtree, relink it
; 612  : 			_Fixnodeparent = _Parent(_Erasednode);
; 613  : 			if (!_Isnil(_Fixnode))

  000ab	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  000ae	84 c0		 test	 al, al
  000b0	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  000b3	75 03		 jne	 SHORT $L104301

; 614  : 				_Parent(_Fixnode) = _Fixnodeparent;	// link up

  000b5	89 77 04	 mov	 DWORD PTR [edi+4], esi
$L104301:

; 615  : 
; 616  : 			if (_Root() == _Erasednode)

  000b8	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  000bb	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  000be	75 05		 jne	 SHORT $L104302

; 617  : 				_Root() = _Fixnode;	// link down from root

  000c0	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 618  : 			else if (_Left(_Fixnodeparent) == _Erasednode)

  000c3	eb 0b		 jmp	 SHORT $L104305
$L104302:
  000c5	39 1e		 cmp	 DWORD PTR [esi], ebx
  000c7	75 04		 jne	 SHORT $L104304

; 619  : 				_Left(_Fixnodeparent) = _Fixnode;	// link down to left

  000c9	89 3e		 mov	 DWORD PTR [esi], edi

; 620  : 			else

  000cb	eb 03		 jmp	 SHORT $L104305
$L104304:

; 621  : 				_Right(_Fixnodeparent) = _Fixnode;	// link down to right

  000cd	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$L104305:

; 622  : 
; 623  : 			if (_Lmost() == _Erasednode)

  000d0	8b 5d 04	 mov	 ebx, DWORD PTR [ebp+4]
  000d3	8b 03		 mov	 eax, DWORD PTR [ebx]
  000d5	3b 44 24 10	 cmp	 eax, DWORD PTR __Erasednode$[esp+100]
  000d9	75 16		 jne	 SHORT $L104306

; 624  : 				_Lmost() = _Isnil(_Fixnode)
; 625  : 					? _Fixnodeparent	// smallest is parent of erased node
; 626  : 					: _Min(_Fixnode);	// smallest in relinked subtree

  000db	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  000de	84 c0		 test	 al, al
  000e0	74 04		 je	 SHORT $L109484
  000e2	8b c6		 mov	 eax, esi
  000e4	eb 09		 jmp	 SHORT $L109485
$L109484:
  000e6	57		 push	 edi
  000e7	e8 00 00 00 00	 call	 ?_Min@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Min
  000ec	83 c4 04	 add	 esp, 4
$L109485:
  000ef	89 03		 mov	 DWORD PTR [ebx], eax
$L104306:

; 627  : 
; 628  : 			if (_Rmost() == _Erasednode)

  000f1	8b 5d 04	 mov	 ebx, DWORD PTR [ebp+4]
  000f4	8b 4c 24 10	 mov	 ecx, DWORD PTR __Erasednode$[esp+100]
  000f8	39 4b 08	 cmp	 DWORD PTR [ebx+8], ecx
  000fb	75 74		 jne	 SHORT $L109802

; 629  : 				_Rmost() = _Isnil(_Fixnode)
; 630  : 					? _Fixnodeparent	// largest is parent of erased node
; 631  : 					: _Max(_Fixnode);	// largest in relinked subtree

  000fd	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  00100	84 c0		 test	 al, al
  00102	74 07		 je	 SHORT $L109486
  00104	8b c6		 mov	 eax, esi
  00106	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 632  : 			}
; 633  : 		else

  00109	eb 66		 jmp	 SHORT $L109802
$L109486:

; 629  : 				_Rmost() = _Isnil(_Fixnode)
; 630  : 					? _Fixnodeparent	// largest is parent of erased node
; 631  : 					: _Max(_Fixnode);	// largest in relinked subtree

  0010b	57		 push	 edi
  0010c	e8 00 00 00 00	 call	 ?_Max@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Max
  00111	83 c4 04	 add	 esp, 4
  00114	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 632  : 			}
; 633  : 		else

  00117	eb 58		 jmp	 SHORT $L109802
$L104300:

; 634  : 			{	// erased has two subtrees, _Pnode is successor to erased
; 635  : 			_Parent(_Left(_Erasednode)) = _Pnode;	// link left up

  00119	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 636  : 			_Left(_Pnode) = _Left(_Erasednode);	// link successor down

  0011c	8b 13		 mov	 edx, DWORD PTR [ebx]
  0011e	89 11		 mov	 DWORD PTR [ecx], edx

; 637  : 
; 638  : 			if (_Pnode == _Right(_Erasednode))

  00120	3b 4b 08	 cmp	 ecx, DWORD PTR [ebx+8]
  00123	75 04		 jne	 SHORT $L104309

; 639  : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  00125	8b f1		 mov	 esi, ecx

; 640  : 			else

  00127	eb 1b		 jmp	 SHORT $L104310
$L104309:

; 641  : 				{	// successor further down, link in place of erased
; 642  : 				_Fixnodeparent = _Parent(_Pnode);	// parent is successor's
; 643  : 				if (!_Isnil(_Fixnode))

  00129	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  0012c	84 c0		 test	 al, al
  0012e	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00131	75 03		 jne	 SHORT $L104311

; 644  : 					_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

  00133	89 77 04	 mov	 DWORD PTR [edi+4], esi
$L104311:

; 645  : 				_Left(_Fixnodeparent) = _Fixnode;	// link fix down

  00136	89 3e		 mov	 DWORD PTR [esi], edi

; 646  : 				_Right(_Pnode) = _Right(_Erasednode);	// link successor down

  00138	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0013b	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 647  : 				_Parent(_Right(_Erasednode)) = _Pnode;	// link right up

  0013e	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00141	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$L104310:

; 648  : 				}
; 649  : 
; 650  : 			if (_Root() == _Erasednode)

  00144	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00147	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  0014a	75 05		 jne	 SHORT $L104312

; 651  : 				_Root() = _Pnode;	// link down from root

  0014c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 652  : 			else if (_Left(_Parent(_Erasednode)) == _Erasednode)

  0014f	eb 0e		 jmp	 SHORT $L104315
$L104312:
  00151	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00154	39 18		 cmp	 DWORD PTR [eax], ebx
  00156	75 04		 jne	 SHORT $L104314

; 653  : 				_Left(_Parent(_Erasednode)) = _Pnode;	// link down to left

  00158	89 08		 mov	 DWORD PTR [eax], ecx

; 654  : 			else

  0015a	eb 03		 jmp	 SHORT $L104315
$L104314:

; 655  : 				_Right(_Parent(_Erasednode)) = _Pnode;	// link down to right

  0015c	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$L104315:

; 656  : 
; 657  : 			_Parent(_Pnode) = _Parent(_Erasednode);	// link successor up

  0015f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00162	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 658  : 			std::swap(_Color(_Pnode), _Color(_Erasednode));	// recolor it

  00165	8a 53 14	 mov	 dl, BYTE PTR [ebx+20]
  00168	8a 41 14	 mov	 al, BYTE PTR [ecx+20]
  0016b	88 51 14	 mov	 BYTE PTR [ecx+20], dl
  0016e	88 43 14	 mov	 BYTE PTR [ebx+20], al
$L109802:

; 659  : 			}
; 660  : 
; 661  : 		if (_Color(_Erasednode) == _Black)

  00171	8b 44 24 10	 mov	 eax, DWORD PTR __Erasednode$[esp+100]
  00175	8a 48 14	 mov	 cl, BYTE PTR [eax+20]
  00178	b3 01		 mov	 bl, 1
  0017a	3a cb		 cmp	 cl, bl
  0017c	0f 85 ff 00 00
	00		 jne	 $L104321

; 662  : 			{	// erasing black link, must recolor/rebalance tree
; 663  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 664  : 				_Fixnodeparent = _Parent(_Fixnode))

  00182	8b 4d 04	 mov	 ecx, DWORD PTR [ebp+4]
  00185	3b 79 04	 cmp	 edi, DWORD PTR [ecx+4]
  00188	0f 84 f0 00 00
	00		 je	 $L104324
  0018e	8b ff		 npad	 2
$L104322:
  00190	38 5f 14	 cmp	 BYTE PTR [edi+20], bl
  00193	0f 85 e5 00 00
	00		 jne	 $L104324

; 665  : 				if (_Fixnode == _Left(_Fixnodeparent))

  00199	8b 06		 mov	 eax, DWORD PTR [esi]
  0019b	3b f8		 cmp	 edi, eax
  0019d	75 67		 jne	 SHORT $L104325

; 666  : 					{	// fixup left subtree
; 667  : 					_Pnode = _Right(_Fixnodeparent);

  0019f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 668  : 					if (_Color(_Pnode) == _Red)

  001a2	8a 48 14	 mov	 cl, BYTE PTR [eax+20]
  001a5	84 c9		 test	 cl, cl
  001a7	75 12		 jne	 SHORT $L104326

; 669  : 						{	// rotate red up from right subtree
; 670  : 						_Color(_Pnode) = _Black;

  001a9	88 58 14	 mov	 BYTE PTR [eax+20], bl

; 671  : 						_Color(_Fixnodeparent) = _Red;
; 672  : 						_Lrotate(_Fixnodeparent);

  001ac	56		 push	 esi
  001ad	8b cd		 mov	 ecx, ebp
  001af	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0
  001b3	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Lrotate

; 673  : 						_Pnode = _Right(_Fixnodeparent);

  001b8	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
$L104326:

; 674  : 						}
; 675  : 
; 676  : 					if (_Isnil(_Pnode))

  001bb	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  001be	84 c9		 test	 cl, cl

; 677  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 678  : 					else if (_Color(_Left(_Pnode)) == _Black

  001c0	75 76		 jne	 SHORT $L110086

; 679  : 						&& _Color(_Right(_Pnode)) == _Black)

  001c2	8b 10		 mov	 edx, DWORD PTR [eax]
  001c4	38 5a 14	 cmp	 BYTE PTR [edx+20], bl
  001c7	75 08		 jne	 SHORT $L104329
  001c9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001cc	38 59 14	 cmp	 BYTE PTR [ecx+20], bl
  001cf	74 63		 je	 SHORT $L110087
$L104329:

; 680  : 						{	// redden right subtree with black children
; 681  : 						_Color(_Pnode) = _Red;
; 682  : 						_Fixnode = _Fixnodeparent;
; 683  : 						}
; 684  : 					else
; 685  : 						{	// must rearrange right subtree
; 686  : 						if (_Color(_Right(_Pnode)) == _Black)

  001d1	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001d4	38 59 14	 cmp	 BYTE PTR [ecx+20], bl
  001d7	75 14		 jne	 SHORT $L104331

; 687  : 							{	// rotate red up from left sub-subtree
; 688  : 							_Color(_Left(_Pnode)) = _Black;

  001d9	8b 10		 mov	 edx, DWORD PTR [eax]
  001db	88 5a 14	 mov	 BYTE PTR [edx+20], bl

; 689  : 							_Color(_Pnode) = _Red;
; 690  : 							_Rrotate(_Pnode);

  001de	50		 push	 eax
  001df	8b cd		 mov	 ecx, ebp
  001e1	c6 40 14 00	 mov	 BYTE PTR [eax+20], 0
  001e5	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Rrotate

; 691  : 							_Pnode = _Right(_Fixnodeparent);

  001ea	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
$L104331:

; 692  : 							}
; 693  : 
; 694  : 						_Color(_Pnode) = _Color(_Fixnodeparent);

  001ed	8a 4e 14	 mov	 cl, BYTE PTR [esi+20]
  001f0	88 48 14	 mov	 BYTE PTR [eax+20], cl

; 695  : 						_Color(_Fixnodeparent) = _Black;

  001f3	88 5e 14	 mov	 BYTE PTR [esi+20], bl

; 696  : 						_Color(_Right(_Pnode)) = _Black;

  001f6	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 697  : 						_Lrotate(_Fixnodeparent);

  001f9	56		 push	 esi
  001fa	8b cd		 mov	 ecx, ebp
  001fc	88 5a 14	 mov	 BYTE PTR [edx+20], bl
  001ff	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Lrotate

; 698  : 						break;	// tree now recolored/rebalanced

  00204	eb 78		 jmp	 SHORT $L104324
$L104325:

; 699  : 						}
; 700  : 					}
; 701  : 				else
; 702  : 					{	// fixup right subtree
; 703  : 					_Pnode = _Left(_Fixnodeparent);
; 704  : 					if (_Color(_Pnode) == _Red)

  00206	8a 48 14	 mov	 cl, BYTE PTR [eax+20]
  00209	84 c9		 test	 cl, cl
  0020b	75 11		 jne	 SHORT $L104333

; 705  : 						{	// rotate red up from left subtree
; 706  : 						_Color(_Pnode) = _Black;

  0020d	88 58 14	 mov	 BYTE PTR [eax+20], bl

; 707  : 						_Color(_Fixnodeparent) = _Red;
; 708  : 						_Rrotate(_Fixnodeparent);

  00210	56		 push	 esi
  00211	8b cd		 mov	 ecx, ebp
  00213	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0
  00217	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Rrotate

; 709  : 						_Pnode = _Left(_Fixnodeparent);

  0021c	8b 06		 mov	 eax, DWORD PTR [esi]
$L104333:

; 710  : 						}
; 711  : 					if (_Isnil(_Pnode))

  0021e	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  00221	84 c9		 test	 cl, cl

; 712  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 713  : 					else if (_Color(_Right(_Pnode)) == _Black

  00223	75 13		 jne	 SHORT $L110086

; 714  : 						&& _Color(_Left(_Pnode)) == _Black)

  00225	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00228	38 5a 14	 cmp	 BYTE PTR [edx+20], bl
  0022b	75 20		 jne	 SHORT $L104336
  0022d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0022f	38 59 14	 cmp	 BYTE PTR [ecx+20], bl
  00232	75 19		 jne	 SHORT $L104336
$L110087:

; 715  : 						{	// redden left subtree with black children
; 716  : 						_Color(_Pnode) = _Red;

  00234	c6 40 14 00	 mov	 BYTE PTR [eax+20], 0
$L110086:

; 662  : 			{	// erasing black link, must recolor/rebalance tree
; 663  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 664  : 				_Fixnodeparent = _Parent(_Fixnode))

  00238	8b 55 04	 mov	 edx, DWORD PTR [ebp+4]
  0023b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 717  : 						_Fixnode = _Fixnodeparent;

  0023e	8b fe		 mov	 edi, esi
  00240	3b f8		 cmp	 edi, eax
  00242	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00245	0f 85 45 ff ff
	ff		 jne	 $L104322

; 662  : 			{	// erasing black link, must recolor/rebalance tree
; 663  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 664  : 				_Fixnodeparent = _Parent(_Fixnode))

  0024b	eb 31		 jmp	 SHORT $L104324
$L104336:

; 718  : 						}
; 719  : 					else
; 720  : 						{	// must rearrange left subtree
; 721  : 						if (_Color(_Left(_Pnode)) == _Black)

  0024d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0024f	38 59 14	 cmp	 BYTE PTR [ecx+20], bl
  00252	75 14		 jne	 SHORT $L104338

; 722  : 							{	// rotate red up from right sub-subtree
; 723  : 							_Color(_Right(_Pnode)) = _Black;

  00254	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00257	88 5a 14	 mov	 BYTE PTR [edx+20], bl

; 724  : 							_Color(_Pnode) = _Red;
; 725  : 							_Lrotate(_Pnode);

  0025a	50		 push	 eax
  0025b	8b cd		 mov	 ecx, ebp
  0025d	c6 40 14 00	 mov	 BYTE PTR [eax+20], 0
  00261	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Lrotate

; 726  : 							_Pnode = _Left(_Fixnodeparent);

  00266	8b 06		 mov	 eax, DWORD PTR [esi]
$L104338:

; 727  : 							}
; 728  : 
; 729  : 						_Color(_Pnode) = _Color(_Fixnodeparent);

  00268	8a 4e 14	 mov	 cl, BYTE PTR [esi+20]
  0026b	88 48 14	 mov	 BYTE PTR [eax+20], cl

; 730  : 						_Color(_Fixnodeparent) = _Black;

  0026e	88 5e 14	 mov	 BYTE PTR [esi+20], bl

; 731  : 						_Color(_Left(_Pnode)) = _Black;

  00271	8b 10		 mov	 edx, DWORD PTR [eax]

; 732  : 						_Rrotate(_Fixnodeparent);

  00273	56		 push	 esi
  00274	8b cd		 mov	 ecx, ebp
  00276	88 5a 14	 mov	 BYTE PTR [edx+20], bl
  00279	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Rrotate
$L104324:

; 733  : 						break;	// tree now recolored/rebalanced
; 734  : 						}
; 735  : 					}
; 736  : 
; 737  : 			_Color(_Fixnode) = _Black;	// ensure stopping node is black

  0027e	88 5f 14	 mov	 BYTE PTR [edi+20], bl
$L104321:

; 738  : 			}
; 739  : 
; 740  : 		this->_Alnod.destroy(_Erasednode);	// destroy, free erased node

  00281	8b 44 24 10	 mov	 eax, DWORD PTR __Erasednode$[esp+100]
  00285	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00288	83 e8 10	 sub	 eax, 16			; 00000010H
  0028b	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  0028e	83 ca ff	 or	 edx, -1
  00291	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00295	4a		 dec	 edx
  00296	85 d2		 test	 edx, edx
  00298	5f		 pop	 edi
  00299	5b		 pop	 ebx
  0029a	7f 08		 jg	 SHORT $L110069
  0029c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0029e	8b 11		 mov	 edx, DWORD PTR [ecx]
  002a0	50		 push	 eax
  002a1	ff 52 04	 call	 DWORD PTR [edx+4]
$L110069:

; 741  : 		this->_Alnod.deallocate(_Erasednode, 1);

  002a4	8b 44 24 08	 mov	 eax, DWORD PTR __Erasednode$[esp+92]
  002a8	50		 push	 eax
  002a9	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 742  : 
; 743  : 		if (0 < _Mysize)

  002ae	8b 45 08	 mov	 eax, DWORD PTR [ebp+8]
  002b1	83 c4 04	 add	 esp, 4
  002b4	85 c0		 test	 eax, eax
  002b6	76 04		 jbe	 SHORT $L104339

; 744  : 			--_Mysize;

  002b8	48		 dec	 eax
  002b9	89 45 08	 mov	 DWORD PTR [ebp+8], eax
$L104339:

; 745  : 
; 746  : 		return (_Where);	// return successor iterator

  002bc	8b 4c 24 64	 mov	 ecx, DWORD PTR __Where$[esp+88]
  002c0	8b 44 24 60	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+88]
  002c4	89 08		 mov	 DWORD PTR [eax], ecx

; 747  : 		}

  002c6	8b 4c 24 50	 mov	 ecx, DWORD PTR __$EHRec$[esp+92]
  002ca	5e		 pop	 esi
  002cb	5d		 pop	 ebp
  002cc	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  002d3	83 c4 54	 add	 esp, 84			; 00000054H
  002d6	c2 08 00	 ret	 8
$L110085:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L109488:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T109483[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?erase@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T110080
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?erase@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::erase
;	COMDAT xdata$x
xdata$x	SEGMENT
$T110194 DD	0ffffffffH
	DD	FLAT:$L110095
$T110192 DD	019930520H
	DD	01H
	DD	FLAT:$T110194
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC NEAR		; std::logic_error::logic_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 1c	 mov	 edi, DWORD PTR ___that$[esp+20]
  0001c	8b f1		 mov	 esi, ecx
  0001e	57		 push	 edi
  0001f	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00023	e8 00 00 00 00	 call	 ??0exception@@QAE@ABV0@@Z ; exception::exception
  00028	33 c0		 xor	 eax, eax
  0002a	6a ff		 push	 -1
  0002c	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00035	50		 push	 eax
  00036	83 c7 0c	 add	 edi, 12			; 0000000cH
  00039	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00040	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00043	57		 push	 edi
  00044	89 44 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], eax
  00048	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00050	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00054	5f		 pop	 edi
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L110095:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T110192
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Ogty
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV01@@Z PROC NEAR		; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7out_of_range@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0out_of_range@std@@QAE@ABV01@@Z ENDP			; std::out_of_range::out_of_range
_TEXT	ENDS
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	?_Insert@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Insert
;	COMDAT xdata$x
xdata$x	SEGMENT
$T110575 DD	0ffffffffH
	DD	FLAT:$L110206
$T110570 DD	019930520H
	DD	01H
	DD	FLAT:$T110575
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
CONST	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?_Insert@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@@Z
_TEXT	SEGMENT
$T110205 = -80						; size = 28
$T110204 = -52						; size = 40
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Newnode$ = 20						; size = 4
__Val$ = 20						; size = 4
?_Insert@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Insert, COMDAT
; _this$ = ecx

; 911  : 		{	// add node with value next to _Wherenode, to left if _Addnode

  00000	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00006	6a ff		 push	 -1
  00008	68 00 00 00 00	 push	 __ehhandler$?_Insert@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@@Z
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 44	 sub	 esp, 68			; 00000044H
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8b f9		 mov	 edi, ecx

; 912  : 		if (max_size() - 1 <= _Mysize)

  0001c	81 7f 08 fe ff
	ff 1f		 cmp	 DWORD PTR [edi+8], 536870910 ; 1ffffffeH
  00023	72 4c		 jb	 SHORT $L104558

; 913  : 			_THROW(length_error, "map/set<T> too long");

  00025	6a 13		 push	 19			; 00000013H
  00027	33 f6		 xor	 esi, esi
  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
  0002e	8d 4c 24 10	 lea	 ecx, DWORD PTR $T110205[esp+96]
  00032	c7 44 24 28 0f
	00 00 00	 mov	 DWORD PTR $T110205[esp+120], 15 ; 0000000fH
  0003a	89 74 24 24	 mov	 DWORD PTR $T110205[esp+116], esi
  0003e	c6 44 24 14 00	 mov	 BYTE PTR $T110205[esp+100], 0
  00043	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00048	8d 44 24 08	 lea	 eax, DWORD PTR $T110205[esp+88]
  0004c	50		 push	 eax
  0004d	8d 4c 24 28	 lea	 ecx, DWORD PTR $T110204[esp+92]
  00051	89 74 24 58	 mov	 DWORD PTR __$EHRec$[esp+100], esi
  00055	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0005a	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVlength_error@std@@
  0005f	8d 4c 24 28	 lea	 ecx, DWORD PTR $T110204[esp+92]
  00063	51		 push	 ecx
  00064	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR $T110204[esp+96], OFFSET FLAT:??_7length_error@std@@6B@
  0006c	e8 00 00 00 00	 call	 __CxxThrowException@8
$L110576:
$L104558:

; 914  : 		_Nodeptr _Newnode = _Buynode(_Myhead, _Wherenode, _Myhead,
; 915  : 			_Val, _Red);

  00071	8b 54 24 68	 mov	 edx, DWORD PTR __Val$[esp+84]
  00075	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00078	8b 74 24 64	 mov	 esi, DWORD PTR __Wherenode$[esp+84]
  0007c	53		 push	 ebx
  0007d	6a 00		 push	 0
  0007f	52		 push	 edx
  00080	50		 push	 eax
  00081	56		 push	 esi
  00082	50		 push	 eax
  00083	8b cf		 mov	 ecx, edi
  00085	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@D@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Buynode

; 916  : 
; 917  : 		++_Mysize;

  0008a	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0008d	8b c8		 mov	 ecx, eax

; 918  : 		if (_Wherenode == _Myhead)

  0008f	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00092	43		 inc	 ebx
  00093	3b f0		 cmp	 esi, eax
  00095	89 4c 24 6c	 mov	 DWORD PTR __Newnode$[esp+88], ecx
  00099	89 5f 08	 mov	 DWORD PTR [edi+8], ebx
  0009c	75 10		 jne	 SHORT $L104568

; 919  : 			{	// first node in tree, just set head values
; 920  : 			_Root() = _Newnode;

  0009e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 921  : 			_Lmost() = _Newnode, _Rmost() = _Newnode;

  000a1	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a4	89 08		 mov	 DWORD PTR [eax], ecx
  000a6	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  000a9	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 922  : 			}
; 923  : 		else if (_Addleft)

  000ac	eb 23		 jmp	 SHORT $L104573
$L104568:
  000ae	8a 44 24 64	 mov	 al, BYTE PTR __Addleft$[esp+88]
  000b2	84 c0		 test	 al, al
  000b4	74 0d		 je	 SHORT $L104570

; 924  : 			{	// add to left of _Wherenode
; 925  : 			_Left(_Wherenode) = _Newnode;

  000b6	89 0e		 mov	 DWORD PTR [esi], ecx

; 926  : 			if (_Wherenode == _Lmost())

  000b8	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000bb	3b 30		 cmp	 esi, DWORD PTR [eax]
  000bd	75 12		 jne	 SHORT $L104573

; 927  : 				_Lmost() = _Newnode;

  000bf	89 08		 mov	 DWORD PTR [eax], ecx

; 928  : 			}
; 929  : 		else

  000c1	eb 0e		 jmp	 SHORT $L104573
$L104570:

; 930  : 			{	// add to right of _Wherenode
; 931  : 			_Right(_Wherenode) = _Newnode;

  000c3	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 932  : 			if (_Wherenode == _Rmost())

  000c6	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000c9	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  000cc	75 03		 jne	 SHORT $L104573

; 933  : 				_Rmost() = _Newnode;

  000ce	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$L104573:

; 934  : 			}
; 935  : 
; 936  : 		for (_Nodeptr _Pnode = _Newnode; _Color(_Parent(_Pnode)) == _Red; )

  000d1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d4	80 7a 14 00	 cmp	 BYTE PTR [edx+20], 0
  000d8	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  000db	8b f1		 mov	 esi, ecx
  000dd	b3 01		 mov	 bl, 1
  000df	0f 85 a5 00 00
	00		 jne	 $L104577
  000e5	55		 push	 ebp
$L104576:

; 937  : 			if (_Parent(_Pnode) == _Left(_Parent(_Parent(_Pnode))))

  000e6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e8	8b 69 04	 mov	 ebp, DWORD PTR [ecx+4]
  000eb	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  000ee	3b ca		 cmp	 ecx, edx
  000f0	75 50		 jne	 SHORT $L104578

; 938  : 				{	// fixup red-red in left subtree
; 939  : 				_Wherenode = _Right(_Parent(_Parent(_Pnode)));

  000f2	8b 55 08	 mov	 edx, DWORD PTR [ebp+8]

; 940  : 				if (_Color(_Wherenode) == _Red)

  000f5	80 7a 14 00	 cmp	 BYTE PTR [edx+20], 0
  000f9	75 18		 jne	 SHORT $L104579
$L110574:

; 941  : 					{	// parent has two red children, blacken both
; 942  : 					_Color(_Parent(_Pnode)) = _Black;

  000fb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fd	88 59 14	 mov	 BYTE PTR [ecx+20], bl

; 943  : 					_Color(_Wherenode) = _Black;

  00100	88 5a 14	 mov	 BYTE PTR [edx+20], bl

; 944  : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

  00103	8b 10		 mov	 edx, DWORD PTR [eax]
  00105	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00108	c6 41 14 00	 mov	 BYTE PTR [ecx+20], 0

; 945  : 					_Pnode = _Parent(_Parent(_Pnode));

  0010c	8b 10		 mov	 edx, DWORD PTR [eax]
  0010e	8b 72 04	 mov	 esi, DWORD PTR [edx+4]

; 946  : 					}
; 947  : 				else

  00111	eb 61		 jmp	 SHORT $L104584
$L104579:

; 948  : 					{	// parent has red and black children
; 949  : 					if (_Pnode == _Right(_Parent(_Pnode)))

  00113	3b 71 08	 cmp	 esi, DWORD PTR [ecx+8]
  00116	75 0a		 jne	 SHORT $L104581

; 950  : 						{	// rotate right child to left
; 951  : 						_Pnode = _Parent(_Pnode);

  00118	8b f1		 mov	 esi, ecx

; 952  : 						_Lrotate(_Pnode);

  0011a	56		 push	 esi
  0011b	8b cf		 mov	 ecx, edi
  0011d	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Lrotate
$L104581:

; 953  : 						}
; 954  : 					_Color(_Parent(_Pnode)) = _Black;	// propagate red up

  00122	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00125	88 58 14	 mov	 BYTE PTR [eax+20], bl

; 955  : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

  00128	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0012b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0012e	c6 42 14 00	 mov	 BYTE PTR [edx+20], 0

; 956  : 					_Rrotate(_Parent(_Parent(_Pnode)));

  00132	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00135	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00138	51		 push	 ecx
  00139	8b cf		 mov	 ecx, edi
  0013b	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Rrotate

; 957  : 					}
; 958  : 				}
; 959  : 			else

  00140	eb 32		 jmp	 SHORT $L104584
$L104578:

; 960  : 				{	// fixup red-red in right subtree
; 961  : 				_Wherenode = _Left(_Parent(_Parent(_Pnode)));
; 962  : 				if (_Color(_Wherenode) == _Red)

  00142	80 7a 14 00	 cmp	 BYTE PTR [edx+20], 0

; 963  : 					{	// parent has two red children, blacken both
; 964  : 					_Color(_Parent(_Pnode)) = _Black;
; 965  : 					_Color(_Wherenode) = _Black;
; 966  : 					_Color(_Parent(_Parent(_Pnode))) = _Red;
; 967  : 					_Pnode = _Parent(_Parent(_Pnode));
; 968  : 					}
; 969  : 				else

  00146	74 b3		 je	 SHORT $L110574

; 970  : 					{	// parent has red and black children
; 971  : 					if (_Pnode == _Left(_Parent(_Pnode)))

  00148	3b 31		 cmp	 esi, DWORD PTR [ecx]
  0014a	75 0a		 jne	 SHORT $L104585

; 972  : 						{	// rotate left child to right
; 973  : 						_Pnode = _Parent(_Pnode);

  0014c	8b f1		 mov	 esi, ecx

; 974  : 						_Rrotate(_Pnode);

  0014e	56		 push	 esi
  0014f	8b cf		 mov	 ecx, edi
  00151	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Rrotate
$L104585:

; 975  : 						}
; 976  : 					_Color(_Parent(_Pnode)) = _Black;	// propagate red up

  00156	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00159	88 58 14	 mov	 BYTE PTR [eax+20], bl

; 977  : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

  0015c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0015f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00162	c6 42 14 00	 mov	 BYTE PTR [edx+20], 0

; 978  : 					_Lrotate(_Parent(_Parent(_Pnode)));

  00166	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00169	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0016c	51		 push	 ecx
  0016d	8b cf		 mov	 ecx, edi
  0016f	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Lrotate
$L104584:
  00174	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00177	8a 4a 14	 mov	 cl, BYTE PTR [edx+20]
  0017a	84 c9		 test	 cl, cl
  0017c	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0017f	0f 84 61 ff ff
	ff		 je	 $L104576
  00185	8b 4c 24 70	 mov	 ecx, DWORD PTR __Newnode$[esp+92]
  00189	5d		 pop	 ebp
$L104577:

; 979  : 					}
; 980  : 				}
; 981  : 
; 982  : 		_Color(_Root()) = _Black;	// root is always black

  0018a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0018d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 983  : 		return (_TREE_ITERATOR(_Newnode));

  00190	8b 44 24 60	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+88]
  00194	88 5a 14	 mov	 BYTE PTR [edx+20], bl
  00197	5b		 pop	 ebx
  00198	89 08		 mov	 DWORD PTR [eax], ecx

; 984  : 		}

  0019a	8b 4c 24 4c	 mov	 ecx, DWORD PTR __$EHRec$[esp+88]
  0019e	5f		 pop	 edi
  0019f	5e		 pop	 esi
  001a0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001a7	83 c4 50	 add	 esp, 80			; 00000050H
  001aa	c2 10 00	 ret	 16			; 00000010H
$L110573:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L110206:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T110205[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Insert@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T110570
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Insert@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Insert
; Function compile flags: /Ogty
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC NEAR		; std::length_error::length_error, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IBEXXZ ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Xlen
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	SEGMENT
$T110702 DD	0ffffffffH
	DD	FLAT:$L110588
$T110699 DD	019930520H
	DD	01H
	DD	FLAT:$T110702
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
$T110587 = -80						; size = 28
$T110586 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IBEXXZ PROC NEAR ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Xlen, COMDAT
; _this$ = ecx

; 883  : 		{	// report a length_error

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Xlen@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IBEXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 44	 sub	 esp, 68			; 00000044H

; 884  : 		_THROW(length_error, "vector<T> too long");

  00018	6a 12		 push	 18			; 00000012H
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001f	8d 4c 24 08	 lea	 ecx, DWORD PTR $T110587[esp+88]
  00023	c7 44 24 20 0f
	00 00 00	 mov	 DWORD PTR $T110587[esp+112], 15 ; 0000000fH
  0002b	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T110587[esp+108], 0
  00033	c6 44 24 0c 00	 mov	 BYTE PTR $T110587[esp+92], 0
  00038	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0003d	8d 04 24	 lea	 eax, DWORD PTR $T110587[esp+80]
  00040	50		 push	 eax
  00041	8d 4c 24 20	 lea	 ecx, DWORD PTR $T110586[esp+84]
  00045	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+92], 0
  0004d	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00052	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVlength_error@std@@
  00057	8d 4c 24 20	 lea	 ecx, DWORD PTR $T110586[esp+84]
  0005b	51		 push	 ecx
  0005c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T110586[esp+88], OFFSET FLAT:??_7length_error@std@@6B@
  00064	e8 00 00 00 00	 call	 __CxxThrowException@8
$L110703:
$L110701:
  00069	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L110588:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T110587[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xlen@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IBEXXZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T110699
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Xlen@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IBEXXZ ENDP ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Xlen
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::clear
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::clear, COMDAT
; _this$ = ecx

; 780  : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 781  : 		_Erase(_Root());

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00009	51		 push	 ecx
  0000a	8b ce		 mov	 ecx, esi
  0000c	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Erase

; 782  : 		_Root() = _Myhead, _Mysize = 0;

  00011	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00014	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 783  : 		_Lmost() = _Myhead, _Rmost() = _Myhead;

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	89 00		 mov	 DWORD PTR [eax], eax
  00023	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00026	89 76 08	 mov	 DWORD PTR [esi+8], esi
  00029	5e		 pop	 esi

; 784  : 		}

  0002a	c3		 ret	 0
?clear@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::clear
_TEXT	ENDS
PUBLIC	?DelProtected@CTPlayer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ; CTPlayer::DelProtected
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
xdata$x	SEGMENT
$T110967 DD	0ffffffffH
	DD	FLAT:$L110747
$T110965 DD	019930520H
	DD	01H
	DD	FLAT:$T110967
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\trelaysvr\tplayer.cpp
xdata$x	ENDS
;	COMDAT ?DelProtected@CTPlayer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
_TEXT	SEGMENT
__Where$110911 = -20					; size = 4
$T110868 = -16						; size = 4
$T110746 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_strName$ = 8						; size = 4
?DelProtected@CTPlayer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z PROC NEAR ; CTPlayer::DelProtected, COMDAT
; _this$ = ecx

; 82   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?DelProtected@CTPlayer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 08	 sub	 esp, 8
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8b f9		 mov	 edi, ecx

; 83   : 	MAPTSTRBYTE::iterator it = m_mapTPROTECTED.find(strName);

  0001d	8d 44 24 24	 lea	 eax, DWORD PTR _strName$[esp+28]
  00021	8d b7 38 01 01
	00		 lea	 esi, DWORD PTR [edi+65848]
  00027	50		 push	 eax
  00028	8b ce		 mov	 ecx, esi
  0002a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+44], 0
  00032	e8 00 00 00 00	 call	 ?_Lbound@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@ABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Lbound
  00037	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  0003a	8b 5c 24 24	 mov	 ebx, DWORD PTR _strName$[esp+28]
  0003e	89 44 24 0c	 mov	 DWORD PTR __Where$110911[esp+32], eax
  00042	74 17		 je	 SHORT $L110867
  00044	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00047	50		 push	 eax
  00048	53		 push	 ebx
  00049	e8 00 00 00 00	 call	 __mbscmp
  0004e	83 c4 08	 add	 esp, 8
  00051	85 c0		 test	 eax, eax
  00053	7c 06		 jl	 SHORT $L110867
  00055	8d 44 24 0c	 lea	 eax, DWORD PTR __Where$110911[esp+32]
  00059	eb 0b		 jmp	 SHORT $L110869
$L110867:
  0005b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0005e	89 4c 24 10	 mov	 DWORD PTR $T110868[esp+32], ecx
  00062	8d 44 24 10	 lea	 eax, DWORD PTR $T110868[esp+32]
$L110869:
  00066	8b 00		 mov	 eax, DWORD PTR [eax]

; 84   : 	if(it!=m_mapTPROTECTED.end())

  00068	3b 87 3c 01 01
	00		 cmp	 eax, DWORD PTR [edi+65852]
  0006e	74 0d		 je	 SHORT $L104177

; 85   : 		m_mapTPROTECTED.erase(it);

  00070	50		 push	 eax
  00071	8d 54 24 14	 lea	 edx, DWORD PTR $T110746[esp+36]
  00075	52		 push	 edx
  00076	8b ce		 mov	 ecx, esi
  00078	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::erase
$L104177:

; 86   : }

  0007d	8d 43 f0	 lea	 eax, DWORD PTR [ebx-16]
  00080	c7 44 24 1c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+40], -1
  00088	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  0008b	83 ca ff	 or	 edx, -1
  0008e	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00092	4a		 dec	 edx
  00093	85 d2		 test	 edx, edx
  00095	5f		 pop	 edi
  00096	5e		 pop	 esi
  00097	5b		 pop	 ebx
  00098	7f 08		 jg	 SHORT $L110962
  0009a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009e	50		 push	 eax
  0009f	ff 52 04	 call	 DWORD PTR [edx+4]
$L110962:
  000a2	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  000a6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000ad	83 c4 14	 add	 esp, 20			; 00000014H
  000b0	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L110747:
  00000	8d 4d 04	 lea	 ecx, DWORD PTR _strName$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
__ehhandler$?DelProtected@CTPlayer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T110965
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?DelProtected@CTPlayer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ENDP ; CTPlayer::DelProtected
PUBLIC	?insert@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::insert
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?insert@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@@Z
_TEXT	SEGMENT
__Addleft$ = -4						; size = 1
___$ReturnUdt$ = 8					; size = 4
$T110981 = 12						; size = 4
$T110979 = 12						; size = 4
__Where$104261 = 12					; size = 4
__Val$ = 12						; size = 4
?insert@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::insert, COMDAT
; _this$ = ecx

; 477  : 		{	// try to insert node with value _Val

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	55		 push	 ebp

; 478  : 		_Nodeptr _Trynode = _Root();
; 479  : 		_Nodeptr _Wherenode = _Myhead;
; 480  : 		bool _Addleft = true;	// add to left of head if tree empty
; 481  : 		while (!_Isnil(_Trynode))

  00003	8b 6c 24 14	 mov	 ebp, DWORD PTR __Val$[esp+8]
  00007	56		 push	 esi
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  0000e	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  00011	8a 4e 15	 mov	 cl, BYTE PTR [esi+21]
  00014	84 c9		 test	 cl, cl
  00016	b0 01		 mov	 al, 1
  00018	88 44 24 10	 mov	 BYTE PTR __Addleft$[esp+20], al
  0001c	75 2f		 jne	 SHORT $L104251
  0001e	8b ff		 npad	 2
$L104250:

; 482  : 			{	// look for leaf to insert before (_Addleft) or after
; 483  : 			_Wherenode = _Trynode;
; 484  : 			_Addleft = this->comp(this->_Kfn(_Val), _Key(_Trynode));

  00020	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00023	8b 4d 00	 mov	 ecx, DWORD PTR [ebp]
  00026	50		 push	 eax
  00027	51		 push	 ecx
  00028	8b fe		 mov	 edi, esi
  0002a	e8 00 00 00 00	 call	 __mbscmp
  0002f	83 c4 08	 add	 esp, 8
  00032	85 c0		 test	 eax, eax
  00034	0f 9c c0	 setl	 al

; 485  : 			_Trynode = _Addleft ? _Left(_Trynode) : _Right(_Trynode);

  00037	84 c0		 test	 al, al
  00039	88 44 24 10	 mov	 BYTE PTR __Addleft$[esp+20], al
  0003d	74 04		 je	 SHORT $L110973
  0003f	8b 36		 mov	 esi, DWORD PTR [esi]
  00041	eb 03		 jmp	 SHORT $L110974
$L110973:
  00043	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
$L110974:

; 478  : 		_Nodeptr _Trynode = _Root();
; 479  : 		_Nodeptr _Wherenode = _Myhead;
; 480  : 		bool _Addleft = true;	// add to left of head if tree empty
; 481  : 		while (!_Isnil(_Trynode))

  00046	8a 4e 15	 mov	 cl, BYTE PTR [esi+21]
  00049	84 c9		 test	 cl, cl
  0004b	74 d3		 je	 SHORT $L104250
$L104251:

; 486  : 			}
; 487  : 
; 488  : 		if (this->_Multi)
; 489  : 			return (_Pairib(_Insert(_Addleft, _Wherenode, _Val), true));
; 490  : 		else
; 491  : 			{	// insert only if unique
; 492  : 			iterator _Where = _TREE_ITERATOR(_Wherenode);
; 493  : 			if (!_Addleft)

  0004d	84 c0		 test	 al, al
  0004f	8b f7		 mov	 esi, edi
  00051	89 74 24 1c	 mov	 DWORD PTR __Where$104261[esp+16], esi
  00055	74 34		 je	 SHORT $L111112

; 494  : 				;	// need to test if insert after is okay
; 495  : 			else if (_Where == begin())

  00057	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0005a	3b 38		 cmp	 edi, DWORD PTR [eax]

; 496  : 				return (_Pairib(_Insert(true, _Wherenode, _Val), true));

  0005c	8d 4c 24 1c	 lea	 ecx, DWORD PTR $T110979[esp+16]
  00060	75 20		 jne	 SHORT $L104266
  00062	55		 push	 ebp
  00063	57		 push	 edi
  00064	6a 01		 push	 1
$L111185:
  00066	51		 push	 ecx
  00067	8b cb		 mov	 ecx, ebx
  00069	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Insert
  0006e	8b 10		 mov	 edx, DWORD PTR [eax]
  00070	8b 44 24 18	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+16]
  00074	5f		 pop	 edi
  00075	5e		 pop	 esi
  00076	5d		 pop	 ebp
  00077	89 10		 mov	 DWORD PTR [eax], edx
  00079	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  0007d	5b		 pop	 ebx

; 504  : 			}
; 505  : 		}

  0007e	59		 pop	 ecx
  0007f	c2 08 00	 ret	 8
$L104266:

; 497  : 			else
; 498  : 				--_Where;	// need to test if insert before is okay

  00082	e8 00 00 00 00	 call	 ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::const_iterator::_Dec
  00087	8b 74 24 1c	 mov	 esi, DWORD PTR __Where$104261[esp+16]
$L111112:

; 499  : 
; 500  : 			if (this->comp(_Key(_Where._Mynode()), this->_Kfn(_Val)))

  0008b	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  0008e	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00091	50		 push	 eax
  00092	51		 push	 ecx
  00093	e8 00 00 00 00	 call	 __mbscmp
  00098	83 c4 08	 add	 esp, 8
  0009b	85 c0		 test	 eax, eax
  0009d	7d 0d		 jge	 SHORT $L104271

; 501  : 				return (_Pairib(_Insert(_Addleft, _Wherenode, _Val), true));

  0009f	8b 44 24 10	 mov	 eax, DWORD PTR __Addleft$[esp+20]
  000a3	55		 push	 ebp
  000a4	57		 push	 edi
  000a5	50		 push	 eax
  000a6	8d 4c 24 28	 lea	 ecx, DWORD PTR $T110981[esp+28]
  000aa	eb ba		 jmp	 SHORT $L111185
$L104271:

; 502  : 			else
; 503  : 				return (_Pairib(_Where, false));

  000ac	8b 44 24 18	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+16]
  000b0	5f		 pop	 edi
  000b1	89 30		 mov	 DWORD PTR [eax], esi
  000b3	5e		 pop	 esi
  000b4	5d		 pop	 ebp
  000b5	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
  000b9	5b		 pop	 ebx

; 504  : 			}
; 505  : 		}

  000ba	59		 pop	 ecx
  000bb	c2 08 00	 ret	 8
?insert@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::insert
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAE_NI@Z ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Buy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?_Buy@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAE_NI@Z PROC NEAR ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Buy, COMDAT
; _this$ = ecx

; 771  : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;
; 772  : 		if (_Capacity == 0)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Capacity$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	33 c9		 xor	 ecx, ecx
  00009	3b c1		 cmp	 eax, ecx
  0000b	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0000e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00011	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00014	75 06		 jne	 SHORT $L104658

; 773  : 			return (false);

  00016	32 c0		 xor	 al, al
  00018	5e		 pop	 esi

; 783  : 		}

  00019	c2 04 00	 ret	 4
$L104658:

; 774  : 		else if (max_size() < _Capacity)

  0001c	3d ff ff ff 1f	 cmp	 eax, 536870911		; 1fffffffH
  00021	76 07		 jbe	 SHORT $L104660

; 775  : 			_Xlen();	// result too long

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IBEXXZ ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Xlen
$L111214:
$L104660:
  0002a	57		 push	 edi

; 776  : 		else
; 777  : 			{	// nonempty array, allocate storage
; 778  : 			_Myfirst = this->_Alval.allocate(_Capacity);

  0002b	8d 3c c5 00 00
	00 00		 lea	 edi, DWORD PTR [eax*8]
  00032	57		 push	 edi
  00033	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 779  : 			_Mylast = _Myfirst;
; 780  : 			_Myend = _Myfirst + _Capacity;

  00038	03 f8		 add	 edi, eax
  0003a	83 c4 04	 add	 esp, 4
  0003d	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  00040	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00043	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00046	5f		 pop	 edi

; 781  : 			}
; 782  : 		return (true);

  00047	b0 01		 mov	 al, 1
  00049	5e		 pop	 esi

; 783  : 		}

  0004a	c2 04 00	 ret	 4
$L111213:
?_Buy@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Buy
_TEXT	ENDS
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::erase
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
$T111221 = 12						; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::erase, COMDAT
; _this$ = ecx

; 750  : 		{	// erase [_First, _Last)

  00000	53		 push	 ebx

; 751  : 		if (_First == begin() && _Last == end())

  00001	8b 5c 24 10	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00010	3b 30		 cmp	 esi, DWORD PTR [eax]
  00012	75 38		 jne	 SHORT $L111553
  00014	3b d8		 cmp	 ebx, eax
  00016	75 34		 jne	 SHORT $L111553

; 752  : 			{	// erase all
; 753  : 			clear();

  00018	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001b	50		 push	 eax
  0001c	8b cf		 mov	 ecx, edi
  0001e	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Erase
  00023	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00029	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0002c	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00033	89 00		 mov	 DWORD PTR [eax], eax
  00035	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00038	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 754  : 			return (begin());

  0003b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	89 10		 mov	 DWORD PTR [eax], edx
  00048	5b		 pop	 ebx

; 761  : 			}
; 762  : 		}

  00049	c2 0c 00	 ret	 12			; 0000000cH
$L111553:

; 755  : 			}
; 756  : 		else
; 757  : 			{	// partial erase, one at a time
; 758  : 			while (_First != _Last)

  0004c	3b f3		 cmp	 esi, ebx
  0004e	74 5b		 je	 SHORT $L104733
$L104732:

; 759  : 				erase(_First++);

  00050	8a 46 15	 mov	 al, BYTE PTR [esi+21]
  00053	84 c0		 test	 al, al
  00055	8b ce		 mov	 ecx, esi
  00057	75 41		 jne	 SHORT $L111524
  00059	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0005c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0005f	84 d2		 test	 dl, dl
  00061	75 1a		 jne	 SHORT $L111555
  00063	8b f0		 mov	 esi, eax
  00065	8b 06		 mov	 eax, DWORD PTR [esi]
  00067	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0006a	84 d2		 test	 dl, dl
  0006c	75 2c		 jne	 SHORT $L111524
  0006e	8b ff		 npad	 2
$L111538:
  00070	8b f0		 mov	 esi, eax
  00072	8b 06		 mov	 eax, DWORD PTR [esi]
  00074	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00077	84 d2		 test	 dl, dl
  00079	74 f5		 je	 SHORT $L111538
  0007b	eb 1d		 jmp	 SHORT $L111524
$L111555:
  0007d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00080	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00083	84 d2		 test	 dl, dl
  00085	75 11		 jne	 SHORT $L111527
$L111526:
  00087	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0008a	75 0c		 jne	 SHORT $L111527
  0008c	8b f0		 mov	 esi, eax
  0008e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00091	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00094	84 d2		 test	 dl, dl
  00096	74 ef		 je	 SHORT $L111526
$L111527:
  00098	8b f0		 mov	 esi, eax
$L111524:
  0009a	51		 push	 ecx
  0009b	8d 44 24 18	 lea	 eax, DWORD PTR $T111221[esp+12]
  0009f	50		 push	 eax
  000a0	8b cf		 mov	 ecx, edi
  000a2	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::erase
  000a7	3b f3		 cmp	 esi, ebx
  000a9	75 a5		 jne	 SHORT $L104732
$L104733:

; 760  : 			return (_First);

  000ab	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  000af	5f		 pop	 edi
  000b0	89 30		 mov	 DWORD PTR [eax], esi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx

; 761  : 			}
; 762  : 		}

  000b4	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::erase
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEXViterator@12@IABUtagTCHATLOG@@@Z ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Insert_n
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
xdata$x	SEGMENT
$T111780 DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
$T111782 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L111565
$T111783 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L111567
$T111781 DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:$T111782
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T111783
$T111777 DD	019930520H
	DD	04H
	DD	FLAT:$T111780
	DD	02H
	DD	FLAT:$T111781
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEXViterator@12@IABUtagTCHATLOG@@@Z
_TEXT	SEGMENT
__Tmp$ = -28						; size = 8
__Newvec$104788 = -20					; size = 4
__$EHRec$ = -16						; size = 16
tv446 = 8						; size = 4
__Cat$111748 = 8					; size = 1
__Cat$111686 = 8					; size = 1
__Cat$111709 = 8					; size = 1
__Cat$111663 = 8					; size = 1
__Where$ = 8						; size = 4
tv445 = 12						; size = 4
__Count$ = 12						; size = 4
tv430 = 16						; size = 4
tv220 = 16						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEXViterator@12@IABUtagTCHATLOG@@@Z PROC NEAR ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Insert_n, COMDAT
; _this$ = ecx

; 809  : 		{	// insert _Count * _Val at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Insert_n@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEXViterator@12@IABUtagTCHATLOG@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 10	 sub	 esp, 16			; 00000010H

; 810  : 		_Ty _Tmp = _Val;	// in case _Val is in sequence

  0001b	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  0001e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00021	53		 push	 ebx
  00022	56		 push	 esi
  00023	8b f1		 mov	 esi, ecx
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	89 4d e4	 mov	 DWORD PTR __Tmp$[ebp], ecx

; 811  : 		size_type _Capacity = capacity();

  0002a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0002d	85 c9		 test	 ecx, ecx
  0002f	57		 push	 edi
  00030	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00033	89 55 e8	 mov	 DWORD PTR __Tmp$[ebp+4], edx
  00036	75 04		 jne	 SHORT $L111573
  00038	33 c0		 xor	 eax, eax
  0003a	eb 08		 jmp	 SHORT $L111574
$L111573:
  0003c	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0003f	2b c1		 sub	 eax, ecx
  00041	c1 f8 03	 sar	 eax, 3
$L111574:

; 812  : 
; 813  : 		if (_Count == 0)

  00044	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00047	85 db		 test	 ebx, ebx
  00049	0f 84 e1 01 00
	00		 je	 $L104808

; 814  : 			;
; 815  : 		else if (max_size() - size() < _Count)

  0004f	85 c9		 test	 ecx, ecx
  00051	75 04		 jne	 SHORT $L111596
  00053	33 d2		 xor	 edx, edx
  00055	eb 08		 jmp	 SHORT $L111597
$L111596:
  00057	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0005a	2b d1		 sub	 edx, ecx
  0005c	c1 fa 03	 sar	 edx, 3
$L111597:
  0005f	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00064	2b fa		 sub	 edi, edx
  00066	3b fb		 cmp	 edi, ebx
  00068	73 07		 jae	 SHORT $L104784

; 816  : 			_Xlen();	// result too long

  0006a	8b ce		 mov	 ecx, esi
  0006c	e8 00 00 00 00	 call	 ?_Xlen@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IBEXXZ ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Xlen
$L111784:
$L104784:

; 817  : 		else if (_Capacity < size() + _Count)

  00071	85 c9		 test	 ecx, ecx
  00073	75 04		 jne	 SHORT $L111603
  00075	33 d2		 xor	 edx, edx
  00077	eb 08		 jmp	 SHORT $L111604
$L111603:
  00079	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0007c	2b d1		 sub	 edx, ecx
  0007e	c1 fa 03	 sar	 edx, 3
$L111604:
  00081	03 d3		 add	 edx, ebx
  00083	3b c2		 cmp	 eax, edx
  00085	0f 83 f8 00 00
	00		 jae	 $L104786

; 818  : 			{	// not enough room, reallocate
; 819  : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 820  : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0008b	8b d0		 mov	 edx, eax
  0008d	d1 ea		 shr	 edx, 1
  0008f	bf ff ff ff 1f	 mov	 edi, 536870911		; 1fffffffH
  00094	2b fa		 sub	 edi, edx
  00096	3b f8		 cmp	 edi, eax
  00098	73 04		 jae	 SHORT $L111562
  0009a	33 c0		 xor	 eax, eax
  0009c	eb 02		 jmp	 SHORT $L111563
$L111562:
  0009e	03 c2		 add	 eax, edx
$L111563:

; 821  : 			if (_Capacity < size() + _Count)

  000a0	85 c9		 test	 ecx, ecx
  000a2	75 04		 jne	 SHORT $L111625
  000a4	33 d2		 xor	 edx, edx
  000a6	eb 08		 jmp	 SHORT $L111626
$L111625:
  000a8	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  000ab	2b d1		 sub	 edx, ecx
  000ad	c1 fa 03	 sar	 edx, 3
$L111626:
  000b0	03 d3		 add	 edx, ebx
  000b2	3b c2		 cmp	 eax, edx
  000b4	73 12		 jae	 SHORT $L104787

; 822  : 				_Capacity = size() + _Count;

  000b6	85 c9		 test	 ecx, ecx
  000b8	75 04		 jne	 SHORT $L111632
  000ba	33 c0		 xor	 eax, eax
  000bc	eb 08		 jmp	 SHORT $L111633
$L111632:
  000be	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000c1	2b c1		 sub	 eax, ecx
  000c3	c1 f8 03	 sar	 eax, 3
$L111633:
  000c6	03 c3		 add	 eax, ebx
$L104787:

; 823  : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

  000c8	c1 e0 03	 shl	 eax, 3
  000cb	50		 push	 eax
  000cc	89 45 0c	 mov	 DWORD PTR tv445[ebp], eax
  000cf	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 824  : 			pointer _Ptr = _Newvec;
; 825  : 
; 826  : 			_TRY_BEGIN
; 827  : 			_Ptr = _Ucopy(_Myfirst, _ITER_BASE(_Where),
; 828  : 				_Newvec);	// copy prefix

  000d4	8b 4d 08	 mov	 ecx, DWORD PTR __Cat$111663[ebp]
  000d7	8b 55 08	 mov	 edx, DWORD PTR __Where$[ebp]
  000da	51		 push	 ecx
  000db	8b f8		 mov	 edi, eax
  000dd	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000e0	56		 push	 esi
  000e1	57		 push	 edi
  000e2	52		 push	 edx
  000e3	50		 push	 eax
  000e4	89 7d ec	 mov	 DWORD PTR __Newvec$104788[ebp], edi
  000e7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000ee	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUtagTCHATLOG@@PAU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAPAUtagTCHATLOG@@PAU1@00AAV?$allocator@UtagTCHATLOG@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<tagTCHATLOG *,tagTCHATLOG *,std::allocator<tagTCHATLOG> >

; 829  : 			_Ptr = _Ufill(_Ptr, _Count, _Tmp);	// add new stuff

  000f3	8b 4d 08	 mov	 ecx, DWORD PTR __Cat$111686[ebp]
  000f6	83 c4 18	 add	 esp, 24			; 00000018H
  000f9	51		 push	 ecx
  000fa	56		 push	 esi
  000fb	8d 55 e4	 lea	 edx, DWORD PTR __Tmp$[ebp]
  000fe	52		 push	 edx
  000ff	53		 push	 ebx
  00100	50		 push	 eax
  00101	89 45 10	 mov	 DWORD PTR tv220[ebp], eax
  00104	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUtagTCHATLOG@@IU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAXPAUtagTCHATLOG@@IABU1@AAV?$allocator@UtagTCHATLOG@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<tagTCHATLOG *,unsigned int,tagTCHATLOG,std::allocator<tagTCHATLOG> >

; 830  : 			_Ucopy(_ITER_BASE(_Where), _Mylast, _Ptr);	// copy suffix

  00109	8b 55 08	 mov	 edx, DWORD PTR __Cat$111709[ebp]
  0010c	8b 45 10	 mov	 eax, DWORD PTR tv220[ebp]
  0010f	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00112	83 c4 14	 add	 esp, 20			; 00000014H
  00115	52		 push	 edx
  00116	8d 04 d8	 lea	 eax, DWORD PTR [eax+ebx*8]
  00119	56		 push	 esi
  0011a	50		 push	 eax
  0011b	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  0011e	51		 push	 ecx
  0011f	50		 push	 eax
  00120	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUtagTCHATLOG@@PAU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAPAUtagTCHATLOG@@PAU1@00AAV?$allocator@UtagTCHATLOG@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<tagTCHATLOG *,tagTCHATLOG *,std::allocator<tagTCHATLOG> >

; 835  : 			_CATCH_END
; 836  : 
; 837  : 			_Count += size();

  00125	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00128	83 c4 14	 add	 esp, 20			; 00000014H
  0012b	85 c9		 test	 ecx, ecx
  0012d	75 04		 jne	 SHORT $L111720
  0012f	33 c0		 xor	 eax, eax
  00131	eb 08		 jmp	 SHORT $L111721
$L111720:
  00133	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00136	2b c1		 sub	 eax, ecx
  00138	c1 f8 03	 sar	 eax, 3
$L111721:
  0013b	03 d8		 add	 ebx, eax

; 838  : 			if (_Myfirst != 0)

  0013d	85 c9		 test	 ecx, ecx
  0013f	74 09		 je	 SHORT $L111725

; 839  : 				{	// destroy and deallocate old array
; 840  : 				_Destroy(_Myfirst, _Mylast);
; 841  : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  00141	51		 push	 ecx
  00142	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00147	83 c4 04	 add	 esp, 4
$L111725:

; 842  : 				}
; 843  : 			_Myend = _Newvec + _Capacity;

  0014a	8b 4d 0c	 mov	 ecx, DWORD PTR tv445[ebp]
  0014d	03 cf		 add	 ecx, edi

; 844  : 			_Mylast = _Newvec + _Count;

  0014f	8d 14 df	 lea	 edx, DWORD PTR [edi+ebx*8]
  00152	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00155	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 845  : 			_Myfirst = _Newvec;

  00158	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 873  : 			}
; 874  : 		}

  0015b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0015e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00165	5f		 pop	 edi
  00166	5e		 pop	 esi
  00167	5b		 pop	 ebx
  00168	8b e5		 mov	 esp, ebp
  0016a	5d		 pop	 ebp
  0016b	c2 0c 00	 ret	 12			; 0000000cH
$L111565:

; 831  : 			_CATCH_ALL
; 832  : 			_Destroy(_Newvec, _Ptr);
; 833  : 			this->_Alval.deallocate(_Newvec, _Capacity);

  0016e	8b 45 ec	 mov	 eax, DWORD PTR __Newvec$104788[ebp]
  00171	50		 push	 eax
  00172	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00177	83 c4 04	 add	 esp, 4
$L111567:

; 834  : 			_RERAISE;

  0017a	6a 00		 push	 0
  0017c	6a 00		 push	 0
  0017e	e8 00 00 00 00	 call	 __CxxThrowException@8
$L111785:
$L104786:

; 846  : 			}
; 847  : 		else if ((size_type)(_Mylast - _ITER_BASE(_Where)) < _Count)

  00183	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00186	8b 7d 08	 mov	 edi, DWORD PTR __Where$[ebp]
  00189	8b c8		 mov	 ecx, eax
  0018b	2b cf		 sub	 ecx, edi
  0018d	c1 f9 03	 sar	 ecx, 3
  00190	3b cb		 cmp	 ecx, ebx

; 848  : 			{	// new stuff spills off end
; 849  : 			_Ucopy(_ITER_BASE(_Where), _Mylast,
; 850  : 				_ITER_BASE(_Where) + _Count);	// copy suffix

  00192	8d 0c dd 00 00
	00 00		 lea	 ecx, DWORD PTR [ebx*8]
  00199	89 4d 08	 mov	 DWORD PTR tv446[ebp], ecx
  0019c	8b 55 08	 mov	 edx, DWORD PTR __Cat$111748[ebp]
  0019f	52		 push	 edx
  001a0	89 45 10	 mov	 DWORD PTR tv430[ebp], eax
  001a3	56		 push	 esi
  001a4	73 5d		 jae	 SHORT $L104799
  001a6	03 cf		 add	 ecx, edi
  001a8	51		 push	 ecx
  001a9	50		 push	 eax
  001aa	57		 push	 edi
  001ab	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUtagTCHATLOG@@PAU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAPAUtagTCHATLOG@@PAU1@00AAV?$allocator@UtagTCHATLOG@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<tagTCHATLOG *,tagTCHATLOG *,std::allocator<tagTCHATLOG> >

; 851  : 
; 852  : 			_TRY_BEGIN
; 853  : 			_Ufill(_Mylast, _Count - (_Mylast - _ITER_BASE(_Where)),
; 854  : 				_Tmp);	// insert new stuff off end

  001b0	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001b3	8b d0		 mov	 edx, eax
  001b5	83 c4 14	 add	 esp, 20			; 00000014H
  001b8	2b d7		 sub	 edx, edi
  001ba	8d 4d e4	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  001bd	51		 push	 ecx
  001be	c1 fa 03	 sar	 edx, 3
  001c1	2b da		 sub	 ebx, edx
  001c3	53		 push	 ebx
  001c4	50		 push	 eax
  001c5	8b ce		 mov	 ecx, esi
  001c7	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  001ce	e8 00 00 00 00	 call	 ?_Ufill@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEPAUtagTCHATLOG@@PAU3@IABU3@@Z ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Ufill

; 855  : 			_CATCH_ALL
; 856  : 			_Destroy(_ITER_BASE(_Where) + _Count, _Mylast + _Count);
; 857  : 			_RERAISE;
; 858  : 			_CATCH_END
; 859  : 
; 860  : 			_Mylast += _Count;

  001d3	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  001d6	8b 45 08	 mov	 eax, DWORD PTR tv446[ebp]
  001d9	03 d8		 add	 ebx, eax
  001db	89 5e 08	 mov	 DWORD PTR [esi+8], ebx

; 861  : 			fill(_ITER_BASE(_Where), _Mylast - _Count,
; 862  : 				_Tmp);	// insert up to old end

  001de	8d 4d e4	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  001e1	8b f3		 mov	 esi, ebx
  001e3	51		 push	 ecx
  001e4	2b f0		 sub	 esi, eax
  001e6	56		 push	 esi
  001e7	57		 push	 edi
  001e8	e8 00 00 00 00	 call	 ??$fill@PAUtagTCHATLOG@@U1@@std@@YAXPAUtagTCHATLOG@@0ABU1@@Z ; std::fill<tagTCHATLOG *,tagTCHATLOG>
  001ed	83 c4 0c	 add	 esp, 12			; 0000000cH

; 873  : 			}
; 874  : 		}

  001f0	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001f3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001fa	5f		 pop	 edi
  001fb	5e		 pop	 esi
  001fc	5b		 pop	 ebx
  001fd	8b e5		 mov	 esp, ebp
  001ff	5d		 pop	 ebp
  00200	c2 0c 00	 ret	 12			; 0000000cH
$L104799:

; 863  : 			}
; 864  : 		else
; 865  : 			{	// new stuff can all be assigned
; 866  : 			pointer _Oldend = _Mylast;
; 867  : 			_Mylast = _Ucopy(_Oldend - _Count, _Oldend,
; 868  : 				_Mylast);	// copy suffix

  00203	50		 push	 eax
  00204	8b d8		 mov	 ebx, eax
  00206	2b d9		 sub	 ebx, ecx
  00208	50		 push	 eax
  00209	53		 push	 ebx
  0020a	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAUtagTCHATLOG@@PAU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAPAUtagTCHATLOG@@PAU1@00AAV?$allocator@UtagTCHATLOG@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<tagTCHATLOG *,tagTCHATLOG *,std::allocator<tagTCHATLOG> >
  0020f	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 869  : 			copy_backward(_ITER_BASE(_Where), _Oldend - _Count,
; 870  : 				_Oldend);	// copy hole

  00212	8b 45 10	 mov	 eax, DWORD PTR tv430[ebp]
  00215	50		 push	 eax
  00216	53		 push	 ebx
  00217	57		 push	 edi
  00218	e8 00 00 00 00	 call	 ??$copy_backward@PAUtagTCHATLOG@@PAU1@@std@@YAPAUtagTCHATLOG@@PAU1@00@Z ; std::copy_backward<tagTCHATLOG *,tagTCHATLOG *>

; 871  : 			fill(_ITER_BASE(_Where), _ITER_BASE(_Where) + _Count,
; 872  : 				_Tmp);	// insert into hole

  0021d	8b 55 08	 mov	 edx, DWORD PTR tv446[ebp]
  00220	8d 4d e4	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  00223	51		 push	 ecx
  00224	03 d7		 add	 edx, edi
  00226	52		 push	 edx
  00227	57		 push	 edi
  00228	e8 00 00 00 00	 call	 ??$fill@PAUtagTCHATLOG@@U1@@std@@YAXPAUtagTCHATLOG@@0ABU1@@Z ; std::fill<tagTCHATLOG *,tagTCHATLOG>
  0022d	83 c4 2c	 add	 esp, 44			; 0000002cH
$L104808:

; 873  : 			}
; 874  : 		}

  00230	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00233	5f		 pop	 edi
  00234	5e		 pop	 esi
  00235	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0023c	5b		 pop	 ebx
  0023d	8b e5		 mov	 esp, ebp
  0023f	5d		 pop	 ebp
  00240	c2 0c 00	 ret	 12			; 0000000cH
$L111779:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEXViterator@12@IABUtagTCHATLOG@@@Z:
  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T111777
  00005	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Insert_n@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEXViterator@12@IABUtagTCHATLOG@@@Z ENDP ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Insert_n
PUBLIC	?AddProtected@CTPlayer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@Z ; CTPlayer::AddProtected
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
xdata$x	SEGMENT
$T112134 DD	0ffffffffH
	DD	FLAT:$L111793
	DD	00H
	DD	FLAT:$L111794
$T112131 DD	019930520H
	DD	02H
	DD	FLAT:$T112134
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\trelaysvr\tplayer.cpp
xdata$x	ENDS
;	COMDAT ?AddProtected@CTPlayer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@Z
_TEXT	SEGMENT
__Where$111958 = -28					; size = 4
$T111792 = -28						; size = 8
$T111915 = -20						; size = 4
$T111791 = -20						; size = 8
__$EHRec$ = -12						; size = 12
_strName$ = 8						; size = 4
_bOption$ = 12						; size = 1
?AddProtected@CTPlayer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@Z PROC NEAR ; CTPlayer::AddProtected, COMDAT
; _this$ = ecx

; 73   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?AddProtected@CTPlayer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 10	 sub	 esp, 16			; 00000010H
  00018	55		 push	 ebp
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8b f9		 mov	 edi, ecx

; 74   : 	MAPTSTRBYTE::iterator it = m_mapTPROTECTED.find(strName);

  0001d	8d 44 24 2c	 lea	 eax, DWORD PTR _strName$[esp+36]
  00021	8d b7 38 01 01
	00		 lea	 esi, DWORD PTR [edi+65848]
  00027	50		 push	 eax
  00028	8b ce		 mov	 ecx, esi
  0002a	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+52], 0
  00032	e8 00 00 00 00	 call	 ?_Lbound@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@ABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Lbound
  00037	3b 46 04	 cmp	 eax, DWORD PTR [esi+4]
  0003a	8b 6c 24 2c	 mov	 ebp, DWORD PTR _strName$[esp+36]
  0003e	89 44 24 0c	 mov	 DWORD PTR __Where$111958[esp+40], eax
  00042	74 17		 je	 SHORT $L111914
  00044	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00047	50		 push	 eax
  00048	55		 push	 ebp
  00049	e8 00 00 00 00	 call	 __mbscmp
  0004e	83 c4 08	 add	 esp, 8
  00051	85 c0		 test	 eax, eax
  00053	7c 06		 jl	 SHORT $L111914
  00055	8d 44 24 0c	 lea	 eax, DWORD PTR __Where$111958[esp+40]
  00059	eb 0b		 jmp	 SHORT $L111916
$L111914:
  0005b	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0005e	89 4c 24 14	 mov	 DWORD PTR $T111915[esp+40], ecx
  00062	8d 44 24 14	 lea	 eax, DWORD PTR $T111915[esp+40]
$L111916:
  00066	8b 00		 mov	 eax, DWORD PTR [eax]

; 75   : 	if(it!=m_mapTPROTECTED.end())

  00068	3b 87 3c 01 01
	00		 cmp	 eax, DWORD PTR [edi+65852]
  0006e	74 1f		 je	 SHORT $L104145

; 76   : 		return;

  00070	8d 45 f0	 lea	 eax, DWORD PTR [ebp-16]
  00073	c7 44 24 24 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+48], -1
  0007b	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  0007e	83 c9 ff	 or	 ecx, -1
  00081	f0 0f c1 0a	 lock	  xadd	 DWORD PTR [edx], ecx
  00085	49		 dec	 ecx
  00086	85 c9		 test	 ecx, ecx
  00088	7f 74		 jg	 SHORT $L112129
  0008a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008c	50		 push	 eax
  0008d	eb 6a		 jmp	 SHORT $L112133
$L104145:

; 77   : 
; 78   : 	m_mapTPROTECTED.insert(MAPTSTRBYTE::value_type(strName, bOption));

  0008f	8d 7d f0	 lea	 edi, DWORD PTR [ebp-16]
  00092	57		 push	 edi
  00093	e8 00 00 00 00	 call	 ?CloneData@?$CSimpleStringT@D$0A@@ATL@@CAPAUCStringData@2@PAU32@@Z ; ATL::CSimpleStringT<char,0>::CloneData
  00098	8d 68 10	 lea	 ebp, DWORD PTR [eax+16]
  0009b	8a 44 24 34	 mov	 al, BYTE PTR _bOption$[esp+40]
  0009f	83 c4 04	 add	 esp, 4
  000a2	89 6c 24 14	 mov	 DWORD PTR $T111791[esp+40], ebp
  000a6	88 44 24 18	 mov	 BYTE PTR $T111791[esp+44], al
  000aa	8d 4c 24 14	 lea	 ecx, DWORD PTR $T111791[esp+40]
  000ae	51		 push	 ecx
  000af	8d 54 24 10	 lea	 edx, DWORD PTR $T111792[esp+44]
  000b3	52		 push	 edx
  000b4	8b ce		 mov	 ecx, esi
  000b6	c6 44 24 2c 01	 mov	 BYTE PTR __$EHRec$[esp+56], 1
  000bb	e8 00 00 00 00	 call	 ?insert@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@2@@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::insert
  000c0	8d 45 f0	 lea	 eax, DWORD PTR [ebp-16]
  000c3	c6 44 24 24 00	 mov	 BYTE PTR __$EHRec$[esp+48], 0
  000c8	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  000cb	83 ca ff	 or	 edx, -1
  000ce	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  000d2	4a		 dec	 edx
  000d3	85 d2		 test	 edx, edx
  000d5	7f 08		 jg	 SHORT $L112100
  000d7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d9	8b 11		 mov	 edx, DWORD PTR [ecx]
  000db	50		 push	 eax
  000dc	ff 52 04	 call	 DWORD PTR [edx+4]
$L112100:

; 79   : }

  000df	c7 44 24 24 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+48], -1
  000e7	8d 47 0c	 lea	 eax, DWORD PTR [edi+12]
  000ea	83 c9 ff	 or	 ecx, -1
  000ed	f0 0f c1 08	 lock	  xadd	 DWORD PTR [eax], ecx
  000f1	49		 dec	 ecx
  000f2	85 c9		 test	 ecx, ecx
  000f4	7f 08		 jg	 SHORT $L112129
  000f6	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000f8	57		 push	 edi
$L112133:
  000f9	8b 11		 mov	 edx, DWORD PTR [ecx]
  000fb	ff 52 04	 call	 DWORD PTR [edx+4]
$L112129:
  000fe	8b 4c 24 1c	 mov	 ecx, DWORD PTR __$EHRec$[esp+40]
  00102	5f		 pop	 edi
  00103	5e		 pop	 esi
  00104	5d		 pop	 ebp
  00105	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0010c	83 c4 1c	 add	 esp, 28			; 0000001cH
  0010f	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L111793:
  00000	8d 4d 04	 lea	 ecx, DWORD PTR _strName$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L111794:
  00008	8d 4d ec	 lea	 ecx, DWORD PTR $T111791[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@QAE@XZ
__ehhandler$?AddProtected@CTPlayer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@Z:
  00010	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T112131
  00015	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?AddProtected@CTPlayer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@Z ENDP ; CTPlayer::AddProtected
PUBLIC	??0?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE@XZ ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE@XZ PROC NEAR ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >, COMDAT
; _this$ = ecx

; 299  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx

; 300  : 		_Buy(0);

  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00007	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 301  : 		}

  0000d	c3		 ret	 0
??0?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE@XZ ENDP ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Tidy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T112201 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 1142 : 		{	// free all storage

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 1143 : 		erase(begin(), end());

  00004	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	50		 push	 eax
  0000a	51		 push	 ecx
  0000b	8d 44 24 0c	 lea	 eax, DWORD PTR $T112201[esp+16]
  0000f	50		 push	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::erase

; 1144 : 		this->_Alptr.destroy(&_Left(_Myhead));
; 1145 : 		this->_Alptr.destroy(&_Parent(_Myhead));
; 1146 : 		this->_Alptr.destroy(&_Right(_Myhead));
; 1147 : 		this->_Alnod.deallocate(_Myhead, 1);

  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 04	 add	 esp, 4

; 1148 : 		_Myhead = 0, _Mysize = 0;

  00023	33 c0		 xor	 eax, eax
  00025	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00028	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0002b	5e		 pop	 esi

; 1149 : 		}

  0002c	59		 pop	 ecx
  0002d	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Tidy
_TEXT	ENDS
PUBLIC	?insert@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE?AViterator@12@V312@ABUtagTCHATLOG@@@Z ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::insert
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?insert@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE?AViterator@12@V312@ABUtagTCHATLOG@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE?AViterator@12@V312@ABUtagTCHATLOG@@@Z PROC NEAR ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::insert, COMDAT
; _this$ = ecx

; 621  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Where$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 0c		 je	 SHORT $L112326
  0000f	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00012	2b c1		 sub	 eax, ecx
  00014	c1 f8 03	 sar	 eax, 3
  00017	85 c0		 test	 eax, eax
  00019	75 04		 jne	 SHORT $L112265
$L112326:
  0001b	33 f6		 xor	 esi, esi
  0001d	eb 07		 jmp	 SHORT $L112266
$L112265:
  0001f	8b f2		 mov	 esi, edx
  00021	2b f1		 sub	 esi, ecx
  00023	c1 fe 03	 sar	 esi, 3
$L112266:

; 622  : 		_Insert_n(_Where, (size_type)1, _Val);

  00026	8b 44 24 14	 mov	 eax, DWORD PTR __Val$[esp+4]
  0002a	50		 push	 eax
  0002b	6a 01		 push	 1
  0002d	52		 push	 edx
  0002e	8b cf		 mov	 ecx, edi
  00030	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEXViterator@12@IABUtagTCHATLOG@@@Z ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Insert_n

; 623  : 		return (begin() + _Off);

  00035	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00038	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  0003c	8d 14 f1	 lea	 edx, DWORD PTR [ecx+esi*8]
  0003f	5f		 pop	 edi
  00040	89 10		 mov	 DWORD PTR [eax], edx
  00042	5e		 pop	 esi

; 624  : 		}

  00043	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAE?AViterator@12@V312@ABUtagTCHATLOG@@@Z ENDP ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::insert
_TEXT	ENDS
PUBLIC	??1?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::~_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T112397 = -4						; size = 4
??1?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::~_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >, COMDAT
; _this$ = ecx

; 391  : 		{	// destroy tree

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 392  : 		_Tidy();

  00004	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	50		 push	 eax
  0000a	51		 push	 ecx
  0000b	8d 44 24 0c	 lea	 eax, DWORD PTR $T112397[esp+16]
  0000f	50		 push	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::erase
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 04	 add	 esp, 4
  00023	33 c0		 xor	 eax, eax
  00025	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00028	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0002b	5e		 pop	 esi

; 393  : 		}

  0002c	59		 pop	 ecx
  0002d	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::~_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >
_TEXT	ENDS
PUBLIC	?push_back@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAEXABUtagTCHATLOG@@@Z ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::push_back
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?push_back@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAEXABUtagTCHATLOG@@@Z
_TEXT	SEGMENT
__Cat$112461 = 8					; size = 1
__Val$ = 8						; size = 4
?push_back@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAEXABUtagTCHATLOG@@@Z PROC NEAR ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::push_back, COMDAT
; _this$ = ecx

; 579  : 		{	// insert element at end

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 580  : 		if (size() < capacity())

  00003	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00006	85 d2		 test	 edx, edx
  00008	75 04		 jne	 SHORT $L112431
  0000a	33 c9		 xor	 ecx, ecx
  0000c	eb 08		 jmp	 SHORT $L112432
$L112431:
  0000e	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00011	2b ca		 sub	 ecx, edx
  00013	c1 f9 03	 sar	 ecx, 3
$L112432:
  00016	85 d2		 test	 edx, edx
  00018	74 31		 je	 SHORT $L104482
  0001a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0001d	2b c2		 sub	 eax, edx
  0001f	c1 f8 03	 sar	 eax, 3
  00022	3b c8		 cmp	 ecx, eax
  00024	73 25		 jae	 SHORT $L104482

; 581  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

  00026	8b 44 24 08	 mov	 eax, DWORD PTR __Cat$112461[esp]
  0002a	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp]
  0002e	57		 push	 edi
  0002f	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00032	50		 push	 eax
  00033	56		 push	 esi
  00034	51		 push	 ecx
  00035	6a 01		 push	 1
  00037	57		 push	 edi
  00038	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAUtagTCHATLOG@@IU1@V?$allocator@UtagTCHATLOG@@@std@@@std@@YAXPAUtagTCHATLOG@@IABU1@AAV?$allocator@UtagTCHATLOG@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<tagTCHATLOG *,unsigned int,tagTCHATLOG,std::allocator<tagTCHATLOG> >
  0003d	83 c4 14	 add	 esp, 20			; 00000014H
  00040	83 c7 08	 add	 edi, 8
  00043	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi

; 584  : 		}

  00048	c2 04 00	 ret	 4
$L104482:

; 582  : 		else
; 583  : 			insert(end(), _Val);

  0004b	8b 54 24 08	 mov	 edx, DWORD PTR __Val$[esp]
  0004f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00052	52		 push	 edx
  00053	6a 01		 push	 1
  00055	50		 push	 eax
  00056	8b ce		 mov	 ecx, esi
  00058	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@IAEXViterator@12@IABUtagTCHATLOG@@@Z ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::_Insert_n
  0005d	5e		 pop	 esi

; 584  : 		}

  0005e	c2 04 00	 ret	 4
?push_back@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAEXABUtagTCHATLOG@@@Z ENDP ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::push_back
_TEXT	ENDS
PUBLIC	??1?$map@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@@std@@QAE@XZ ; std::map<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> > >::~map<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> > >
; Function compile flags: /Ogty
;	COMDAT ??1?$map@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@@std@@QAE@XZ
_TEXT	SEGMENT
$T112681 = -4						; size = 4
??1?$map@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@@std@@QAE@XZ PROC NEAR ; std::map<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> > >::~map<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> > >, COMDAT
; _this$ = ecx
  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	50		 push	 eax
  0000a	51		 push	 ecx
  0000b	8d 44 24 0c	 lea	 eax, DWORD PTR $T112681[esp+16]
  0000f	50		 push	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::erase
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 04	 add	 esp, 4
  00023	33 c0		 xor	 eax, eax
  00025	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00028	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0002b	5e		 pop	 esi
  0002c	59		 pop	 ecx
  0002d	c3		 ret	 0
??1?$map@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@@std@@QAE@XZ ENDP ; std::map<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> > >::~map<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> > >
_TEXT	ENDS
PUBLIC	??_7CTPlayer@@6B@				; CTPlayer::`vftable'
PUBLIC	??_GCTPlayer@@UAEPAXI@Z				; CTPlayer::`scalar deleting destructor'
PUBLIC	??1CTPlayer@@UAE@XZ				; CTPlayer::~CTPlayer
EXTRN	??_ECTPlayer@@UAEPAXI@Z:NEAR			; CTPlayer::`vector deleting destructor'
EXTRN	?Say@CSession@@UAEHPAVCPacket@@@Z:NEAR		; CSession::Say
EXTRN	?Open@CSession@@UAEHIAAVCPacket@@@Z:NEAR	; CSession::Open
EXTRN	?Close@CSession@@UAEXXZ:NEAR			; CSession::Close
EXTRN	??1CTRelaySession@@UAE@XZ:NEAR			; CTRelaySession::~CTRelaySession
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
xdata$x	SEGMENT
$T112922 DD	0ffffffffH
	DD	FLAT:$L112708
	DD	00H
	DD	FLAT:$L112709
$T112920 DD	019930520H
	DD	02H
	DD	FLAT:$T112922
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_7CTPlayer@@6B@
CONST	SEGMENT
??_7CTPlayer@@6B@ DD FLAT:?Say@CSession@@UAEHPAVCPacket@@@Z ; CTPlayer::`vftable'
	DD	FLAT:?Open@CSession@@UAEHIAAVCPacket@@@Z
	DD	FLAT:?Close@CSession@@UAEXXZ
	DD	FLAT:??_ECTPlayer@@UAEPAXI@Z
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\trelaysvr\tplayer.cpp
CONST	ENDS
;	COMDAT ??1CTPlayer@@UAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
$T112863 = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CTPlayer@@UAE@XZ PROC NEAR				; CTPlayer::~CTPlayer, COMDAT
; _this$ = ecx

; 38   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1CTPlayer@@UAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 08	 sub	 esp, 8
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	8b f1		 mov	 esi, ecx
  0001c	57		 push	 edi
  0001d	89 74 24 0c	 mov	 DWORD PTR _this$[esp+32], esi
  00021	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CTPlayer@@6B@

; 39   : }

  00027	8b 86 50 01 01
	00		 mov	 eax, DWORD PTR [esi+65872]
  0002d	33 db		 xor	 ebx, ebx
  0002f	3b c3		 cmp	 eax, ebx
  00031	c7 44 24 1c 01
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+40], 1
  00039	74 09		 je	 SHORT $L112727
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00041	83 c4 04	 add	 esp, 4
$L112727:
  00044	89 9e 50 01 01
	00		 mov	 DWORD PTR [esi+65872], ebx
  0004a	89 9e 54 01 01
	00		 mov	 DWORD PTR [esi+65876], ebx
  00050	89 9e 58 01 01
	00		 mov	 DWORD PTR [esi+65880], ebx
  00056	8b 86 3c 01 01
	00		 mov	 eax, DWORD PTR [esi+65852]
  0005c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005e	8d be 38 01 01
	00		 lea	 edi, DWORD PTR [esi+65848]
  00064	50		 push	 eax
  00065	51		 push	 ecx
  00066	8d 44 24 18	 lea	 eax, DWORD PTR $T112863[esp+40]
  0006a	50		 push	 eax
  0006b	8b cf		 mov	 ecx, edi
  0006d	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::erase
  00072	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00075	50		 push	 eax
  00076	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0007b	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  0007e	89 5f 08	 mov	 DWORD PTR [edi+8], ebx
  00081	8b 86 28 01 01
	00		 mov	 eax, DWORD PTR [esi+65832]
  00087	83 e8 10	 sub	 eax, 16			; 00000010H
  0008a	83 c4 04	 add	 esp, 4
  0008d	88 5c 24 1c	 mov	 BYTE PTR __$EHRec$[esp+40], bl
  00091	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00094	83 ca ff	 or	 edx, -1
  00097	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0009b	4a		 dec	 edx
  0009c	85 d2		 test	 edx, edx
  0009e	7f 08		 jg	 SHORT $L112917
  000a0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000a2	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a4	50		 push	 eax
  000a5	ff 52 04	 call	 DWORD PTR [edx+4]
$L112917:
  000a8	8b ce		 mov	 ecx, esi
  000aa	c7 44 24 1c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+40], -1
  000b2	e8 00 00 00 00	 call	 ??1CTRelaySession@@UAE@XZ ; CTRelaySession::~CTRelaySession
  000b7	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  000bb	5f		 pop	 edi
  000bc	5e		 pop	 esi
  000bd	5b		 pop	 ebx
  000be	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000c5	83 c4 14	 add	 esp, 20			; 00000014H
  000c8	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L112708:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CTRelaySession@@UAE@XZ ; CTRelaySession::~CTRelaySession
$L112709:
  00008	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 28 01 01
	00		 add	 ecx, 65832		; 00010128H
  00011	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
__ehhandler$??1CTPlayer@@UAE@XZ:
  00016	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T112920
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CTPlayer@@UAE@XZ ENDP				; CTPlayer::~CTPlayer
PUBLIC	?CheckChat@CTPlayer@@QAEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ; CTPlayer::CheckChat
PUBLIC	??_C@_02EMFKHFLK@?$CFX?$AA@			; `string'
EXTRN	_sscanf:NEAR
EXTRN	__imp__GetTickCount@0:NEAR
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
xdata$x	SEGMENT
$T113223 DD	0ffffffffH
	DD	FLAT:$L112932
$T113217 DD	019930520H
	DD	01H
	DD	FLAT:$T113223
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_02EMFKHFLK@?$CFX?$AA@
CONST	SEGMENT
??_C@_02EMFKHFLK@?$CFX?$AA@ DB '%X', 00H		; `string'
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\trelaysvr\tplayer.cpp
CONST	ENDS
;	COMDAT ?CheckChat@CTPlayer@@QAEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
_TEXT	SEGMENT
_dwCODE$ = -28						; size = 4
$T112928 = -24						; size = 4
tv396 = -20						; size = 4
_log$ = -20						; size = 8
__$EHRec$ = -12						; size = 12
_strTalk$ = 8						; size = 4
?CheckChat@CTPlayer@@QAEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z PROC NEAR ; CTPlayer::CheckChat, COMDAT
; _this$ = ecx

; 89   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?CheckChat@CTPlayer@@QAEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 10	 sub	 esp, 16			; 00000010H
  00018	55		 push	 ebp
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8b f1		 mov	 esi, ecx

; 90   : 	DWORD dwCODE = 0;
; 91   : 	sscanf( LPCSTR(strTalk.Left(8)), _T("%X"), &dwCODE);

  0001d	6a 08		 push	 8
  0001f	8d 44 24 14	 lea	 eax, DWORD PTR $T112928[esp+44]
  00023	33 ed		 xor	 ebp, ebp
  00025	50		 push	 eax
  00026	8d 4c 24 34	 lea	 ecx, DWORD PTR _strTalk$[esp+44]
  0002a	89 6c 24 2c	 mov	 DWORD PTR __$EHRec$[esp+56], ebp
  0002e	89 6c 24 14	 mov	 DWORD PTR _dwCODE$[esp+48], ebp
  00032	e8 00 00 00 00	 call	 ?Left@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBE?AV12@H@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Left
  00037	8b 00		 mov	 eax, DWORD PTR [eax]
  00039	8d 4c 24 0c	 lea	 ecx, DWORD PTR _dwCODE$[esp+40]
  0003d	51		 push	 ecx
  0003e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_02EMFKHFLK@?$CFX?$AA@
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 _sscanf
  00049	8b 44 24 1c	 mov	 eax, DWORD PTR $T112928[esp+52]
  0004d	83 c0 f0	 add	 eax, -16		; fffffff0H
  00050	83 c4 0c	 add	 esp, 12			; 0000000cH
  00053	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  00056	83 c9 ff	 or	 ecx, -1
  00059	f0 0f c1 0a	 lock	  xadd	 DWORD PTR [edx], ecx
  0005d	49		 dec	 ecx
  0005e	85 c9		 test	 ecx, ecx
  00060	7f 08		 jg	 SHORT $L112964
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	8b 11		 mov	 edx, DWORD PTR [ecx]
  00066	50		 push	 eax
  00067	ff 52 04	 call	 DWORD PTR [edx+4]
$L112964:

; 92   : 	WORD wNewSize = LOWORD(dwCODE);

  0006a	8b 7c 24 0c	 mov	 edi, DWORD PTR _dwCODE$[esp+40]

; 93   : 
; 94   : 	DWORD dwTick = GetTickCount();

  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetTickCount@0

; 95   : 
; 96   : 	if(m_chatlog.m_dwRecent && dwTick - m_chatlog.m_dwRecent < 10000)

  00074	8b 8e 44 01 01
	00		 mov	 ecx, DWORD PTR [esi+65860]
  0007a	3b cd		 cmp	 ecx, ebp
  0007c	74 70		 je	 SHORT $L104190
  0007e	8b d0		 mov	 edx, eax
  00080	2b d1		 sub	 edx, ecx
  00082	81 fa 10 27 00
	00		 cmp	 edx, 10000		; 00002710H
  00088	73 64		 jae	 SHORT $L104190

; 97   : 	{
; 98   : 		m_chatlog.m_dwSize += wNewSize;

  0008a	8b 96 48 01 01
	00		 mov	 edx, DWORD PTR [esi+65864]
  00090	0f b7 cf	 movzx	 ecx, di
  00093	03 d1		 add	 edx, ecx

; 99   : 		if(100 < m_chatlog.m_dwSize)

  00095	8b ca		 mov	 ecx, edx
  00097	83 f9 64	 cmp	 ecx, 100		; 00000064H
  0009a	89 96 48 01 01
	00		 mov	 DWORD PTR [esi+65864], edx
  000a0	76 58		 jbe	 SHORT $L104193

; 100  : 		{
; 101  : 			//CTime t(CTime::GetCurrentTime());
; 102  : 			//if(t.GetTime() < m_nChatBanTime)
; 103  : 			//	m_nChatBanTime += 300;
; 104  : 			//else
; 105  : 			//	m_nChatBanTime = t.GetTime() + 300;	
; 106  : 
; 107  : 			m_chatlog.m_dwRecent = dwTick;

  000a2	89 86 44 01 01
	00		 mov	 DWORD PTR [esi+65860], eax

; 108  : 			m_chatlog.m_dwSize = 0;
; 109  : 
; 110  : 			return FALSE;

  000a8	8b 44 24 2c	 mov	 eax, DWORD PTR _strTalk$[esp+36]
  000ac	83 c0 f0	 add	 eax, -16		; fffffff0H
  000af	89 ae 48 01 01
	00		 mov	 DWORD PTR [esi+65864], ebp
  000b5	c7 44 24 24 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+48], -1
  000bd	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  000c0	83 c9 ff	 or	 ecx, -1
  000c3	f0 0f c1 0a	 lock	  xadd	 DWORD PTR [edx], ecx
  000c7	49		 dec	 ecx
  000c8	85 c9		 test	 ecx, ecx
  000ca	0f 8f 02 01 00
	00		 jg	 $L113188
  000d0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d2	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d4	50		 push	 eax
  000d5	ff 52 04	 call	 DWORD PTR [edx+4]
  000d8	5f		 pop	 edi
  000d9	5e		 pop	 esi
  000da	32 c0		 xor	 al, al
  000dc	5d		 pop	 ebp

; 157  : }

  000dd	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  000e1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000e8	83 c4 1c	 add	 esp, 28			; 0000001cH
  000eb	c2 04 00	 ret	 4
$L104190:

; 111  : 		}
; 112  : 	}
; 113  : 	else
; 114  : 	{
; 115  : 		m_chatlog.m_dwRecent = dwTick;

  000ee	89 86 44 01 01
	00		 mov	 DWORD PTR [esi+65860], eax

; 116  : 		m_chatlog.m_dwSize = 0;

  000f4	89 ae 48 01 01
	00		 mov	 DWORD PTR [esi+65864], ebp
$L104193:

; 117  : 	}
; 118  : 
; 119  : 	TCHATLOG log;
; 120  : 	log.m_dwRecent = dwTick;

  000fa	89 44 24 14	 mov	 DWORD PTR _log$[esp+40], eax

; 121  : 	log.m_dwSize = wNewSize;

  000fe	0f b7 c7	 movzx	 eax, di

; 122  : 	m_vChatLog.push_back(log);

  00101	8d 4c 24 14	 lea	 ecx, DWORD PTR _log$[esp+40]
  00105	8d be 4c 01 01
	00		 lea	 edi, DWORD PTR [esi+65868]
  0010b	51		 push	 ecx
  0010c	8b cf		 mov	 ecx, edi
  0010e	89 44 24 1c	 mov	 DWORD PTR _log$[esp+48], eax
  00112	e8 00 00 00 00	 call	 ?push_back@?$vector@UtagTCHATLOG@@V?$allocator@UtagTCHATLOG@@@std@@@std@@QAEXABUtagTCHATLOG@@@Z ; std::vector<tagTCHATLOG,std::allocator<tagTCHATLOG> >::push_back

; 123  : 
; 124  : 	int nCount = int(m_vChatLog.size());

  00117	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0011a	3b c5		 cmp	 eax, ebp
  0011c	75 04		 jne	 SHORT $L113000
  0011e	33 c9		 xor	 ecx, ecx
  00120	eb 08		 jmp	 SHORT $L113001
$L113000:
  00122	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00125	2b c8		 sub	 ecx, eax
  00127	c1 f9 03	 sar	 ecx, 3
$L113001:

; 125  : 	int nInterval = 0;
; 126  : 	for(int cl=0; cl<nCount-1; cl++)

  0012a	8d 51 ff	 lea	 edx, DWORD PTR [ecx-1]
  0012d	53		 push	 ebx
  0012e	33 c0		 xor	 eax, eax
  00130	33 db		 xor	 ebx, ebx
  00132	3b d5		 cmp	 edx, ebp
  00134	89 54 24 18	 mov	 DWORD PTR tv396[esp+44], edx
  00138	7e 45		 jle	 SHORT $L104200
  0013a	8b b6 50 01 01
	00		 mov	 esi, DWORD PTR [esi+65872]
$L104198:

; 127  : 	{
; 128  : 		int nItv = m_vChatLog[cl+1].m_dwRecent - m_vChatLog[cl].m_dwRecent;

  00140	8b 4c de 08	 mov	 ecx, DWORD PTR [esi+ebx*8+8]
  00144	2b 0c de	 sub	 ecx, DWORD PTR [esi+ebx*8]

; 129  : 		if(!nInterval)

  00147	3b c5		 cmp	 eax, ebp

; 130  : 			nInterval = nItv;
; 131  : 		else

  00149	74 12		 je	 SHORT $L113222

; 132  : 		{
; 133  : 			if(abs(nInterval-nItv) > 1000)

  0014b	2b c1		 sub	 eax, ecx
  0014d	99		 cdq
  0014e	33 c2		 xor	 eax, edx
  00150	2b c2		 sub	 eax, edx
  00152	3d e8 03 00 00	 cmp	 eax, 1000		; 000003e8H
  00157	7f 0d		 jg	 SHORT $L113219

; 136  : 				break;
; 137  : 			}
; 138  : 			else
; 139  : 				nInterval = nItv;

  00159	8b 54 24 18	 mov	 edx, DWORD PTR tv396[esp+44]
$L113222:

; 125  : 	int nInterval = 0;
; 126  : 	for(int cl=0; cl<nCount-1; cl++)

  0015d	43		 inc	 ebx
  0015e	3b da		 cmp	 ebx, edx

; 136  : 				break;
; 137  : 			}
; 138  : 			else
; 139  : 				nInterval = nItv;

  00160	8b c1		 mov	 eax, ecx
  00162	7c dc		 jl	 SHORT $L104198

; 132  : 		{
; 133  : 			if(abs(nInterval-nItv) > 1000)

  00164	eb 19		 jmp	 SHORT $L104200
$L113219:

; 134  : 			{
; 135  : 				m_vChatLog.clear();

  00166	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00169	3b c5		 cmp	 eax, ebp
  0016b	74 09		 je	 SHORT $L113131
  0016d	50		 push	 eax
  0016e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00173	83 c4 04	 add	 esp, 4
$L113131:
  00176	89 6f 04	 mov	 DWORD PTR [edi+4], ebp
  00179	89 6f 08	 mov	 DWORD PTR [edi+8], ebp
  0017c	89 6f 0c	 mov	 DWORD PTR [edi+12], ebp
$L104200:

; 140  : 		}
; 141  : 	}
; 142  : 
; 143  : 	if(m_vChatLog.size() > 8)

  0017f	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00182	3b cd		 cmp	 ecx, ebp
  00184	5b		 pop	 ebx
  00185	74 61		 je	 SHORT $L104206
  00187	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0018a	2b c1		 sub	 eax, ecx
  0018c	c1 f8 03	 sar	 eax, 3
  0018f	83 f8 08	 cmp	 eax, 8
  00192	76 54		 jbe	 SHORT $L104206

; 144  : 	{
; 145  : 		//CTime t(CTime::GetCurrentTime());
; 146  : 		//if(t.GetTime() < m_nChatBanTime)
; 147  : 		//	m_nChatBanTime += 300;
; 148  : 		//else
; 149  : 		//	m_nChatBanTime = t.GetTime() + 300;
; 150  : 
; 151  : 		m_vChatLog.clear();

  00194	8b c1		 mov	 eax, ecx
  00196	3b c5		 cmp	 eax, ebp
  00198	74 09		 je	 SHORT $L113159
  0019a	50		 push	 eax
  0019b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001a0	83 c4 04	 add	 esp, 4
$L113159:

; 152  : 
; 153  : 		return FALSE;

  001a3	8b 44 24 2c	 mov	 eax, DWORD PTR _strTalk$[esp+36]
  001a7	83 c0 f0	 add	 eax, -16		; fffffff0H
  001aa	89 6f 04	 mov	 DWORD PTR [edi+4], ebp
  001ad	89 6f 08	 mov	 DWORD PTR [edi+8], ebp
  001b0	89 6f 0c	 mov	 DWORD PTR [edi+12], ebp
  001b3	c7 44 24 24 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+48], -1
  001bb	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  001be	83 c9 ff	 or	 ecx, -1
  001c1	f0 0f c1 0a	 lock	  xadd	 DWORD PTR [edx], ecx
  001c5	49		 dec	 ecx
  001c6	85 c9		 test	 ecx, ecx
  001c8	7f 08		 jg	 SHORT $L113188
  001ca	8b 08		 mov	 ecx, DWORD PTR [eax]
  001cc	8b 11		 mov	 edx, DWORD PTR [ecx]
  001ce	50		 push	 eax
  001cf	ff 52 04	 call	 DWORD PTR [edx+4]
$L113188:
  001d2	5f		 pop	 edi
  001d3	5e		 pop	 esi
  001d4	32 c0		 xor	 al, al
  001d6	5d		 pop	 ebp

; 157  : }

  001d7	8b 4c 24 10	 mov	 ecx, DWORD PTR __$EHRec$[esp+28]
  001db	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001e2	83 c4 1c	 add	 esp, 28			; 0000001cH
  001e5	c2 04 00	 ret	 4
$L104206:

; 154  : 	}
; 155  : 
; 156  : 	return TRUE;

  001e8	8b 44 24 2c	 mov	 eax, DWORD PTR _strTalk$[esp+36]
  001ec	83 c0 f0	 add	 eax, -16		; fffffff0H
  001ef	c7 44 24 24 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+48], -1
  001f7	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  001fa	83 ca ff	 or	 edx, -1
  001fd	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00201	4a		 dec	 edx
  00202	85 d2		 test	 edx, edx
  00204	7f 08		 jg	 SHORT $L113215
  00206	8b 08		 mov	 ecx, DWORD PTR [eax]
  00208	8b 11		 mov	 edx, DWORD PTR [ecx]
  0020a	50		 push	 eax
  0020b	ff 52 04	 call	 DWORD PTR [edx+4]
$L113215:

; 157  : }

  0020e	8b 4c 24 1c	 mov	 ecx, DWORD PTR __$EHRec$[esp+40]
  00212	5f		 pop	 edi
  00213	5e		 pop	 esi
  00214	b0 01		 mov	 al, 1
  00216	5d		 pop	 ebp
  00217	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0021e	83 c4 1c	 add	 esp, 28			; 0000001cH
  00221	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L112932:
  00000	8d 4d 04	 lea	 ecx, DWORD PTR _strTalk$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
__ehhandler$?CheckChat@CTPlayer@@QAEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T113217
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?CheckChat@CTPlayer@@QAEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ENDP ; CTPlayer::CheckChat
PUBLIC	??0?$map@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@@std@@QAE@XZ ; std::map<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> > >::map<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> > >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\map
;	COMDAT ??0?$map@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$map@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@@std@@QAE@XZ PROC NEAR ; std::map<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> > >::map<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> > >, COMDAT
; _this$ = ecx

; 102  : 		{	// construct empty map from defaults

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Buynode
  00008	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000b	c6 40 15 01	 mov	 BYTE PTR [eax+21], 1
  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00012	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00015	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00018	89 00		 mov	 DWORD PTR [eax], eax
  0001a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001d	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00020	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 103  : 		}

  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	c3		 ret	 0
??0?$map@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@@std@@QAE@XZ ENDP ; std::map<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> > >::map<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> > >
_TEXT	ENDS
PUBLIC	??0CTPlayer@@QAE@XZ				; CTPlayer::CTPlayer
EXTRN	??0CTRelaySession@@QAE@XZ:NEAR			; CTRelaySession::CTRelaySession
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
xdata$x	SEGMENT
$T113757 DD	0ffffffffH
	DD	FLAT:$L113394
	DD	00H
	DD	FLAT:$L113395
	DD	01H
	DD	FLAT:$L113396
$T113755 DD	019930520H
	DD	03H
	DD	FLAT:$T113757
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\trelaysvr\tplayer.cpp
xdata$x	ENDS
;	COMDAT ??0CTPlayer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CTPlayer@@QAE@XZ PROC NEAR				; CTPlayer::CTPlayer, COMDAT
; _this$ = ecx

; 5    : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0CTPlayer@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	53		 push	 ebx
  00017	55		 push	 ebp
  00018	56		 push	 esi
  00019	8b f1		 mov	 esi, ecx
  0001b	57		 push	 edi
  0001c	89 74 24 10	 mov	 DWORD PTR _this$[esp+32], esi
  00020	e8 00 00 00 00	 call	 ??0CTRelaySession@@QAE@XZ ; CTRelaySession::CTRelaySession
  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CTPlayer@@6B@
  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_strmgr@ATL@@3VCAtlStringMgr@1@A
  00030	33 db		 xor	 ebx, ebx
  00032	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_strmgr@ATL@@3VCAtlStringMgr@1@A ; ATL::g_strmgr
  00037	89 5c 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], ebx
  0003b	8d ae 28 01 01
	00		 lea	 ebp, DWORD PTR [esi+65832]
  00041	ff 50 0c	 call	 DWORD PTR [eax+12]
  00044	83 c0 10	 add	 eax, 16			; 00000010H
  00047	89 45 00	 mov	 DWORD PTR [ebp], eax
  0004a	8d be 38 01 01
	00		 lea	 edi, DWORD PTR [esi+65848]
  00050	8b cf		 mov	 ecx, edi
  00052	c6 44 24 1c 01	 mov	 BYTE PTR __$EHRec$[esp+40], 1
  00057	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >,unsigned char,std::less<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > >,std::allocator<std::pair<ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > > const ,unsigned char> >,0> >::_Buynode
  0005c	89 47 04	 mov	 DWORD PTR [edi+4], eax
  0005f	c6 40 15 01	 mov	 BYTE PTR [eax+21], 1
  00063	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00066	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00069	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0006c	89 00		 mov	 DWORD PTR [eax], eax
  0006e	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00071	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00074	89 5f 08	 mov	 DWORD PTR [edi+8], ebx
  00077	89 9e 44 01 01
	00		 mov	 DWORD PTR [esi+65860], ebx
  0007d	89 9e 48 01 01
	00		 mov	 DWORD PTR [esi+65864], ebx
  00083	89 9e 50 01 01
	00		 mov	 DWORD PTR [esi+65872], ebx
  00089	89 9e 54 01 01
	00		 mov	 DWORD PTR [esi+65876], ebx
  0008f	89 9e 58 01 01
	00		 mov	 DWORD PTR [esi+65880], ebx

; 6    : 	m_bSessionType = SESSION_CLIENT;	
; 7    : 
; 8    : 	m_dwID = 0;
; 9    : 	m_dwKEY = 0;
; 10   : 	m_dwGuildID = 0;
; 11   : 	m_dwPartyChiefID = 0;
; 12   : 	m_dwGeneralID = 0;
; 13   : 	m_dwCheckTick = 0;
; 14   : 	m_dwTacticsID = 0;
; 15   : 
; 16   : 	m_wPort = 0;
; 17   : 	m_wPartyID = 0;
; 18   : 	m_wCorpsID = 0;
; 19   : 	m_wMapID = 0;
; 20   : 	m_wUnitID = 0;
; 21   : 
; 22   : 	m_bCountry = TCONTRY_N;

  00095	b0 03		 mov	 al, 3

; 23   : 	m_bAidCountry = TCONTRY_N;
; 24   : 	m_bGuildDuty = 0;
; 25   : 	m_bReconnect = FALSE;
; 26   : 	m_bAuthorized = FALSE;
; 27   : 
; 28   : 	m_strNAME.Empty();

  00097	8b cd		 mov	 ecx, ebp
  00099	c6 46 0d 01	 mov	 BYTE PTR [esi+13], 1
  0009d	89 9e fc 00 01
	00		 mov	 DWORD PTR [esi+65788], ebx
  000a3	89 9e 00 01 01
	00		 mov	 DWORD PTR [esi+65792], ebx
  000a9	89 9e 04 01 01
	00		 mov	 DWORD PTR [esi+65796], ebx
  000af	89 9e 08 01 01
	00		 mov	 DWORD PTR [esi+65800], ebx
  000b5	89 9e 0c 01 01
	00		 mov	 DWORD PTR [esi+65804], ebx
  000bb	89 9e 10 01 01
	00		 mov	 DWORD PTR [esi+65808], ebx
  000c1	89 9e 14 01 01
	00		 mov	 DWORD PTR [esi+65812], ebx
  000c7	66 89 9e 18 01
	01 00		 mov	 WORD PTR [esi+65816], bx
  000ce	66 89 9e 1a 01
	01 00		 mov	 WORD PTR [esi+65818], bx
  000d5	66 89 9e 1c 01
	01 00		 mov	 WORD PTR [esi+65820], bx
  000dc	66 89 9e 1e 01
	01 00		 mov	 WORD PTR [esi+65822], bx
  000e3	66 89 9e 20 01
	01 00		 mov	 WORD PTR [esi+65824], bx
  000ea	88 86 22 01 01
	00		 mov	 BYTE PTR [esi+65826], al
  000f0	88 86 23 01 01
	00		 mov	 BYTE PTR [esi+65827], al
  000f6	88 9e 24 01 01
	00		 mov	 BYTE PTR [esi+65828], bl
  000fc	88 9e 25 01 01
	00		 mov	 BYTE PTR [esi+65829], bl
  00102	88 9e 26 01 01
	00		 mov	 BYTE PTR [esi+65830], bl
  00108	e8 00 00 00 00	 call	 ?Empty@?$CSimpleStringT@D$0A@@ATL@@QAEXXZ ; ATL::CSimpleStringT<char,0>::Empty

; 29   : 	m_nChatBanTime = 0;

  0010d	89 9e 30 01 01
	00		 mov	 DWORD PTR [esi+65840], ebx
  00113	89 9e 34 01 01
	00		 mov	 DWORD PTR [esi+65844], ebx

; 30   : 
; 31   : 	m_dwAcceptTick = 0;

  00119	89 5e 1c	 mov	 DWORD PTR [esi+28], ebx

; 32   : 	m_dwCloseTick = 0;

  0011c	89 5e 20	 mov	 DWORD PTR [esi+32], ebx

; 33   : 	m_chatlog.reset();

  0011f	89 9e 44 01 01
	00		 mov	 DWORD PTR [esi+65860], ebx
  00125	89 9e 48 01 01
	00		 mov	 DWORD PTR [esi+65864], ebx

; 34   : 	m_vChatLog.clear();

  0012b	8b 86 50 01 01
	00		 mov	 eax, DWORD PTR [esi+65872]
  00131	3b c3		 cmp	 eax, ebx
  00133	74 09		 je	 SHORT $L113750
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0013b	83 c4 04	 add	 esp, 4
$L113750:

; 35   : }

  0013e	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  00142	5f		 pop	 edi
  00143	89 9e 50 01 01
	00		 mov	 DWORD PTR [esi+65872], ebx
  00149	89 9e 54 01 01
	00		 mov	 DWORD PTR [esi+65876], ebx
  0014f	89 9e 58 01 01
	00		 mov	 DWORD PTR [esi+65880], ebx
  00155	8b c6		 mov	 eax, esi
  00157	5e		 pop	 esi
  00158	5d		 pop	 ebp
  00159	5b		 pop	 ebx
  0015a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00161	83 c4 10	 add	 esp, 16			; 00000010H
  00164	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L113394:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1CTRelaySession@@UAE@XZ ; CTRelaySession::~CTRelaySession
$L113395:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	81 c1 28 01 01
	00		 add	 ecx, 65832		; 00010128H
  00011	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L113396:
  00016	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00019	81 c1 38 01 01
	00		 add	 ecx, 65848		; 00010138H
  0001f	e9 00 00 00 00	 jmp	 ??1?$map@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EU?$less@V?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@std@@V?$allocator@U?$pair@$$CBV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@E@std@@@4@@std@@QAE@XZ
__ehhandler$??0CTPlayer@@QAE@XZ:
  00024	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T113755
  00029	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CTPlayer@@QAE@XZ ENDP				; CTPlayer::CTPlayer
; Function compile flags: /Ogty
;	COMDAT ??_GCTPlayer@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCTPlayer@@UAEPAXI@Z PROC NEAR			; CTPlayer::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1CTPlayer@@UAE@XZ	; CTPlayer::~CTPlayer
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L113763
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L113763:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GCTPlayer@@UAEPAXI@Z ENDP				; CTPlayer::`scalar deleting destructor'
_TEXT	ENDS
END
