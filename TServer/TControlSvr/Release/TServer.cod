; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\TServer.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??0CTServer@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCTServer@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CTServer@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendCT_SERVICEMONITOR_ACK@CTServer@@QAEXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendCT_ANNOUNCEMENT_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendCT_USERKICKOUT_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendCT_USERMOVE_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EGMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendCT_USERPOSITION_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendCT_MONSPAWNFIND_ACK@CTServer@@QAEXKEGG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendCT_MONACTION_ACK@CTServer@@QAEXEGKEKKKEG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendCT_CHATBAN_REQ@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@GKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendCT_CHARMSG_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendCT_SERVICEDATACLEAR_ACK@CTServer@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendCT_ITEMFIND_REQ@CTServer@@QAEXKGV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendCT_ITEMSTATE_REQ@CTServer@@QAEXPAVCPacket@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendCT_CTRLSVR_REQ@CTServer@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendCT_CASTLEINFO_REQ@CTServer@@QAEXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendCT_CASTLEGUILDCHG_REQ@CTServer@@QAEXGKKK_J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendCT_CASTLEENABLE_REQ@CTServer@@QAEXEEK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendCT_EVENTUPDATE_REQ@CTServer@@QAEXEGPAUtagEVENTINFO@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendCT_EVENTMSG_REQ@CTServer@@QAEXEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendCT_CASHSHOPSTOP_REQ@CTServer@@QAEXE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendCT_CASHITEMSALE_REQ@CTServer@@QAEXKGPAV?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendCT_EVENTQUARTERLIST_REQ@CTServer@@QAEXPAVCPacket@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendCT_EVENTQUARTERUPDATE_REQ@CTServer@@QAEXPAVCPacket@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendCT_TOURNAMENTEVENT_REQ@CTServer@@QAEXPAVCPacket@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendCT_HELPMESSAGE_REQ@CTServer@@QAEXPAVCPacket@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendCT_RPSGAMEDATA_REQ@CTServer@@QAEXPAVCPacket@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SendCT_RPSGAMECHANGE_REQ@CTServer@@QAEXPAVCPacket@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?at@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAEAAUtagTCASHITEMSALE@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xran@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@GIG@std@@YAXPAGIABGAAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagTCASHITEMSALE@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagTCASHITEMSALE@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagTCASHITEMSALE@@IU1@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@YAXPAUtagTCASHITEMSALE@@IABU1@AAV?$allocator@UtagTCASHITEMSALE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagMONREGEN@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagMONREGEN@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagMONREGEN@@IU1@V?$allocator@UtagMONREGEN@@@std@@@std@@YAXPAUtagMONREGEN@@IABU1@AAV?$allocator@UtagMONREGEN@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagLOTTERY@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagLOTTERY@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagLOTTERY@@IU1@V?$allocator@UtagLOTTERY@@@std@@@std@@YAXPAUtagLOTTERY@@IABU1@AAV?$allocator@UtagLOTTERY@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@GV?$allocator@G@std@@@std@@YAXPAG0AAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAGPAGV?$allocator@G@std@@@std@@YAPAGPAG00AAV?$allocator@G@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAGPAG@std@@YAPAGPAG00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@YAXPAUtagTCASHITEMSALE@@0AAV?$allocator@UtagTCASHITEMSALE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAUtagTCASHITEMSALE@@PAU1@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@YAPAUtagTCASHITEMSALE@@PAU1@00AAV?$allocator@UtagTCASHITEMSALE@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUtagTCASHITEMSALE@@PAU1@@std@@YAPAUtagTCASHITEMSALE@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@YAXPAUtagMONREGEN@@0AAV?$allocator@UtagMONREGEN@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAUtagMONREGEN@@PAU1@V?$allocator@UtagMONREGEN@@@std@@@std@@YAPAUtagMONREGEN@@PAU1@00AAV?$allocator@UtagMONREGEN@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUtagMONREGEN@@PAU1@@std@@YAPAUtagMONREGEN@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@YAXPAUtagLOTTERY@@0AAV?$allocator@UtagLOTTERY@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAUtagLOTTERY@@PAU1@V?$allocator@UtagLOTTERY@@@std@@@std@@YAPAUtagLOTTERY@@PAU1@00AAV?$allocator@UtagLOTTERY@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUtagLOTTERY@@PAU1@@std@@YAPAUtagLOTTERY@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@UtagTCASHITEMSALE@@@std@@QAEXPAUtagTCASHITEMSALE@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagTCASHITEMSALE@@@std@@QAEXPAUtagTCASHITEMSALE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@UtagMONREGEN@@@std@@QAEXPAUtagMONREGEN@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagMONREGEN@@@std@@QAEXPAUtagMONREGEN@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@UtagLOTTERY@@@std@@QAEXPAUtagLOTTERY@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagLOTTERY@@@std@@QAEXPAUtagLOTTERY@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill_n@PAGIG@std@@YAXPAGIABG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@GG@std@@YAPAGPAG00AAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagTCASHITEMSALE@@PAU1@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@YAPAUtagTCASHITEMSALE@@PAU1@00AAV?$allocator@UtagTCASHITEMSALE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagMONREGEN@@PAU1@V?$allocator@UtagMONREGEN@@@std@@@std@@YAPAUtagMONREGEN@@PAU1@00AAV?$allocator@UtagMONREGEN@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagLOTTERY@@PAU1@V?$allocator@UtagLOTTERY@@@std@@@std@@YAPAUtagLOTTERY@@PAU1@00AAV?$allocator@UtagLOTTERY@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@UtagTCASHITEMSALE@@U1@@std@@YAXPAUtagTCASHITEMSALE@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagTCASHITEMSALE@@@std@@YAXPAUtagTCASHITEMSALE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@UtagMONREGEN@@U1@@std@@YAXPAUtagMONREGEN@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagMONREGEN@@@std@@YAXPAUtagMONREGEN@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@UtagLOTTERY@@U1@@std@@YAXPAUtagLOTTERY@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagLOTTERY@@@std@@YAXPAUtagLOTTERY@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@G@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAE@PAUtagTCASHITEMSALE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAE@PAUtagTCASHITEMSALE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QBEAAUtagTCASHITEMSALE@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QBEABUtagTCASHITEMSALE@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?WrapPacketIn@tagEVENTINFO@@QAEXPAVCPacket@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAEAAUtagTCASHITEMSALE@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@GV?$allocator@G@std@@@std@@QAEAAGI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$vector@GV?$allocator@G@std@@@std@@QBEAAGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@GV?$allocator@G@std@@@std@@QBEABGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@GV?$allocator@G@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@GV?$allocator@G@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@GV?$allocator@G@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@GV?$allocator@G@std@@@std@@QAE@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@GV?$allocator@G@std@@@std@@QAE@PAG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QAEAAUtagMONREGEN@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QBEAAUtagMONREGEN@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QBEABUtagMONREGEN@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QAE@PAUtagMONREGEN@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QAE@PAUtagMONREGEN@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QAEAAUtagLOTTERY@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QBEAAUtagLOTTERY@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QBEABUtagLOTTERY@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QAE@PAUtagLOTTERY@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QAE@PAUtagLOTTERY@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CTServer@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??0CTServer@@QAE@XZ				; CTServer::CTServer
PUBLIC	??_7CTServer@@6B@				; CTServer::`vftable'
PUBLIC	??_GCTServer@@UAEPAXI@Z				; CTServer::`scalar deleting destructor'
EXTRN	??0CTControlSession@@QAE@XZ:NEAR		; CTControlSession::CTControlSession
EXTRN	??_ECTServer@@UAEPAXI@Z:NEAR			; CTServer::`vector deleting destructor'
EXTRN	?Say@CSession@@UAEHPAVCPacket@@@Z:NEAR		; CSession::Say
EXTRN	?Open@CSession@@UAEHIAAVCPacket@@@Z:NEAR	; CSession::Open
EXTRN	?Close@CSession@@UAEXXZ:NEAR			; CSession::Close
;	COMDAT ??_7CTServer@@6B@
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tcontrolsvr\tserver.cpp
CONST	SEGMENT
??_7CTServer@@6B@ DD FLAT:?Say@CSession@@UAEHPAVCPacket@@@Z ; CTServer::`vftable'
	DD	FLAT:?Open@CSession@@UAEHIAAVCPacket@@@Z
	DD	FLAT:?Close@CSession@@UAEXXZ
	DD	FLAT:??_ECTServer@@UAEPAXI@Z
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0CTServer@@QAE@XZ
_TEXT	SEGMENT
??0CTServer@@QAE@XZ PROC NEAR				; CTServer::CTServer, COMDAT
; _this$ = ecx

; 5    : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??0CTControlSession@@QAE@XZ ; CTControlSession::CTControlSession

; 6    : 	m_dwID = 0;

  00008	33 c0		 xor	 eax, eax
  0000a	89 86 00 01 01
	00		 mov	 DWORD PTR [esi+65792], eax

; 7    : 	m_pSVRTEMP = NULL;	

  00010	89 86 04 01 01
	00		 mov	 DWORD PTR [esi+65796], eax

; 8    : 	m_dwRecvTick = 0;

  00016	89 86 08 01 01
	00		 mov	 DWORD PTR [esi+65800], eax

; 9    : 	m_dwSendTick = 0;

  0001c	89 86 0c 01 01
	00		 mov	 DWORD PTR [esi+65804], eax
  00022	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CTServer@@6B@

; 10   : }

  00028	8b c6		 mov	 eax, esi
  0002a	5e		 pop	 esi
  0002b	c3		 ret	 0
??0CTServer@@QAE@XZ ENDP				; CTServer::CTServer
_TEXT	ENDS
PUBLIC	??1CTServer@@UAE@XZ				; CTServer::~CTServer
EXTRN	??1CTControlSession@@UAE@XZ:NEAR		; CTControlSession::~CTControlSession
; Function compile flags: /Ogty
;	COMDAT ??1CTServer@@UAE@XZ
_TEXT	SEGMENT
??1CTServer@@UAE@XZ PROC NEAR				; CTServer::~CTServer, COMDAT
; _this$ = ecx

; 13   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CTServer@@6B@

; 14   : }

  00006	e9 00 00 00 00	 jmp	 ??1CTControlSession@@UAE@XZ ; CTControlSession::~CTControlSession
??1CTServer@@UAE@XZ ENDP				; CTServer::~CTServer
_TEXT	ENDS
PUBLIC	?SendCT_SERVICEMONITOR_ACK@CTServer@@QAEXK@Z	; CTServer::SendCT_SERVICEMONITOR_ACK
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
EXTRN	??0CPacket@@QAE@XZ:NEAR				; CPacket::CPacket
EXTRN	?SetID@CPacket@@QAEAAV1@G@Z:NEAR		; CPacket::SetID
EXTRN	??6CPacket@@QAEAAV0@K@Z:NEAR			; CPacket::operator<<
;	COMDAT xdata$x
xdata$x	SEGMENT
$T88173	DD	0ffffffffH
	DD	FLAT:$L88166
$T88170	DD	019930520H
	DD	01H
	DD	FLAT:$T88173
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ?SendCT_SERVICEMONITOR_ACK@CTServer@@QAEXK@Z
_TEXT	SEGMENT
$T88163 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_dwTick$ = 8						; size = 4
?SendCT_SERVICEMONITOR_ACK@CTServer@@QAEXK@Z PROC NEAR	; CTServer::SendCT_SERVICEMONITOR_ACK, COMDAT
; _this$ = ecx

; 17   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendCT_SERVICEMONITOR_ACK@CTServer@@QAEXK@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi

; 18   : 	CPacket * pMsg = new CPacket();

  00018	6a 1c		 push	 28			; 0000001cH
  0001a	8b f9		 mov	 edi, ecx
  0001c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00021	83 c4 04	 add	 esp, 4
  00024	89 44 24 08	 mov	 DWORD PTR $T88163[esp+24], eax
  00028	33 f6		 xor	 esi, esi
  0002a	3b c6		 cmp	 eax, esi
  0002c	89 74 24 14	 mov	 DWORD PTR __$EHRec$[esp+32], esi
  00030	74 09		 je	 SHORT $L88165
  00032	8b c8		 mov	 ecx, eax
  00034	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  00039	8b f0		 mov	 esi, eax
$L88165:

; 19   : 	pMsg->SetID(CT_SERVICEMONITOR_ACK)
; 20   : 		<< dwTick;

  0003b	8b 44 24 1c	 mov	 eax, DWORD PTR _dwTick$[esp+20]
  0003f	50		 push	 eax
  00040	68 1e 60 00 00	 push	 24606			; 0000601eH
  00045	8b ce		 mov	 ecx, esi
  00047	c7 44 24 1c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+40], -1
  0004f	e8 00 00 00 00	 call	 ?SetID@CPacket@@QAEAAV1@G@Z ; CPacket::SetID
  00054	8b c8		 mov	 ecx, eax
  00056	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<

; 21   : 
; 22   : 	Say(pMsg);

  0005b	8b 17		 mov	 edx, DWORD PTR [edi]
  0005d	56		 push	 esi
  0005e	8b cf		 mov	 ecx, edi
  00060	ff 12		 call	 DWORD PTR [edx]

; 23   : }

  00062	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0006f	83 c4 10	 add	 esp, 16			; 00000010H
  00072	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L88166:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T88163[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?SendCT_SERVICEMONITOR_ACK@CTServer@@QAEXK@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T88170
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendCT_SERVICEMONITOR_ACK@CTServer@@QAEXK@Z ENDP	; CTServer::SendCT_SERVICEMONITOR_ACK
PUBLIC	?SendCT_MONSPAWNFIND_ACK@CTServer@@QAEXKEGG@Z	; CTServer::SendCT_MONSPAWNFIND_ACK
EXTRN	??6CPacket@@QAEAAV0@G@Z:NEAR			; CPacket::operator<<
EXTRN	??6CPacket@@QAEAAV0@E@Z:NEAR			; CPacket::operator<<
;	COMDAT xdata$x
xdata$x	SEGMENT
$T88188	DD	0ffffffffH
	DD	FLAT:$L88184
$T88186	DD	019930520H
	DD	01H
	DD	FLAT:$T88188
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ?SendCT_MONSPAWNFIND_ACK@CTServer@@QAEXKEGG@Z
_TEXT	SEGMENT
$T88181 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_dwManager$ = 8						; size = 4
_bChannel$ = 12						; size = 1
_wMapID$ = 16						; size = 2
_wSpawnID$ = 20						; size = 2
?SendCT_MONSPAWNFIND_ACK@CTServer@@QAEXKEGG@Z PROC NEAR	; CTServer::SendCT_MONSPAWNFIND_ACK, COMDAT
; _this$ = ecx

; 70   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendCT_MONSPAWNFIND_ACK@CTServer@@QAEXKEGG@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi

; 71   : 	CPacket * pMsg = new CPacket();

  00018	6a 1c		 push	 28			; 0000001cH
  0001a	8b f9		 mov	 edi, ecx
  0001c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00021	83 c4 04	 add	 esp, 4
  00024	89 44 24 08	 mov	 DWORD PTR $T88181[esp+24], eax
  00028	33 f6		 xor	 esi, esi
  0002a	3b c6		 cmp	 eax, esi
  0002c	89 74 24 14	 mov	 DWORD PTR __$EHRec$[esp+32], esi
  00030	74 09		 je	 SHORT $L88183
  00032	8b c8		 mov	 ecx, eax
  00034	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  00039	8b f0		 mov	 esi, eax
$L88183:

; 72   : 	pMsg->SetID(CT_MONSPAWNFIND_ACK)
; 73   : 		<< dwManager
; 74   : 		<< bChannel
; 75   : 		<< wMapID
; 76   : 		<< wSpawnID;

  0003b	8b 44 24 28	 mov	 eax, DWORD PTR _wSpawnID$[esp+20]
  0003f	8b 4c 24 24	 mov	 ecx, DWORD PTR _wMapID$[esp+20]
  00043	8b 54 24 20	 mov	 edx, DWORD PTR _bChannel$[esp+20]
  00047	50		 push	 eax
  00048	8b 44 24 20	 mov	 eax, DWORD PTR _dwManager$[esp+24]
  0004c	51		 push	 ecx
  0004d	52		 push	 edx
  0004e	50		 push	 eax
  0004f	68 37 60 00 00	 push	 24631			; 00006037H
  00054	8b ce		 mov	 ecx, esi
  00056	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+52], -1
  0005e	e8 00 00 00 00	 call	 ?SetID@CPacket@@QAEAAV1@G@Z ; CPacket::SetID
  00063	8b c8		 mov	 ecx, eax
  00065	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<
  0006a	8b c8		 mov	 ecx, eax
  0006c	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  00071	8b c8		 mov	 ecx, eax
  00073	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<
  00078	8b c8		 mov	 ecx, eax
  0007a	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<

; 77   : 
; 78   : 	Say(pMsg);

  0007f	8b 17		 mov	 edx, DWORD PTR [edi]
  00081	56		 push	 esi
  00082	8b cf		 mov	 ecx, edi
  00084	ff 12		 call	 DWORD PTR [edx]

; 79   : }

  00086	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0008a	5f		 pop	 edi
  0008b	5e		 pop	 esi
  0008c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00093	83 c4 10	 add	 esp, 16			; 00000010H
  00096	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L88184:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T88181[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?SendCT_MONSPAWNFIND_ACK@CTServer@@QAEXKEGG@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T88186
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendCT_MONSPAWNFIND_ACK@CTServer@@QAEXKEGG@Z ENDP	; CTServer::SendCT_MONSPAWNFIND_ACK
PUBLIC	?SendCT_MONACTION_ACK@CTServer@@QAEXEGKEKKKEG@Z	; CTServer::SendCT_MONACTION_ACK
;	COMDAT xdata$x
xdata$x	SEGMENT
$T88202	DD	0ffffffffH
	DD	FLAT:$L88198
$T88200	DD	019930520H
	DD	01H
	DD	FLAT:$T88202
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ?SendCT_MONACTION_ACK@CTServer@@QAEXEGKEKKKEG@Z
_TEXT	SEGMENT
$T88195 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_bChannel$ = 8						; size = 1
_wMapID$ = 12						; size = 2
_dwMonID$ = 16						; size = 4
_bAction$ = 20						; size = 1
_dwTriggerID$ = 24					; size = 4
_dwHostID$ = 28						; size = 4
_dwRHID$ = 32						; size = 4
_bRHType$ = 36						; size = 1
_wSpawnID$ = 40						; size = 2
?SendCT_MONACTION_ACK@CTServer@@QAEXEGKEKKKEG@Z PROC NEAR ; CTServer::SendCT_MONACTION_ACK, COMDAT
; _this$ = ecx

; 82   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendCT_MONACTION_ACK@CTServer@@QAEXEGKEKKKEG@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi

; 83   : 	CPacket * pMsg = new CPacket();

  00018	6a 1c		 push	 28			; 0000001cH
  0001a	8b f9		 mov	 edi, ecx
  0001c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00021	83 c4 04	 add	 esp, 4
  00024	89 44 24 08	 mov	 DWORD PTR $T88195[esp+24], eax
  00028	33 f6		 xor	 esi, esi
  0002a	3b c6		 cmp	 eax, esi
  0002c	89 74 24 14	 mov	 DWORD PTR __$EHRec$[esp+32], esi
  00030	74 09		 je	 SHORT $L88197
  00032	8b c8		 mov	 ecx, eax
  00034	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  00039	8b f0		 mov	 esi, eax
$L88197:

; 84   : 	pMsg->SetID(CT_MONACTION_ACK)
; 85   : 		<< bChannel
; 86   : 		<< wMapID
; 87   : 		<< dwMonID
; 88   : 		<< bAction
; 89   : 		<< dwTriggerID
; 90   : 		<< dwHostID
; 91   : 		<< dwRHID
; 92   : 		<< bRHType
; 93   : 		<< wSpawnID;

  0003b	8b 44 24 3c	 mov	 eax, DWORD PTR _wSpawnID$[esp+20]
  0003f	8b 4c 24 38	 mov	 ecx, DWORD PTR _bRHType$[esp+20]
  00043	8b 54 24 34	 mov	 edx, DWORD PTR _dwRHID$[esp+20]
  00047	50		 push	 eax
  00048	8b 44 24 34	 mov	 eax, DWORD PTR _dwHostID$[esp+24]
  0004c	51		 push	 ecx
  0004d	8b 4c 24 34	 mov	 ecx, DWORD PTR _dwTriggerID$[esp+28]
  00051	52		 push	 edx
  00052	8b 54 24 34	 mov	 edx, DWORD PTR _bAction$[esp+32]
  00056	50		 push	 eax
  00057	8b 44 24 34	 mov	 eax, DWORD PTR _dwMonID$[esp+36]
  0005b	51		 push	 ecx
  0005c	8b 4c 24 34	 mov	 ecx, DWORD PTR _wMapID$[esp+40]
  00060	52		 push	 edx
  00061	8b 54 24 34	 mov	 edx, DWORD PTR _bChannel$[esp+44]
  00065	50		 push	 eax
  00066	51		 push	 ecx
  00067	52		 push	 edx
  00068	68 39 60 00 00	 push	 24633			; 00006039H
  0006d	8b ce		 mov	 ecx, esi
  0006f	c7 44 24 3c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+72], -1
  00077	e8 00 00 00 00	 call	 ?SetID@CPacket@@QAEAAV1@G@Z ; CPacket::SetID
  0007c	8b c8		 mov	 ecx, eax
  0007e	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  00083	8b c8		 mov	 ecx, eax
  00085	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<
  0008a	8b c8		 mov	 ecx, eax
  0008c	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<
  00091	8b c8		 mov	 ecx, eax
  00093	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  00098	8b c8		 mov	 ecx, eax
  0009a	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<
  0009f	8b c8		 mov	 ecx, eax
  000a1	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<
  000a6	8b c8		 mov	 ecx, eax
  000a8	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<
  000ad	8b c8		 mov	 ecx, eax
  000af	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  000b4	8b c8		 mov	 ecx, eax
  000b6	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<

; 94   : 
; 95   : 	Say(pMsg);

  000bb	8b 07		 mov	 eax, DWORD PTR [edi]
  000bd	56		 push	 esi
  000be	8b cf		 mov	 ecx, edi
  000c0	ff 10		 call	 DWORD PTR [eax]

; 96   : }

  000c2	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  000c6	5f		 pop	 edi
  000c7	5e		 pop	 esi
  000c8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000cf	83 c4 10	 add	 esp, 16			; 00000010H
  000d2	c2 24 00	 ret	 36			; 00000024H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L88198:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T88195[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?SendCT_MONACTION_ACK@CTServer@@QAEXEGKEKKKEG@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T88200
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendCT_MONACTION_ACK@CTServer@@QAEXEGKEKKKEG@Z ENDP	; CTServer::SendCT_MONACTION_ACK
PUBLIC	?SendCT_SERVICEDATACLEAR_ACK@CTServer@@QAEXXZ	; CTServer::SendCT_SERVICEDATACLEAR_ACK
;	COMDAT xdata$x
xdata$x	SEGMENT
$T88216	DD	0ffffffffH
	DD	FLAT:$L88212
$T88214	DD	019930520H
	DD	01H
	DD	FLAT:$T88216
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ?SendCT_SERVICEDATACLEAR_ACK@CTServer@@QAEXXZ
_TEXT	SEGMENT
$T88209 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?SendCT_SERVICEDATACLEAR_ACK@CTServer@@QAEXXZ PROC NEAR	; CTServer::SendCT_SERVICEDATACLEAR_ACK, COMDAT
; _this$ = ecx

; 122  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendCT_SERVICEDATACLEAR_ACK@CTServer@@QAEXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi

; 123  : 	CPacket* pMsg = new CPacket();

  00018	6a 1c		 push	 28			; 0000001cH
  0001a	8b f9		 mov	 edi, ecx
  0001c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00021	83 c4 04	 add	 esp, 4
  00024	89 44 24 08	 mov	 DWORD PTR $T88209[esp+24], eax
  00028	33 f6		 xor	 esi, esi
  0002a	3b c6		 cmp	 eax, esi
  0002c	89 74 24 14	 mov	 DWORD PTR __$EHRec$[esp+32], esi
  00030	74 09		 je	 SHORT $L88211
  00032	8b c8		 mov	 ecx, eax
  00034	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  00039	8b f0		 mov	 esi, eax
$L88211:

; 124  : 	pMsg->SetID(CT_SERVICEDATACLEAR_ACK);		

  0003b	68 4f 60 00 00	 push	 24655			; 0000604fH
  00040	8b ce		 mov	 ecx, esi
  00042	c7 44 24 18 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+36], -1
  0004a	e8 00 00 00 00	 call	 ?SetID@CPacket@@QAEAAV1@G@Z ; CPacket::SetID

; 125  : 
; 126  : 	Say(pMsg);

  0004f	8b 07		 mov	 eax, DWORD PTR [edi]
  00051	56		 push	 esi
  00052	8b cf		 mov	 ecx, edi
  00054	ff 10		 call	 DWORD PTR [eax]

; 127  : }

  00056	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00063	83 c4 10	 add	 esp, 16			; 00000010H
  00066	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L88212:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T88209[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?SendCT_SERVICEDATACLEAR_ACK@CTServer@@QAEXXZ:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T88214
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendCT_SERVICEDATACLEAR_ACK@CTServer@@QAEXXZ ENDP	; CTServer::SendCT_SERVICEDATACLEAR_ACK
PUBLIC	?SendCT_ITEMSTATE_REQ@CTServer@@QAEXPAVCPacket@@@Z ; CTServer::SendCT_ITEMSTATE_REQ
EXTRN	?Copy@CPacket@@QAEXPAV1@@Z:NEAR			; CPacket::Copy
;	COMDAT xdata$x
xdata$x	SEGMENT
$T88230	DD	0ffffffffH
	DD	FLAT:$L88226
$T88228	DD	019930520H
	DD	01H
	DD	FLAT:$T88230
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ?SendCT_ITEMSTATE_REQ@CTServer@@QAEXPAVCPacket@@@Z
_TEXT	SEGMENT
$T88223 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pPacket$ = 8						; size = 4
?SendCT_ITEMSTATE_REQ@CTServer@@QAEXPAVCPacket@@@Z PROC NEAR ; CTServer::SendCT_ITEMSTATE_REQ, COMDAT
; _this$ = ecx

; 141  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendCT_ITEMSTATE_REQ@CTServer@@QAEXPAVCPacket@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi

; 142  : 	CPacket* pMsg = new CPacket();

  00018	6a 1c		 push	 28			; 0000001cH
  0001a	8b f9		 mov	 edi, ecx
  0001c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00021	83 c4 04	 add	 esp, 4
  00024	89 44 24 08	 mov	 DWORD PTR $T88223[esp+24], eax
  00028	33 f6		 xor	 esi, esi
  0002a	3b c6		 cmp	 eax, esi
  0002c	89 74 24 14	 mov	 DWORD PTR __$EHRec$[esp+32], esi
  00030	74 09		 je	 SHORT $L88225
  00032	8b c8		 mov	 ecx, eax
  00034	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  00039	8b f0		 mov	 esi, eax
$L88225:

; 143  : 	pMsg->Copy(pPacket);

  0003b	8b 44 24 1c	 mov	 eax, DWORD PTR _pPacket$[esp+20]
  0003f	50		 push	 eax
  00040	8b ce		 mov	 ecx, esi
  00042	c7 44 24 18 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+36], -1
  0004a	e8 00 00 00 00	 call	 ?Copy@CPacket@@QAEXPAV1@@Z ; CPacket::Copy

; 144  : 
; 145  : 	Say(pMsg);

  0004f	8b 17		 mov	 edx, DWORD PTR [edi]
  00051	56		 push	 esi
  00052	8b cf		 mov	 ecx, edi
  00054	ff 12		 call	 DWORD PTR [edx]

; 146  : }

  00056	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00063	83 c4 10	 add	 esp, 16			; 00000010H
  00066	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L88226:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T88223[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?SendCT_ITEMSTATE_REQ@CTServer@@QAEXPAVCPacket@@@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T88228
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendCT_ITEMSTATE_REQ@CTServer@@QAEXPAVCPacket@@@Z ENDP	; CTServer::SendCT_ITEMSTATE_REQ
PUBLIC	?SendCT_CTRLSVR_REQ@CTServer@@QAEXXZ		; CTServer::SendCT_CTRLSVR_REQ
;	COMDAT xdata$x
xdata$x	SEGMENT
$T88244	DD	0ffffffffH
	DD	FLAT:$L88240
$T88242	DD	019930520H
	DD	01H
	DD	FLAT:$T88244
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ?SendCT_CTRLSVR_REQ@CTServer@@QAEXXZ
_TEXT	SEGMENT
$T88237 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?SendCT_CTRLSVR_REQ@CTServer@@QAEXXZ PROC NEAR		; CTServer::SendCT_CTRLSVR_REQ, COMDAT
; _this$ = ecx

; 149  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendCT_CTRLSVR_REQ@CTServer@@QAEXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi

; 150  : 	CPacket* pMsg = new CPacket();

  00018	6a 1c		 push	 28			; 0000001cH
  0001a	8b f9		 mov	 edi, ecx
  0001c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00021	83 c4 04	 add	 esp, 4
  00024	89 44 24 08	 mov	 DWORD PTR $T88237[esp+24], eax
  00028	33 f6		 xor	 esi, esi
  0002a	3b c6		 cmp	 eax, esi
  0002c	89 74 24 14	 mov	 DWORD PTR __$EHRec$[esp+32], esi
  00030	74 09		 je	 SHORT $L88239
  00032	8b c8		 mov	 ecx, eax
  00034	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  00039	8b f0		 mov	 esi, eax
$L88239:

; 151  : 	pMsg->SetID(CT_CTRLSVR_REQ);

  0003b	68 58 60 00 00	 push	 24664			; 00006058H
  00040	8b ce		 mov	 ecx, esi
  00042	c7 44 24 18 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+36], -1
  0004a	e8 00 00 00 00	 call	 ?SetID@CPacket@@QAEAAV1@G@Z ; CPacket::SetID

; 152  : 		
; 153  : 	Say(pMsg);

  0004f	8b 07		 mov	 eax, DWORD PTR [edi]
  00051	56		 push	 esi
  00052	8b cf		 mov	 ecx, edi
  00054	ff 10		 call	 DWORD PTR [eax]

; 154  : }

  00056	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00063	83 c4 10	 add	 esp, 16			; 00000010H
  00066	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L88240:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T88237[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?SendCT_CTRLSVR_REQ@CTServer@@QAEXXZ:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T88242
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendCT_CTRLSVR_REQ@CTServer@@QAEXXZ ENDP		; CTServer::SendCT_CTRLSVR_REQ
PUBLIC	?SendCT_CASTLEINFO_REQ@CTServer@@QAEXK@Z	; CTServer::SendCT_CASTLEINFO_REQ
;	COMDAT xdata$x
xdata$x	SEGMENT
$T88258	DD	0ffffffffH
	DD	FLAT:$L88254
$T88256	DD	019930520H
	DD	01H
	DD	FLAT:$T88258
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ?SendCT_CASTLEINFO_REQ@CTServer@@QAEXK@Z
_TEXT	SEGMENT
$T88251 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_dwManagerID$ = 8					; size = 4
?SendCT_CASTLEINFO_REQ@CTServer@@QAEXK@Z PROC NEAR	; CTServer::SendCT_CASTLEINFO_REQ, COMDAT
; _this$ = ecx

; 157  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendCT_CASTLEINFO_REQ@CTServer@@QAEXK@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi

; 158  : 	CPacket* pMsg = new CPacket();

  00018	6a 1c		 push	 28			; 0000001cH
  0001a	8b f9		 mov	 edi, ecx
  0001c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00021	83 c4 04	 add	 esp, 4
  00024	89 44 24 08	 mov	 DWORD PTR $T88251[esp+24], eax
  00028	33 f6		 xor	 esi, esi
  0002a	3b c6		 cmp	 eax, esi
  0002c	89 74 24 14	 mov	 DWORD PTR __$EHRec$[esp+32], esi
  00030	74 09		 je	 SHORT $L88253
  00032	8b c8		 mov	 ecx, eax
  00034	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  00039	8b f0		 mov	 esi, eax
$L88253:

; 159  : 	pMsg->SetID(CT_CASTLEINFO_REQ)
; 160  : 		<< dwManagerID;

  0003b	8b 44 24 1c	 mov	 eax, DWORD PTR _dwManagerID$[esp+20]
  0003f	50		 push	 eax
  00040	68 59 60 00 00	 push	 24665			; 00006059H
  00045	8b ce		 mov	 ecx, esi
  00047	c7 44 24 1c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+40], -1
  0004f	e8 00 00 00 00	 call	 ?SetID@CPacket@@QAEAAV1@G@Z ; CPacket::SetID
  00054	8b c8		 mov	 ecx, eax
  00056	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<

; 161  : 
; 162  : 	Say(pMsg);

  0005b	8b 17		 mov	 edx, DWORD PTR [edi]
  0005d	56		 push	 esi
  0005e	8b cf		 mov	 ecx, edi
  00060	ff 12		 call	 DWORD PTR [edx]

; 163  : }

  00062	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0006f	83 c4 10	 add	 esp, 16			; 00000010H
  00072	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L88254:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T88251[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?SendCT_CASTLEINFO_REQ@CTServer@@QAEXK@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T88256
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendCT_CASTLEINFO_REQ@CTServer@@QAEXK@Z ENDP		; CTServer::SendCT_CASTLEINFO_REQ
PUBLIC	?SendCT_CASTLEGUILDCHG_REQ@CTServer@@QAEXGKKK_J@Z ; CTServer::SendCT_CASTLEGUILDCHG_REQ
EXTRN	??6CPacket@@QAEAAV0@_J@Z:NEAR			; CPacket::operator<<
;	COMDAT xdata$x
xdata$x	SEGMENT
$T88272	DD	0ffffffffH
	DD	FLAT:$L88268
$T88270	DD	019930520H
	DD	01H
	DD	FLAT:$T88272
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ?SendCT_CASTLEGUILDCHG_REQ@CTServer@@QAEXGKKK_J@Z
_TEXT	SEGMENT
$T88265 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_wCastleID$ = 8						; size = 2
_dwDefGuildID$ = 12					; size = 4
_dwAtkGuildID$ = 16					; size = 4
_dwManagerID$ = 20					; size = 4
_tTime$ = 24						; size = 8
?SendCT_CASTLEGUILDCHG_REQ@CTServer@@QAEXGKKK_J@Z PROC NEAR ; CTServer::SendCT_CASTLEGUILDCHG_REQ, COMDAT
; _this$ = ecx

; 166  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendCT_CASTLEGUILDCHG_REQ@CTServer@@QAEXGKKK_J@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi

; 167  : 	CPacket* pMsg = new CPacket();

  00018	6a 1c		 push	 28			; 0000001cH
  0001a	8b f9		 mov	 edi, ecx
  0001c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00021	83 c4 04	 add	 esp, 4
  00024	89 44 24 08	 mov	 DWORD PTR $T88265[esp+24], eax
  00028	33 f6		 xor	 esi, esi
  0002a	3b c6		 cmp	 eax, esi
  0002c	89 74 24 14	 mov	 DWORD PTR __$EHRec$[esp+32], esi
  00030	74 09		 je	 SHORT $L88267
  00032	8b c8		 mov	 ecx, eax
  00034	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  00039	8b f0		 mov	 esi, eax
$L88267:

; 168  : 	pMsg->SetID(CT_CASTLEGUILDCHG_REQ)
; 169  : 		<< wCastleID
; 170  : 		<< dwDefGuildID
; 171  : 		<< dwAtkGuildID
; 172  : 		<< dwManagerID
; 173  : 		<< tTime;

  0003b	8b 44 24 30	 mov	 eax, DWORD PTR _tTime$[esp+24]
  0003f	8b 4c 24 2c	 mov	 ecx, DWORD PTR _tTime$[esp+20]
  00043	8b 54 24 28	 mov	 edx, DWORD PTR _dwManagerID$[esp+20]
  00047	50		 push	 eax
  00048	8b 44 24 28	 mov	 eax, DWORD PTR _dwAtkGuildID$[esp+24]
  0004c	51		 push	 ecx
  0004d	8b 4c 24 28	 mov	 ecx, DWORD PTR _dwDefGuildID$[esp+28]
  00051	52		 push	 edx
  00052	8b 54 24 28	 mov	 edx, DWORD PTR _wCastleID$[esp+32]
  00056	50		 push	 eax
  00057	51		 push	 ecx
  00058	52		 push	 edx
  00059	68 5b 60 00 00	 push	 24667			; 0000605bH
  0005e	8b ce		 mov	 ecx, esi
  00060	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+60], -1
  00068	e8 00 00 00 00	 call	 ?SetID@CPacket@@QAEAAV1@G@Z ; CPacket::SetID
  0006d	8b c8		 mov	 ecx, eax
  0006f	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<
  00074	8b c8		 mov	 ecx, eax
  00076	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<
  0007b	8b c8		 mov	 ecx, eax
  0007d	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<
  00082	8b c8		 mov	 ecx, eax
  00084	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<
  00089	8b c8		 mov	 ecx, eax
  0008b	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@_J@Z ; CPacket::operator<<

; 174  : 
; 175  : 	Say(pMsg);

  00090	8b 07		 mov	 eax, DWORD PTR [edi]
  00092	56		 push	 esi
  00093	8b cf		 mov	 ecx, edi
  00095	ff 10		 call	 DWORD PTR [eax]

; 176  : }

  00097	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000a4	83 c4 10	 add	 esp, 16			; 00000010H
  000a7	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L88268:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T88265[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?SendCT_CASTLEGUILDCHG_REQ@CTServer@@QAEXGKKK_J@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T88270
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendCT_CASTLEGUILDCHG_REQ@CTServer@@QAEXGKKK_J@Z ENDP	; CTServer::SendCT_CASTLEGUILDCHG_REQ
PUBLIC	?SendCT_CASTLEENABLE_REQ@CTServer@@QAEXEEK@Z	; CTServer::SendCT_CASTLEENABLE_REQ
;	COMDAT xdata$x
xdata$x	SEGMENT
$T88286	DD	0ffffffffH
	DD	FLAT:$L88282
$T88284	DD	019930520H
	DD	01H
	DD	FLAT:$T88286
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ?SendCT_CASTLEENABLE_REQ@CTServer@@QAEXEEK@Z
_TEXT	SEGMENT
$T88279 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_bType$ = 8						; size = 1
_bStatus$ = 12						; size = 1
_dwSecond$ = 16						; size = 4
?SendCT_CASTLEENABLE_REQ@CTServer@@QAEXEEK@Z PROC NEAR	; CTServer::SendCT_CASTLEENABLE_REQ, COMDAT
; _this$ = ecx

; 179  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendCT_CASTLEENABLE_REQ@CTServer@@QAEXEEK@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi

; 180  : 	CPacket* pMsg = new CPacket();	

  00018	6a 1c		 push	 28			; 0000001cH
  0001a	8b f9		 mov	 edi, ecx
  0001c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00021	83 c4 04	 add	 esp, 4
  00024	89 44 24 08	 mov	 DWORD PTR $T88279[esp+24], eax
  00028	85 c0		 test	 eax, eax
  0002a	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00032	74 0b		 je	 SHORT $L88280
  00034	8b c8		 mov	 ecx, eax
  00036	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  0003b	8b f0		 mov	 esi, eax
  0003d	eb 02		 jmp	 SHORT $L88281
$L88280:
  0003f	33 f6		 xor	 esi, esi
$L88281:

; 181  : 	pMsg->SetID(SM_BATTLESTATUS_REQ)
; 182  : 		<< bType
; 183  : 		<< bStatus
; 184  : 		<< (DWORD) 0
; 185  : 		<< dwSecond;

  00041	8b 44 24 24	 mov	 eax, DWORD PTR _dwSecond$[esp+20]
  00045	8b 4c 24 20	 mov	 ecx, DWORD PTR _bStatus$[esp+20]
  00049	8b 54 24 1c	 mov	 edx, DWORD PTR _bType$[esp+20]
  0004d	50		 push	 eax
  0004e	6a 00		 push	 0
  00050	51		 push	 ecx
  00051	52		 push	 edx
  00052	68 1c 10 00 00	 push	 4124			; 0000101cH
  00057	8b ce		 mov	 ecx, esi
  00059	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+52], -1
  00061	e8 00 00 00 00	 call	 ?SetID@CPacket@@QAEAAV1@G@Z ; CPacket::SetID
  00066	8b c8		 mov	 ecx, eax
  00068	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  0006d	8b c8		 mov	 ecx, eax
  0006f	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  00074	8b c8		 mov	 ecx, eax
  00076	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<
  0007b	8b c8		 mov	 ecx, eax
  0007d	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<

; 186  : 
; 187  : 	Say(pMsg);

  00082	8b 07		 mov	 eax, DWORD PTR [edi]
  00084	56		 push	 esi
  00085	8b cf		 mov	 ecx, edi
  00087	ff 10		 call	 DWORD PTR [eax]

; 188  : }

  00089	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00096	83 c4 10	 add	 esp, 16			; 00000010H
  00099	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L88282:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T88279[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?SendCT_CASTLEENABLE_REQ@CTServer@@QAEXEEK@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T88284
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendCT_CASTLEENABLE_REQ@CTServer@@QAEXEEK@Z ENDP	; CTServer::SendCT_CASTLEENABLE_REQ
PUBLIC	?SendCT_CASHSHOPSTOP_REQ@CTServer@@QAEXE@Z	; CTServer::SendCT_CASHSHOPSTOP_REQ
;	COMDAT xdata$x
xdata$x	SEGMENT
$T88300	DD	0ffffffffH
	DD	FLAT:$L88296
$T88298	DD	019930520H
	DD	01H
	DD	FLAT:$T88300
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ?SendCT_CASHSHOPSTOP_REQ@CTServer@@QAEXE@Z
_TEXT	SEGMENT
$T88293 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_bType$ = 8						; size = 1
?SendCT_CASHSHOPSTOP_REQ@CTServer@@QAEXE@Z PROC NEAR	; CTServer::SendCT_CASHSHOPSTOP_REQ, COMDAT
; _this$ = ecx

; 214  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendCT_CASHSHOPSTOP_REQ@CTServer@@QAEXE@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi

; 215  : 	CPacket* pMsg = new CPacket();

  00018	6a 1c		 push	 28			; 0000001cH
  0001a	8b f9		 mov	 edi, ecx
  0001c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00021	83 c4 04	 add	 esp, 4
  00024	89 44 24 08	 mov	 DWORD PTR $T88293[esp+24], eax
  00028	33 f6		 xor	 esi, esi
  0002a	3b c6		 cmp	 eax, esi
  0002c	89 74 24 14	 mov	 DWORD PTR __$EHRec$[esp+32], esi
  00030	74 09		 je	 SHORT $L88295
  00032	8b c8		 mov	 ecx, eax
  00034	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  00039	8b f0		 mov	 esi, eax
$L88295:

; 216  : 	pMsg->SetID(CT_CASHSHOPSTOP_REQ)
; 217  : 		<< bType;

  0003b	8b 44 24 1c	 mov	 eax, DWORD PTR _bType$[esp+20]
  0003f	50		 push	 eax
  00040	68 68 60 00 00	 push	 24680			; 00006068H
  00045	8b ce		 mov	 ecx, esi
  00047	c7 44 24 1c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+40], -1
  0004f	e8 00 00 00 00	 call	 ?SetID@CPacket@@QAEAAV1@G@Z ; CPacket::SetID
  00054	8b c8		 mov	 ecx, eax
  00056	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<

; 218  : 
; 219  : 	Say(pMsg);		

  0005b	8b 17		 mov	 edx, DWORD PTR [edi]
  0005d	56		 push	 esi
  0005e	8b cf		 mov	 ecx, edi
  00060	ff 12		 call	 DWORD PTR [edx]

; 220  : }

  00062	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0006f	83 c4 10	 add	 esp, 16			; 00000010H
  00072	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L88296:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T88293[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?SendCT_CASHSHOPSTOP_REQ@CTServer@@QAEXE@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T88298
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendCT_CASHSHOPSTOP_REQ@CTServer@@QAEXE@Z ENDP		; CTServer::SendCT_CASHSHOPSTOP_REQ
PUBLIC	?SendCT_EVENTQUARTERLIST_REQ@CTServer@@QAEXPAVCPacket@@@Z ; CTServer::SendCT_EVENTQUARTERLIST_REQ
EXTRN	?CopyData@CPacket@@QAEXPAV1@G@Z:NEAR		; CPacket::CopyData
;	COMDAT xdata$x
xdata$x	SEGMENT
$T88314	DD	0ffffffffH
	DD	FLAT:$L88310
$T88312	DD	019930520H
	DD	01H
	DD	FLAT:$T88314
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ?SendCT_EVENTQUARTERLIST_REQ@CTServer@@QAEXPAVCPacket@@@Z
_TEXT	SEGMENT
$T88307 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pPacket$ = 8						; size = 4
?SendCT_EVENTQUARTERLIST_REQ@CTServer@@QAEXPAVCPacket@@@Z PROC NEAR ; CTServer::SendCT_EVENTQUARTERLIST_REQ, COMDAT
; _this$ = ecx

; 241  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendCT_EVENTQUARTERLIST_REQ@CTServer@@QAEXPAVCPacket@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi

; 242  : 	CPacket* pMsg = new CPacket();

  00018	6a 1c		 push	 28			; 0000001cH
  0001a	8b f9		 mov	 edi, ecx
  0001c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00021	83 c4 04	 add	 esp, 4
  00024	89 44 24 08	 mov	 DWORD PTR $T88307[esp+24], eax
  00028	33 f6		 xor	 esi, esi
  0002a	3b c6		 cmp	 eax, esi
  0002c	89 74 24 14	 mov	 DWORD PTR __$EHRec$[esp+32], esi
  00030	74 09		 je	 SHORT $L88309
  00032	8b c8		 mov	 ecx, eax
  00034	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  00039	8b f0		 mov	 esi, eax
$L88309:

; 243  : 	pMsg->CopyData(pPacket, sizeof(BYTE));

  0003b	8b 44 24 1c	 mov	 eax, DWORD PTR _pPacket$[esp+20]
  0003f	6a 01		 push	 1
  00041	50		 push	 eax
  00042	8b ce		 mov	 ecx, esi
  00044	c7 44 24 1c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+40], -1
  0004c	e8 00 00 00 00	 call	 ?CopyData@CPacket@@QAEXPAV1@G@Z ; CPacket::CopyData

; 244  : 	pMsg->SetID(CT_EVENTQUARTERLIST_REQ);		

  00051	68 6f 60 00 00	 push	 24687			; 0000606fH
  00056	8b ce		 mov	 ecx, esi
  00058	e8 00 00 00 00	 call	 ?SetID@CPacket@@QAEAAV1@G@Z ; CPacket::SetID

; 245  : 
; 246  : 	Say(pMsg);

  0005d	8b 17		 mov	 edx, DWORD PTR [edi]
  0005f	56		 push	 esi
  00060	8b cf		 mov	 ecx, edi
  00062	ff 12		 call	 DWORD PTR [edx]

; 247  : }

  00064	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L88310:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T88307[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?SendCT_EVENTQUARTERLIST_REQ@CTServer@@QAEXPAVCPacket@@@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T88312
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendCT_EVENTQUARTERLIST_REQ@CTServer@@QAEXPAVCPacket@@@Z ENDP ; CTServer::SendCT_EVENTQUARTERLIST_REQ
PUBLIC	?SendCT_EVENTQUARTERUPDATE_REQ@CTServer@@QAEXPAVCPacket@@@Z ; CTServer::SendCT_EVENTQUARTERUPDATE_REQ
;	COMDAT xdata$x
xdata$x	SEGMENT
$T88328	DD	0ffffffffH
	DD	FLAT:$L88324
$T88326	DD	019930520H
	DD	01H
	DD	FLAT:$T88328
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ?SendCT_EVENTQUARTERUPDATE_REQ@CTServer@@QAEXPAVCPacket@@@Z
_TEXT	SEGMENT
$T88321 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pPacket$ = 8						; size = 4
?SendCT_EVENTQUARTERUPDATE_REQ@CTServer@@QAEXPAVCPacket@@@Z PROC NEAR ; CTServer::SendCT_EVENTQUARTERUPDATE_REQ, COMDAT
; _this$ = ecx

; 250  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendCT_EVENTQUARTERUPDATE_REQ@CTServer@@QAEXPAVCPacket@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi

; 251  : 	CPacket* pMsg = new CPacket();

  00018	6a 1c		 push	 28			; 0000001cH
  0001a	8b f9		 mov	 edi, ecx
  0001c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00021	83 c4 04	 add	 esp, 4
  00024	89 44 24 08	 mov	 DWORD PTR $T88321[esp+24], eax
  00028	33 f6		 xor	 esi, esi
  0002a	3b c6		 cmp	 eax, esi
  0002c	89 74 24 14	 mov	 DWORD PTR __$EHRec$[esp+32], esi
  00030	74 09		 je	 SHORT $L88323
  00032	8b c8		 mov	 ecx, eax
  00034	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  00039	8b f0		 mov	 esi, eax
$L88323:

; 252  : 	pMsg->CopyData(pPacket, sizeof(BYTE));

  0003b	8b 44 24 1c	 mov	 eax, DWORD PTR _pPacket$[esp+20]
  0003f	6a 01		 push	 1
  00041	50		 push	 eax
  00042	8b ce		 mov	 ecx, esi
  00044	c7 44 24 1c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+40], -1
  0004c	e8 00 00 00 00	 call	 ?CopyData@CPacket@@QAEXPAV1@G@Z ; CPacket::CopyData

; 253  : 	pMsg->SetID(CT_EVENTQUARTERUPDATE_REQ);

  00051	68 6d 60 00 00	 push	 24685			; 0000606dH
  00056	8b ce		 mov	 ecx, esi
  00058	e8 00 00 00 00	 call	 ?SetID@CPacket@@QAEAAV1@G@Z ; CPacket::SetID

; 254  : 
; 255  : 	Say(pMsg);

  0005d	8b 17		 mov	 edx, DWORD PTR [edi]
  0005f	56		 push	 esi
  00060	8b cf		 mov	 ecx, edi
  00062	ff 12		 call	 DWORD PTR [edx]

; 256  : }

  00064	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L88324:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T88321[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?SendCT_EVENTQUARTERUPDATE_REQ@CTServer@@QAEXPAVCPacket@@@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T88326
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendCT_EVENTQUARTERUPDATE_REQ@CTServer@@QAEXPAVCPacket@@@Z ENDP ; CTServer::SendCT_EVENTQUARTERUPDATE_REQ
PUBLIC	?SendCT_TOURNAMENTEVENT_REQ@CTServer@@QAEXPAVCPacket@@@Z ; CTServer::SendCT_TOURNAMENTEVENT_REQ
;	COMDAT xdata$x
xdata$x	SEGMENT
$T88342	DD	0ffffffffH
	DD	FLAT:$L88338
$T88340	DD	019930520H
	DD	01H
	DD	FLAT:$T88342
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ?SendCT_TOURNAMENTEVENT_REQ@CTServer@@QAEXPAVCPacket@@@Z
_TEXT	SEGMENT
$T88335 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pPacket$ = 8						; size = 4
?SendCT_TOURNAMENTEVENT_REQ@CTServer@@QAEXPAVCPacket@@@Z PROC NEAR ; CTServer::SendCT_TOURNAMENTEVENT_REQ, COMDAT
; _this$ = ecx

; 259  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendCT_TOURNAMENTEVENT_REQ@CTServer@@QAEXPAVCPacket@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi

; 260  : 	CPacket* pMsg = new CPacket();

  00018	6a 1c		 push	 28			; 0000001cH
  0001a	8b f9		 mov	 edi, ecx
  0001c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00021	83 c4 04	 add	 esp, 4
  00024	89 44 24 08	 mov	 DWORD PTR $T88335[esp+24], eax
  00028	33 f6		 xor	 esi, esi
  0002a	3b c6		 cmp	 eax, esi
  0002c	89 74 24 14	 mov	 DWORD PTR __$EHRec$[esp+32], esi
  00030	74 09		 je	 SHORT $L88337
  00032	8b c8		 mov	 ecx, eax
  00034	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  00039	8b f0		 mov	 esi, eax
$L88337:

; 261  : 	pMsg->CopyData(pPacket, sizeof(BYTE));

  0003b	8b 44 24 1c	 mov	 eax, DWORD PTR _pPacket$[esp+20]
  0003f	6a 01		 push	 1
  00041	50		 push	 eax
  00042	8b ce		 mov	 ecx, esi
  00044	c7 44 24 1c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+40], -1
  0004c	e8 00 00 00 00	 call	 ?CopyData@CPacket@@QAEXPAV1@G@Z ; CPacket::CopyData

; 262  : 	pMsg->SetID(CT_TOURNAMENTEVENT_REQ);

  00051	68 71 60 00 00	 push	 24689			; 00006071H
  00056	8b ce		 mov	 ecx, esi
  00058	e8 00 00 00 00	 call	 ?SetID@CPacket@@QAEAAV1@G@Z ; CPacket::SetID

; 263  : 
; 264  : 	Say(pMsg);

  0005d	8b 17		 mov	 edx, DWORD PTR [edi]
  0005f	56		 push	 esi
  00060	8b cf		 mov	 ecx, edi
  00062	ff 12		 call	 DWORD PTR [edx]

; 265  : }

  00064	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L88338:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T88335[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?SendCT_TOURNAMENTEVENT_REQ@CTServer@@QAEXPAVCPacket@@@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T88340
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendCT_TOURNAMENTEVENT_REQ@CTServer@@QAEXPAVCPacket@@@Z ENDP ; CTServer::SendCT_TOURNAMENTEVENT_REQ
PUBLIC	?SendCT_HELPMESSAGE_REQ@CTServer@@QAEXPAVCPacket@@@Z ; CTServer::SendCT_HELPMESSAGE_REQ
;	COMDAT xdata$x
xdata$x	SEGMENT
$T88356	DD	0ffffffffH
	DD	FLAT:$L88352
$T88354	DD	019930520H
	DD	01H
	DD	FLAT:$T88356
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ?SendCT_HELPMESSAGE_REQ@CTServer@@QAEXPAVCPacket@@@Z
_TEXT	SEGMENT
$T88349 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pPacket$ = 8						; size = 4
?SendCT_HELPMESSAGE_REQ@CTServer@@QAEXPAVCPacket@@@Z PROC NEAR ; CTServer::SendCT_HELPMESSAGE_REQ, COMDAT
; _this$ = ecx

; 268  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendCT_HELPMESSAGE_REQ@CTServer@@QAEXPAVCPacket@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi

; 269  : 	CPacket* pMsg = new CPacket();

  00018	6a 1c		 push	 28			; 0000001cH
  0001a	8b f9		 mov	 edi, ecx
  0001c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00021	83 c4 04	 add	 esp, 4
  00024	89 44 24 08	 mov	 DWORD PTR $T88349[esp+24], eax
  00028	33 f6		 xor	 esi, esi
  0002a	3b c6		 cmp	 eax, esi
  0002c	89 74 24 14	 mov	 DWORD PTR __$EHRec$[esp+32], esi
  00030	74 09		 je	 SHORT $L88351
  00032	8b c8		 mov	 ecx, eax
  00034	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  00039	8b f0		 mov	 esi, eax
$L88351:

; 270  : 	pMsg->CopyData(pPacket, sizeof(BYTE));

  0003b	8b 44 24 1c	 mov	 eax, DWORD PTR _pPacket$[esp+20]
  0003f	6a 01		 push	 1
  00041	50		 push	 eax
  00042	8b ce		 mov	 ecx, esi
  00044	c7 44 24 1c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+40], -1
  0004c	e8 00 00 00 00	 call	 ?CopyData@CPacket@@QAEXPAV1@G@Z ; CPacket::CopyData

; 271  : 	pMsg->SetID(CT_HELPMESSAGE_REQ);

  00051	68 73 60 00 00	 push	 24691			; 00006073H
  00056	8b ce		 mov	 ecx, esi
  00058	e8 00 00 00 00	 call	 ?SetID@CPacket@@QAEAAV1@G@Z ; CPacket::SetID

; 272  : 
; 273  : 	Say(pMsg);

  0005d	8b 17		 mov	 edx, DWORD PTR [edi]
  0005f	56		 push	 esi
  00060	8b cf		 mov	 ecx, edi
  00062	ff 12		 call	 DWORD PTR [edx]

; 274  : }

  00064	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00071	83 c4 10	 add	 esp, 16			; 00000010H
  00074	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L88352:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T88349[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?SendCT_HELPMESSAGE_REQ@CTServer@@QAEXPAVCPacket@@@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T88354
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendCT_HELPMESSAGE_REQ@CTServer@@QAEXPAVCPacket@@@Z ENDP ; CTServer::SendCT_HELPMESSAGE_REQ
PUBLIC	?SendCT_RPSGAMEDATA_REQ@CTServer@@QAEXPAVCPacket@@@Z ; CTServer::SendCT_RPSGAMEDATA_REQ
;	COMDAT xdata$x
xdata$x	SEGMENT
$T88370	DD	0ffffffffH
	DD	FLAT:$L88366
$T88368	DD	019930520H
	DD	01H
	DD	FLAT:$T88370
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ?SendCT_RPSGAMEDATA_REQ@CTServer@@QAEXPAVCPacket@@@Z
_TEXT	SEGMENT
$T88363 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pPacket$ = 8						; size = 4
?SendCT_RPSGAMEDATA_REQ@CTServer@@QAEXPAVCPacket@@@Z PROC NEAR ; CTServer::SendCT_RPSGAMEDATA_REQ, COMDAT
; _this$ = ecx

; 277  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendCT_RPSGAMEDATA_REQ@CTServer@@QAEXPAVCPacket@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi

; 278  : 	CPacket* pMsg = new CPacket();

  00018	6a 1c		 push	 28			; 0000001cH
  0001a	8b f9		 mov	 edi, ecx
  0001c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00021	83 c4 04	 add	 esp, 4
  00024	89 44 24 08	 mov	 DWORD PTR $T88363[esp+24], eax
  00028	33 f6		 xor	 esi, esi
  0002a	3b c6		 cmp	 eax, esi
  0002c	89 74 24 14	 mov	 DWORD PTR __$EHRec$[esp+32], esi
  00030	74 09		 je	 SHORT $L88365
  00032	8b c8		 mov	 ecx, eax
  00034	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  00039	8b f0		 mov	 esi, eax
$L88365:

; 279  : 	pMsg->Copy(pPacket);

  0003b	8b 44 24 1c	 mov	 eax, DWORD PTR _pPacket$[esp+20]
  0003f	50		 push	 eax
  00040	8b ce		 mov	 ecx, esi
  00042	c7 44 24 18 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+36], -1
  0004a	e8 00 00 00 00	 call	 ?Copy@CPacket@@QAEXPAV1@@Z ; CPacket::Copy

; 280  : 	pMsg->SetID(CT_RPSGAMEDATA_REQ);

  0004f	68 74 60 00 00	 push	 24692			; 00006074H
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ?SetID@CPacket@@QAEAAV1@G@Z ; CPacket::SetID

; 281  : 
; 282  : 	Say(pMsg);	

  0005b	8b 17		 mov	 edx, DWORD PTR [edi]
  0005d	56		 push	 esi
  0005e	8b cf		 mov	 ecx, edi
  00060	ff 12		 call	 DWORD PTR [edx]

; 283  : }

  00062	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0006f	83 c4 10	 add	 esp, 16			; 00000010H
  00072	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L88366:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T88363[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?SendCT_RPSGAMEDATA_REQ@CTServer@@QAEXPAVCPacket@@@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T88368
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendCT_RPSGAMEDATA_REQ@CTServer@@QAEXPAVCPacket@@@Z ENDP ; CTServer::SendCT_RPSGAMEDATA_REQ
PUBLIC	?SendCT_RPSGAMECHANGE_REQ@CTServer@@QAEXPAVCPacket@@@Z ; CTServer::SendCT_RPSGAMECHANGE_REQ
;	COMDAT xdata$x
xdata$x	SEGMENT
$T88384	DD	0ffffffffH
	DD	FLAT:$L88380
$T88382	DD	019930520H
	DD	01H
	DD	FLAT:$T88384
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ?SendCT_RPSGAMECHANGE_REQ@CTServer@@QAEXPAVCPacket@@@Z
_TEXT	SEGMENT
$T88377 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_pPacket$ = 8						; size = 4
?SendCT_RPSGAMECHANGE_REQ@CTServer@@QAEXPAVCPacket@@@Z PROC NEAR ; CTServer::SendCT_RPSGAMECHANGE_REQ, COMDAT
; _this$ = ecx

; 286  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendCT_RPSGAMECHANGE_REQ@CTServer@@QAEXPAVCPacket@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi

; 287  : 	CPacket* pMsg = new CPacket();

  00018	6a 1c		 push	 28			; 0000001cH
  0001a	8b f9		 mov	 edi, ecx
  0001c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00021	83 c4 04	 add	 esp, 4
  00024	89 44 24 08	 mov	 DWORD PTR $T88377[esp+24], eax
  00028	33 f6		 xor	 esi, esi
  0002a	3b c6		 cmp	 eax, esi
  0002c	89 74 24 14	 mov	 DWORD PTR __$EHRec$[esp+32], esi
  00030	74 09		 je	 SHORT $L88379
  00032	8b c8		 mov	 ecx, eax
  00034	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  00039	8b f0		 mov	 esi, eax
$L88379:

; 288  : 	pMsg->Copy(pPacket);

  0003b	8b 44 24 1c	 mov	 eax, DWORD PTR _pPacket$[esp+20]
  0003f	50		 push	 eax
  00040	8b ce		 mov	 ecx, esi
  00042	c7 44 24 18 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+36], -1
  0004a	e8 00 00 00 00	 call	 ?Copy@CPacket@@QAEXPAV1@@Z ; CPacket::Copy

; 289  : 	pMsg->SetID(CT_RPSGAMECHANGE_REQ);

  0004f	68 76 60 00 00	 push	 24694			; 00006076H
  00054	8b ce		 mov	 ecx, esi
  00056	e8 00 00 00 00	 call	 ?SetID@CPacket@@QAEAAV1@G@Z ; CPacket::SetID

; 290  : 
; 291  : 	Say(pMsg);	

  0005b	8b 17		 mov	 edx, DWORD PTR [edi]
  0005d	56		 push	 esi
  0005e	8b cf		 mov	 ecx, edi
  00060	ff 12		 call	 DWORD PTR [edx]

; 292  : }

  00062	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0006f	83 c4 10	 add	 esp, 16			; 00000010H
  00072	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L88380:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T88377[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?SendCT_RPSGAMECHANGE_REQ@CTServer@@QAEXPAVCPacket@@@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T88382
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendCT_RPSGAMECHANGE_REQ@CTServer@@QAEXPAVCPacket@@@Z ENDP ; CTServer::SendCT_RPSGAMECHANGE_REQ
PUBLIC	?Release@CStringData@ATL@@QAEXXZ		; ATL::CStringData::Release
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT
?Release@CStringData@ATL@@QAEXXZ PROC NEAR		; ATL::CStringData::Release, COMDAT
; _this$ = ecx

; 93   : 		ATLASSERT( nRefs != 0 );
; 94   : 
; 95   : 		if( _InterlockedDecrement( &nRefs ) <= 0 )

  00000	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  00003	83 ca ff	 or	 edx, -1
  00006	f0 0f c1 10	 lock	  xadd	 DWORD PTR [eax], edx
  0000a	4a		 dec	 edx
  0000b	85 d2		 test	 edx, edx
  0000d	7f 0a		 jg	 SHORT $L59419

; 96   : 		{
; 97   : 			pStringMgr->Free( this );

  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	8b 10		 mov	 edx, DWORD PTR [eax]
  00013	51		 push	 ecx
  00014	8b c8		 mov	 ecx, eax
  00016	ff 52 04	 call	 DWORD PTR [edx+4]
$L59419:

; 98   : 		}
; 99   : 	}

  00019	c3		 ret	 0
?Release@CStringData@ATL@@QAEXXZ ENDP			; ATL::CStringData::Release
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC NEAR	; std::char_traits<char>::assign, COMDAT

; 331  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 332  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogty
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC NEAR		; std::char_traits<char>::length, COMDAT

; 352  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$L88396:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $L88396
  0000e	2b c2		 sub	 eax, edx

; 353  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
; Function compile flags: /Ogty
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::copy, COMDAT

; 358  : 		return ((_Elem *)::memcpy(_First1, _First2, _Count));

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR __First2$[esp]
  00009	57		 push	 edi
  0000a	8b 7c 24 0c	 mov	 edi, DWORD PTR __First1$[esp+4]
  0000e	8b c1		 mov	 eax, ecx
  00010	8b d7		 mov	 edx, edi
  00012	c1 e9 02	 shr	 ecx, 2
  00015	f3 a5		 rep movsd
  00017	8b c8		 mov	 ecx, eax
  00019	83 e1 03	 and	 ecx, 3
  0001c	f3 a4		 rep movsb
  0001e	5f		 pop	 edi
  0001f	8b c2		 mov	 eax, edx
  00021	5e		 pop	 esi

; 359  : 		}

  00022	c3		 ret	 0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	_memmove:NEAR
; Function compile flags: /Ogty
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::move, COMDAT

; 370  : 		return ((_Elem *)::memmove(_First1, _First2, _Count));

  00000	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ		; ATL::CSimpleStringT<char,0>::operator char const *
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT
??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ PROC NEAR	; ATL::CSimpleStringT<char,0>::operator char const *, COMDAT
; _this$ = ecx

; 379  : 		return( m_pszData );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 380  : 	}

  00002	c3		 ret	 0
??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ ENDP		; ATL::CSimpleStringT<char,0>::operator char const *
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1109 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1110 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ ; std::vector<unsigned short,std::allocator<unsigned short> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ PROC NEAR ; std::vector<unsigned short,std::allocator<unsigned short> >::size, COMDAT
; _this$ = ecx

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L88413
  00007	33 c0		 xor	 eax, eax

; 517  : 		}

  00009	c3		 ret	 0
$L88413:

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  0000a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000d	2b c2		 sub	 eax, edx
  0000f	d1 f8		 sar	 eax, 1

; 517  : 		}

  00011	c3		 ret	 0
?size@?$vector@GV?$allocator@G@std@@@std@@QBEIXZ ENDP	; std::vector<unsigned short,std::allocator<unsigned short> >::size
_TEXT	ENDS
PUBLIC	?size@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QBEIXZ ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::size
; Function compile flags: /Ogty
;	COMDAT ?size@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::size, COMDAT
; _this$ = ecx

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L88418
  00007	33 c0		 xor	 eax, eax

; 517  : 		}

  00009	c3		 ret	 0
$L88418:

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  0000a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2

; 517  : 		}

  00012	c3		 ret	 0
?size@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::size
_TEXT	ENDS
PUBLIC	?size@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QBEIXZ ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::size
; Function compile flags: /Ogty
;	COMDAT ?size@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::size, COMDAT
; _this$ = ecx

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	75 01		 jne	 SHORT $L88423

; 517  : 		}

  00007	c3		 ret	 0
$L88423:

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00008	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0000b	2b c8		 sub	 ecx, eax
  0000d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00012	f7 e9		 imul	 ecx
  00014	c1 fa 02	 sar	 edx, 2
  00017	8b c2		 mov	 eax, edx
  00019	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001c	03 c2		 add	 eax, edx

; 517  : 		}

  0001e	c3		 ret	 0
?size@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::size
_TEXT	ENDS
PUBLIC	?size@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QBEIXZ ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::size
; Function compile flags: /Ogty
;	COMDAT ?size@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::size, COMDAT
; _this$ = ecx

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	75 01		 jne	 SHORT $L88428

; 517  : 		}

  00007	c3		 ret	 0
$L88428:

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00008	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0000b	2b c8		 sub	 ecx, eax
  0000d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00012	f7 e9		 imul	 ecx
  00014	8b c2		 mov	 eax, edx
  00016	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00019	03 c2		 add	 eax, edx

; 517  : 		}

  0001b	c3		 ret	 0
?size@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L88433
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  00009	c3		 ret	 0
$L88433:

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC NEAR		; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<char,0>::GetData
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT
?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ PROC NEAR ; ATL::CSimpleStringT<char,0>::GetData, COMDAT
; _this$ = ecx

; 731  : 		return( reinterpret_cast< CStringData* >( m_pszData )-1 );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 e8 10	 sub	 eax, 16			; 00000010H

; 732  : 	}

  00005	c3		 ret	 0
?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ ENDP ; ATL::CSimpleStringT<char,0>::GetData
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L88444
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  00009	c3		 ret	 0
$L88444:

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC NEAR	; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	??Yiterator@?$vector@GV?$allocator@G@std@@@std@@QAEAAV012@H@Z ; std::vector<unsigned short,std::allocator<unsigned short> >::iterator::operator+=
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Yiterator@?$vector@GV?$allocator@G@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Yiterator@?$vector@GV?$allocator@G@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<unsigned short,std::allocator<unsigned short> >::iterator::operator+=, COMDAT
; _this$ = ecx

; 255  : 			{	// increment by integer

  00000	8b c1		 mov	 eax, ecx

; 256  : 			this->_Myptr += _Off;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  00009	01 10		 add	 DWORD PTR [eax], edx

; 257  : 			return (*this);
; 258  : 			}

  0000b	c2 04 00	 ret	 4
??Yiterator@?$vector@GV?$allocator@G@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<unsigned short,std::allocator<unsigned short> >::iterator::operator+=
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$vector@GV?$allocator@G@std@@@std@@QBEABGXZ ; std::vector<unsigned short,std::allocator<unsigned short> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$vector@GV?$allocator@G@std@@@std@@QBEABGXZ
_TEXT	SEGMENT
??Dconst_iterator@?$vector@GV?$allocator@G@std@@@std@@QBEABGXZ PROC NEAR ; std::vector<unsigned short,std::allocator<unsigned short> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 80   : 
; 81   : 
; 82   : 			return (*_Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 83   : 			}

  00002	c3		 ret	 0
??Dconst_iterator@?$vector@GV?$allocator@G@std@@@std@@QBEABGXZ ENDP ; std::vector<unsigned short,std::allocator<unsigned short> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	??Yiterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAEAAV012@H@Z ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::iterator::operator+=
; Function compile flags: /Ogty
;	COMDAT ??Yiterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Yiterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::iterator::operator+=, COMDAT
; _this$ = ecx

; 255  : 			{	// increment by integer

  00000	8b c1		 mov	 eax, ecx

; 256  : 			this->_Myptr += _Off;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  0000d	01 10		 add	 DWORD PTR [eax], edx

; 257  : 			return (*this);
; 258  : 			}

  0000f	c2 04 00	 ret	 4
??Yiterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::iterator::operator+=
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QBEABUtagTCASHITEMSALE@@XZ ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QBEABUtagTCASHITEMSALE@@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QBEABUtagTCASHITEMSALE@@XZ PROC NEAR ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 80   : 
; 81   : 
; 82   : 			return (*_Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 83   : 			}

  00002	c3		 ret	 0
??Dconst_iterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QBEABUtagTCASHITEMSALE@@XZ ENDP ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	??Yiterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QAEAAV012@H@Z ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::iterator::operator+=
; Function compile flags: /Ogty
;	COMDAT ??Yiterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Yiterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::iterator::operator+=, COMDAT
; _this$ = ecx

; 255  : 			{	// increment by integer

  00000	8b c1		 mov	 eax, ecx

; 256  : 			this->_Myptr += _Off;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8b 10		 mov	 edx, DWORD PTR [eax]
  00008	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0000b	c1 e1 03	 shl	 ecx, 3
  0000e	03 d1		 add	 edx, ecx
  00010	89 10		 mov	 DWORD PTR [eax], edx

; 257  : 			return (*this);
; 258  : 			}

  00012	c2 04 00	 ret	 4
??Yiterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::iterator::operator+=
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QBEABUtagMONREGEN@@XZ ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QBEABUtagMONREGEN@@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QBEABUtagMONREGEN@@XZ PROC NEAR ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 80   : 
; 81   : 
; 82   : 			return (*_Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 83   : 			}

  00002	c3		 ret	 0
??Dconst_iterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QBEABUtagMONREGEN@@XZ ENDP ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	??Yiterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QAEAAV012@H@Z ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::iterator::operator+=
; Function compile flags: /Ogty
;	COMDAT ??Yiterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Yiterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::iterator::operator+=, COMDAT
; _this$ = ecx

; 255  : 			{	// increment by integer

  00000	8b c1		 mov	 eax, ecx

; 256  : 			this->_Myptr += _Off;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8b 10		 mov	 edx, DWORD PTR [eax]
  00008	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0000b	d1 e1		 shl	 ecx, 1
  0000d	03 d1		 add	 edx, ecx
  0000f	89 10		 mov	 DWORD PTR [eax], edx

; 257  : 			return (*this);
; 258  : 			}

  00011	c2 04 00	 ret	 4
??Yiterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::iterator::operator+=
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QBEABUtagLOTTERY@@XZ ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QBEABUtagLOTTERY@@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QBEABUtagLOTTERY@@XZ PROC NEAR ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 80   : 
; 81   : 
; 82   : 			return (*_Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 83   : 			}

  00002	c3		 ret	 0
??Dconst_iterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QBEABUtagLOTTERY@@XZ ENDP ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1494 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi

; 1495 : 		if (_Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00001	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  00004	83 fe 10	 cmp	 esi, 16			; 00000010H
  00007	57		 push	 edi
  00008	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0000b	72 04		 jb	 SHORT $L88481
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	eb 02		 jmp	 SHORT $L88482
$L88481:
  00011	8b d0		 mov	 edx, eax
$L88482:
  00013	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00017	3b fa		 cmp	 edi, edx
  00019	72 17		 jb	 SHORT $L86488
  0001b	83 fe 10	 cmp	 esi, 16			; 00000010H
  0001e	72 02		 jb	 SHORT $L88489
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
$L88489:
  00022	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00025	03 c8		 add	 ecx, eax
  00027	3b cf		 cmp	 ecx, edi
  00029	76 07		 jbe	 SHORT $L86488
  0002b	5f		 pop	 edi

; 1497 : 		else
; 1498 : 			return (true);

  0002c	b0 01		 mov	 al, 1
  0002e	5e		 pop	 esi

; 1499 : 		}

  0002f	c2 04 00	 ret	 4
$L86488:
  00032	5f		 pop	 edi

; 1496 : 			return (false);	// don't ask

  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 1499 : 		}

  00036	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	??0const_iterator@?$vector@GV?$allocator@G@std@@@std@@QAE@PAG@Z ; std::vector<unsigned short,std::allocator<unsigned short> >::const_iterator::const_iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0const_iterator@?$vector@GV?$allocator@G@std@@@std@@QAE@PAG@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0const_iterator@?$vector@GV?$allocator@G@std@@@std@@QAE@PAG@Z PROC NEAR ; std::vector<unsigned short,std::allocator<unsigned short> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 73   : 		const_iterator(_Tptr _Ptr)

  00000	8b c1		 mov	 eax, ecx

; 74   : 			{	// construct with pointer _Ptr
; 75   : 			_Myptr = _Ptr;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 76   : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$vector@GV?$allocator@G@std@@@std@@QAE@PAG@Z ENDP ; std::vector<unsigned short,std::allocator<unsigned short> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??0const_iterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAE@PAUtagTCASHITEMSALE@@@Z ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::const_iterator::const_iterator
; Function compile flags: /Ogty
;	COMDAT ??0const_iterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAE@PAUtagTCASHITEMSALE@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0const_iterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAE@PAUtagTCASHITEMSALE@@@Z PROC NEAR ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 73   : 		const_iterator(_Tptr _Ptr)

  00000	8b c1		 mov	 eax, ecx

; 74   : 			{	// construct with pointer _Ptr
; 75   : 			_Myptr = _Ptr;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 76   : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAE@PAUtagTCASHITEMSALE@@@Z ENDP ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??0const_iterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QAE@PAUtagMONREGEN@@@Z ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::const_iterator::const_iterator
; Function compile flags: /Ogty
;	COMDAT ??0const_iterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QAE@PAUtagMONREGEN@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0const_iterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QAE@PAUtagMONREGEN@@@Z PROC NEAR ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 73   : 		const_iterator(_Tptr _Ptr)

  00000	8b c1		 mov	 eax, ecx

; 74   : 			{	// construct with pointer _Ptr
; 75   : 			_Myptr = _Ptr;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 76   : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QAE@PAUtagMONREGEN@@@Z ENDP ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??0const_iterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QAE@PAUtagLOTTERY@@@Z ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::const_iterator::const_iterator
; Function compile flags: /Ogty
;	COMDAT ??0const_iterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QAE@PAUtagLOTTERY@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0const_iterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QAE@PAUtagLOTTERY@@@Z PROC NEAR ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 73   : 		const_iterator(_Tptr _Ptr)

  00000	8b c1		 mov	 eax, ecx

; 74   : 			{	// construct with pointer _Ptr
; 75   : 			_Myptr = _Ptr;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 76   : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QAE@PAUtagLOTTERY@@@Z ENDP ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC NEAR		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 159  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC NEAR			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogty
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC NEAR		; std::_Allocate<char>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 35   : 	}

  0000d	c3		 ret	 0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_GCTServer@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCTServer@@UAEPAXI@Z PROC NEAR			; CTServer::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1CTServer@@UAE@XZ	; CTServer::~CTServer
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L88516
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L88516:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GCTServer@@UAEPAXI@Z ENDP				; CTServer::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ		; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ PROC NEAR		; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>, COMDAT
; _this$ = ecx

; 263  : 		CStringData* pData = GetData();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 e8 10	 sub	 eax, 16			; 00000010H

; 264  : 		pData->Release();

  00005	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00008	83 ca ff	 or	 edx, -1
  0000b	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0000f	4a		 dec	 edx
  00010	85 d2		 test	 edx, edx
  00012	7f 08		 jg	 SHORT $L88525
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	8b 11		 mov	 edx, DWORD PTR [ecx]
  00018	50		 push	 eax
  00019	ff 52 04	 call	 DWORD PTR [edx+4]
$L88525:

; 265  : 	}

  0001c	c3		 ret	 0
??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ ENDP		; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC NEAR ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 34   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 35   : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??Diterator@?$vector@GV?$allocator@G@std@@@std@@QBEAAGXZ ; std::vector<unsigned short,std::allocator<unsigned short> >::iterator::operator*
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Diterator@?$vector@GV?$allocator@G@std@@@std@@QBEAAGXZ
_TEXT	SEGMENT
??Diterator@?$vector@GV?$allocator@G@std@@@std@@QBEAAGXZ PROC NEAR ; std::vector<unsigned short,std::allocator<unsigned short> >::iterator::operator*, COMDAT
; _this$ = ecx

; 220  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 221  : 			}

  00002	c3		 ret	 0
??Diterator@?$vector@GV?$allocator@G@std@@@std@@QBEAAGXZ ENDP ; std::vector<unsigned short,std::allocator<unsigned short> >::iterator::operator*
_TEXT	ENDS
PUBLIC	??Hiterator@?$vector@GV?$allocator@G@std@@@std@@QBE?AV012@H@Z ; std::vector<unsigned short,std::allocator<unsigned short> >::iterator::operator+
; Function compile flags: /Ogty
;	COMDAT ??Hiterator@?$vector@GV?$allocator@G@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Hiterator@?$vector@GV?$allocator@G@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::vector<unsigned short,std::allocator<unsigned short> >::iterator::operator+, COMDAT
; _this$ = ecx

; 262  : 			iterator _Tmp = *this;
; 263  : 			return (_Tmp += _Off);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 08	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 48	 lea	 edx, DWORD PTR [eax+ecx*2]
  00009	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000d	89 10		 mov	 DWORD PTR [eax], edx

; 264  : 			}

  0000f	c2 08 00	 ret	 8
??Hiterator@?$vector@GV?$allocator@G@std@@@std@@QBE?AV012@H@Z ENDP ; std::vector<unsigned short,std::allocator<unsigned short> >::iterator::operator+
_TEXT	ENDS
PUBLIC	??Diterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QBEAAUtagTCASHITEMSALE@@XZ ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Diterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QBEAAUtagTCASHITEMSALE@@XZ
_TEXT	SEGMENT
??Diterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QBEAAUtagTCASHITEMSALE@@XZ PROC NEAR ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::iterator::operator*, COMDAT
; _this$ = ecx

; 220  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 221  : 			}

  00002	c3		 ret	 0
??Diterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QBEAAUtagTCASHITEMSALE@@XZ ENDP ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::iterator::operator*
_TEXT	ENDS
PUBLIC	??Hiterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QBE?AV012@H@Z ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::iterator::operator+
; Function compile flags: /Ogty
;	COMDAT ??Hiterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Hiterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::iterator::operator+, COMDAT
; _this$ = ecx

; 262  : 			iterator _Tmp = *this;
; 263  : 			return (_Tmp += _Off);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 08	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00009	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000d	89 10		 mov	 DWORD PTR [eax], edx

; 264  : 			}

  0000f	c2 08 00	 ret	 8
??Hiterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QBE?AV012@H@Z ENDP ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::iterator::operator+
_TEXT	ENDS
PUBLIC	??Diterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QBEAAUtagMONREGEN@@XZ ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Diterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QBEAAUtagMONREGEN@@XZ
_TEXT	SEGMENT
??Diterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QBEAAUtagMONREGEN@@XZ PROC NEAR ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::iterator::operator*, COMDAT
; _this$ = ecx

; 220  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 221  : 			}

  00002	c3		 ret	 0
??Diterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QBEAAUtagMONREGEN@@XZ ENDP ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::iterator::operator*
_TEXT	ENDS
PUBLIC	??Hiterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QBE?AV012@H@Z ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::iterator::operator+
; Function compile flags: /Ogty
;	COMDAT ??Hiterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Hiterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::iterator::operator+, COMDAT
; _this$ = ecx

; 262  : 			iterator _Tmp = *this;
; 263  : 			return (_Tmp += _Off);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Off$[esp-4]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00009	8d 14 c1	 lea	 edx, DWORD PTR [ecx+eax*8]
  0000c	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00010	89 10		 mov	 DWORD PTR [eax], edx

; 264  : 			}

  00012	c2 08 00	 ret	 8
??Hiterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QBE?AV012@H@Z ENDP ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::iterator::operator+
_TEXT	ENDS
PUBLIC	??Diterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QBEAAUtagLOTTERY@@XZ ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Diterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QBEAAUtagLOTTERY@@XZ
_TEXT	SEGMENT
??Diterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QBEAAUtagLOTTERY@@XZ PROC NEAR ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::iterator::operator*, COMDAT
; _this$ = ecx

; 220  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 221  : 			}

  00002	c3		 ret	 0
??Diterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QBEAAUtagLOTTERY@@XZ ENDP ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::iterator::operator*
_TEXT	ENDS
PUBLIC	??Hiterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QBE?AV012@H@Z ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::iterator::operator+
; Function compile flags: /Ogty
;	COMDAT ??Hiterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Hiterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::iterator::operator+, COMDAT
; _this$ = ecx

; 262  : 			iterator _Tmp = *this;
; 263  : 			return (_Tmp += _Off);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Off$[esp-4]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00009	8d 14 41	 lea	 edx, DWORD PTR [ecx+eax*2]
  0000c	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00010	89 10		 mov	 DWORD PTR [eax], edx

; 264  : 			}

  00012	c2 08 00	 ret	 8
??Hiterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QBE?AV012@H@Z ENDP ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::iterator::operator+
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $L88594
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1476 : 		}

  00014	c2 04 00	 ret	 4

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$L88594:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 1476 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	??0iterator@?$vector@GV?$allocator@G@std@@@std@@QAE@PAG@Z ; std::vector<unsigned short,std::allocator<unsigned short> >::iterator::iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0iterator@?$vector@GV?$allocator@G@std@@@std@@QAE@PAG@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0iterator@?$vector@GV?$allocator@G@std@@@std@@QAE@PAG@Z PROC NEAR ; std::vector<unsigned short,std::allocator<unsigned short> >::iterator::iterator, COMDAT
; _this$ = ecx

; 215  : 			{	// construct with pointer _Ptr

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 216  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$vector@GV?$allocator@G@std@@@std@@QAE@PAG@Z ENDP ; std::vector<unsigned short,std::allocator<unsigned short> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??0iterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAE@PAUtagTCASHITEMSALE@@@Z ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::iterator::iterator
; Function compile flags: /Ogty
;	COMDAT ??0iterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAE@PAUtagTCASHITEMSALE@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0iterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAE@PAUtagTCASHITEMSALE@@@Z PROC NEAR ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::iterator::iterator, COMDAT
; _this$ = ecx

; 215  : 			{	// construct with pointer _Ptr

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 216  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAE@PAUtagTCASHITEMSALE@@@Z ENDP ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??0iterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QAE@PAUtagMONREGEN@@@Z ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::iterator::iterator
; Function compile flags: /Ogty
;	COMDAT ??0iterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QAE@PAUtagMONREGEN@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0iterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QAE@PAUtagMONREGEN@@@Z PROC NEAR ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::iterator::iterator, COMDAT
; _this$ = ecx

; 215  : 			{	// construct with pointer _Ptr

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 216  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QAE@PAUtagMONREGEN@@@Z ENDP ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??0iterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QAE@PAUtagLOTTERY@@@Z ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::iterator::iterator
; Function compile flags: /Ogty
;	COMDAT ??0iterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QAE@PAUtagLOTTERY@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0iterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QAE@PAUtagLOTTERY@@@Z PROC NEAR ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::iterator::iterator, COMDAT
; _this$ = ecx

; 215  : 			{	// construct with pointer _Ptr

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 216  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QAE@PAUtagLOTTERY@@@Z ENDP ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::iterator::iterator
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1114 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1115 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1116 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC NEAR	; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 138  : 		}

  0000d	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >, COMDAT
; _this$ = ecx

; 963  : 	}

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 e8 10	 sub	 eax, 16			; 00000010H
  00005	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00008	83 ca ff	 or	 edx, -1
  0000b	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0000f	4a		 dec	 edx
  00010	85 d2		 test	 edx, edx
  00012	7f 08		 jg	 SHORT $L88657
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	8b 11		 mov	 edx, DWORD PTR [ecx]
  00018	50		 push	 eax
  00019	ff 52 04	 call	 DWORD PTR [edx+4]
$L88657:
  0001c	c3		 ret	 0
??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1510 : 		if (!_Built)

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Built$[esp-4]
  00004	84 c0		 test	 al, al
  00006	53		 push	 ebx
  00007	55		 push	 ebp
  00008	8b 6c 24 10	 mov	 ebp, DWORD PTR __Newsize$[esp+4]
  0000c	8b d9		 mov	 ebx, ecx
  0000e	74 2f		 je	 SHORT $L88668

; 1511 : 			;
; 1512 : 		else if (_BUF_SIZE <= _Myres)

  00010	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  00014	72 29		 jb	 SHORT $L88668

; 1513 : 			{	// copy any leftovers to small buffer and deallocate
; 1514 : 			_Elem *_Ptr = _Bx._Ptr;
; 1515 : 			if (0 < _Newsize)

  00016	85 ed		 test	 ebp, ebp
  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	57		 push	 edi
  0001c	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  0001f	76 14		 jbe	 SHORT $L88666
  00021	56		 push	 esi

; 1516 : 				_Traits::copy(_Bx._Buf, _Ptr, _Newsize);

  00022	8b cd		 mov	 ecx, ebp
  00024	8b d1		 mov	 edx, ecx
  00026	c1 e9 02	 shr	 ecx, 2
  00029	8b f0		 mov	 esi, eax
  0002b	f3 a5		 rep movsd
  0002d	8b ca		 mov	 ecx, edx
  0002f	83 e1 03	 and	 ecx, 3
  00032	f3 a4		 rep movsb
  00034	5e		 pop	 esi
$L88666:

; 1517 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4
  0003e	5f		 pop	 edi
$L88668:

; 1518 : 			}
; 1519 : 		_Myres = _BUF_SIZE - 1;
; 1520 : 		_Eos(_Newsize);

  0003f	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00042	c7 43 18 0f 00
	00 00		 mov	 DWORD PTR [ebx+24], 15	; 0000000fH
  00049	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0004e	5d		 pop	 ebp
  0004f	5b		 pop	 ebx

; 1521 : 		}

  00050	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?begin@?$vector@GV?$allocator@G@std@@@std@@QAE?AViterator@12@XZ ; std::vector<unsigned short,std::allocator<unsigned short> >::begin
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?begin@?$vector@GV?$allocator@G@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@GV?$allocator@G@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<unsigned short,std::allocator<unsigned short> >::begin, COMDAT
; _this$ = ecx

; 463  : 		return (iterator(_Myfirst));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 464  : 		}

  00009	c2 04 00	 ret	 4
?begin@?$vector@GV?$allocator@G@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<unsigned short,std::allocator<unsigned short> >::begin
_TEXT	ENDS
PUBLIC	?begin@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::begin
; Function compile flags: /Ogty
;	COMDAT ?begin@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::begin, COMDAT
; _this$ = ecx

; 463  : 		return (iterator(_Myfirst));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 464  : 		}

  00009	c2 04 00	 ret	 4
?begin@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::begin
_TEXT	ENDS
PUBLIC	?begin@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::begin
; Function compile flags: /Ogty
;	COMDAT ?begin@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::begin, COMDAT
; _this$ = ecx

; 463  : 		return (iterator(_Myfirst));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 464  : 		}

  00009	c2 04 00	 ret	 4
?begin@?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::begin
_TEXT	ENDS
PUBLIC	?begin@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::begin
; Function compile flags: /Ogty
;	COMDAT ?begin@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::begin, COMDAT
; _this$ = ecx

; 463  : 		return (iterator(_Myfirst));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 464  : 		}

  00009	c2 04 00	 ret	 4
?begin@?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::begin
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
EXTRN	?_Xran@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xran
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 792  : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp

; 793  : 		if (_Mysize < _Off)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	39 6e 14	 cmp	 DWORD PTR [esi+20], ebp
  0000b	57		 push	 edi
  0000c	73 05		 jae	 SHORT $L86152

; 794  : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L86152:

; 795  : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c5		 sub	 eax, ebp
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $L86153

; 796  : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$L86153:

; 797  : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 47		 jbe	 SHORT $L88782

; 798  : 			{	// move elements down
; 799  : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 800  : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0002c	53		 push	 ebx
  0002d	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  00030	72 04		 jb	 SHORT $L88748
  00032	8b 13		 mov	 edx, DWORD PTR [ebx]
  00034	eb 02		 jmp	 SHORT $L88749
$L88748:
  00036	8b d3		 mov	 edx, ebx
$L88749:
  00038	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0003b	72 04		 jb	 SHORT $L88755
  0003d	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0003f	eb 02		 jmp	 SHORT $L88756
$L88755:
  00041	8b cb		 mov	 ecx, ebx
$L88756:
  00043	2b c7		 sub	 eax, edi

; 803  : 			}
; 804  : 		return (*this);

  00045	03 d5		 add	 edx, ebp
  00047	50		 push	 eax
  00048	03 d7		 add	 edx, edi
  0004a	52		 push	 edx
  0004b	03 cd		 add	 ecx, ebp
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 _memmove
  00053	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00056	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00059	2b c7		 sub	 eax, edi
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005e	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00061	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00064	72 02		 jb	 SHORT $L88779

; 801  : 			size_type _Newsize = _Mysize - _Count;
; 802  : 			_Eos(_Newsize);

  00066	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$L88779:
  00068	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0
  0006c	5b		 pop	 ebx
$L88782:
  0006d	5f		 pop	 edi

; 803  : 			}
; 804  : 		return (*this);

  0006e	8b c6		 mov	 eax, esi
  00070	5e		 pop	 esi
  00071	5d		 pop	 ebp

; 805  : 		}

  00072	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	__CxxThrowException@8:NEAR
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T88987	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
$T88989	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L88790
$T88990	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L88788
$T88988	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T88989
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:$T88990
$T88982	DD	019930520H
	DD	04H
	DD	FLAT:$T88987
	DD	02H
	DD	FLAT:$T88988
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1444 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1445 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	8b d8		 mov	 ebx, eax
  00022	83 cb 0f	 or	 ebx, 15			; 0000000fH

; 1446 : 		if (max_size() < _Newres)

  00025	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00028	57		 push	 edi
  00029	8b f1		 mov	 esi, ecx
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00031	76 04		 jbe	 SHORT $L86478

; 1447 : 			_Newres = _Newsize;	// undo roundup if too big

  00033	8b d8		 mov	 ebx, eax

; 1448 : 		else if (_Newres / 3 < _Myres / 2

  00035	eb 22		 jmp	 SHORT $L86480
$L86478:

; 1449 : 			&& _Myres <= max_size() - _Myres / 2)

  00037	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  0003a	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0003f	f7 e3		 mul	 ebx
  00041	8b cf		 mov	 ecx, edi
  00043	d1 e9		 shr	 ecx, 1
  00045	d1 ea		 shr	 edx, 1
  00047	3b d1		 cmp	 edx, ecx
  00049	73 0e		 jae	 SHORT $L86480
  0004b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00050	2b c1		 sub	 eax, ecx
  00052	3b f8		 cmp	 edi, eax
  00054	77 03		 ja	 SHORT $L86480

; 1450 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00056	8d 1c 39	 lea	 ebx, DWORD PTR [ecx+edi]
$L86480:

; 1451 : 		_Elem *_Ptr;
; 1452 : 
; 1453 : 		_TRY_BEGIN
; 1454 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00059	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  0005c	51		 push	 ecx
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00064	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00069	8b d0		 mov	 edx, eax
  0006b	83 c4 04	 add	 esp, 4
  0006e	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
  00071	eb 29		 jmp	 SHORT $L86482
$L88788:

; 1455 : 		_CATCH_ALL
; 1456 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  00073	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00076	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 1457 : 			_TRY_BEGIN
; 1458 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00079	40		 inc	 eax
  0007a	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0007d	50		 push	 eax
  0007e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00082	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00087	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0008a	83 c4 04	 add	 esp, 4

; 1462 : 			_CATCH_END
; 1463 : 		_CATCH_END

  0008d	b8 00 00 00 00	 mov	 eax, $L88983
  00092	c3		 ret	 0
$L88983:
  00093	8b 5d e8	 mov	 ebx, DWORD PTR __Newres$[ebp]
  00096	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00099	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$L86482:

; 1464 : 
; 1465 : 		if (0 < _Oldlen)

  0009c	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  0009f	85 c9		 test	 ecx, ecx
  000a1	76 24		 jbe	 SHORT $L88908

; 1466 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  000a3	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000a7	72 05		 jb	 SHORT $L88904
  000a9	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000ac	eb 03		 jmp	 SHORT $L88905
$L88904:
  000ae	83 c6 04	 add	 esi, 4
$L88905:
  000b1	8b c1		 mov	 eax, ecx
  000b3	c1 e9 02	 shr	 ecx, 2
  000b6	8b fa		 mov	 edi, edx
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb
  000c1	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000c4	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
$L88908:

; 1467 : 		_Tidy(true);

  000c7	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000cb	72 12		 jb	 SHORT $L88949
  000cd	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000d0	51		 push	 ecx
  000d1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d6	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000d9	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000dc	83 c4 04	 add	 esp, 4
$L88949:

; 1468 : 		_Bx._Ptr = _Ptr;
; 1469 : 		_Myres = _Newres;
; 1470 : 		_Eos(_Oldlen);

  000df	83 fb 10	 cmp	 ebx, 16			; 00000010H
  000e2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000e5	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e8	89 10		 mov	 DWORD PTR [eax], edx
  000ea	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  000ed	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  000f0	72 02		 jb	 SHORT $L88978
  000f2	8b c2		 mov	 eax, edx
$L88978:

; 1471 : 		}

  000f4	5f		 pop	 edi
  000f5	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  000f9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fc	5e		 pop	 esi
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00104	5b		 pop	 ebx
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c2 08 00	 ret	 8
$L88790:

; 1459 : 			_CATCH_ALL
; 1460 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010b	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0010e	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00112	72 0c		 jb	 SHORT $L88885
  00114	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00117	52		 push	 edx
  00118	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0011d	83 c4 04	 add	 esp, 4
$L88885:

; 1461 : 			_RERAISE;

  00120	6a 00		 push	 0
  00122	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00129	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00130	6a 00		 push	 0
  00132	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00136	e8 00 00 00 00	 call	 __CxxThrowException@8
$L88991:
$L88986:
  0013b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T88982
  00005	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?SendCT_ANNOUNCEMENT_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ; CTServer::SendCT_ANNOUNCEMENT_ACK
EXTRN	??6CPacket@@QAEAAV0@PBD@Z:NEAR			; CPacket::operator<<
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
xdata$x	SEGMENT
$T89035	DD	0ffffffffH
	DD	FLAT:$L89000
	DD	00H
	DD	FLAT:$L89001
$T89033	DD	019930520H
	DD	02H
	DD	FLAT:$T89035
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tcontrolsvr\tserver.cpp
xdata$x	ENDS
;	COMDAT ?SendCT_ANNOUNCEMENT_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
_TEXT	SEGMENT
$T88997 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_strAnnounce$ = 8					; size = 4
?SendCT_ANNOUNCEMENT_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z PROC NEAR ; CTServer::SendCT_ANNOUNCEMENT_ACK, COMDAT
; _this$ = ecx

; 28   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendCT_ANNOUNCEMENT_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b f9		 mov	 edi, ecx
  0001b	33 db		 xor	 ebx, ebx

; 29   : 	CPacket * pMsg = new CPacket();

  0001d	6a 1c		 push	 28			; 0000001cH
  0001f	89 5c 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], ebx
  00023	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00028	83 c4 04	 add	 esp, 4
  0002b	89 44 24 0c	 mov	 DWORD PTR $T88997[esp+28], eax
  0002f	3b c3		 cmp	 eax, ebx
  00031	c6 44 24 18 01	 mov	 BYTE PTR __$EHRec$[esp+36], 1
  00036	74 0b		 je	 SHORT $L88998
  00038	8b c8		 mov	 ecx, eax
  0003a	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  0003f	8b f0		 mov	 esi, eax
  00041	eb 02		 jmp	 SHORT $L88999
$L88998:
  00043	33 f6		 xor	 esi, esi
$L88999:
  00045	88 5c 24 18	 mov	 BYTE PTR __$EHRec$[esp+36], bl

; 30   : 	pMsg->SetID(CT_ANNOUNCEMENT_ACK)		
; 31   : 		<< strAnnounce;

  00049	8b 5c 24 20	 mov	 ebx, DWORD PTR _strAnnounce$[esp+24]
  0004d	53		 push	 ebx
  0004e	68 2a 60 00 00	 push	 24618			; 0000602aH
  00053	8b ce		 mov	 ecx, esi
  00055	e8 00 00 00 00	 call	 ?SetID@CPacket@@QAEAAV1@G@Z ; CPacket::SetID
  0005a	8b c8		 mov	 ecx, eax
  0005c	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@PBD@Z ; CPacket::operator<<

; 32   : 
; 33   : 	Say(pMsg);

  00061	8b 07		 mov	 eax, DWORD PTR [edi]
  00063	56		 push	 esi
  00064	8b cf		 mov	 ecx, edi
  00066	ff 10		 call	 DWORD PTR [eax]

; 34   : }

  00068	8d 43 f0	 lea	 eax, DWORD PTR [ebx-16]
  0006b	c7 44 24 18 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+36], -1
  00073	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00076	83 ca ff	 or	 edx, -1
  00079	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0007d	4a		 dec	 edx
  0007e	85 d2		 test	 edx, edx
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	7f 08		 jg	 SHORT $L89030
  00085	8b 08		 mov	 ecx, DWORD PTR [eax]
  00087	8b 11		 mov	 edx, DWORD PTR [ecx]
  00089	50		 push	 eax
  0008a	ff 52 04	 call	 DWORD PTR [edx+4]
$L89030:
  0008d	8b 4c 24 04	 mov	 ecx, DWORD PTR __$EHRec$[esp+16]
  00091	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00098	83 c4 10	 add	 esp, 16			; 00000010H
  0009b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L89000:
  00000	8d 4d 04	 lea	 ecx, DWORD PTR _strAnnounce$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L89001:
  00008	8b 45 f0	 mov	 eax, DWORD PTR $T88997[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00011	59		 pop	 ecx
  00012	c3		 ret	 0
__ehhandler$?SendCT_ANNOUNCEMENT_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z:
  00013	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T89033
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendCT_ANNOUNCEMENT_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ENDP ; CTServer::SendCT_ANNOUNCEMENT_ACK
PUBLIC	?SendCT_USERKICKOUT_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ; CTServer::SendCT_USERKICKOUT_ACK
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
xdata$x	SEGMENT
$T89080	DD	0ffffffffH
	DD	FLAT:$L89045
	DD	00H
	DD	FLAT:$L89046
$T89078	DD	019930520H
	DD	02H
	DD	FLAT:$T89080
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tcontrolsvr\tserver.cpp
xdata$x	ENDS
;	COMDAT ?SendCT_USERKICKOUT_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
_TEXT	SEGMENT
$T89042 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_strUser$ = 8						; size = 4
?SendCT_USERKICKOUT_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z PROC NEAR ; CTServer::SendCT_USERKICKOUT_ACK, COMDAT
; _this$ = ecx

; 37   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendCT_USERKICKOUT_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b f9		 mov	 edi, ecx
  0001b	33 db		 xor	 ebx, ebx

; 38   : 	CPacket * pMsg = new CPacket();

  0001d	6a 1c		 push	 28			; 0000001cH
  0001f	89 5c 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], ebx
  00023	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00028	83 c4 04	 add	 esp, 4
  0002b	89 44 24 0c	 mov	 DWORD PTR $T89042[esp+28], eax
  0002f	3b c3		 cmp	 eax, ebx
  00031	c6 44 24 18 01	 mov	 BYTE PTR __$EHRec$[esp+36], 1
  00036	74 0b		 je	 SHORT $L89043
  00038	8b c8		 mov	 ecx, eax
  0003a	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  0003f	8b f0		 mov	 esi, eax
  00041	eb 02		 jmp	 SHORT $L89044
$L89043:
  00043	33 f6		 xor	 esi, esi
$L89044:
  00045	88 5c 24 18	 mov	 BYTE PTR __$EHRec$[esp+36], bl

; 39   : 	pMsg->SetID(CT_USERKICKOUT_ACK)		
; 40   : 		<< strUser;

  00049	8b 5c 24 20	 mov	 ebx, DWORD PTR _strUser$[esp+24]
  0004d	53		 push	 ebx
  0004e	68 2c 60 00 00	 push	 24620			; 0000602cH
  00053	8b ce		 mov	 ecx, esi
  00055	e8 00 00 00 00	 call	 ?SetID@CPacket@@QAEAAV1@G@Z ; CPacket::SetID
  0005a	8b c8		 mov	 ecx, eax
  0005c	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@PBD@Z ; CPacket::operator<<

; 41   : 
; 42   : 	Say(pMsg);

  00061	8b 07		 mov	 eax, DWORD PTR [edi]
  00063	56		 push	 esi
  00064	8b cf		 mov	 ecx, edi
  00066	ff 10		 call	 DWORD PTR [eax]

; 43   : }

  00068	8d 43 f0	 lea	 eax, DWORD PTR [ebx-16]
  0006b	c7 44 24 18 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+36], -1
  00073	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00076	83 ca ff	 or	 edx, -1
  00079	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0007d	4a		 dec	 edx
  0007e	85 d2		 test	 edx, edx
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	5b		 pop	 ebx
  00083	7f 08		 jg	 SHORT $L89075
  00085	8b 08		 mov	 ecx, DWORD PTR [eax]
  00087	8b 11		 mov	 edx, DWORD PTR [ecx]
  00089	50		 push	 eax
  0008a	ff 52 04	 call	 DWORD PTR [edx+4]
$L89075:
  0008d	8b 4c 24 04	 mov	 ecx, DWORD PTR __$EHRec$[esp+16]
  00091	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00098	83 c4 10	 add	 esp, 16			; 00000010H
  0009b	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L89045:
  00000	8d 4d 04	 lea	 ecx, DWORD PTR _strUser$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L89046:
  00008	8b 45 f0	 mov	 eax, DWORD PTR $T89042[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00011	59		 pop	 ecx
  00012	c3		 ret	 0
__ehhandler$?SendCT_USERKICKOUT_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z:
  00013	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T89078
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendCT_USERKICKOUT_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ENDP ; CTServer::SendCT_USERKICKOUT_ACK
PUBLIC	?SendCT_USERMOVE_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EGMMM@Z ; CTServer::SendCT_USERMOVE_ACK
EXTRN	__fltused:NEAR
EXTRN	??6CPacket@@QAEAAV0@M@Z:NEAR			; CPacket::operator<<
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
xdata$x	SEGMENT
$T89126	DD	0ffffffffH
	DD	FLAT:$L89090
	DD	00H
	DD	FLAT:$L89091
$T89123	DD	019930520H
	DD	02H
	DD	FLAT:$T89126
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tcontrolsvr\tserver.cpp
xdata$x	ENDS
;	COMDAT ?SendCT_USERMOVE_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EGMMM@Z
_TEXT	SEGMENT
$T89087 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_strUser$ = 8						; size = 4
_bChannel$ = 12						; size = 1
_wMapID$ = 16						; size = 2
_fPosX$ = 20						; size = 4
_fPosY$ = 24						; size = 4
_fPosZ$ = 28						; size = 4
?SendCT_USERMOVE_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EGMMM@Z PROC NEAR ; CTServer::SendCT_USERMOVE_ACK, COMDAT
; _this$ = ecx

; 46   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendCT_USERMOVE_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EGMMM@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b f9		 mov	 edi, ecx
  0001b	33 db		 xor	 ebx, ebx

; 47   : 	CPacket * pMsg = new CPacket();

  0001d	6a 1c		 push	 28			; 0000001cH
  0001f	89 5c 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], ebx
  00023	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00028	83 c4 04	 add	 esp, 4
  0002b	89 44 24 0c	 mov	 DWORD PTR $T89087[esp+28], eax
  0002f	3b c3		 cmp	 eax, ebx
  00031	c6 44 24 18 01	 mov	 BYTE PTR __$EHRec$[esp+36], 1
  00036	74 0b		 je	 SHORT $L89088
  00038	8b c8		 mov	 ecx, eax
  0003a	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  0003f	8b f0		 mov	 esi, eax
  00041	eb 02		 jmp	 SHORT $L89089
$L89088:
  00043	33 f6		 xor	 esi, esi
$L89089:

; 48   : 	pMsg->SetID(CT_USERMOVE_ACK)		
; 49   : 		<< strUser
; 50   : 		<< bChannel
; 51   : 		<< wMapID
; 52   : 		<< fPosX
; 53   : 		<< fPosY
; 54   : 		<< fPosZ;

  00045	8b 44 24 34	 mov	 eax, DWORD PTR _fPosZ$[esp+24]
  00049	8b 4c 24 30	 mov	 ecx, DWORD PTR _fPosY$[esp+24]
  0004d	8b 54 24 2c	 mov	 edx, DWORD PTR _fPosX$[esp+24]
  00051	50		 push	 eax
  00052	8b 44 24 2c	 mov	 eax, DWORD PTR _wMapID$[esp+28]
  00056	51		 push	 ecx
  00057	8b 4c 24 2c	 mov	 ecx, DWORD PTR _bChannel$[esp+32]
  0005b	52		 push	 edx
  0005c	50		 push	 eax
  0005d	51		 push	 ecx
  0005e	88 5c 24 2c	 mov	 BYTE PTR __$EHRec$[esp+56], bl
  00062	8b 5c 24 34	 mov	 ebx, DWORD PTR _strUser$[esp+44]
  00066	53		 push	 ebx
  00067	68 2e 60 00 00	 push	 24622			; 0000602eH
  0006c	8b ce		 mov	 ecx, esi
  0006e	e8 00 00 00 00	 call	 ?SetID@CPacket@@QAEAAV1@G@Z ; CPacket::SetID
  00073	8b c8		 mov	 ecx, eax
  00075	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@PBD@Z ; CPacket::operator<<
  0007a	8b c8		 mov	 ecx, eax
  0007c	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  00081	8b c8		 mov	 ecx, eax
  00083	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<
  00088	8b c8		 mov	 ecx, eax
  0008a	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@M@Z	; CPacket::operator<<
  0008f	8b c8		 mov	 ecx, eax
  00091	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@M@Z	; CPacket::operator<<
  00096	8b c8		 mov	 ecx, eax
  00098	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@M@Z	; CPacket::operator<<

; 55   : 
; 56   : 	Say(pMsg);

  0009d	8b 17		 mov	 edx, DWORD PTR [edi]
  0009f	56		 push	 esi
  000a0	8b cf		 mov	 ecx, edi
  000a2	ff 12		 call	 DWORD PTR [edx]

; 57   : }

  000a4	8d 43 f0	 lea	 eax, DWORD PTR [ebx-16]
  000a7	c7 44 24 18 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+36], -1
  000af	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  000b2	83 ca ff	 or	 edx, -1
  000b5	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  000b9	4a		 dec	 edx
  000ba	85 d2		 test	 edx, edx
  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi
  000be	5b		 pop	 ebx
  000bf	7f 08		 jg	 SHORT $L89118
  000c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c3	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c5	50		 push	 eax
  000c6	ff 52 04	 call	 DWORD PTR [edx+4]
$L89118:
  000c9	8b 4c 24 04	 mov	 ecx, DWORD PTR __$EHRec$[esp+16]
  000cd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000d4	83 c4 10	 add	 esp, 16			; 00000010H
  000d7	c2 18 00	 ret	 24			; 00000018H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L89090:
  00000	8d 4d 04	 lea	 ecx, DWORD PTR _strUser$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L89091:
  00008	8b 45 f0	 mov	 eax, DWORD PTR $T89087[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00011	59		 pop	 ecx
  00012	c3		 ret	 0
__ehhandler$?SendCT_USERMOVE_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EGMMM@Z:
  00013	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T89123
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendCT_USERMOVE_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@EGMMM@Z ENDP ; CTServer::SendCT_USERMOVE_ACK
PUBLIC	?SendCT_USERPOSITION_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@0@Z ; CTServer::SendCT_USERPOSITION_ACK
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
xdata$x	SEGMENT
$T89202	DD	0ffffffffH
	DD	FLAT:$L89136
	DD	00H
	DD	FLAT:$L89137
	DD	01H
	DD	FLAT:$L89138
$T89200	DD	019930520H
	DD	03H
	DD	FLAT:$T89202
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tcontrolsvr\tserver.cpp
xdata$x	ENDS
;	COMDAT ?SendCT_USERPOSITION_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@0@Z
_TEXT	SEGMENT
$T89133 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_strUser$ = 8						; size = 4
_strTarget$ = 12					; size = 4
?SendCT_USERPOSITION_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@0@Z PROC NEAR ; CTServer::SendCT_USERPOSITION_ACK, COMDAT
; _this$ = ecx

; 60   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendCT_USERPOSITION_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@0@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	53		 push	 ebx
  00017	55		 push	 ebp
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8b f9		 mov	 edi, ecx
  0001c	bb 01 00 00 00	 mov	 ebx, 1

; 61   : 	CPacket * pMsg = new CPacket();

  00021	6a 1c		 push	 28			; 0000001cH
  00023	89 5c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], ebx
  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	83 c4 04	 add	 esp, 4
  0002f	89 44 24 10	 mov	 DWORD PTR $T89133[esp+32], eax
  00033	85 c0		 test	 eax, eax
  00035	c6 44 24 1c 02	 mov	 BYTE PTR __$EHRec$[esp+40], 2
  0003a	74 0b		 je	 SHORT $L89134
  0003c	8b c8		 mov	 ecx, eax
  0003e	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  00043	8b f0		 mov	 esi, eax
  00045	eb 02		 jmp	 SHORT $L89135
$L89134:
  00047	33 f6		 xor	 esi, esi
$L89135:

; 62   : 	pMsg->SetID(CT_USERPOSITION_ACK)		
; 63   : 		<< strUser
; 64   : 		<< strTarget;

  00049	8b 6c 24 28	 mov	 ebp, DWORD PTR _strTarget$[esp+28]
  0004d	88 5c 24 1c	 mov	 BYTE PTR __$EHRec$[esp+40], bl
  00051	8b 5c 24 24	 mov	 ebx, DWORD PTR _strUser$[esp+28]
  00055	55		 push	 ebp
  00056	53		 push	 ebx
  00057	68 44 60 00 00	 push	 24644			; 00006044H
  0005c	8b ce		 mov	 ecx, esi
  0005e	e8 00 00 00 00	 call	 ?SetID@CPacket@@QAEAAV1@G@Z ; CPacket::SetID
  00063	8b c8		 mov	 ecx, eax
  00065	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@PBD@Z ; CPacket::operator<<
  0006a	8b c8		 mov	 ecx, eax
  0006c	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@PBD@Z ; CPacket::operator<<

; 65   : 
; 66   : 	Say(pMsg);

  00071	8b 07		 mov	 eax, DWORD PTR [edi]
  00073	56		 push	 esi
  00074	8b cf		 mov	 ecx, edi
  00076	ff 10		 call	 DWORD PTR [eax]

; 67   : }

  00078	8d 43 f0	 lea	 eax, DWORD PTR [ebx-16]
  0007b	c6 44 24 1c 00	 mov	 BYTE PTR __$EHRec$[esp+40], 0
  00080	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00083	83 ca ff	 or	 edx, -1
  00086	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0008a	4a		 dec	 edx
  0008b	85 d2		 test	 edx, edx
  0008d	7f 08		 jg	 SHORT $L89167
  0008f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00091	8b 11		 mov	 edx, DWORD PTR [ecx]
  00093	50		 push	 eax
  00094	ff 52 04	 call	 DWORD PTR [edx+4]
$L89167:
  00097	8d 45 f0	 lea	 eax, DWORD PTR [ebp-16]
  0009a	c7 44 24 1c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+40], -1
  000a2	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  000a5	83 ca ff	 or	 edx, -1
  000a8	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  000ac	4a		 dec	 edx
  000ad	85 d2		 test	 edx, edx
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5d		 pop	 ebp
  000b2	5b		 pop	 ebx
  000b3	7f 08		 jg	 SHORT $L89194
  000b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b7	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b9	50		 push	 eax
  000ba	ff 52 04	 call	 DWORD PTR [edx+4]
$L89194:
  000bd	8b 4c 24 04	 mov	 ecx, DWORD PTR __$EHRec$[esp+16]
  000c1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000c8	83 c4 10	 add	 esp, 16			; 00000010H
  000cb	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L89136:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _strTarget$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L89137:
  00008	8d 4d 04	 lea	 ecx, DWORD PTR _strUser$[ebp-4]
  0000b	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L89138:
  00010	8b 45 f0	 mov	 eax, DWORD PTR $T89133[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00019	59		 pop	 ecx
  0001a	c3		 ret	 0
__ehhandler$?SendCT_USERPOSITION_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@0@Z:
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T89200
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendCT_USERPOSITION_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@0@Z ENDP ; CTServer::SendCT_USERPOSITION_ACK
PUBLIC	?SendCT_CHATBAN_REQ@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@GKK@Z ; CTServer::SendCT_CHATBAN_REQ
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
xdata$x	SEGMENT
$T89247	DD	0ffffffffH
	DD	FLAT:$L89212
	DD	00H
	DD	FLAT:$L89213
$T89245	DD	019930520H
	DD	02H
	DD	FLAT:$T89247
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tcontrolsvr\tserver.cpp
xdata$x	ENDS
;	COMDAT ?SendCT_CHATBAN_REQ@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@GKK@Z
_TEXT	SEGMENT
$T89209 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_strName$ = 8						; size = 4
_wMin$ = 12						; size = 2
_dwBanSeq$ = 16						; size = 4
_dwManagerID$ = 20					; size = 4
?SendCT_CHATBAN_REQ@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@GKK@Z PROC NEAR ; CTServer::SendCT_CHATBAN_REQ, COMDAT
; _this$ = ecx

; 100  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendCT_CHATBAN_REQ@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@GKK@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b f9		 mov	 edi, ecx
  0001b	33 db		 xor	 ebx, ebx

; 101  : 	CPacket* pMsg = new CPacket();

  0001d	6a 1c		 push	 28			; 0000001cH
  0001f	89 5c 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], ebx
  00023	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00028	83 c4 04	 add	 esp, 4
  0002b	89 44 24 0c	 mov	 DWORD PTR $T89209[esp+28], eax
  0002f	3b c3		 cmp	 eax, ebx
  00031	c6 44 24 18 01	 mov	 BYTE PTR __$EHRec$[esp+36], 1
  00036	74 0b		 je	 SHORT $L89210
  00038	8b c8		 mov	 ecx, eax
  0003a	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  0003f	8b f0		 mov	 esi, eax
  00041	eb 02		 jmp	 SHORT $L89211
$L89210:
  00043	33 f6		 xor	 esi, esi
$L89211:

; 102  : 	pMsg->SetID(CT_CHATBAN_REQ)
; 103  : 		<< strName
; 104  : 		<< wMin
; 105  : 		<< dwBanSeq
; 106  : 		<< dwManagerID;

  00045	8b 44 24 2c	 mov	 eax, DWORD PTR _dwManagerID$[esp+24]
  00049	8b 4c 24 28	 mov	 ecx, DWORD PTR _dwBanSeq$[esp+24]
  0004d	8b 54 24 24	 mov	 edx, DWORD PTR _wMin$[esp+24]
  00051	50		 push	 eax
  00052	51		 push	 ecx
  00053	88 5c 24 20	 mov	 BYTE PTR __$EHRec$[esp+44], bl
  00057	8b 5c 24 28	 mov	 ebx, DWORD PTR _strName$[esp+32]
  0005b	52		 push	 edx
  0005c	53		 push	 ebx
  0005d	68 4c 60 00 00	 push	 24652			; 0000604cH
  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ?SetID@CPacket@@QAEAAV1@G@Z ; CPacket::SetID
  00069	8b c8		 mov	 ecx, eax
  0006b	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@PBD@Z ; CPacket::operator<<
  00070	8b c8		 mov	 ecx, eax
  00072	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<
  00077	8b c8		 mov	 ecx, eax
  00079	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<
  0007e	8b c8		 mov	 ecx, eax
  00080	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<

; 107  : 
; 108  : 	Say(pMsg);

  00085	8b 07		 mov	 eax, DWORD PTR [edi]
  00087	56		 push	 esi
  00088	8b cf		 mov	 ecx, edi
  0008a	ff 10		 call	 DWORD PTR [eax]

; 109  : }

  0008c	8d 43 f0	 lea	 eax, DWORD PTR [ebx-16]
  0008f	c7 44 24 18 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+36], -1
  00097	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  0009a	83 ca ff	 or	 edx, -1
  0009d	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  000a1	4a		 dec	 edx
  000a2	85 d2		 test	 edx, edx
  000a4	5f		 pop	 edi
  000a5	5e		 pop	 esi
  000a6	5b		 pop	 ebx
  000a7	7f 08		 jg	 SHORT $L89239
  000a9	8b 08		 mov	 ecx, DWORD PTR [eax]
  000ab	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ad	50		 push	 eax
  000ae	ff 52 04	 call	 DWORD PTR [edx+4]
$L89239:
  000b1	8b 4c 24 04	 mov	 ecx, DWORD PTR __$EHRec$[esp+16]
  000b5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000bc	83 c4 10	 add	 esp, 16			; 00000010H
  000bf	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L89212:
  00000	8d 4d 04	 lea	 ecx, DWORD PTR _strName$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L89213:
  00008	8b 45 f0	 mov	 eax, DWORD PTR $T89209[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00011	59		 pop	 ecx
  00012	c3		 ret	 0
__ehhandler$?SendCT_CHATBAN_REQ@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@GKK@Z:
  00013	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T89245
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendCT_CHATBAN_REQ@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@GKK@Z ENDP ; CTServer::SendCT_CHATBAN_REQ
PUBLIC	?SendCT_CHARMSG_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@0@Z ; CTServer::SendCT_CHARMSG_ACK
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
xdata$x	SEGMENT
$T89323	DD	0ffffffffH
	DD	FLAT:$L89257
	DD	00H
	DD	FLAT:$L89258
	DD	01H
	DD	FLAT:$L89259
$T89321	DD	019930520H
	DD	03H
	DD	FLAT:$T89323
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tcontrolsvr\tserver.cpp
xdata$x	ENDS
;	COMDAT ?SendCT_CHARMSG_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@0@Z
_TEXT	SEGMENT
$T89254 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_strName$ = 8						; size = 4
_strMsg$ = 12						; size = 4
?SendCT_CHARMSG_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@0@Z PROC NEAR ; CTServer::SendCT_CHARMSG_ACK, COMDAT
; _this$ = ecx

; 112  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendCT_CHARMSG_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@0@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	53		 push	 ebx
  00017	55		 push	 ebp
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8b f9		 mov	 edi, ecx
  0001c	bb 01 00 00 00	 mov	 ebx, 1

; 113  : 	CPacket* pMsg = new CPacket();

  00021	6a 1c		 push	 28			; 0000001cH
  00023	89 5c 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], ebx
  00027	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0002c	83 c4 04	 add	 esp, 4
  0002f	89 44 24 10	 mov	 DWORD PTR $T89254[esp+32], eax
  00033	85 c0		 test	 eax, eax
  00035	c6 44 24 1c 02	 mov	 BYTE PTR __$EHRec$[esp+40], 2
  0003a	74 0b		 je	 SHORT $L89255
  0003c	8b c8		 mov	 ecx, eax
  0003e	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  00043	8b f0		 mov	 esi, eax
  00045	eb 02		 jmp	 SHORT $L89256
$L89255:
  00047	33 f6		 xor	 esi, esi
$L89256:

; 114  : 	pMsg->SetID(CT_CHARMSG_ACK)
; 115  : 		<< strName
; 116  : 		<< strMsg;

  00049	8b 6c 24 28	 mov	 ebp, DWORD PTR _strMsg$[esp+28]
  0004d	88 5c 24 1c	 mov	 BYTE PTR __$EHRec$[esp+40], bl
  00051	8b 5c 24 24	 mov	 ebx, DWORD PTR _strName$[esp+28]
  00055	55		 push	 ebp
  00056	53		 push	 ebx
  00057	68 3d 60 00 00	 push	 24637			; 0000603dH
  0005c	8b ce		 mov	 ecx, esi
  0005e	e8 00 00 00 00	 call	 ?SetID@CPacket@@QAEAAV1@G@Z ; CPacket::SetID
  00063	8b c8		 mov	 ecx, eax
  00065	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@PBD@Z ; CPacket::operator<<
  0006a	8b c8		 mov	 ecx, eax
  0006c	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@PBD@Z ; CPacket::operator<<

; 117  : 
; 118  : 	Say(pMsg);

  00071	8b 07		 mov	 eax, DWORD PTR [edi]
  00073	56		 push	 esi
  00074	8b cf		 mov	 ecx, edi
  00076	ff 10		 call	 DWORD PTR [eax]

; 119  : }

  00078	8d 43 f0	 lea	 eax, DWORD PTR [ebx-16]
  0007b	c6 44 24 1c 00	 mov	 BYTE PTR __$EHRec$[esp+40], 0
  00080	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00083	83 ca ff	 or	 edx, -1
  00086	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0008a	4a		 dec	 edx
  0008b	85 d2		 test	 edx, edx
  0008d	7f 08		 jg	 SHORT $L89288
  0008f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00091	8b 11		 mov	 edx, DWORD PTR [ecx]
  00093	50		 push	 eax
  00094	ff 52 04	 call	 DWORD PTR [edx+4]
$L89288:
  00097	8d 45 f0	 lea	 eax, DWORD PTR [ebp-16]
  0009a	c7 44 24 1c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+40], -1
  000a2	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  000a5	83 ca ff	 or	 edx, -1
  000a8	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  000ac	4a		 dec	 edx
  000ad	85 d2		 test	 edx, edx
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5d		 pop	 ebp
  000b2	5b		 pop	 ebx
  000b3	7f 08		 jg	 SHORT $L89315
  000b5	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b7	8b 11		 mov	 edx, DWORD PTR [ecx]
  000b9	50		 push	 eax
  000ba	ff 52 04	 call	 DWORD PTR [edx+4]
$L89315:
  000bd	8b 4c 24 04	 mov	 ecx, DWORD PTR __$EHRec$[esp+16]
  000c1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000c8	83 c4 10	 add	 esp, 16			; 00000010H
  000cb	c2 08 00	 ret	 8
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L89257:
  00000	8d 4d 08	 lea	 ecx, DWORD PTR _strMsg$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L89258:
  00008	8d 4d 04	 lea	 ecx, DWORD PTR _strName$[ebp-4]
  0000b	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L89259:
  00010	8b 45 f0	 mov	 eax, DWORD PTR $T89254[ebp]
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00019	59		 pop	 ecx
  0001a	c3		 ret	 0
__ehhandler$?SendCT_CHARMSG_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@0@Z:
  0001b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T89321
  00020	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendCT_CHARMSG_ACK@CTServer@@QAEXV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@0@Z ENDP ; CTServer::SendCT_CHARMSG_ACK
PUBLIC	?SendCT_ITEMFIND_REQ@CTServer@@QAEXKGV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ; CTServer::SendCT_ITEMFIND_REQ
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
xdata$x	SEGMENT
$T89368	DD	0ffffffffH
	DD	FLAT:$L89333
	DD	00H
	DD	FLAT:$L89334
$T89366	DD	019930520H
	DD	02H
	DD	FLAT:$T89368
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tcontrolsvr\tserver.cpp
xdata$x	ENDS
;	COMDAT ?SendCT_ITEMFIND_REQ@CTServer@@QAEXKGV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
_TEXT	SEGMENT
$T89330 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_dwManagerID$ = 8					; size = 4
_wItemID$ = 12						; size = 2
_strName$ = 16						; size = 4
?SendCT_ITEMFIND_REQ@CTServer@@QAEXKGV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z PROC NEAR ; CTServer::SendCT_ITEMFIND_REQ, COMDAT
; _this$ = ecx

; 130  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendCT_ITEMFIND_REQ@CTServer@@QAEXKGV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b f9		 mov	 edi, ecx
  0001b	33 db		 xor	 ebx, ebx

; 131  : 	CPacket* pMsg = new CPacket();

  0001d	6a 1c		 push	 28			; 0000001cH
  0001f	89 5c 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], ebx
  00023	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00028	83 c4 04	 add	 esp, 4
  0002b	89 44 24 0c	 mov	 DWORD PTR $T89330[esp+28], eax
  0002f	3b c3		 cmp	 eax, ebx
  00031	c6 44 24 18 01	 mov	 BYTE PTR __$EHRec$[esp+36], 1
  00036	74 0b		 je	 SHORT $L89331
  00038	8b c8		 mov	 ecx, eax
  0003a	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  0003f	8b f0		 mov	 esi, eax
  00041	eb 02		 jmp	 SHORT $L89332
$L89331:
  00043	33 f6		 xor	 esi, esi
$L89332:

; 132  : 	pMsg->SetID(CT_ITEMFIND_REQ)
; 133  : 		<< dwManagerID
; 134  : 		<< wItemID
; 135  : 		<< strName;

  00045	8b 44 24 24	 mov	 eax, DWORD PTR _wItemID$[esp+24]
  00049	8b 4c 24 20	 mov	 ecx, DWORD PTR _dwManagerID$[esp+24]
  0004d	88 5c 24 18	 mov	 BYTE PTR __$EHRec$[esp+36], bl
  00051	8b 5c 24 28	 mov	 ebx, DWORD PTR _strName$[esp+24]
  00055	53		 push	 ebx
  00056	50		 push	 eax
  00057	51		 push	 ecx
  00058	68 50 60 00 00	 push	 24656			; 00006050H
  0005d	8b ce		 mov	 ecx, esi
  0005f	e8 00 00 00 00	 call	 ?SetID@CPacket@@QAEAAV1@G@Z ; CPacket::SetID
  00064	8b c8		 mov	 ecx, eax
  00066	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<
  0006b	8b c8		 mov	 ecx, eax
  0006d	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<
  00072	8b c8		 mov	 ecx, eax
  00074	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@PBD@Z ; CPacket::operator<<

; 136  : 
; 137  : 	Say(pMsg);

  00079	8b 17		 mov	 edx, DWORD PTR [edi]
  0007b	56		 push	 esi
  0007c	8b cf		 mov	 ecx, edi
  0007e	ff 12		 call	 DWORD PTR [edx]

; 138  : }

  00080	8d 43 f0	 lea	 eax, DWORD PTR [ebx-16]
  00083	c7 44 24 18 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+36], -1
  0008b	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  0008e	83 ca ff	 or	 edx, -1
  00091	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00095	4a		 dec	 edx
  00096	85 d2		 test	 edx, edx
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx
  0009b	7f 08		 jg	 SHORT $L89360
  0009d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009f	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a1	50		 push	 eax
  000a2	ff 52 04	 call	 DWORD PTR [edx+4]
$L89360:
  000a5	8b 4c 24 04	 mov	 ecx, DWORD PTR __$EHRec$[esp+16]
  000a9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000b0	83 c4 10	 add	 esp, 16			; 00000010H
  000b3	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L89333:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR _strName$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L89334:
  00008	8b 45 f0	 mov	 eax, DWORD PTR $T89330[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00011	59		 pop	 ecx
  00012	c3		 ret	 0
__ehhandler$?SendCT_ITEMFIND_REQ@CTServer@@QAEXKGV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z:
  00013	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T89366
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendCT_ITEMFIND_REQ@CTServer@@QAEXKGV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ENDP ; CTServer::SendCT_ITEMFIND_REQ
PUBLIC	?SendCT_EVENTMSG_REQ@CTServer@@QAEXEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ; CTServer::SendCT_EVENTMSG_REQ
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
xdata$x	SEGMENT
$T89413	DD	0ffffffffH
	DD	FLAT:$L89378
	DD	00H
	DD	FLAT:$L89379
$T89411	DD	019930520H
	DD	02H
	DD	FLAT:$T89413
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tcontrolsvr\tserver.cpp
xdata$x	ENDS
;	COMDAT ?SendCT_EVENTMSG_REQ@CTServer@@QAEXEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
_TEXT	SEGMENT
$T89375 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_bEventID$ = 8						; size = 1
_bEventMsgType$ = 12					; size = 1
_strMsg$ = 16						; size = 4
?SendCT_EVENTMSG_REQ@CTServer@@QAEXEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z PROC NEAR ; CTServer::SendCT_EVENTMSG_REQ, COMDAT
; _this$ = ecx

; 203  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendCT_EVENTMSG_REQ@CTServer@@QAEXEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	53		 push	 ebx
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	8b f9		 mov	 edi, ecx
  0001b	33 db		 xor	 ebx, ebx

; 204  : 	CPacket* pMsg = new CPacket();

  0001d	6a 1c		 push	 28			; 0000001cH
  0001f	89 5c 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], ebx
  00023	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00028	83 c4 04	 add	 esp, 4
  0002b	89 44 24 0c	 mov	 DWORD PTR $T89375[esp+28], eax
  0002f	3b c3		 cmp	 eax, ebx
  00031	c6 44 24 18 01	 mov	 BYTE PTR __$EHRec$[esp+36], 1
  00036	74 0b		 je	 SHORT $L89376
  00038	8b c8		 mov	 ecx, eax
  0003a	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  0003f	8b f0		 mov	 esi, eax
  00041	eb 02		 jmp	 SHORT $L89377
$L89376:
  00043	33 f6		 xor	 esi, esi
$L89377:

; 205  : 	pMsg->SetID(CT_EVENTMSG_REQ)
; 206  : 		<< bEventID
; 207  : 		<< bEventMsgType
; 208  : 		<< strMsg;

  00045	8b 44 24 24	 mov	 eax, DWORD PTR _bEventMsgType$[esp+24]
  00049	8b 4c 24 20	 mov	 ecx, DWORD PTR _bEventID$[esp+24]
  0004d	88 5c 24 18	 mov	 BYTE PTR __$EHRec$[esp+36], bl
  00051	8b 5c 24 28	 mov	 ebx, DWORD PTR _strMsg$[esp+24]
  00055	53		 push	 ebx
  00056	50		 push	 eax
  00057	51		 push	 ecx
  00058	68 65 60 00 00	 push	 24677			; 00006065H
  0005d	8b ce		 mov	 ecx, esi
  0005f	e8 00 00 00 00	 call	 ?SetID@CPacket@@QAEAAV1@G@Z ; CPacket::SetID
  00064	8b c8		 mov	 ecx, eax
  00066	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  0006b	8b c8		 mov	 ecx, eax
  0006d	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  00072	8b c8		 mov	 ecx, eax
  00074	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@PBD@Z ; CPacket::operator<<

; 209  : 
; 210  : 	Say(pMsg);

  00079	8b 17		 mov	 edx, DWORD PTR [edi]
  0007b	56		 push	 esi
  0007c	8b cf		 mov	 ecx, edi
  0007e	ff 12		 call	 DWORD PTR [edx]

; 211  : }

  00080	8d 43 f0	 lea	 eax, DWORD PTR [ebx-16]
  00083	c7 44 24 18 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+36], -1
  0008b	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  0008e	83 ca ff	 or	 edx, -1
  00091	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00095	4a		 dec	 edx
  00096	85 d2		 test	 edx, edx
  00098	5f		 pop	 edi
  00099	5e		 pop	 esi
  0009a	5b		 pop	 ebx
  0009b	7f 08		 jg	 SHORT $L89405
  0009d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0009f	8b 11		 mov	 edx, DWORD PTR [ecx]
  000a1	50		 push	 eax
  000a2	ff 52 04	 call	 DWORD PTR [edx+4]
$L89405:
  000a5	8b 4c 24 04	 mov	 ecx, DWORD PTR __$EHRec$[esp+16]
  000a9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000b0	83 c4 10	 add	 esp, 16			; 00000010H
  000b3	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L89378:
  00000	8d 4d 0c	 lea	 ecx, DWORD PTR _strMsg$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
$L89379:
  00008	8b 45 f0	 mov	 eax, DWORD PTR $T89375[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00011	59		 pop	 ecx
  00012	c3		 ret	 0
__ehhandler$?SendCT_EVENTMSG_REQ@CTServer@@QAEXEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z:
  00013	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T89411
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendCT_EVENTMSG_REQ@CTServer@@QAEXEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ENDP ; CTServer::SendCT_EVENTMSG_REQ
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 456  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 457  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $L89452
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$L89452:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 458  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??A?$vector@GV?$allocator@G@std@@@std@@QAEAAGI@Z ; std::vector<unsigned short,std::allocator<unsigned short> >::operator[]
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??A?$vector@GV?$allocator@G@std@@@std@@QAEAAGI@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@GV?$allocator@G@std@@@std@@QAEAAGI@Z PROC NEAR ; std::vector<unsigned short,std::allocator<unsigned short> >::operator[], COMDAT
; _this$ = ecx

; 555  : 		return (*(begin() + _Pos));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pos$[esp-4]
  00007	8d 04 48	 lea	 eax, DWORD PTR [eax+ecx*2]

; 556  : 		}

  0000a	c2 04 00	 ret	 4
??A?$vector@GV?$allocator@G@std@@@std@@QAEAAGI@Z ENDP	; std::vector<unsigned short,std::allocator<unsigned short> >::operator[]
_TEXT	ENDS
PUBLIC	??A?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAEAAUtagTCASHITEMSALE@@I@Z ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::operator[]
; Function compile flags: /Ogty
;	COMDAT ??A?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAEAAUtagTCASHITEMSALE@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAEAAUtagTCASHITEMSALE@@I@Z PROC NEAR ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::operator[], COMDAT
; _this$ = ecx

; 555  : 		return (*(begin() + _Pos));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pos$[esp-4]
  00007	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 556  : 		}

  0000a	c2 04 00	 ret	 4
??A?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAEAAUtagTCASHITEMSALE@@I@Z ENDP ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::operator[]
_TEXT	ENDS
PUBLIC	??A?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QAEAAUtagMONREGEN@@I@Z ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::operator[]
; Function compile flags: /Ogty
;	COMDAT ??A?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QAEAAUtagMONREGEN@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QAEAAUtagMONREGEN@@I@Z PROC NEAR ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::operator[], COMDAT
; _this$ = ecx

; 555  : 		return (*(begin() + _Pos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pos$[esp-4]
  00004	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00007	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0000a	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]

; 556  : 		}

  0000d	c2 04 00	 ret	 4
??A?$vector@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@QAEAAUtagMONREGEN@@I@Z ENDP ; std::vector<tagMONREGEN,std::allocator<tagMONREGEN> >::operator[]
_TEXT	ENDS
PUBLIC	??A?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QAEAAUtagLOTTERY@@I@Z ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::operator[]
; Function compile flags: /Ogty
;	COMDAT ??A?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QAEAAUtagLOTTERY@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QAEAAUtagLOTTERY@@I@Z PROC NEAR ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::operator[], COMDAT
; _this$ = ecx

; 555  : 		return (*(begin() + _Pos));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pos$[esp-4]
  00004	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00007	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  0000a	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]

; 556  : 		}

  0000d	c2 04 00	 ret	 4
??A?$vector@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@QAEAAUtagLOTTERY@@I@Z ENDP ; std::vector<tagLOTTERY,std::allocator<tagLOTTERY> >::operator[]
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xlen
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1480 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	56		 push	 esi

; 1481 : 		if (max_size() < _Newsize)

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR __Newsize$[esp+4]
  00006	83 fe fe	 cmp	 esi, -2			; fffffffeH
  00009	8b e9		 mov	 ebp, ecx
  0000b	76 05		 jbe	 SHORT $L86161

; 1482 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L86161:

; 1483 : 		if (_Myres < _Newsize)

  00012	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00015	3b c6		 cmp	 eax, esi
  00017	73 19		 jae	 SHORT $L86162

; 1484 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0001c	50		 push	 eax
  0001d	56		 push	 esi
  0001e	8b cd		 mov	 ecx, ebp
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c0		 xor	 eax, eax
  00027	3b c6		 cmp	 eax, esi
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5d		 pop	 ebp

; 1491 : 		}

  0002f	c2 08 00	 ret	 8
$L86162:

; 1485 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	8a 4c 24 10	 mov	 cl, BYTE PTR __Trim$[esp+4]
  00036	84 c9		 test	 cl, cl
  00038	74 5c		 je	 SHORT $L86164
  0003a	83 fe 10	 cmp	 esi, 16			; 00000010H
  0003d	73 57		 jae	 SHORT $L86164
  0003f	53		 push	 ebx

; 1486 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1487 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  00040	8b 5d 14	 mov	 ebx, DWORD PTR [ebp+20]
  00043	3b f3		 cmp	 esi, ebx
  00045	73 02		 jae	 SHORT $L89625
  00047	8b de		 mov	 ebx, esi
$L89625:
  00049	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004c	72 2b		 jb	 SHORT $L89679
  0004e	85 db		 test	 ebx, ebx
  00050	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00053	57		 push	 edi
  00054	8d 7d 04	 lea	 edi, DWORD PTR [ebp+4]
  00057	76 16		 jbe	 SHORT $L89678
  00059	8b cb		 mov	 ecx, ebx
  0005b	8b d1		 mov	 edx, ecx
  0005d	c1 e9 02	 shr	 ecx, 2
  00060	8b f0		 mov	 esi, eax
  00062	f3 a5		 rep movsd
  00064	8b ca		 mov	 ecx, edx
  00066	83 e1 03	 and	 ecx, 3
  00069	f3 a4		 rep movsb
  0006b	8b 74 24 14	 mov	 esi, DWORD PTR __Newsize$[esp+12]
$L89678:
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00075	83 c4 04	 add	 esp, 4
  00078	5f		 pop	 edi
$L89679:
  00079	89 5d 14	 mov	 DWORD PTR [ebp+20], ebx

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  0007c	33 c0		 xor	 eax, eax
  0007e	c7 45 18 0f 00
	00 00		 mov	 DWORD PTR [ebp+24], 15	; 0000000fH
  00085	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0008a	3b c6		 cmp	 eax, esi
  0008c	5b		 pop	 ebx
  0008d	1b c0		 sbb	 eax, eax
  0008f	5e		 pop	 esi
  00090	f7 d8		 neg	 eax
  00092	5d		 pop	 ebp

; 1491 : 		}

  00093	c2 08 00	 ret	 8
$L86164:

; 1488 : 		else if (_Newsize == 0)

  00096	85 f6		 test	 esi, esi
  00098	75 23		 jne	 SHORT $L89717

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

  0009a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0009d	89 75 14	 mov	 DWORD PTR [ebp+20], esi
  000a0	72 14		 jb	 SHORT $L89714
  000a2	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000a5	33 c0		 xor	 eax, eax
  000a7	3b c6		 cmp	 eax, esi
  000a9	1b c0		 sbb	 eax, eax
  000ab	5e		 pop	 esi
  000ac	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
  000b0	f7 d8		 neg	 eax
  000b2	5d		 pop	 ebp

; 1491 : 		}

  000b3	c2 08 00	 ret	 8

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

$L89714:
  000b6	83 c5 04	 add	 ebp, 4
  000b9	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
$L89717:

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000bd	33 c0		 xor	 eax, eax
  000bf	3b c6		 cmp	 eax, esi
  000c1	1b c0		 sbb	 eax, eax
  000c3	5e		 pop	 esi
  000c4	f7 d8		 neg	 eax
  000c6	5d		 pop	 ebp

; 1491 : 		}

  000c7	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:NEAR		; std::logic_error::`vector deleting destructor'
EXTRN	??1exception@@UAE@XZ:NEAR			; exception::~exception
;	COMDAT ??_7logic_error@std@@6B@
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
CONST	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC NEAR			; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 23   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L89780
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L89780:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC NEAR		; std::logic_error::what, COMDAT
; _this$ = ecx

; 27   : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L89813
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  00009	c3		 ret	 0

; 27   : 		return (_Str.c_str());

$L89813:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  0000d	c3		 ret	 0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC NEAR		; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1logic_error@std@@UAE@XZ ; std::logic_error::~logic_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L89820
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L89820:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?WrapPacketIn@tagEVENTINFO@@QAEXPAVCPacket@@@Z	; tagEVENTINFO::WrapPacketIn
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tcontrolsvr\tcontroltype.h
;	COMDAT ?WrapPacketIn@tagEVENTINFO@@QAEXPAVCPacket@@@Z
_TEXT	SEGMENT
_pMsg$ = 8						; size = 4
?WrapPacketIn@tagEVENTINFO@@QAEXPAVCPacket@@@Z PROC NEAR ; tagEVENTINFO::WrapPacketIn, COMDAT
; _this$ = ecx

; 332  : 	{

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 333  : 		(*pMsg)
; 334  : 			<< m_dwIndex
; 335  : 			<< m_bID
; 336  : 			<< m_bState
; 337  : 			<< m_bGroupID
; 338  : 			<< m_bSvrType
; 339  : 			<< m_bSvrID
; 340  : 			<< m_dStartDate
; 341  : 			<< m_dEndDate	
; 342  : 			<< m_wValue
; 343  : 			<< m_wMapID
; 344  : 			<< m_dwStartAlarm
; 345  : 			<< m_dwEndAlarm
; 346  : 			<< m_strStartMsg
; 347  : 			<< m_strEndMsg
; 348  : 			<< m_strTitle
; 349  : 			<< m_bPartTime
; 350  : 			<< m_strLotMsg
; 351  : 			<< (WORD)m_vCashItem.size();

  00004	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00007	85 c9		 test	 ecx, ecx
  00009	57		 push	 edi
  0000a	75 04		 jne	 SHORT $L89829
  0000c	33 c0		 xor	 eax, eax
  0000e	eb 08		 jmp	 SHORT $L89830
$L89829:
  00010	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00013	2b c1		 sub	 eax, ecx
  00015	c1 f8 02	 sar	 eax, 2
$L89830:
  00018	8b 8e 80 00 00
	00		 mov	 ecx, DWORD PTR [esi+128]
  0001e	50		 push	 eax
  0001f	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00022	8b 7e 34	 mov	 edi, DWORD PTR [esi+52]
  00025	8b 5e 30	 mov	 ebx, DWORD PTR [esi+48]
  00028	51		 push	 ecx
  00029	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  0002c	33 c0		 xor	 eax, eax
  0002e	8a 46 39	 mov	 al, BYTE PTR [esi+57]
  00031	50		 push	 eax
  00032	52		 push	 edx
  00033	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  00036	57		 push	 edi
  00037	53		 push	 ebx
  00038	51		 push	 ecx
  00039	52		 push	 edx
  0003a	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  0003d	33 c0		 xor	 eax, eax
  0003f	66 8b 46 22	 mov	 ax, WORD PTR [esi+34]
  00043	33 c9		 xor	 ecx, ecx
  00045	66 8b 4e 20	 mov	 cx, WORD PTR [esi+32]
  00049	8b 5c 24 30	 mov	 ebx, DWORD PTR _pMsg$[esp+40]
  0004d	50		 push	 eax
  0004e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00051	51		 push	 ecx
  00052	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00055	52		 push	 edx
  00056	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00059	50		 push	 eax
  0005a	51		 push	 ecx
  0005b	33 c0		 xor	 eax, eax
  0005d	8a 46 0e	 mov	 al, BYTE PTR [esi+14]
  00060	33 c9		 xor	 ecx, ecx
  00062	8a 4e 0d	 mov	 cl, BYTE PTR [esi+13]
  00065	52		 push	 edx
  00066	33 d2		 xor	 edx, edx
  00068	8a 56 0c	 mov	 dl, BYTE PTR [esi+12]
  0006b	50		 push	 eax
  0006c	33 c0		 xor	 eax, eax
  0006e	8a 46 38	 mov	 al, BYTE PTR [esi+56]
  00071	51		 push	 ecx
  00072	33 c9		 xor	 ecx, ecx
  00074	8a 4e 04	 mov	 cl, BYTE PTR [esi+4]
  00077	52		 push	 edx
  00078	8b 16		 mov	 edx, DWORD PTR [esi]
  0007a	50		 push	 eax
  0007b	51		 push	 ecx
  0007c	52		 push	 edx
  0007d	8b cb		 mov	 ecx, ebx
  0007f	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<
  00084	8b c8		 mov	 ecx, eax
  00086	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  0008b	8b c8		 mov	 ecx, eax
  0008d	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  00092	8b c8		 mov	 ecx, eax
  00094	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  00099	8b c8		 mov	 ecx, eax
  0009b	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  000a0	8b c8		 mov	 ecx, eax
  000a2	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  000a7	8b c8		 mov	 ecx, eax
  000a9	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@_J@Z ; CPacket::operator<<
  000ae	8b c8		 mov	 ecx, eax
  000b0	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@_J@Z ; CPacket::operator<<
  000b5	8b c8		 mov	 ecx, eax
  000b7	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<
  000bc	8b c8		 mov	 ecx, eax
  000be	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<
  000c3	8b c8		 mov	 ecx, eax
  000c5	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<
  000ca	8b c8		 mov	 ecx, eax
  000cc	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<
  000d1	8b c8		 mov	 ecx, eax
  000d3	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@PBD@Z ; CPacket::operator<<
  000d8	8b c8		 mov	 ecx, eax
  000da	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@PBD@Z ; CPacket::operator<<
  000df	8b c8		 mov	 ecx, eax
  000e1	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@PBD@Z ; CPacket::operator<<
  000e6	8b c8		 mov	 ecx, eax
  000e8	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  000ed	8b c8		 mov	 ecx, eax
  000ef	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@PBD@Z ; CPacket::operator<<
  000f4	8b c8		 mov	 ecx, eax
  000f6	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<

; 352  : 
; 353  : 		WORD i;
; 354  : 		for(i = 0; i < (WORD)m_vCashItem.size(); i++)

  000fb	33 ff		 xor	 edi, edi
  000fd	8d 49 00	 npad	 3
$L78192:
  00100	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00103	85 c9		 test	 ecx, ecx
  00105	74 2e		 je	 SHORT $L90568
  00107	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0010a	2b c1		 sub	 eax, ecx
  0010c	c1 f8 02	 sar	 eax, 2
  0010f	66 3b f8	 cmp	 di, ax
  00112	73 21		 jae	 SHORT $L90568

; 355  : 		{
; 356  : 			(*pMsg)
; 357  : 				<< m_vCashItem[i].m_wID
; 358  : 				<< m_vCashItem[i].m_bSaleValue;

  00114	0f b7 c7	 movzx	 eax, di
  00117	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0011a	33 d2		 xor	 edx, edx
  0011c	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  0011f	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00122	8b cb		 mov	 ecx, ebx
  00124	52		 push	 edx
  00125	50		 push	 eax
  00126	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<
  0012b	8b c8		 mov	 ecx, eax
  0012d	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  00132	47		 inc	 edi
  00133	eb cb		 jmp	 SHORT $L78192
$L90568:

; 359  : 		}
; 360  : 
; 361  : 		(*pMsg)
; 362  : 			<< m_stMONEVENT.m_bStartAction
; 363  : 			<< m_stMONEVENT.m_bEndAction
; 364  : 			<< (WORD)m_stMONEVENT.m_vSpawnID.size();

  00135	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  00138	85 c9		 test	 ecx, ecx
  0013a	75 04		 jne	 SHORT $L89970
  0013c	33 c0		 xor	 eax, eax
  0013e	eb 07		 jmp	 SHORT $L89971
$L89970:
  00140	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  00143	2b c1		 sub	 eax, ecx
  00145	d1 f8		 sar	 eax, 1
$L89971:
  00147	33 c9		 xor	 ecx, ecx
  00149	8a 4e 4d	 mov	 cl, BYTE PTR [esi+77]
  0014c	33 d2		 xor	 edx, edx
  0014e	8a 56 4c	 mov	 dl, BYTE PTR [esi+76]
  00151	50		 push	 eax
  00152	51		 push	 ecx
  00153	8b cb		 mov	 ecx, ebx
  00155	52		 push	 edx
  00156	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  0015b	8b c8		 mov	 ecx, eax
  0015d	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  00162	8b c8		 mov	 ecx, eax
  00164	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<

; 365  : 
; 366  : 		for(i = 0; i < (WORD)m_stMONEVENT.m_vSpawnID.size(); i++)

  00169	33 ff		 xor	 edi, edi
  0016b	eb 03 8d 49 00	 npad	 5
$L78197:
  00170	8b 4e 54	 mov	 ecx, DWORD PTR [esi+84]
  00173	85 c9		 test	 ecx, ecx
  00175	74 22		 je	 SHORT $L90569
  00177	8b 46 58	 mov	 eax, DWORD PTR [esi+88]
  0017a	2b c1		 sub	 eax, ecx
  0017c	d1 f8		 sar	 eax, 1
  0017e	66 3b f8	 cmp	 di, ax
  00181	73 16		 jae	 SHORT $L90569

; 367  : 		{
; 368  : 			(*pMsg)
; 369  : 				<< m_stMONEVENT.m_vSpawnID[i];

  00183	0f b7 c7	 movzx	 eax, di
  00186	8d 04 41	 lea	 eax, DWORD PTR [ecx+eax*2]
  00189	33 d2		 xor	 edx, edx
  0018b	66 8b 10	 mov	 dx, WORD PTR [eax]
  0018e	8b cb		 mov	 ecx, ebx
  00190	52		 push	 edx
  00191	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<
  00196	47		 inc	 edi
  00197	eb d7		 jmp	 SHORT $L78197
$L90569:

; 370  : 		}
; 371  : 
; 372  : 		(*pMsg)
; 373  : 			<< (WORD)m_vMONREGEN.size();

  00199	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  0019c	85 c0		 test	 eax, eax
  0019e	74 16		 je	 SHORT $L90043
$L90042:
  001a0	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  001a3	2b c8		 sub	 ecx, eax
  001a5	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  001aa	f7 e9		 imul	 ecx
  001ac	c1 fa 02	 sar	 edx, 2
  001af	8b c2		 mov	 eax, edx
  001b1	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001b4	03 c2		 add	 eax, edx
$L90043:
  001b6	50		 push	 eax
  001b7	8b cb		 mov	 ecx, ebx
  001b9	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<

; 374  : 		for(i = 0; i < (WORD)m_vMONREGEN.size(); i++)

  001be	33 ff		 xor	 edi, edi
$L78202:
  001c0	8b 46 64	 mov	 eax, DWORD PTR [esi+100]
  001c3	85 c0		 test	 eax, eax
  001c5	74 70		 je	 SHORT $L90570
  001c7	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  001ca	2b c8		 sub	 ecx, eax
  001cc	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  001d1	f7 e9		 imul	 ecx
  001d3	c1 fa 02	 sar	 edx, 2
  001d6	8b c2		 mov	 eax, edx
  001d8	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001db	03 c2		 add	 eax, edx
  001dd	66 3b f8	 cmp	 di, ax
  001e0	73 55		 jae	 SHORT $L90570

; 375  : 		{
; 376  : 			(*pMsg)
; 377  : 				<< m_vMONREGEN[i].m_wMonID
; 378  : 				<< m_vMONREGEN[i].m_dwDelay
; 379  : 				<< m_vMONREGEN[i].m_wMapID
; 380  : 				<< m_vMONREGEN[i].m_fPosX
; 381  : 				<< m_vMONREGEN[i].m_fPosY
; 382  : 				<< m_vMONREGEN[i].m_fPosZ;

  001e2	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  001e5	0f b7 c7	 movzx	 eax, di
  001e8	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  001eb	8b 54 c1 14	 mov	 edx, DWORD PTR [ecx+eax*8+20]
  001ef	8d 04 c1	 lea	 eax, DWORD PTR [ecx+eax*8]
  001f2	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  001f5	52		 push	 edx
  001f6	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  001f9	51		 push	 ecx
  001fa	33 c9		 xor	 ecx, ecx
  001fc	66 8b 48 08	 mov	 cx, WORD PTR [eax+8]
  00200	52		 push	 edx
  00201	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00204	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00207	51		 push	 ecx
  00208	52		 push	 edx
  00209	50		 push	 eax
  0020a	8b cb		 mov	 ecx, ebx
  0020c	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<
  00211	8b c8		 mov	 ecx, eax
  00213	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<
  00218	8b c8		 mov	 ecx, eax
  0021a	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<
  0021f	8b c8		 mov	 ecx, eax
  00221	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@M@Z	; CPacket::operator<<
  00226	8b c8		 mov	 ecx, eax
  00228	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@M@Z	; CPacket::operator<<
  0022d	8b c8		 mov	 ecx, eax
  0022f	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@M@Z	; CPacket::operator<<
  00234	47		 inc	 edi
  00235	eb 89		 jmp	 SHORT $L78202
$L90570:

; 383  : 		}
; 384  : 
; 385  : 		(*pMsg)
; 386  : 			<< (WORD)m_vLOTTERY.size();

  00237	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  0023a	85 c0		 test	 eax, eax
  0023c	74 13		 je	 SHORT $L90388
$L90387:
  0023e	8b 4e 78	 mov	 ecx, DWORD PTR [esi+120]
  00241	2b c8		 sub	 ecx, eax
  00243	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00248	f7 e9		 imul	 ecx
  0024a	8b c2		 mov	 eax, edx
  0024c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0024f	03 c2		 add	 eax, edx
$L90388:
  00251	50		 push	 eax
  00252	8b cb		 mov	 ecx, ebx
  00254	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<

; 387  : 		for(i = 0; i < (WORD)m_vLOTTERY.size(); i++)

  00259	33 ff		 xor	 edi, edi
  0025b	eb 03 8d 49 00	 npad	 5
$L78207:
  00260	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00263	85 c0		 test	 eax, eax
  00265	74 4d		 je	 SHORT $L90571
  00267	8b 4e 78	 mov	 ecx, DWORD PTR [esi+120]
  0026a	2b c8		 sub	 ecx, eax
  0026c	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00271	f7 e9		 imul	 ecx
  00273	8b c2		 mov	 eax, edx
  00275	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00278	03 c2		 add	 eax, edx
  0027a	66 3b f8	 cmp	 di, ax
  0027d	73 35		 jae	 SHORT $L90571

; 388  : 		{
; 389  : 			(*pMsg)
; 390  : 				<< m_vLOTTERY[i].m_wItemID
; 391  : 				<< m_vLOTTERY[i].m_bNum
; 392  : 				<< m_vLOTTERY[i].m_wWinner;

  0027f	8b 56 74	 mov	 edx, DWORD PTR [esi+116]
  00282	0f b7 c7	 movzx	 eax, di
  00285	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00288	8d 04 4a	 lea	 eax, DWORD PTR [edx+ecx*2]
  0028b	33 c9		 xor	 ecx, ecx
  0028d	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  00291	33 d2		 xor	 edx, edx
  00293	8a 50 02	 mov	 dl, BYTE PTR [eax+2]
  00296	0f b7 00	 movzx	 eax, WORD PTR [eax]
  00299	51		 push	 ecx
  0029a	8b cb		 mov	 ecx, ebx
  0029c	52		 push	 edx
  0029d	50		 push	 eax
  0029e	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<
  002a3	8b c8		 mov	 ecx, eax
  002a5	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  002aa	8b c8		 mov	 ecx, eax
  002ac	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<
  002b1	47		 inc	 edi
  002b2	eb ac		 jmp	 SHORT $L78207
$L90571:
  002b4	5f		 pop	 edi
  002b5	5e		 pop	 esi
  002b6	5b		 pop	 ebx

; 393  : 		}
; 394  : 	}

  002b7	c2 04 00	 ret	 4
?WrapPacketIn@tagEVENTINFO@@QAEXPAVCPacket@@@Z ENDP	; tagEVENTINFO::WrapPacketIn
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 590  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 591  : 		if (_Right.size() < _Roff)

  00003	8b 74 24 14	 mov	 esi, DWORD PTR __Roff$[esp+8]
  00007	57		 push	 edi
  00008	8b 7c 24 14	 mov	 edi, DWORD PTR __Right$[esp+12]
  0000c	39 77 14	 cmp	 DWORD PTR [edi+20], esi
  0000f	8b d9		 mov	 ebx, ecx
  00011	73 05		 jae	 SHORT $L85653

; 592  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L85653:

; 593  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 6f 14	 mov	 ebp, DWORD PTR [edi+20]

; 594  : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b ee		 sub	 ebp, esi
  00021	3b c5		 cmp	 eax, ebp
  00023	73 02		 jae	 SHORT $L85655

; 595  : 			_Num = _Count;	// trim _Num to size

  00025	8b e8		 mov	 ebp, eax
$L85655:

; 596  : 
; 597  : 		if (this == &_Right)

  00027	3b df		 cmp	 ebx, edi
  00029	75 1f		 jne	 SHORT $L85656

; 598  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 ee		 add	 ebp, esi
  0002f	55		 push	 ebp
  00030	8b cb		 mov	 ecx, ebx
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	56		 push	 esi
  00038	6a 00		 push	 0
  0003a	8b cb		 mov	 ecx, ebx
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00044	8b c3		 mov	 eax, ebx
  00046	5b		 pop	 ebx

; 605  : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$L85656:

; 599  : 		else if (_Grow(_Num))

  0004a	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  0004d	76 07		 jbe	 SHORT $L90680
  0004f	8b cb		 mov	 ecx, ebx
  00051	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L90680:
  00056	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00059	3b c5		 cmp	 eax, ebp
  0005b	73 21		 jae	 SHORT $L90681
  0005d	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00060	50		 push	 eax
  00061	55		 push	 ebp
  00062	8b cb		 mov	 ecx, ebx
  00064	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00069	85 ed		 test	 ebp, ebp
$L90768:
  0006b	76 6d		 jbe	 SHORT $L90767

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  0006d	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00070	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00075	3b c8		 cmp	 ecx, eax
  00077	72 2f		 jb	 SHORT $L90732
  00079	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0007c	eb 2d		 jmp	 SHORT $L90733

; 599  : 		else if (_Grow(_Num))

$L90681:
  0007e	85 ed		 test	 ebp, ebp
  00080	75 e9		 jne	 SHORT $L90768
  00082	83 f8 10	 cmp	 eax, 16			; 00000010H
  00085	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00088	72 0f		 jb	 SHORT $L90724
  0008a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	c6 00 00	 mov	 BYTE PTR [eax], 0
  00092	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00093	8b c3		 mov	 eax, ebx
  00095	5b		 pop	 ebx

; 605  : 		}

  00096	c2 0c 00	 ret	 12			; 0000000cH

; 599  : 		else if (_Grow(_Num))

$L90724:
  00099	5f		 pop	 edi
  0009a	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  0009d	5e		 pop	 esi
  0009e	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a1	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000a2	8b c3		 mov	 eax, ebx
  000a4	5b		 pop	 ebx

; 605  : 		}

  000a5	c2 0c 00	 ret	 12			; 0000000cH

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

$L90732:
  000a8	8d 57 04	 lea	 edx, DWORD PTR [edi+4]
$L90733:
  000ab	39 43 18	 cmp	 DWORD PTR [ebx+24], eax
  000ae	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000b1	72 04		 jb	 SHORT $L90740
  000b3	8b 38		 mov	 edi, DWORD PTR [eax]
  000b5	eb 02		 jmp	 SHORT $L90741
$L90740:
  000b7	8b f8		 mov	 edi, eax
$L90741:
  000b9	03 f2		 add	 esi, edx
  000bb	8b cd		 mov	 ecx, ebp
  000bd	8b d1		 mov	 edx, ecx
  000bf	c1 e9 02	 shr	 ecx, 2
  000c2	f3 a5		 rep movsd
  000c4	8b ca		 mov	 ecx, edx
  000c6	83 e1 03	 and	 ecx, 3
  000c9	f3 a4		 rep movsb

; 602  : 			_Eos(_Num);

  000cb	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000cf	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000d2	72 02		 jb	 SHORT $L90764
  000d4	8b 00		 mov	 eax, DWORD PTR [eax]
$L90764:
  000d6	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L90767:
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000dd	8b c3		 mov	 eax, ebx
  000df	5b		 pop	 ebx

; 605  : 		}

  000e0	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Num$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 608  : 		{	// assign [_Ptr, _Ptr + _Num)

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 609  : 		if (_Inside(_Ptr))

  00003	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  00006	83 fa 10	 cmp	 edx, 16			; 00000010H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	72 05		 jb	 SHORT $L90794
  0000d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00010	eb 03		 jmp	 SHORT $L90795
$L90794:
  00012	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$L90795:
  00015	8b 74 24 10	 mov	 esi, DWORD PTR __Ptr$[esp+8]
  00019	3b f0		 cmp	 esi, eax
  0001b	72 34		 jb	 SHORT $L86148
  0001d	83 fa 10	 cmp	 edx, 16			; 00000010H
  00020	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00023	72 04		 jb	 SHORT $L90798
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	eb 02		 jmp	 SHORT $L90799
$L90798:
  00029	8b c8		 mov	 ecx, eax
$L90799:
  0002b	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  0002e	03 f9		 add	 edi, ecx
  00030	3b fe		 cmp	 edi, esi
  00032	76 1d		 jbe	 SHORT $L86148

; 610  : 			return (assign(*this, _Ptr - _Myptr(), _Num));	// substring

  00034	83 fa 10	 cmp	 edx, 16			; 00000010H
  00037	72 02		 jb	 SHORT $L90807
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$L90807:
  0003b	8b 4c 24 14	 mov	 ecx, DWORD PTR __Num$[esp+8]
  0003f	51		 push	 ecx
  00040	2b f0		 sub	 esi, eax
  00042	56		 push	 esi
  00043	53		 push	 ebx
  00044	8b cb		 mov	 ecx, ebx
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx

; 618  : 		}

  0004e	c2 08 00	 ret	 8
$L86148:
  00051	55		 push	 ebp

; 611  : 
; 612  : 		if (_Grow(_Num))

  00052	8b 6c 24 18	 mov	 ebp, DWORD PTR __Num$[esp+12]
  00056	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  00059	76 07		 jbe	 SHORT $L90905
  0005b	8b cb		 mov	 ecx, ebx
  0005d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L90905:
  00062	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00065	3b c5		 cmp	 eax, ebp
  00067	73 1b		 jae	 SHORT $L90906
  00069	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  0006c	52		 push	 edx
  0006d	55		 push	 ebp
  0006e	8b cb		 mov	 ecx, ebx
  00070	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00075	85 ed		 test	 ebp, ebp
$L90986:
  00077	76 68		 jbe	 SHORT $L90984

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

  00079	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0007d	72 2f		 jb	 SHORT $L90958
  0007f	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00082	eb 2d		 jmp	 SHORT $L90959

; 611  : 
; 612  : 		if (_Grow(_Num))

$L90906:
  00084	85 ed		 test	 ebp, ebp
  00086	75 ef		 jne	 SHORT $L90986
  00088	83 f8 10	 cmp	 eax, 16			; 00000010H
  0008b	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  0008e	72 0f		 jb	 SHORT $L90949
  00090	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00093	5d		 pop	 ebp
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0
  00098	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  00099	8b c3		 mov	 eax, ebx
  0009b	5b		 pop	 ebx

; 618  : 		}

  0009c	c2 08 00	 ret	 8

; 611  : 
; 612  : 		if (_Grow(_Num))

$L90949:
  0009f	5d		 pop	 ebp
  000a0	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000a3	5f		 pop	 edi
  000a4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a7	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000a8	8b c3		 mov	 eax, ebx
  000aa	5b		 pop	 ebx

; 618  : 		}

  000ab	c2 08 00	 ret	 8

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

$L90958:
  000ae	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
$L90959:
  000b1	8b cd		 mov	 ecx, ebp
  000b3	8b c1		 mov	 eax, ecx
  000b5	c1 e9 02	 shr	 ecx, 2
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb

; 615  : 			_Eos(_Num);

  000c1	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000c5	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000c8	72 10		 jb	 SHORT $L90981
  000ca	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000cd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  000d1	5d		 pop	 ebp
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000d4	8b c3		 mov	 eax, ebx
  000d6	5b		 pop	 ebx

; 618  : 		}

  000d7	c2 08 00	 ret	 8

; 615  : 			_Eos(_Num);

$L90981:
  000da	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000dd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L90984:
  000e1	5d		 pop	 ebp
  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000e4	8b c3		 mov	 eax, ebx
  000e6	5b		 pop	 ebx

; 618  : 		}

  000e7	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?SendCT_EVENTUPDATE_REQ@CTServer@@QAEXEGPAUtagEVENTINFO@@@Z ; CTServer::SendCT_EVENTUPDATE_REQ
;	COMDAT xdata$x
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tcontrolsvr\tserver.cpp
xdata$x	SEGMENT
$T90998	DD	0ffffffffH
	DD	FLAT:$L90994
$T90996	DD	019930520H
	DD	01H
	DD	FLAT:$T90998
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ?SendCT_EVENTUPDATE_REQ@CTServer@@QAEXEGPAUtagEVENTINFO@@@Z
_TEXT	SEGMENT
$T90991 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_bEventID$ = 8						; size = 1
_wValue$ = 12						; size = 2
_pEVENT$ = 16						; size = 4
?SendCT_EVENTUPDATE_REQ@CTServer@@QAEXEGPAUtagEVENTINFO@@@Z PROC NEAR ; CTServer::SendCT_EVENTUPDATE_REQ, COMDAT
; _this$ = ecx

; 191  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendCT_EVENTUPDATE_REQ@CTServer@@QAEXEGPAUtagEVENTINFO@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi

; 192  : 	CPacket* pMsg = new CPacket();

  00018	6a 1c		 push	 28			; 0000001cH
  0001a	8b f9		 mov	 edi, ecx
  0001c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00021	83 c4 04	 add	 esp, 4
  00024	89 44 24 08	 mov	 DWORD PTR $T90991[esp+24], eax
  00028	33 f6		 xor	 esi, esi
  0002a	3b c6		 cmp	 eax, esi
  0002c	89 74 24 14	 mov	 DWORD PTR __$EHRec$[esp+32], esi
  00030	74 09		 je	 SHORT $L90993
  00032	8b c8		 mov	 ecx, eax
  00034	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  00039	8b f0		 mov	 esi, eax
$L90993:

; 193  : 	pMsg->SetID(CT_EVENTUPDATE_REQ)
; 194  : 		<< bEventID
; 195  : 		<< wValue;

  0003b	8b 44 24 20	 mov	 eax, DWORD PTR _wValue$[esp+20]
  0003f	8b 4c 24 1c	 mov	 ecx, DWORD PTR _bEventID$[esp+20]
  00043	50		 push	 eax
  00044	51		 push	 ecx
  00045	68 5f 60 00 00	 push	 24671			; 0000605fH
  0004a	8b ce		 mov	 ecx, esi
  0004c	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+44], -1
  00054	e8 00 00 00 00	 call	 ?SetID@CPacket@@QAEAAV1@G@Z ; CPacket::SetID
  00059	8b c8		 mov	 ecx, eax
  0005b	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  00060	8b c8		 mov	 ecx, eax
  00062	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<

; 196  : 
; 197  : 	pEVENT->WrapPacketIn(pMsg);

  00067	8b 4c 24 24	 mov	 ecx, DWORD PTR _pEVENT$[esp+20]
  0006b	56		 push	 esi
  0006c	e8 00 00 00 00	 call	 ?WrapPacketIn@tagEVENTINFO@@QAEXPAVCPacket@@@Z ; tagEVENTINFO::WrapPacketIn

; 198  : 	
; 199  : 	Say(pMsg);

  00071	8b 17		 mov	 edx, DWORD PTR [edi]
  00073	56		 push	 esi
  00074	8b cf		 mov	 ecx, edi
  00076	ff 12		 call	 DWORD PTR [edx]

; 200  : }

  00078	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00085	83 c4 10	 add	 esp, 16			; 00000010H
  00088	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L90994:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T90991[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?SendCT_EVENTUPDATE_REQ@CTServer@@QAEXEGPAUtagEVENTINFO@@@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T90996
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendCT_EVENTUPDATE_REQ@CTServer@@QAEXEGPAUtagEVENTINFO@@@Z ENDP ; CTServer::SendCT_EVENTUPDATE_REQ
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 323  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 324  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 325  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 326  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 621  : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 622  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$L91073:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $L91073
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 623  : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 361  : 		_Tidy();
; 362  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$L91148:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $L91148
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 363  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
EXTRN	??0exception@@QAE@XZ:NEAR			; exception::exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T91251	DD	0ffffffffH
	DD	FLAT:$L91152
$T91249	DD	019930520H
	DD	01H
	DD	FLAT:$T91251
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 19   : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	89 74 24 04	 mov	 DWORD PTR _this$[esp+20], esi
  0001d	e8 00 00 00 00	 call	 ??0exception@@QAE@XZ	; exception::exception
  00022	33 c0		 xor	 eax, eax
  00024	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  0002d	6a ff		 push	 -1
  0002f	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00032	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00039	50		 push	 eax
  0003a	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  0003e	88 41 04	 mov	 BYTE PTR [ecx+4], al
  00041	8b 44 24 20	 mov	 eax, DWORD PTR __Message$[esp+24]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 20   : 		}

  0004b	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  0004f	8b c6		 mov	 eax, esi
  00051	5e		 pop	 esi
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L91152:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T91249
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
PUBLIC	??_7out_of_range@std@@6B@			; std::out_of_range::`vftable'
PUBLIC	??_Gout_of_range@std@@UAEPAXI@Z			; std::out_of_range::`scalar deleting destructor'
EXTRN	??_Eout_of_range@std@@UAEPAXI@Z:NEAR		; std::out_of_range::`vector deleting destructor'
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT
??_7out_of_range@std@@6B@ DD FLAT:??_Eout_of_range@std@@UAEPAXI@Z ; std::out_of_range::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx

; 118  : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7out_of_range@std@@6B@

; 119  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::out_of_range::out_of_range
_TEXT	ENDS
PUBLIC	??1out_of_range@std@@UAE@XZ			; std::out_of_range::~out_of_range
; Function compile flags: /Ogty
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gout_of_range@std@@UAEPAXI@Z PROC NEAR		; std::out_of_range::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1out_of_range@std@@UAE@XZ ; std::out_of_range::~out_of_range
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L91261
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L91261:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Gout_of_range@std@@UAEPAXI@Z ENDP			; std::out_of_range::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT
??1out_of_range@std@@UAE@XZ PROC NEAR			; std::out_of_range::~out_of_range, COMDAT
; _this$ = ecx

; 122  : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L91350
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L91350:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1out_of_range@std@@UAE@XZ ENDP			; std::out_of_range::~out_of_range
_TEXT	ENDS
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??0out_of_range@std@@QAE@ABV01@@Z		; std::out_of_range::out_of_range
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVexception@@@8				; exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
PUBLIC	__TI3?AVout_of_range@std@@
PUBLIC	__CTA3?AVout_of_range@std@@
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
PUBLIC	??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@ ; `string'
PUBLIC	?_Xran@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@IBEXXZ ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::_Xran
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	??0exception@@QAE@ABV0@@Z:NEAR			; exception::exception
;	COMDAT xdata$x
xdata$x	SEGMENT
$T91487	DD	0ffffffffH
	DD	FLAT:$L91373
$T91484	DD	019930520H
	DD	01H
	DD	FLAT:$T91487
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
CONST	SEGMENT
??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@ DB 'invalid v'
	DB	'ector<T> subscript', 00H			; `string'
CONST	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT
__TI3?AVout_of_range@std@@ DD 00H
	DD	FLAT:??1out_of_range@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVout_of_range@std@@
xdata$x	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT
__CTA3?AVout_of_range@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT
??_R0?AVexception@@@8 DD FLAT:??_7type_info@@6B@	; exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@@', 00H
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
_DATA	ENDS
;	COMDAT ?_Xran@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
$T91372 = -80						; size = 28
$T91371 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xran@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@IBEXXZ PROC NEAR ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::_Xran, COMDAT
; _this$ = ecx

; 888  : 		{	// report an out_of_range error

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Xran@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@IBEXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 44	 sub	 esp, 68			; 00000044H

; 889  : 		_THROW(out_of_range, "invalid vector<T> subscript");

  00018	6a 1b		 push	 27			; 0000001bH
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
  0001f	8d 4c 24 08	 lea	 ecx, DWORD PTR $T91372[esp+88]
  00023	c7 44 24 20 0f
	00 00 00	 mov	 DWORD PTR $T91372[esp+112], 15 ; 0000000fH
  0002b	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T91372[esp+108], 0
  00033	c6 44 24 0c 00	 mov	 BYTE PTR $T91372[esp+92], 0
  00038	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0003d	8d 04 24	 lea	 eax, DWORD PTR $T91372[esp+80]
  00040	50		 push	 eax
  00041	8d 4c 24 20	 lea	 ecx, DWORD PTR $T91371[esp+84]
  00045	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+92], 0
  0004d	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00052	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVout_of_range@std@@
  00057	8d 4c 24 20	 lea	 ecx, DWORD PTR $T91371[esp+84]
  0005b	51		 push	 ecx
  0005c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T91371[esp+88], OFFSET FLAT:??_7out_of_range@std@@6B@
  00064	e8 00 00 00 00	 call	 __CxxThrowException@8
$L91488:
$L91486:
  00069	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L91373:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T91372[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xran@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@IBEXXZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T91484
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Xran@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@IBEXXZ ENDP ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::_Xran
;	COMDAT xdata$x
xdata$x	SEGMENT
$T91593	DD	0ffffffffH
	DD	FLAT:$L91494
$T91591	DD	019930520H
	DD	01H
	DD	FLAT:$T91593
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC NEAR		; std::logic_error::logic_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 1c	 mov	 edi, DWORD PTR ___that$[esp+20]
  0001c	8b f1		 mov	 esi, ecx
  0001e	57		 push	 edi
  0001f	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00023	e8 00 00 00 00	 call	 ??0exception@@QAE@ABV0@@Z ; exception::exception
  00028	33 c0		 xor	 eax, eax
  0002a	6a ff		 push	 -1
  0002c	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00035	50		 push	 eax
  00036	83 c7 0c	 add	 edi, 12			; 0000000cH
  00039	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00040	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00043	57		 push	 edi
  00044	89 44 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], eax
  00048	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00050	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00054	5f		 pop	 edi
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L91494:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T91591
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Ogty
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV01@@Z PROC NEAR		; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7out_of_range@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0out_of_range@std@@QAE@ABV01@@Z ENDP			; std::out_of_range::out_of_range
_TEXT	ENDS
PUBLIC	?at@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAEAAUtagTCASHITEMSALE@@I@Z ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::at
; Function compile flags: /Ogty
;	COMDAT ?at@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAEAAUtagTCASHITEMSALE@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
?at@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAEAAUtagTCASHITEMSALE@@I@Z PROC NEAR ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::at, COMDAT
; _this$ = ecx

; 543  : 		if (size() <= _Pos)

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	56		 push	 esi
  00006	74 10		 je	 SHORT $L91645
  00008	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000b	8b 74 24 08	 mov	 esi, DWORD PTR __Pos$[esp]
  0000f	2b c2		 sub	 eax, edx
  00011	c1 f8 02	 sar	 eax, 2
  00014	3b c6		 cmp	 eax, esi
  00016	77 05		 ja	 SHORT $L87634
$L91645:

; 544  : 			_Xran();

  00018	e8 00 00 00 00	 call	 ?_Xran@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@IBEXXZ ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::_Xran
$L91647:
$L87634:

; 545  : 		return (*(begin() + _Pos));

  0001d	8d 04 b2	 lea	 eax, DWORD PTR [edx+esi*4]
  00020	5e		 pop	 esi

; 546  : 		}

  00021	c2 04 00	 ret	 4
$L91646:
?at@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@QAEAAUtagTCASHITEMSALE@@I@Z ENDP ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::at
_TEXT	ENDS
PUBLIC	?SendCT_CASHITEMSALE_REQ@CTServer@@QAEXKGPAV?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@@Z ; CTServer::SendCT_CASHITEMSALE_REQ
;	COMDAT xdata$x
xdata$x	SEGMENT
$T91819	DD	0ffffffffH
	DD	FLAT:$L91655
$T91810	DD	019930520H
	DD	01H
	DD	FLAT:$T91819
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tcontrolsvr\tserver.cpp
xdata$x	ENDS
;	COMDAT ?SendCT_CASHITEMSALE_REQ@CTServer@@QAEXKGPAV?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@@Z
_TEXT	SEGMENT
$T91652 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_dwIndex$ = 8						; size = 4
_wValue$ = 12						; size = 2
_pvSaleItem$ = 16					; size = 4
?SendCT_CASHITEMSALE_REQ@CTServer@@QAEXKGPAV?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@@Z PROC NEAR ; CTServer::SendCT_CASHITEMSALE_REQ, COMDAT
; _this$ = ecx

; 223  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?SendCT_CASHITEMSALE_REQ@CTServer@@QAEXKGPAV?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	53		 push	 ebx
  00017	55		 push	 ebp
  00018	56		 push	 esi
  00019	57		 push	 edi

; 224  : 	CPacket* pMsg = new CPacket();

  0001a	6a 1c		 push	 28			; 0000001cH
  0001c	8b d9		 mov	 ebx, ecx
  0001e	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00023	83 c4 04	 add	 esp, 4
  00026	89 44 24 10	 mov	 DWORD PTR $T91652[esp+32], eax
  0002a	33 f6		 xor	 esi, esi
  0002c	3b c6		 cmp	 eax, esi
  0002e	89 74 24 1c	 mov	 DWORD PTR __$EHRec$[esp+40], esi
  00032	74 0b		 je	 SHORT $L91653
  00034	8b c8		 mov	 ecx, eax
  00036	e8 00 00 00 00	 call	 ??0CPacket@@QAE@XZ	; CPacket::CPacket
  0003b	8b e8		 mov	 ebp, eax
  0003d	eb 02		 jmp	 SHORT $L91654
$L91653:
  0003f	33 ed		 xor	 ebp, ebp
$L91654:

; 225  : 	pMsg->SetID(CT_CASHITEMSALE_REQ)
; 226  : 		<< dwIndex
; 227  : 		<< wValue
; 228  : 		<< WORD(pvSaleItem->size());

  00041	8b 7c 24 2c	 mov	 edi, DWORD PTR _pvSaleItem$[esp+28]
  00045	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00048	3b ce		 cmp	 ecx, esi
  0004a	c7 44 24 1c ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+40], -1
  00052	75 04		 jne	 SHORT $L91661
  00054	33 c0		 xor	 eax, eax
  00056	eb 08		 jmp	 SHORT $L91662
$L91661:
  00058	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0005b	2b c1		 sub	 eax, ecx
  0005d	c1 f8 02	 sar	 eax, 2
$L91662:
  00060	8b 4c 24 24	 mov	 ecx, DWORD PTR _dwIndex$[esp+28]
  00064	50		 push	 eax
  00065	8b 44 24 2c	 mov	 eax, DWORD PTR _wValue$[esp+32]
  00069	50		 push	 eax
  0006a	51		 push	 ecx
  0006b	68 69 60 00 00	 push	 24681			; 00006069H
  00070	8b cd		 mov	 ecx, ebp
  00072	e8 00 00 00 00	 call	 ?SetID@CPacket@@QAEAAV1@G@Z ; CPacket::SetID
  00077	8b c8		 mov	 ecx, eax
  00079	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@K@Z	; CPacket::operator<<
  0007e	8b c8		 mov	 ecx, eax
  00080	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<
  00085	8b c8		 mov	 ecx, eax
  00087	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<
  0008c	8d 64 24 00	 npad	 4
$L87571:

; 229  : 	
; 230  : 	for(WORD i = 0; i < (WORD)pvSaleItem->size(); i++)

  00090	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  00093	85 d2		 test	 edx, edx
  00095	74 38		 je	 SHORT $L87573
  00097	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0009a	2b c2		 sub	 eax, edx
  0009c	c1 f8 02	 sar	 eax, 2
  0009f	66 3b f0	 cmp	 si, ax
  000a2	73 2b		 jae	 SHORT $L87573

; 231  : 	{
; 232  : 		(*pMsg)
; 233  : 			<< pvSaleItem->at(i).m_wID
; 234  : 			<< pvSaleItem->at(i).m_bSaleValue;

  000a4	0f b7 ce	 movzx	 ecx, si
  000a7	3b c1		 cmp	 eax, ecx
  000a9	76 1d		 jbe	 SHORT $L91812
  000ab	33 c0		 xor	 eax, eax
  000ad	8a 44 8a 02	 mov	 al, BYTE PTR [edx+ecx*4+2]
  000b1	0f b7 0c 8a	 movzx	 ecx, WORD PTR [edx+ecx*4]
  000b5	50		 push	 eax
  000b6	51		 push	 ecx
  000b7	8b cd		 mov	 ecx, ebp
  000b9	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@G@Z	; CPacket::operator<<
  000be	8b c8		 mov	 ecx, eax
  000c0	e8 00 00 00 00	 call	 ??6CPacket@@QAEAAV0@E@Z	; CPacket::operator<<
  000c5	46		 inc	 esi
  000c6	eb c8		 jmp	 SHORT $L87571
$L91812:
  000c8	8b cf		 mov	 ecx, edi
  000ca	e8 00 00 00 00	 call	 ?_Xran@?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@IBEXXZ ; std::vector<tagTCASHITEMSALE,std::allocator<tagTCASHITEMSALE> >::_Xran
$L91820:
$L87573:

; 235  : 	}
; 236  : 
; 237  : 	Say(pMsg);

  000cf	8b 13		 mov	 edx, DWORD PTR [ebx]
  000d1	55		 push	 ebp
  000d2	8b cb		 mov	 ecx, ebx
  000d4	ff 12		 call	 DWORD PTR [edx]

; 238  : }

  000d6	8b 4c 24 14	 mov	 ecx, DWORD PTR __$EHRec$[esp+32]
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5d		 pop	 ebp
  000dd	5b		 pop	 ebx
  000de	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  000e5	83 c4 10	 add	 esp, 16			; 00000010H
  000e8	c2 0c 00	 ret	 12			; 0000000cH
$L91818:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L91655:
  00000	8b 45 f0	 mov	 eax, DWORD PTR $T91652[ebp]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?SendCT_CASHITEMSALE_REQ@CTServer@@QAEXKGPAV?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T91810
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SendCT_CASHITEMSALE_REQ@CTServer@@QAEXKGPAV?$vector@UtagTCASHITEMSALE@@V?$allocator@UtagTCASHITEMSALE@@@std@@@std@@@Z ENDP ; CTServer::SendCT_CASHITEMSALE_REQ
END
