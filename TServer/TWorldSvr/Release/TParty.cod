; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.3077 

	TITLE	.\TParty.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
ATL$__m	SEGMENT DWORD USE32 PUBLIC ''
ATL$__m	ENDS
ATL$__z	SEGMENT DWORD USE32 PUBLIC ''
ATL$__z	ENDS
ATL$__a	SEGMENT DWORD USE32 PUBLIC ''
ATL$__a	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??0CTParty@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CTParty@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetID@CTParty@@QAEXG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetID@CTParty@@QAEGXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsChief@CTParty@@QAEEK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsMember@CTParty@@QAEEK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsMember@CTParty@@QAEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSize@CTParty@@QAEEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddMember@CTParty@@QAEEPAUtagTCHARACTER@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DelMember@CTParty@@QAEEK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DelMember@CTParty@@QAEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetChiefID@CTParty@@QAEXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetChiefID@CTParty@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetMember@CTParty@@QAEPAUtagTCHARACTER@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindMember@CTParty@@QAEPAUtagTCHARACTER@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextChief@CTParty@@QAEPAUtagTCHARACTER@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetChief@CTParty@@QAEPAUtagTCHARACTER@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetOrderIndex@CTParty@@QAEEK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetNextOrder@CTParty@@QAEXK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetNextOrder@CTParty@@QAEPAUtagTCHARACTER@@V?$vector@KV?$allocator@K@std@@@std@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$map@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CompareNoCase@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8ATL@@YA_NABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@0@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$vector@GV?$allocator@G@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAEAAPAUtagTCHARACTER@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAEXABQAUtagTCHARACTER@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@KV?$allocator@K@std@@@std@@QAEAAKI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$map@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?empty@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBEK@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$pair@$$CBEK@std@@QAE@ABEABK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBEAAU?$pair@$$CBEK@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Compare@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringCompareIgnore@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??R?$less@E@std@@QBE_NABE0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE?AViterator@12@V312@ABQAUtagTCHARACTER@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buy@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEXPAPAUtagTCHARACTER@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEPAPAUtagTCHARACTER@@PAPAU3@IABQAU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Vector_val@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAE@V?$allocator@PAUtagTCHARACTER@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAUtagTCHARACTER@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@KV?$allocator@K@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE@PAPAUtagTCHARACTER@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEAAPAUtagTCHARACTER@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAABEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@E@1@ABV?$allocator@U?$pair@$$CBEK@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Insert@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBEK@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Kfn@?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@SAABEABU?$pair@$$CBEK@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@U?$pair@$$CBEK@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@1@AB_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Fiterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBEABU?$pair@$$CBEK@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@3@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$vector@KV?$allocator@K@std@@@std@@QBEAAKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@KV?$allocator@K@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?StringCompare@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@K@std@@QAEXPAKI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Insert_n@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEXViterator@12@IABQAUtagTCHARACTER@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xlen@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAUtagTCHARACTER@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAUtagTCHARACTER@@@std@@QAEXPAPAUtagTCHARACTER@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@PAUtagTCHARACTER@@@std@@QAEPAPAUtagTCHARACTER@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@KV?$allocator@K@std@@@std@@IAEXPAK0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Giterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEHABVconst_iterator@12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE@PAPAUtagTCHARACTER@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEABQAUtagTCHARACTER@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Color@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myval@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAAU?$pair@$$CBEK@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Init@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBEK@2@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree_val@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEK@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@U?$pair@$$CBEK@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Fconst_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@KV?$allocator@K@std@@@std@@QAE@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@KV?$allocator@K@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QBEABKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAUtagTCHARACTER@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Gconst_iterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEHABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree_ptr@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEK@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@U?$pair@$$CBEK@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@KV?$allocator@K@std@@@std@@QAE@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBEK@2@D@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Max@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEK@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@QAE@U?$less@E@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Unlock@?$CComCritSecLock@VCComCriticalSection@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagTCASHITMSALE@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagTCASHITMSALE@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagTCASHITMSALE@@IU1@V?$allocator@UtagTCASHITMSALE@@@std@@@std@@YAXPAUtagTCASHITMSALE@@IABU1@AAV?$allocator@UtagTCASHITMSALE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@GIG@std@@YAXPAGIABGAAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagMONREGEN@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagMONREGEN@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagMONREGEN@@IU1@V?$allocator@UtagMONREGEN@@@std@@@std@@YAXPAUtagMONREGEN@@IABU1@AAV?$allocator@UtagMONREGEN@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagLOTTERY@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagLOTTERY@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagLOTTERY@@IU1@V?$allocator@UtagLOTTERY@@@std@@@std@@YAXPAUtagLOTTERY@@IABU1@AAV?$allocator@UtagLOTTERY@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagTENTRYRECORD@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagTENTRYRECORD@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagTENTRYRECORD@@V?$allocator@UtagTENTRYRECORD@@@std@@@std@@YAXPAUtagTENTRYRECORD@@0AAV?$allocator@UtagTENTRYRECORD@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@EV?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagTCASHITMSALE@@V?$allocator@UtagTCASHITMSALE@@@std@@@std@@YAXPAUtagTCASHITMSALE@@0AAV?$allocator@UtagTCASHITMSALE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAUtagTCASHITMSALE@@PAU1@V?$allocator@UtagTCASHITMSALE@@@std@@@std@@YAPAUtagTCASHITMSALE@@PAU1@00AAV?$allocator@UtagTCASHITMSALE@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUtagTCASHITMSALE@@PAU1@@std@@YAPAUtagTCASHITMSALE@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@GV?$allocator@G@std@@@std@@YAXPAG0AAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAGPAGV?$allocator@G@std@@@std@@YAPAGPAG00AAV?$allocator@G@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAGPAG@std@@YAPAGPAG00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagMONREGEN@@V?$allocator@UtagMONREGEN@@@std@@@std@@YAXPAUtagMONREGEN@@0AAV?$allocator@UtagMONREGEN@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAUtagMONREGEN@@PAU1@V?$allocator@UtagMONREGEN@@@std@@@std@@YAPAUtagMONREGEN@@PAU1@00AAV?$allocator@UtagMONREGEN@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUtagMONREGEN@@PAU1@@std@@YAPAUtagMONREGEN@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagLOTTERY@@V?$allocator@UtagLOTTERY@@@std@@@std@@YAXPAUtagLOTTERY@@0AAV?$allocator@UtagLOTTERY@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAUtagLOTTERY@@PAU1@V?$allocator@UtagLOTTERY@@@std@@@std@@YAPAUtagLOTTERY@@PAU1@00AAV?$allocator@UtagLOTTERY@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAUtagLOTTERY@@PAU1@@std@@YAPAUtagLOTTERY@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagTNMTREWARD@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagTNMTREWARD@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagTNMTREWARD@@V?$allocator@UtagTNMTREWARD@@@std@@@std@@YAXPAUtagTNMTREWARD@@0AAV?$allocator@UtagTNMTREWARD@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$copy@PAPAUtagTCHARACTER@@PAPAU1@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@YAXPAPAUtagTCHARACTER@@0AAV?$allocator@PAUtagTCHARACTER@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_fill_n@PAPAUtagTCHARACTER@@IPAU1@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@YAXPAPAUtagTCHARACTER@@IABQAU1@AAV?$allocator@PAUtagTCHARACTER@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ucopy@PAPAUtagTCHARACTER@@@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEPAPAUtagTCHARACTER@@PAPAU2@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill@PAPAUtagTCHARACTER@@PAU1@@std@@YAXPAPAUtagTCHARACTER@@0ABQAU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$copy_backward@PAPAUtagTCHARACTER@@PAPAU1@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAUtagTCHARACTER@@@std@@YAPAPAUtagTCHARACTER@@IPAPAU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@KV?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0U?$pair@$$CBEK@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEK@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0U?$pair@$$CBEK@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEK@std@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagTENTRYRECORD@@@std@@QAEXPAUtagTENTRYRECORD@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@UtagTCASHITMSALE@@@std@@QAEXPAUtagTCASHITMSALE@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagTCASHITMSALE@@@std@@QAEXPAUtagTCASHITMSALE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@UtagMONREGEN@@@std@@QAEXPAUtagMONREGEN@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagMONREGEN@@@std@@QAEXPAUtagMONREGEN@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@UtagLOTTERY@@@std@@QAEXPAUtagLOTTERY@@ABU3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagLOTTERY@@@std@@QAEXPAUtagLOTTERY@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagTNMTREWARD@@@std@@QAEXPAUtagTNMTREWARD@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill_n@PAGIG@std@@YAXPAGIABG@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagTCASHITMSALE@@PAU1@V?$allocator@UtagTCASHITMSALE@@@std@@@std@@YAPAUtagTCASHITMSALE@@PAU1@00AAV?$allocator@UtagTCASHITMSALE@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@GG@std@@YAPAGPAG00AAV?$allocator@G@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagMONREGEN@@PAU1@V?$allocator@UtagMONREGEN@@@std@@@std@@YAPAUtagMONREGEN@@PAU1@00AAV?$allocator@UtagMONREGEN@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagLOTTERY@@PAU1@V?$allocator@UtagLOTTERY@@@std@@@std@@YAPAUtagLOTTERY@@PAU1@00AAV?$allocator@UtagLOTTERY@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@UtagTCHARACTER@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTCHARACTER@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAPAUtagTCHARACTER@@PAPAU1@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@YAXPAPAUtagTCHARACTER@@0AAV?$allocator@PAUtagTCHARACTER@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAUtagTCHARACTER@@IPAU1@@std@@YAXPAPAUtagTCHARACTER@@IABQAU1@AAV?$allocator@PAUtagTCHARACTER@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAPAUtagTCHARACTER@@PAPAU1@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00AAV?$allocator@PAUtagTCHARACTER@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAPAUtagTCHARACTER@@PAPAU1@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@KV?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagTENTRYRECORD@@@std@@YAXPAUtagTENTRYRECORD@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@UtagTCASHITMSALE@@U1@@std@@YAXPAUtagTCASHITMSALE@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagTCASHITMSALE@@@std@@YAXPAUtagTCASHITMSALE@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@UtagMONREGEN@@U1@@std@@YAXPAUtagMONREGEN@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagMONREGEN@@@std@@YAXPAUtagMONREGEN@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@UtagLOTTERY@@U1@@std@@YAXPAUtagLOTTERY@@ABU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagLOTTERY@@@std@@YAXPAUtagLOTTERY@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagTNMTREWARD@@@std@@YAXPAUtagTNMTREWARD@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill_n@PAPAUtagTCHARACTER@@IPAU1@@std@@YAXPAPAUtagTCHARACTER@@IABQAU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAUtagTCHARACTER@@PAU1@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00AAV?$allocator@PAUtagTCHARACTER@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAK0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@G@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Unlock@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@GV?$allocator@G@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@GV?$allocator@G@std@@@std@@IAEXPAG0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@GV?$allocator@G@std@@@std@@YAXPAG0AAV?$allocator@G@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@G@std@@QAEXPAGI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0tagTCOMMAND@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?SetID@CTParty@@QAEXG@Z				; CTParty::SetID
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tworldsvr\tparty.cpp
;	COMDAT ?SetID@CTParty@@QAEXG@Z
_TEXT	SEGMENT
_wID$ = 8						; size = 2
?SetID@CTParty@@QAEXG@Z PROC NEAR			; CTParty::SetID, COMDAT
; _this$ = ecx

; 19   : 	m_wID = wID;

  00000	66 8b 44 24 04	 mov	 ax, WORD PTR _wID$[esp-4]
  00005	66 89 01	 mov	 WORD PTR [ecx], ax

; 20   : }

  00008	c2 04 00	 ret	 4
?SetID@CTParty@@QAEXG@Z ENDP				; CTParty::SetID
_TEXT	ENDS
PUBLIC	?GetID@CTParty@@QAEGXZ				; CTParty::GetID
; Function compile flags: /Ogty
;	COMDAT ?GetID@CTParty@@QAEGXZ
_TEXT	SEGMENT
?GetID@CTParty@@QAEGXZ PROC NEAR			; CTParty::GetID, COMDAT
; _this$ = ecx

; 23   : 	return m_wID;

  00000	66 8b 01	 mov	 ax, WORD PTR [ecx]

; 24   : }

  00003	c3		 ret	 0
?GetID@CTParty@@QAEGXZ ENDP				; CTParty::GetID
_TEXT	ENDS
PUBLIC	?IsChief@CTParty@@QAEEK@Z			; CTParty::IsChief
; Function compile flags: /Ogty
;	COMDAT ?IsChief@CTParty@@QAEEK@Z
_TEXT	SEGMENT
_dwID$ = 8						; size = 4
?IsChief@CTParty@@QAEEK@Z PROC NEAR			; CTParty::IsChief, COMDAT
; _this$ = ecx

; 27   : 	if(dwID == m_dwChiefID)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _dwID$[esp-4]
  00004	3b 41 24	 cmp	 eax, DWORD PTR [ecx+36]
  00007	0f 94 c0	 sete	 al

; 28   : 		return TRUE;
; 29   : 	else
; 30   : 		return FALSE;
; 31   : }

  0000a	c2 04 00	 ret	 4
?IsChief@CTParty@@QAEEK@Z ENDP				; CTParty::IsChief
_TEXT	ENDS
PUBLIC	?SetChiefID@CTParty@@QAEXK@Z			; CTParty::SetChiefID
; Function compile flags: /Ogty
;	COMDAT ?SetChiefID@CTParty@@QAEXK@Z
_TEXT	SEGMENT
_dwChiefID$ = 8						; size = 4
?SetChiefID@CTParty@@QAEXK@Z PROC NEAR			; CTParty::SetChiefID, COMDAT
; _this$ = ecx

; 105  : 	m_dwChiefID = dwChiefID;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _dwChiefID$[esp-4]
  00004	89 41 24	 mov	 DWORD PTR [ecx+36], eax

; 106  : }

  00007	c2 04 00	 ret	 4
?SetChiefID@CTParty@@QAEXK@Z ENDP			; CTParty::SetChiefID
_TEXT	ENDS
PUBLIC	?GetChiefID@CTParty@@QAEKXZ			; CTParty::GetChiefID
; Function compile flags: /Ogty
;	COMDAT ?GetChiefID@CTParty@@QAEKXZ
_TEXT	SEGMENT
?GetChiefID@CTParty@@QAEKXZ PROC NEAR			; CTParty::GetChiefID, COMDAT
; _this$ = ecx

; 109  : 	return m_dwChiefID;

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]

; 110  : }

  00003	c3		 ret	 0
?GetChiefID@CTParty@@QAEKXZ ENDP			; CTParty::GetChiefID
_TEXT	ENDS
PUBLIC	?size@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEIXZ ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?size@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::size, COMDAT
; _this$ = ecx

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L124936
  00007	33 c0		 xor	 eax, eax

; 517  : 		}

  00009	c3		 ret	 0
$L124936:

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  0000a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2

; 517  : 		}

  00012	c3		 ret	 0
?size@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::size
_TEXT	ENDS
PUBLIC	?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::size
; Function compile flags: /Ogty
;	COMDAT ?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::size, COMDAT
; _this$ = ecx

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L124941
  00007	33 c0		 xor	 eax, eax

; 517  : 		}

  00009	c3		 ret	 0
$L124941:

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  0000a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2

; 517  : 		}

  00012	c3		 ret	 0
?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::size
_TEXT	ENDS
PUBLIC	??0?$pair@$$CBEK@std@@QAE@ABEABK@Z		; std::pair<unsigned char const ,unsigned long>::pair<unsigned char const ,unsigned long>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\utility
;	COMDAT ??0?$pair@$$CBEK@std@@QAE@ABEABK@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@$$CBEK@std@@QAE@ABEABK@Z PROC NEAR		; std::pair<unsigned char const ,unsigned long>::pair<unsigned char const ,unsigned long>, COMDAT
; _this$ = ecx

; 34   : 		{	// construct from specified values

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Val1$[esp-4]
  00006	8a 11		 mov	 dl, BYTE PTR [ecx]
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val2$[esp-4]
  0000c	88 10		 mov	 BYTE PTR [eax], dl
  0000e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00010	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 35   : 		}

  00013	c2 08 00	 ret	 8
??0?$pair@$$CBEK@std@@QAE@ABEABK@Z ENDP			; std::pair<unsigned char const ,unsigned long>::pair<unsigned char const ,unsigned long>
_TEXT	ENDS
PUBLIC	?StringCompareIgnore@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z ; ATL::ChTraitsCRT<char>::StringCompareIgnore
EXTRN	__mbsicmp:NEAR
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?StringCompareIgnore@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z
_TEXT	SEGMENT
_pszA$ = 8						; size = 4
_pszB$ = 12						; size = 4
?StringCompareIgnore@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z PROC NEAR ; ATL::ChTraitsCRT<char>::StringCompareIgnore, COMDAT

; 341  : 		return _mbsicmp( reinterpret_cast< const unsigned char* >( pszA ), reinterpret_cast< const unsigned char* >( pszB ) );

  00000	e9 00 00 00 00	 jmp	 __mbsicmp
?StringCompareIgnore@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z ENDP ; ATL::ChTraitsCRT<char>::StringCompareIgnore
_TEXT	ENDS
PUBLIC	??R?$less@E@std@@QBE_NABE0@Z			; std::less<unsigned char>::operator()
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\functional
;	COMDAT ??R?$less@E@std@@QBE_NABE0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@E@std@@QBE_NABE0@Z PROC NEAR			; std::less<unsigned char>::operator(), COMDAT
; _this$ = ecx

; 139  : 		return (_Left < _Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 08	 mov	 edx, DWORD PTR __Right$[esp-4]
  0000a	33 c0		 xor	 eax, eax
  0000c	3a 0a		 cmp	 cl, BYTE PTR [edx]
  0000e	1b c0		 sbb	 eax, eax
  00010	f7 d8		 neg	 eax

; 140  : 		}

  00012	c2 08 00	 ret	 8
??R?$less@E@std@@QBE_NABE0@Z ENDP			; std::less<unsigned char>::operator()
_TEXT	ENDS
PUBLIC	?capacity@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEIXZ ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::capacity
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?capacity@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::capacity, COMDAT
; _this$ = ecx

; 458  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L124956
  00007	33 c0		 xor	 eax, eax

; 459  : 		}

  00009	c3		 ret	 0
$L124956:

; 458  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  0000a	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2

; 459  : 		}

  00012	c3		 ret	 0
?capacity@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::capacity
_TEXT	ENDS
PUBLIC	??0?$allocator@PAUtagTCHARACTER@@@std@@QAE@XZ	; std::allocator<tagTCHARACTER *>::allocator<tagTCHARACTER *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@PAUtagTCHARACTER@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAUtagTCHARACTER@@@std@@QAE@XZ PROC NEAR	; std::allocator<tagTCHARACTER *>::allocator<tagTCHARACTER *>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@PAUtagTCHARACTER@@@std@@QAE@XZ ENDP	; std::allocator<tagTCHARACTER *>::allocator<tagTCHARACTER *>
_TEXT	ENDS
PUBLIC	??Yiterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAEAAV012@H@Z ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::iterator::operator+=
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Yiterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Yiterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::iterator::operator+=, COMDAT
; _this$ = ecx

; 255  : 			{	// increment by integer

  00000	8b c1		 mov	 eax, ecx

; 256  : 			this->_Myptr += _Off;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  0000d	01 10		 add	 DWORD PTR [eax], edx

; 257  : 			return (*this);
; 258  : 			}

  0000f	c2 04 00	 ret	 4
??Yiterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::iterator::operator+=
_TEXT	ENDS
PUBLIC	?_Isnil@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Isnil
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Isnil@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Isnil, COMDAT

; 137  : 		return ((_Charref)(*_Pnode)._Isnil);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 15	 add	 eax, 21			; 00000015H

; 138  : 		}

  00007	c3		 ret	 0
?_Isnil@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Isnil
_TEXT	ENDS
PUBLIC	?_Left@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Left
; Function compile flags: /Ogty
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Left@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Left, COMDAT

; 147  : 		return ((_Nodepref)(*_Pnode)._Left);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]

; 148  : 		}

  00004	c3		 ret	 0
?_Left@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Left
_TEXT	ENDS
PUBLIC	?_Right@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Right
; Function compile flags: /Ogty
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Right@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Right, COMDAT

; 157  : 		return ((_Nodepref)(*_Pnode)._Right);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 08	 add	 eax, 8

; 158  : 		}

  00007	c3		 ret	 0
?_Right@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Right
_TEXT	ENDS
PUBLIC	?size@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::size
; Function compile flags: /Ogty
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBEIXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::size, COMDAT
; _this$ = ecx

; 448  : 		return (_Mysize);

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]

; 449  : 		}

  00003	c3		 ret	 0
?size@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::size
_TEXT	ENDS
PUBLIC	?_Lmost@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Lmost
; Function compile flags: /Ogty
;	COMDAT ?_Lmost@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Lmost@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Lmost, COMDAT
; _this$ = ecx

; 1005 : 		return (_Left(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1006 : 		}

  00003	c3		 ret	 0
?_Lmost@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Lmost
_TEXT	ENDS
PUBLIC	?_Rmost@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Rmost
; Function compile flags: /Ogty
;	COMDAT ?_Rmost@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Rmost@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Rmost, COMDAT
; _this$ = ecx

; 1049 : 		return (_Right(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 08	 add	 eax, 8

; 1050 : 		}

  00006	c3		 ret	 0
?_Rmost@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Rmost
_TEXT	ENDS
PUBLIC	?_Kfn@?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@SAABEABU?$pair@$$CBEK@2@@Z ; std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0>::_Kfn
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\map
;	COMDAT ?_Kfn@?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@SAABEABU?$pair@$$CBEK@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?_Kfn@?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@SAABEABU?$pair@$$CBEK@2@@Z PROC NEAR ; std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0>::_Kfn, COMDAT

; 64   : 		return (_Val.first);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Val$[esp-4]

; 65   : 		}

  00004	c3		 ret	 0
?_Kfn@?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@SAABEABU?$pair@$$CBEK@2@@Z ENDP ; std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0>::_Kfn
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBEK@std@@@std@@QAE@XZ	; std::allocator<std::pair<unsigned char const ,unsigned long> >::allocator<std::pair<unsigned char const ,unsigned long> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@$$CBEK@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U?$pair@$$CBEK@std@@@std@@QAE@XZ PROC NEAR ; std::allocator<std::pair<unsigned char const ,unsigned long> >::allocator<std::pair<unsigned char const ,unsigned long> >, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@U?$pair@$$CBEK@std@@@std@@QAE@XZ ENDP	; std::allocator<std::pair<unsigned char const ,unsigned long> >::allocator<std::pair<unsigned char const ,unsigned long> >
_TEXT	ENDS
PUBLIC	??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@1@AB_N@Z ; std::pair<std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::iterator,bool>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\utility
;	COMDAT ??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@1@AB_N@Z
_TEXT	SEGMENT
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@1@AB_N@Z PROC NEAR ; std::pair<std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::iterator,bool>, COMDAT
; _this$ = ecx

; 34   : 		{	// construct from specified values

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Val1$[esp-4]
  00006	8b 11		 mov	 edx, DWORD PTR [ecx]
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val2$[esp-4]
  0000c	89 10		 mov	 DWORD PTR [eax], edx
  0000e	8a 11		 mov	 dl, BYTE PTR [ecx]
  00010	88 50 04	 mov	 BYTE PTR [eax+4], dl

; 35   : 		}

  00013	c2 08 00	 ret	 8
??0?$pair@Viterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@_N@std@@QAE@ABViterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@1@AB_N@Z ENDP ; std::pair<std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::iterator,bool>::pair<std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::iterator,bool>
_TEXT	ENDS
PUBLIC	??0const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::const_iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 193  : 			{	// construct with null node pointer

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 194  : 			}

  00008	c3		 ret	 0
??0const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??8const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::operator==
; Function compile flags: /Ogty
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::operator==, COMDAT
; _this$ = ecx

; 241  : 			return (_Ptr == _Right._Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	f7 d8		 neg	 eax
  0000a	1b c0		 sbb	 eax, eax
  0000c	40		 inc	 eax

; 242  : 			}

  0000d	c2 04 00	 ret	 4
??8const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::operator==
_TEXT	ENDS
PUBLIC	?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@3@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::_Mynode
; Function compile flags: /Ogty
;	COMDAT ?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@3@XZ
_TEXT	SEGMENT
?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@3@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::_Mynode, COMDAT
; _this$ = ecx

; 284  : 			return (_Ptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 285  : 			}

  00002	c3		 ret	 0
?_Mynode@const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@3@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::_Mynode
_TEXT	ENDS
PUBLIC	?StringCompare@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z	; ATL::ChTraitsCRT<char>::StringCompare
EXTRN	__mbscmp:NEAR
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?StringCompare@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z
_TEXT	SEGMENT
_pszA$ = 8						; size = 4
_pszB$ = 12						; size = 4
?StringCompare@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z PROC NEAR	; ATL::ChTraitsCRT<char>::StringCompare, COMDAT

; 336  : 		return _mbscmp( reinterpret_cast< const unsigned char* >( pszA ), reinterpret_cast< const unsigned char* >( pszB ) );

  00000	e9 00 00 00 00	 jmp	 __mbscmp
?StringCompare@?$ChTraitsCRT@D@ATL@@SAHPBD0@Z ENDP	; ATL::ChTraitsCRT<char>::StringCompare
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@K@std@@QAEXPAKI@Z	; std::allocator<unsigned long>::deallocate
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?deallocate@?$allocator@K@std@@QAEXPAKI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@K@std@@QAEXPAKI@Z PROC NEAR	; std::allocator<unsigned long>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@K@std@@QAEXPAKI@Z ENDP		; std::allocator<unsigned long>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@PAUtagTCHARACTER@@@std@@QAE@ABV01@@Z ; std::allocator<tagTCHARACTER *>::allocator<tagTCHARACTER *>
; Function compile flags: /Ogty
;	COMDAT ??0?$allocator@PAUtagTCHARACTER@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PAUtagTCHARACTER@@@std@@QAE@ABV01@@Z PROC NEAR ; std::allocator<tagTCHARACTER *>::allocator<tagTCHARACTER *>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@PAUtagTCHARACTER@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<tagTCHARACTER *>::allocator<tagTCHARACTER *>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAUtagTCHARACTER@@@std@@QAEXPAPAUtagTCHARACTER@@I@Z ; std::allocator<tagTCHARACTER *>::deallocate
; Function compile flags: /Ogty
;	COMDAT ?deallocate@?$allocator@PAUtagTCHARACTER@@@std@@QAEXPAPAUtagTCHARACTER@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAUtagTCHARACTER@@@std@@QAEXPAPAUtagTCHARACTER@@I@Z PROC NEAR ; std::allocator<tagTCHARACTER *>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@PAUtagTCHARACTER@@@std@@QAEXPAPAUtagTCHARACTER@@I@Z ENDP ; std::allocator<tagTCHARACTER *>::deallocate
_TEXT	ENDS
PUBLIC	??0const_iterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE@PAPAUtagTCHARACTER@@@Z ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::const_iterator::const_iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0const_iterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE@PAPAUtagTCHARACTER@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0const_iterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE@PAPAUtagTCHARACTER@@@Z PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 73   : 		const_iterator(_Tptr _Ptr)

  00000	8b c1		 mov	 eax, ecx

; 74   : 			{	// construct with pointer _Ptr
; 75   : 			_Myptr = _Ptr;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 76   : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE@PAPAUtagTCHARACTER@@@Z ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEABQAUtagTCHARACTER@@XZ ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEABQAUtagTCHARACTER@@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEABQAUtagTCHARACTER@@XZ PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 80   : 
; 81   : 
; 82   : 			return (*_Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 83   : 			}

  00002	c3		 ret	 0
??Dconst_iterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEABQAUtagTCHARACTER@@XZ ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	?_Color@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Color
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Color@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Color@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Color, COMDAT

; 132  : 		return ((_Charref)(*_Pnode)._Color);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 14	 add	 eax, 20			; 00000014H

; 133  : 		}

  00007	c3		 ret	 0
?_Color@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Color
_TEXT	ENDS
PUBLIC	?_Parent@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Parent
; Function compile flags: /Ogty
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Parent@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Parent, COMDAT

; 152  : 		return ((_Nodepref)(*_Pnode)._Parent);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 04	 add	 eax, 4

; 153  : 		}

  00007	c3		 ret	 0
?_Parent@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Parent
_TEXT	ENDS
PUBLIC	?_Myval@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAAU?$pair@$$CBEK@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Myval
; Function compile flags: /Ogty
;	COMDAT ?_Myval@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAAU?$pair@$$CBEK@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Myval@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAAU?$pair@$$CBEK@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Myval, COMDAT

; 162  : 		return ((_Vref)(*_Pnode)._Myval);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 0c	 add	 eax, 12			; 0000000cH

; 163  : 		}

  00007	c3		 ret	 0
?_Myval@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAAAU?$pair@$$CBEK@2@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Myval
_TEXT	ENDS
PUBLIC	??0?$allocator@U?$pair@$$CBEK@std@@@std@@QAE@ABV01@@Z ; std::allocator<std::pair<unsigned char const ,unsigned long> >::allocator<std::pair<unsigned char const ,unsigned long> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@U?$pair@$$CBEK@std@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U?$pair@$$CBEK@std@@@std@@QAE@ABV01@@Z PROC NEAR ; std::allocator<std::pair<unsigned char const ,unsigned long> >::allocator<std::pair<unsigned char const ,unsigned long> >, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@U?$pair@$$CBEK@std@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<std::pair<unsigned char const ,unsigned long> >::allocator<std::pair<unsigned char const ,unsigned long> >
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node>::deallocate
; Function compile flags: /Ogty
;	COMDAT ?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@I@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node>::deallocate
_TEXT	ENDS
PUBLIC	??0const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::const_iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 200  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 201  : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??Yiterator@?$vector@KV?$allocator@K@std@@@std@@QAEAAV012@H@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::operator+=
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Yiterator@?$vector@KV?$allocator@K@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Yiterator@?$vector@KV?$allocator@K@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::operator+=, COMDAT
; _this$ = ecx

; 255  : 			{	// increment by integer

  00000	8b c1		 mov	 eax, ecx

; 256  : 			this->_Myptr += _Off;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  0000d	01 10		 add	 DWORD PTR [eax], edx

; 257  : 			return (*this);
; 258  : 			}

  0000f	c2 04 00	 ret	 4
??Yiterator@?$vector@KV?$allocator@K@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::operator+=
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QBEABKXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QBEABKXZ
_TEXT	SEGMENT
??Dconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QBEABKXZ PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 80   : 
; 81   : 
; 82   : 			return (*_Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 83   : 			}

  00002	c3		 ret	 0
??Dconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QBEABKXZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAUtagTCHARACTER@@@std@@QBEIXZ ; std::allocator<tagTCHARACTER *>::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?max_size@?$allocator@PAUtagTCHARACTER@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAUtagTCHARACTER@@@std@@QBEIXZ PROC NEAR ; std::allocator<tagTCHARACTER *>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 159  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PAUtagTCHARACTER@@@std@@QBEIXZ ENDP ; std::allocator<tagTCHARACTER *>::max_size
_TEXT	ENDS
PUBLIC	??Gconst_iterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEHABV012@@Z ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::const_iterator::operator-
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Gconst_iterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEHABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Gconst_iterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEHABV012@@Z PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::const_iterator::operator-, COMDAT
; _this$ = ecx

; 141  : 
; 142  : 
; 143  : 			return (_Myptr - _Right._Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	c1 f8 02	 sar	 eax, 2

; 144  : 			}

  0000b	c2 04 00	 ret	 4
??Gconst_iterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEHABV012@@Z ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::const_iterator::operator-
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@U?$pair@$$CBEK@std@@@std@@QBEIXZ ; std::allocator<std::pair<unsigned char const ,unsigned long> >::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?max_size@?$allocator@U?$pair@$$CBEK@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U?$pair@$$CBEK@std@@@std@@QBEIXZ PROC NEAR ; std::allocator<std::pair<unsigned char const ,unsigned long> >::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 159  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U?$pair@$$CBEK@std@@@std@@QBEIXZ ENDP ; std::allocator<std::pair<unsigned char const ,unsigned long> >::max_size
_TEXT	ENDS
PUBLIC	??0const_iterator@?$vector@KV?$allocator@K@std@@@std@@QAE@PAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::const_iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0const_iterator@?$vector@KV?$allocator@K@std@@@std@@QAE@PAK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0const_iterator@?$vector@KV?$allocator@K@std@@@std@@QAE@PAK@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 73   : 		const_iterator(_Tptr _Ptr)

  00000	8b c1		 mov	 eax, ecx

; 74   : 			{	// construct with pointer _Ptr
; 75   : 			_Myptr = _Ptr;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 76   : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$vector@KV?$allocator@K@std@@@std@@QAE@PAK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??0_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBEK@2@D@Z ; std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node::_Node
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBEK@2@D@Z
_TEXT	SEGMENT
__Larg$ = 8						; size = 4
__Parg$ = 12						; size = 4
__Rarg$ = 16						; size = 4
__Val$ = 20						; size = 4
__Carg$ = 24						; size = 1
??0_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBEK@2@D@Z PROC NEAR ; std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node::_Node, COMDAT
; _this$ = ecx

; 40   : 			{	// construct a node with value

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Parg$[esp-4]
  00004	8b c1		 mov	 eax, ecx
  00006	8b 4c 24 04	 mov	 ecx, DWORD PTR __Larg$[esp-4]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx
  0000c	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Rarg$[esp-4]
  00010	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00013	8b 4c 24 10	 mov	 ecx, DWORD PTR __Val$[esp-4]
  00017	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0001a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0001c	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  0001f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00022	8a 54 24 14	 mov	 dl, BYTE PTR __Carg$[esp-4]
  00026	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00029	88 50 14	 mov	 BYTE PTR [eax+20], dl
  0002c	c6 40 15 00	 mov	 BYTE PTR [eax+21], 0

; 41   : 			}

  00030	c2 14 00	 ret	 20			; 00000014H
??0_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@PAU012@00ABU?$pair@$$CBEK@2@D@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node::_Node
_TEXT	ENDS
PUBLIC	?_Max@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Max
; Function compile flags: /Ogty
;	COMDAT ?_Max@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Max@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Max, COMDAT

; 1035 : 		while (!_Isnil(_Right(_Pnode)))

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00007	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  0000a	84 d2		 test	 dl, dl
  0000c	75 0e		 jne	 SHORT $L123955
  0000e	8b ff		 npad	 2
$L123954:

; 1036 : 			_Pnode = _Right(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00015	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00018	84 d2		 test	 dl, dl
  0001a	74 f4		 je	 SHORT $L123954
$L123955:

; 1037 : 		return (_Pnode);
; 1038 : 		}

  0001c	c3		 ret	 0
?_Max@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Max
_TEXT	ENDS
PUBLIC	?_Min@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Min
; Function compile flags: /Ogty
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Min, COMDAT

; 1042 : 		while (!_Isnil(_Left(_Pnode)))

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	8b 08		 mov	 ecx, DWORD PTR [eax]
  00006	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00009	84 d2		 test	 dl, dl
  0000b	75 0e		 jne	 SHORT $L123959
  0000d	8d 49 00	 npad	 3
$L123958:

; 1043 : 			_Pnode = _Left(_Pnode);

  00010	8b c1		 mov	 eax, ecx
  00012	8b 08		 mov	 ecx, DWORD PTR [eax]
  00014	8a 51 15	 mov	 dl, BYTE PTR [ecx+21]
  00017	84 d2		 test	 dl, dl
  00019	74 f5		 je	 SHORT $L123958
$L123959:

; 1044 : 		return (_Pnode);
; 1045 : 		}

  0001b	c3		 ret	 0
?_Min@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Min
_TEXT	ENDS
PUBLIC	??0?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@QAE@U?$less@E@1@@Z ; std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0>::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\map
;	COMDAT ??0?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@QAE@U?$less@E@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 1
??0?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@QAE@U?$less@E@1@@Z PROC NEAR ; std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0>::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0>, COMDAT
; _this$ = ecx

; 38   : 		{	// construct with specified comparator

  00000	8b c1		 mov	 eax, ecx

; 39   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@QAE@U?$less@E@1@@Z ENDP ; std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0>::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0>
_TEXT	ENDS
PUBLIC	??$fill@PAPAUtagTCHARACTER@@PAU1@@std@@YAXPAPAUtagTCHARACTER@@0ABQAU1@@Z ; std::fill<tagTCHARACTER * *,tagTCHARACTER *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$fill@PAPAUtagTCHARACTER@@PAU1@@std@@YAXPAPAUtagTCHARACTER@@0ABQAU1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAPAUtagTCHARACTER@@PAU1@@std@@YAXPAPAUtagTCHARACTER@@0ABQAU1@@Z PROC NEAR ; std::fill<tagTCHARACTER * *,tagTCHARACTER *>, COMDAT

; 1135 : 	for (; _First != _Last; ++_First)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR __Last$[esp-4]
  00008	3b c1		 cmp	 eax, ecx
  0000a	74 11		 je	 SHORT $L124395
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$L124393:

; 1136 : 		*_First = _Val;

  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	3b c1		 cmp	 eax, ecx
  0001a	75 f5		 jne	 SHORT $L124393
  0001c	5e		 pop	 esi
$L124395:

; 1137 : 	}

  0001d	c3		 ret	 0
??$fill@PAPAUtagTCHARACTER@@PAU1@@std@@YAXPAPAUtagTCHARACTER@@0ABQAU1@@Z ENDP ; std::fill<tagTCHARACTER * *,tagTCHARACTER *>
_TEXT	ENDS
PUBLIC	??$_Allocate@PAUtagTCHARACTER@@@std@@YAPAPAUtagTCHARACTER@@IPAPAU1@@Z ; std::_Allocate<tagTCHARACTER *>
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Allocate@PAUtagTCHARACTER@@@std@@YAPAPAUtagTCHARACTER@@IPAPAU1@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAUtagTCHARACTER@@@std@@YAPAPAUtagTCHARACTER@@IPAPAU1@@Z PROC NEAR ; std::_Allocate<tagTCHARACTER *>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 35   : 	}

  00014	c3		 ret	 0
??$_Allocate@PAUtagTCHARACTER@@@std@@YAPAPAUtagTCHARACTER@@IPAPAU1@@Z ENDP ; std::_Allocate<tagTCHARACTER *>
_TEXT	ENDS
PUBLIC	??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@0@@Z ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node>
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@0@@Z PROC NEAR ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@YAXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@0@@Z ENDP ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node>
_TEXT	ENDS
PUBLIC	??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@0@@Z ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node *>
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@0@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@0@@Z PROC NEAR ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node *>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@0@@Z ENDP ; std::_Destroy<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node *>
_TEXT	ENDS
PUBLIC	??$?0U?$pair@$$CBEK@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEK@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node *><std::pair<unsigned char const ,unsigned long> >
; Function compile flags: /Ogty
;	COMDAT ??$?0U?$pair@$$CBEK@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEK@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBEK@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEK@std@@@1@@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node *><std::pair<unsigned char const ,unsigned long> >, COMDAT
; _this$ = ecx

; 120  : 		allocator(const allocator<_Other>&)

  00000	8b c1		 mov	 eax, ecx

; 121  : 		{	// construct from a related allocator (do nothing)
; 122  : 		}

  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBEK@std@@@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEK@std@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node *>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node *><std::pair<unsigned char const ,unsigned long> >
_TEXT	ENDS
PUBLIC	??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@0@IPAU120@@Z ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node>
; Function compile flags: /Ogty
;	COMDAT ??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@0@IPAU120@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@0@IPAU120@@Z PROC NEAR ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00007	c1 e0 03	 shl	 eax, 3
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	83 c4 04	 add	 esp, 4

; 35   : 	}

  00013	c3		 ret	 0
??$_Allocate@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@YAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@0@IPAU120@@Z ENDP ; std::_Allocate<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node>
_TEXT	ENDS
PUBLIC	??$?0U?$pair@$$CBEK@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEK@std@@@1@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node><std::pair<unsigned char const ,unsigned long> >
; Function compile flags: /Ogty
;	COMDAT ??$?0U?$pair@$$CBEK@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEK@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$pair@$$CBEK@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEK@std@@@1@@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node><std::pair<unsigned char const ,unsigned long> >, COMDAT
; _this$ = ecx

; 120  : 		allocator(const allocator<_Other>&)

  00000	8b c1		 mov	 eax, ecx

; 121  : 		{	// construct from a related allocator (do nothing)
; 122  : 		}

  00002	c2 04 00	 ret	 4
??$?0U?$pair@$$CBEK@std@@@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@$$CBEK@std@@@1@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node>::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node><std::pair<unsigned char const ,unsigned long> >
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@UtagTCHARACTER@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTCHARACTER@@0@Z ; std::_Ptr_cat<tagTCHARACTER>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$_Ptr_cat@UtagTCHARACTER@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTCHARACTER@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@UtagTCHARACTER@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTCHARACTER@@0@Z PROC NEAR ; std::_Ptr_cat<tagTCHARACTER>, COMDAT

; 218  : 	{	// return pointer category from pointer to pointer arguments

  00000	51		 push	 ecx

; 219  : 	_Scalar_ptr_iterator_tag _Cat;
; 220  : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 221  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@UtagTCHARACTER@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUtagTCHARACTER@@0@Z ENDP ; std::_Ptr_cat<tagTCHARACTER>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAPAUtagTCHARACTER@@PAPAU1@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Copy_opt<tagTCHARACTER * *,tagTCHARACTER * *>
EXTRN	_memmove:NEAR
; Function compile flags: /Ogty
;	COMDAT ??$_Copy_opt@PAPAUtagTCHARACTER@@PAPAU1@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_opt@PAPAUtagTCHARACTER@@PAPAU1@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Copy_opt<tagTCHARACTER * *,tagTCHARACTER * *>, COMDAT

; 1031 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2

; 1032 : 	return ((_OutIt)::memmove(&*_Dest, &*_First,
; 1033 : 		_Off * sizeof (*_First)) + _Off);

  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 1034 : 	}

  00027	c3		 ret	 0
??$_Copy_opt@PAPAUtagTCHARACTER@@PAPAU1@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_opt<tagTCHARACTER * *,tagTCHARACTER * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@YAXPAPAUtagTCHARACTER@@0AAV?$allocator@PAUtagTCHARACTER@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy_range@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@YAXPAPAUtagTCHARACTER@@0AAV?$allocator@PAUtagTCHARACTER@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@YAXPAPAUtagTCHARACTER@@0AAV?$allocator@PAUtagTCHARACTER@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Destroy_range<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >, COMDAT

; 234  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@YAXPAPAUtagTCHARACTER@@0AAV?$allocator@PAUtagTCHARACTER@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAPAUtagTCHARACTER@@PAPAU1@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Copy_backward_opt<tagTCHARACTER * *,tagTCHARACTER * *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAPAUtagTCHARACTER@@PAPAU1@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_backward_opt@PAPAUtagTCHARACTER@@PAPAU1@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Copy_backward_opt<tagTCHARACTER * *,tagTCHARACTER * *>, COMDAT

; 1059 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	c1 f8 02	 sar	 eax, 2

; 1060 : 	return ((_OutIt)memmove(&*_Dest - _Off, &*_First,
; 1061 : 		_Off * sizeof (*_First)));

  0000d	c1 e0 02	 shl	 eax, 2
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	8b 4c 24 14	 mov	 ecx, DWORD PTR __Dest$[esp+4]
  00016	2b c8		 sub	 ecx, eax
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 _memmove
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1062 : 	}

  00021	c3		 ret	 0
??$_Copy_backward_opt@PAPAUtagTCHARACTER@@PAPAU1@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<tagTCHARACTER * *,tagTCHARACTER * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@KV?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy_range@KV?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@KV?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Destroy_range<unsigned long,std::allocator<unsigned long> >, COMDAT

; 234  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@KV?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??$fill_n@PAPAUtagTCHARACTER@@IPAU1@@std@@YAXPAPAUtagTCHARACTER@@IABQAU1@@Z ; std::fill_n<tagTCHARACTER * *,unsigned int,tagTCHARACTER *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$fill_n@PAPAUtagTCHARACTER@@IPAU1@@std@@YAXPAPAUtagTCHARACTER@@IABQAU1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill_n@PAPAUtagTCHARACTER@@IPAU1@@std@@YAXPAPAUtagTCHARACTER@@IABQAU1@@Z PROC NEAR ; std::fill_n<tagTCHARACTER * *,unsigned int,tagTCHARACTER *>, COMDAT

; 1160 : 	for (; 0 < _Count; --_Count, ++_First)

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	76 14		 jbe	 SHORT $L124622
  00008	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  0000c	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00010	56		 push	 esi
$L124620:

; 1161 : 		*_First = _Val;

  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	49		 dec	 ecx
  00019	75 f6		 jne	 SHORT $L124620
  0001b	5e		 pop	 esi
$L124622:

; 1162 : 	}

  0001c	c3		 ret	 0
??$fill_n@PAPAUtagTCHARACTER@@IPAU1@@std@@YAXPAPAUtagTCHARACTER@@IABQAU1@@Z ENDP ; std::fill_n<tagTCHARACTER * *,unsigned int,tagTCHARACTER *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAUtagTCHARACTER@@PAU1@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00AAV?$allocator@PAUtagTCHARACTER@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<tagTCHARACTER *,tagTCHARACTER *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninit_copy@PAUtagTCHARACTER@@PAU1@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00AAV?$allocator@PAUtagTCHARACTER@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PAUtagTCHARACTER@@PAU1@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00AAV?$allocator@PAUtagTCHARACTER@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_copy<tagTCHARACTER *,tagTCHARACTER *>, COMDAT

; 106  : 	size_t _Count = (size_t)(_Last - _First);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2

; 107  : 	return ((_Ty2 *)memmove(&*_Dest, &*_First,
; 108  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 109  : 	}

  00027	c3		 ret	 0
??$_Uninit_copy@PAUtagTCHARACTER@@PAU1@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00AAV?$allocator@PAUtagTCHARACTER@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<tagTCHARACTER *,tagTCHARACTER *>
_TEXT	ENDS
PUBLIC	?Release@CStringData@ATL@@QAEXXZ		; ATL::CStringData::Release
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?Release@CStringData@ATL@@QAEXXZ
_TEXT	SEGMENT
?Release@CStringData@ATL@@QAEXXZ PROC NEAR		; ATL::CStringData::Release, COMDAT
; _this$ = ecx

; 93   : 		ATLASSERT( nRefs != 0 );
; 94   : 
; 95   : 		if( _InterlockedDecrement( &nRefs ) <= 0 )

  00000	8d 41 0c	 lea	 eax, DWORD PTR [ecx+12]
  00003	83 ca ff	 or	 edx, -1
  00006	f0 0f c1 10	 lock	  xadd	 DWORD PTR [eax], edx
  0000a	4a		 dec	 edx
  0000b	85 d2		 test	 edx, edx
  0000d	7f 0a		 jg	 SHORT $L73499

; 96   : 		{
; 97   : 			pStringMgr->Free( this );

  0000f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00011	8b 10		 mov	 edx, DWORD PTR [eax]
  00013	51		 push	 ecx
  00014	8b c8		 mov	 ecx, eax
  00016	ff 52 04	 call	 DWORD PTR [edx+4]
$L73499:

; 98   : 		}
; 99   : 	}

  00019	c3		 ret	 0
?Release@CStringData@ATL@@QAEXXZ ENDP			; ATL::CStringData::Release
_TEXT	ENDS
PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__P$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC NEAR				; operator new, COMDAT

; 109  :         {return (_P); }

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __P$[esp-4]
  00004	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??3@YAXPAX0@Z					; operator delete
; Function compile flags: /Ogty
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??3@YAXPAX0@Z PROC NEAR					; operator delete, COMDAT

; 112  :         {return; }

  00000	c3		 ret	 0
??3@YAXPAX0@Z ENDP					; operator delete
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC NEAR	; std::char_traits<char>::assign, COMDAT

; 331  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 332  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogty
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC NEAR		; std::char_traits<char>::length, COMDAT

; 352  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$L125163:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $L125163
  0000e	2b c2		 sub	 eax, edx

; 353  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
; Function compile flags: /Ogty
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::copy, COMDAT

; 358  : 		return ((_Elem *)::memcpy(_First1, _First2, _Count));

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR __First2$[esp]
  00009	57		 push	 edi
  0000a	8b 7c 24 0c	 mov	 edi, DWORD PTR __First1$[esp+4]
  0000e	8b c1		 mov	 eax, ecx
  00010	8b d7		 mov	 edx, edi
  00012	c1 e9 02	 shr	 ecx, 2
  00015	f3 a5		 rep movsd
  00017	8b c8		 mov	 ecx, eax
  00019	83 e1 03	 and	 ecx, 3
  0001c	f3 a4		 rep movsb
  0001e	5f		 pop	 edi
  0001f	8b c2		 mov	 eax, edx
  00021	5e		 pop	 esi

; 359  : 		}

  00022	c3		 ret	 0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
; Function compile flags: /Ogty
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::move, COMDAT

; 370  : 		return ((_Elem *)::memmove(_First1, _First2, _Count));

  00000	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAK0@Z ; std::_Ptr_cat
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAK0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAK0@Z PROC NEAR ; std::_Ptr_cat, COMDAT

; 371  : 	{	// return pointer category from pointer to unsigned long arguments

  00000	51		 push	 ecx

; 372  : 	_Scalar_ptr_iterator_tag _Cat;
; 373  : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 374  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAK0@Z ENDP ; std::_Ptr_cat
_TEXT	ENDS
PUBLIC	??0tagTCOMMAND@@QAE@XZ				; tagTCOMMAND::tagTCOMMAND
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tworldsvr\tworldtype.h
;	COMDAT ??0tagTCOMMAND@@QAE@XZ
_TEXT	SEGMENT
??0tagTCOMMAND@@QAE@XZ PROC NEAR			; tagTCOMMAND::tagTCOMMAND, COMDAT
; _this$ = ecx

; 225  : 	tagTCOMMAND()

  00000	8b c1		 mov	 eax, ecx

; 226  : 	{
; 227  : 		m_bCommand = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	88 08		 mov	 BYTE PTR [eax], cl

; 228  : 		m_bTgType = 0;

  00006	88 48 01	 mov	 BYTE PTR [eax+1], cl

; 229  : 		m_dwTgObjID = 0;

  00009	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 230  : 		m_wTgPosX = 0;

  0000c	66 89 48 08	 mov	 WORD PTR [eax+8], cx

; 231  : 		m_wTgPosZ = 0;

  00010	66 89 48 0a	 mov	 WORD PTR [eax+10], cx

; 232  : 	};

  00014	c3		 ret	 0
??0tagTCOMMAND@@QAE@XZ ENDP				; tagTCOMMAND::tagTCOMMAND
_TEXT	ENDS
PUBLIC	??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ		; ATL::CSimpleStringT<char,0>::operator char const *
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT
??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ PROC NEAR	; ATL::CSimpleStringT<char,0>::operator char const *, COMDAT
; _this$ = ecx

; 379  : 		return( m_pszData );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 380  : 	}

  00002	c3		 ret	 0
??B?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ ENDP		; ATL::CSimpleStringT<char,0>::operator char const *
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1109 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1110 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L125186
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  00009	c3		 ret	 0
$L125186:

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC NEAR		; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ	; ATL::CSimpleStringT<char,0>::GetString
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ
_TEXT	SEGMENT
?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ PROC NEAR ; ATL::CSimpleStringT<char,0>::GetString, COMDAT
; _this$ = ecx

; 510  : 		return( m_pszData );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 511  : 	}

  00002	c3		 ret	 0
?GetString@?$CSimpleStringT@D$0A@@ATL@@QBEPBDXZ ENDP	; ATL::CSimpleStringT<char,0>::GetString
_TEXT	ENDS
PUBLIC	?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ ; ATL::CSimpleStringT<char,0>::GetData
; Function compile flags: /Ogty
;	COMDAT ?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ
_TEXT	SEGMENT
?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ PROC NEAR ; ATL::CSimpleStringT<char,0>::GetData, COMDAT
; _this$ = ecx

; 731  : 		return( reinterpret_cast< CStringData* >( m_pszData )-1 );

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 e8 10	 sub	 eax, 16			; 00000010H

; 732  : 	}

  00005	c3		 ret	 0
?GetData@?$CSimpleStringT@D$0A@@ATL@@ABEPAUCStringData@2@XZ ENDP ; ATL::CSimpleStringT<char,0>::GetData
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L125200
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  00009	c3		 ret	 0
$L125200:

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC NEAR	; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1494 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi

; 1495 : 		if (_Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00001	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  00004	83 fe 10	 cmp	 esi, 16			; 00000010H
  00007	57		 push	 edi
  00008	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0000b	72 04		 jb	 SHORT $L125212
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	eb 02		 jmp	 SHORT $L125213
$L125212:
  00011	8b d0		 mov	 edx, eax
$L125213:
  00013	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00017	3b fa		 cmp	 edi, edx
  00019	72 17		 jb	 SHORT $L120182
  0001b	83 fe 10	 cmp	 esi, 16			; 00000010H
  0001e	72 02		 jb	 SHORT $L125221
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
$L125221:
  00022	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00025	03 c8		 add	 ecx, eax
  00027	3b cf		 cmp	 ecx, edi
  00029	76 07		 jbe	 SHORT $L120182
  0002b	5f		 pop	 edi

; 1497 : 		else
; 1498 : 			return (true);

  0002c	b0 01		 mov	 al, 1
  0002e	5e		 pop	 esi

; 1499 : 		}

  0002f	c2 04 00	 ret	 4
$L120182:
  00032	5f		 pop	 edi

; 1496 : 			return (false);	// don't ask

  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 1499 : 		}

  00036	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC NEAR			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC NEAR		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 159  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	??$swap@D@std@@YAXAAD0@Z			; std::swap<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\utility
;	COMDAT ??$swap@D@std@@YAXAAD0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$swap@D@std@@YAXAAD0@Z PROC NEAR			; std::swap<char>, COMDAT

; 15   : 	_Ty _Tmp = _Left;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Left$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	56		 push	 esi

; 16   : 	_Left = _Right, _Right = _Tmp;

  00007	8b 74 24 0c	 mov	 esi, DWORD PTR __Right$[esp]
  0000b	8a 16		 mov	 dl, BYTE PTR [esi]
  0000d	88 10		 mov	 BYTE PTR [eax], dl
  0000f	88 0e		 mov	 BYTE PTR [esi], cl
  00011	5e		 pop	 esi

; 17   : 	}

  00012	c3		 ret	 0
??$swap@D@std@@YAXAAD0@Z ENDP				; std::swap<char>
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC NEAR		; std::_Allocate<char>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 35   : 	}

  0000d	c3		 ret	 0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
PUBLIC	?GetSize@CTParty@@QAEEXZ			; CTParty::GetSize
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tworldsvr\tparty.cpp
;	COMDAT ?GetSize@CTParty@@QAEEXZ
_TEXT	SEGMENT
?GetSize@CTParty@@QAEEXZ PROC NEAR			; CTParty::GetSize, COMDAT
; _this$ = ecx

; 52   : 	return (BYTE)m_vMember.size();

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L125243
  00007	33 c0		 xor	 eax, eax

; 53   : }

  00009	c3		 ret	 0

; 52   : 	return (BYTE)m_vMember.size();

$L125243:
  0000a	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2

; 53   : }

  00012	c3		 ret	 0
?GetSize@CTParty@@QAEEXZ ENDP				; CTParty::GetSize
_TEXT	ENDS
PUBLIC	?CompareNoCase@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBEHPBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CompareNoCase
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?CompareNoCase@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBEHPBD@Z
_TEXT	SEGMENT
_psz$ = 8						; size = 4
?CompareNoCase@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBEHPBD@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CompareNoCase, COMDAT
; _this$ = ecx

; 1094 : 		ATLASSERT( AtlIsValidString( psz ) );
; 1095 : 		return( StringTraits::StringCompareIgnore( GetString(), psz ) );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _psz$[esp-4]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	50		 push	 eax
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 __mbsicmp
  0000d	83 c4 08	 add	 esp, 8

; 1096 : 	}

  00010	c2 04 00	 ret	 4
?CompareNoCase@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBEHPBD@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::CompareNoCase
_TEXT	ENDS
PUBLIC	??Hiterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBE?AV012@H@Z ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::iterator::operator+
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Hiterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Hiterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::iterator::operator+, COMDAT
; _this$ = ecx

; 262  : 			iterator _Tmp = *this;
; 263  : 			return (_Tmp += _Off);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 08	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00009	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000d	89 10		 mov	 DWORD PTR [eax], edx

; 264  : 			}

  0000f	c2 08 00	 ret	 8
??Hiterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBE?AV012@H@Z ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::iterator::operator+
_TEXT	ENDS
PUBLIC	?empty@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBE_NXZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::empty
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?empty@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBE_NXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::empty, COMDAT
; _this$ = ecx

; 458  : 		return (size() == 0);

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	33 c0		 xor	 eax, eax
  00005	85 d2		 test	 edx, edx
  00007	0f 94 c0	 sete	 al

; 459  : 		}

  0000a	c3		 ret	 0
?empty@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBE_NXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::empty
_TEXT	ENDS
PUBLIC	??0iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::iterator::iterator
; Function compile flags: /Ogty
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::iterator::iterator, COMDAT
; _this$ = ecx

; 304  : 		iterator()

  00000	8b c1		 mov	 eax, ecx
  00002	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0

; 305  : 			{	// construct with null node pointer
; 306  : 			}

  00008	c3		 ret	 0
??0iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??9const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::operator!=
; Function compile flags: /Ogty
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::operator!=, COMDAT
; _this$ = ecx

; 246  : 			return (!(*this == _Right));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Right$[esp-4]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]
  00009	33 c9		 xor	 ecx, ecx
  0000b	3b c6		 cmp	 eax, esi
  0000d	0f 95 c1	 setne	 cl
  00010	8a c1		 mov	 al, cl
  00012	5e		 pop	 esi

; 247  : 			}

  00013	c2 04 00	 ret	 4
??9const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::operator!=
_TEXT	ENDS
PUBLIC	?Compare@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBEHPBD@Z ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Compare
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ?Compare@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBEHPBD@Z
_TEXT	SEGMENT
_psz$ = 8						; size = 4
?Compare@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBEHPBD@Z PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Compare, COMDAT
; _this$ = ecx

; 1088 : 		ATLASSERT( AtlIsValidString( psz ) );
; 1089 : 		return( StringTraits::StringCompare( GetString(), psz ) );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _psz$[esp-4]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	50		 push	 eax
  00007	51		 push	 ecx
  00008	e8 00 00 00 00	 call	 __mbscmp
  0000d	83 c4 08	 add	 esp, 8

; 1090 : 	}

  00010	c2 04 00	 ret	 4
?Compare@?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QBEHPBD@Z ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::Compare
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAE@V?$allocator@PAUtagTCHARACTER@@@1@@Z ; std::_Vector_val<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Vector_val<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0?$_Vector_val@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAE@V?$allocator@PAUtagTCHARACTER@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAE@V?$allocator@PAUtagTCHARACTER@@@1@@Z PROC NEAR ; std::_Vector_val<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Vector_val<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >, COMDAT
; _this$ = ecx

; 21   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 22   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Vector_val@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAE@V?$allocator@PAUtagTCHARACTER@@@1@@Z ENDP ; std::_Vector_val<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Vector_val<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >
_TEXT	ENDS
PUBLIC	??0iterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE@PAPAUtagTCHARACTER@@@Z ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::iterator::iterator
; Function compile flags: /Ogty
;	COMDAT ??0iterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE@PAPAUtagTCHARACTER@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0iterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE@PAPAUtagTCHARACTER@@@Z PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::iterator::iterator, COMDAT
; _this$ = ecx

; 215  : 			{	// construct with pointer _Ptr

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 216  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE@PAPAUtagTCHARACTER@@@Z ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??Diterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEAAPAUtagTCHARACTER@@XZ ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Diterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEAAPAUtagTCHARACTER@@XZ
_TEXT	SEGMENT
??Diterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEAAPAUtagTCHARACTER@@XZ PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::iterator::operator*, COMDAT
; _this$ = ecx

; 220  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 221  : 			}

  00002	c3		 ret	 0
??Diterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEAAPAUtagTCHARACTER@@XZ ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::iterator::operator*
_TEXT	ENDS
PUBLIC	?_Key@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAABEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Key
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Key@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAABEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Key@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAABEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Key, COMDAT

; 142  : 		return (_Mybase::_Kfn(_Myval(_Pnode)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Pnode$[esp-4]
  00004	83 c0 0c	 add	 eax, 12			; 0000000cH

; 143  : 		}

  00007	c3		 ret	 0
?_Key@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAABEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Key
_TEXT	ENDS
PUBLIC	?_Root@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Root
; Function compile flags: /Ogty
;	COMDAT ?_Root@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Root@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Root, COMDAT
; _this$ = ecx

; 1059 : 		return (_Parent(_Myhead));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	83 c0 04	 add	 eax, 4

; 1060 : 		}

  00006	c3		 ret	 0
?_Root@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Root
_TEXT	ENDS
PUBLIC	??0iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::iterator::iterator
; Function compile flags: /Ogty
;	COMDAT ??0iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
??0iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::iterator::iterator, COMDAT
; _this$ = ecx

; 312  : 			{	// construct with node pointer _Pnode

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pnode$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 313  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBEABU?$pair@$$CBEK@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBEABU?$pair@$$CBEK@2@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBEABU?$pair@$$CBEK@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 205  : 			return (_Myval(_Ptr));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 206  : 			}

  00005	c3		 ret	 0
??Dconst_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBEABU?$pair@$$CBEK@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	??Diterator@?$vector@KV?$allocator@K@std@@@std@@QBEAAKXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::operator*
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Diterator@?$vector@KV?$allocator@K@std@@@std@@QBEAAKXZ
_TEXT	SEGMENT
??Diterator@?$vector@KV?$allocator@K@std@@@std@@QBEAAKXZ PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::operator*, COMDAT
; _this$ = ecx

; 220  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 221  : 			}

  00002	c3		 ret	 0
??Diterator@?$vector@KV?$allocator@K@std@@@std@@QBEAAKXZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::operator*
_TEXT	ENDS
PUBLIC	??Hiterator@?$vector@KV?$allocator@K@std@@@std@@QBE?AV012@H@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::operator+
; Function compile flags: /Ogty
;	COMDAT ??Hiterator@?$vector@KV?$allocator@K@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Hiterator@?$vector@KV?$allocator@K@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::operator+, COMDAT
; _this$ = ecx

; 262  : 			iterator _Tmp = *this;
; 263  : 			return (_Tmp += _Off);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 08	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00009	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000d	89 10		 mov	 DWORD PTR [eax], edx

; 264  : 			}

  0000f	c2 08 00	 ret	 8
??Hiterator@?$vector@KV?$allocator@K@std@@@std@@QBE?AV012@H@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::operator+
_TEXT	ENDS
PUBLIC	?max_size@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEIXZ ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::max_size, COMDAT
; _this$ = ecx

; 521  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 522  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEIXZ ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAUtagTCHARACTER@@@std@@QAEPAPAUtagTCHARACTER@@I@Z ; std::allocator<tagTCHARACTER *>::allocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@PAUtagTCHARACTER@@@std@@QAEPAPAUtagTCHARACTER@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAUtagTCHARACTER@@@std@@QAEPAPAUtagTCHARACTER@@I@Z PROC NEAR ; std::allocator<tagTCHARACTER *>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 138  : 		}

  00014	c2 04 00	 ret	 4
?allocate@?$allocator@PAUtagTCHARACTER@@@std@@QAEPAPAUtagTCHARACTER@@I@Z ENDP ; std::allocator<tagTCHARACTER *>::allocate
_TEXT	ENDS
PUBLIC	??Giterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEHABVconst_iterator@12@@Z ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::iterator::operator-
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Giterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEHABVconst_iterator@12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Giterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEHABVconst_iterator@12@@Z PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::iterator::operator-, COMDAT
; _this$ = ecx

; 279  : 			return ((const_iterator)*this - _Right);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	c1 f8 02	 sar	 eax, 2

; 280  : 			}

  0000b	c2 04 00	 ret	 4
??Giterator@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QBEHABVconst_iterator@12@@Z ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::iterator::operator-
_TEXT	ENDS
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::max_size
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBEIXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::max_size, COMDAT
; _this$ = ecx

; 453  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 1f	 mov	 eax, 536870911		; 1fffffffH

; 454  : 		}

  00005	c3		 ret	 0
?max_size@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::max_size
_TEXT	ENDS
PUBLIC	?_Lrotate@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Lrotate
; Function compile flags: /Ogty
;	COMDAT ?_Lrotate@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Lrotate, COMDAT
; _this$ = ecx

; 1015 : 		_Nodeptr _Pnode = _Right(_Wherenode);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Wherenode$[esp-4]
  00004	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00007	53		 push	 ebx
  00008	56		 push	 esi

; 1016 : 		_Right(_Wherenode) = _Left(_Pnode);

  00009	8b 30		 mov	 esi, DWORD PTR [eax]
  0000b	89 72 08	 mov	 DWORD PTR [edx+8], esi

; 1017 : 
; 1018 : 		if (!_Isnil(_Left(_Pnode)))

  0000e	8b 30		 mov	 esi, DWORD PTR [eax]
  00010	8a 5e 15	 mov	 bl, BYTE PTR [esi+21]
  00013	84 db		 test	 bl, bl
  00015	75 03		 jne	 SHORT $L123784

; 1019 : 			_Parent(_Left(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$L123784:

; 1020 : 		_Parent(_Pnode) = _Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1021 : 
; 1022 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00026	75 0d		 jne	 SHORT $L123785

; 1023 : 			_Root() = _Pnode;

  00028	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0002b	5e		 pop	 esi

; 1028 : 
; 1029 : 		_Left(_Pnode) = _Wherenode;

  0002c	89 10		 mov	 DWORD PTR [eax], edx

; 1030 : 		_Parent(_Wherenode) = _Pnode;

  0002e	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00031	5b		 pop	 ebx

; 1031 : 		}

  00032	c2 04 00	 ret	 4
$L123785:

; 1024 : 		else if (_Wherenode == _Left(_Parent(_Wherenode)))

  00035	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00038	3b 11		 cmp	 edx, DWORD PTR [ecx]
  0003a	75 0c		 jne	 SHORT $L123787

; 1025 : 			_Left(_Parent(_Wherenode)) = _Pnode;

  0003c	89 01		 mov	 DWORD PTR [ecx], eax
  0003e	5e		 pop	 esi

; 1028 : 
; 1029 : 		_Left(_Pnode) = _Wherenode;

  0003f	89 10		 mov	 DWORD PTR [eax], edx

; 1030 : 		_Parent(_Wherenode) = _Pnode;

  00041	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00044	5b		 pop	 ebx

; 1031 : 		}

  00045	c2 04 00	 ret	 4
$L123787:

; 1026 : 		else
; 1027 : 			_Right(_Parent(_Wherenode)) = _Pnode;

  00048	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0004b	5e		 pop	 esi

; 1028 : 
; 1029 : 		_Left(_Pnode) = _Wherenode;

  0004c	89 10		 mov	 DWORD PTR [eax], edx

; 1030 : 		_Parent(_Wherenode) = _Pnode;

  0004e	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00051	5b		 pop	 ebx

; 1031 : 		}

  00052	c2 04 00	 ret	 4
?_Lrotate@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Lrotate
_TEXT	ENDS
PUBLIC	?_Rrotate@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Rrotate
; Function compile flags: /Ogty
;	COMDAT ?_Rrotate@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Rrotate, COMDAT
; _this$ = ecx

; 1069 : 		_Nodeptr _Pnode = _Left(_Wherenode);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Wherenode$[esp-4]
  00004	8b 02		 mov	 eax, DWORD PTR [edx]
  00006	53		 push	 ebx
  00007	56		 push	 esi

; 1070 : 		_Left(_Wherenode) = _Right(_Pnode);

  00008	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  0000b	89 32		 mov	 DWORD PTR [edx], esi

; 1071 : 
; 1072 : 		if (!_Isnil(_Right(_Pnode)))

  0000d	8b 70 08	 mov	 esi, DWORD PTR [eax+8]
  00010	8a 5e 15	 mov	 bl, BYTE PTR [esi+21]
  00013	84 db		 test	 bl, bl
  00015	75 03		 jne	 SHORT $L123792

; 1073 : 			_Parent(_Right(_Pnode)) = _Wherenode;

  00017	89 56 04	 mov	 DWORD PTR [esi+4], edx
$L123792:

; 1074 : 		_Parent(_Pnode) = _Parent(_Wherenode);

  0001a	8b 72 04	 mov	 esi, DWORD PTR [edx+4]
  0001d	89 70 04	 mov	 DWORD PTR [eax+4], esi

; 1075 : 
; 1076 : 		if (_Wherenode == _Root())

  00020	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00023	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00026	75 0e		 jne	 SHORT $L123793

; 1077 : 			_Root() = _Pnode;

  00028	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  0002b	5e		 pop	 esi

; 1082 : 
; 1083 : 		_Right(_Pnode) = _Wherenode;

  0002c	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1084 : 		_Parent(_Wherenode) = _Pnode;

  0002f	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00032	5b		 pop	 ebx

; 1085 : 		}

  00033	c2 04 00	 ret	 4
$L123793:

; 1078 : 		else if (_Wherenode == _Right(_Parent(_Wherenode)))

  00036	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00039	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  0003c	75 0e		 jne	 SHORT $L123795

; 1079 : 			_Right(_Parent(_Wherenode)) = _Pnode;

  0003e	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00041	5e		 pop	 esi

; 1082 : 
; 1083 : 		_Right(_Pnode) = _Wherenode;

  00042	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1084 : 		_Parent(_Wherenode) = _Pnode;

  00045	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00048	5b		 pop	 ebx

; 1085 : 		}

  00049	c2 04 00	 ret	 4
$L123795:

; 1080 : 		else
; 1081 : 			_Left(_Parent(_Wherenode)) = _Pnode;

  0004c	89 01		 mov	 DWORD PTR [ecx], eax
  0004e	5e		 pop	 esi

; 1082 : 
; 1083 : 		_Right(_Pnode) = _Wherenode;

  0004f	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 1084 : 		_Parent(_Wherenode) = _Pnode;

  00052	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00055	5b		 pop	 ebx

; 1085 : 		}

  00056	c2 04 00	 ret	 4
?_Rrotate@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Rrotate
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node>::destroy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node>::destroy
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node *>::destroy
; Function compile flags: /Ogty
;	COMDAT ?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node *>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node *>::destroy
_TEXT	ENDS
PUBLIC	??0iterator@?$vector@KV?$allocator@K@std@@@std@@QAE@PAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::iterator
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0iterator@?$vector@KV?$allocator@K@std@@@std@@QAE@PAK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0iterator@?$vector@KV?$allocator@K@std@@@std@@QAE@PAK@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::iterator, COMDAT
; _this$ = ecx

; 215  : 			{	// construct with pointer _Ptr

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 216  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$vector@KV?$allocator@K@std@@@std@@QAE@PAK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::iterator
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@I@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node>::allocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@I@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00007	c1 e0 03	 shl	 eax, 3
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	83 c4 04	 add	 esp, 4

; 138  : 		}

  00013	c2 04 00	 ret	 4
?allocate@?$allocator@U_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@I@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node>::allocate
_TEXT	ENDS
PUBLIC	?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::_Dec
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::_Dec, COMDAT
; _this$ = ecx

; 251  : 			if (_Isnil(_Ptr))

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00005	84 d2		 test	 dl, dl
  00007	74 06		 je	 SHORT $L123925

; 252  : 				_Ptr = _Right(_Ptr);	// end() ==> rightmost

  00009	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0000c	89 01		 mov	 DWORD PTR [ecx], eax

; 263  : 				}
; 264  : 			}

  0000e	c3		 ret	 0
$L123925:

; 253  : 			else if (!_Isnil(_Left(_Ptr)))

  0000f	8b 10		 mov	 edx, DWORD PTR [eax]
  00011	53		 push	 ebx
  00012	8a 5a 15	 mov	 bl, BYTE PTR [edx+21]
  00015	84 db		 test	 bl, bl
  00017	75 1a		 jne	 SHORT $L125609

; 254  : 				_Ptr = _Max(_Left(_Ptr));	// ==> largest of left subtree

  00019	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0001c	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  0001f	84 db		 test	 bl, bl
  00021	75 0c		 jne	 SHORT $L125587
$L125586:
  00023	8b d0		 mov	 edx, eax
  00025	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00028	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  0002b	84 db		 test	 bl, bl
  0002d	74 f4		 je	 SHORT $L125586
$L125587:
  0002f	89 11		 mov	 DWORD PTR [ecx], edx
  00031	5b		 pop	 ebx

; 263  : 				}
; 264  : 			}

  00032	c3		 ret	 0
$L125609:

; 255  : 			else
; 256  : 				{	// climb looking for left subtree
; 257  : 				_Nodeptr _Pnode;
; 258  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 259  : 					&& _Ptr == _Left(_Pnode))

  00033	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00036	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00039	84 d2		 test	 dl, dl
  0003b	75 1e		 jne	 SHORT $L125612
  0003d	8d 49 00	 npad	 3
$L123931:
  00040	8b 11		 mov	 edx, DWORD PTR [ecx]
  00042	3b 10		 cmp	 edx, DWORD PTR [eax]
  00044	75 0c		 jne	 SHORT $L123932

; 260  : 					_Ptr = _Pnode;	// ==> parent while left subtree

  00046	89 01		 mov	 DWORD PTR [ecx], eax
  00048	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004b	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0004e	84 d2		 test	 dl, dl
  00050	74 ee		 je	 SHORT $L123931
$L123932:

; 261  : 				if (!_Isnil(_Pnode))

  00052	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00055	84 d2		 test	 dl, dl
  00057	75 02		 jne	 SHORT $L125612

; 262  : 					_Ptr = _Pnode;	// ==> parent if not head

  00059	89 01		 mov	 DWORD PTR [ecx], eax
$L125612:
  0005b	5b		 pop	 ebx

; 263  : 				}
; 264  : 			}

  0005c	c3		 ret	 0
?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::_Dec
_TEXT	ENDS
PUBLIC	?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::_Inc
; Function compile flags: /Ogty
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::_Inc, COMDAT
; _this$ = ecx

; 268  : 			if (_Isnil(_Ptr))

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00005	84 d2		 test	 dl, dl
  00007	75 4d		 jne	 SHORT $L123939

; 269  : 				;	// end() shouldn't be incremented, don't move
; 270  : 			else if (!_Isnil(_Right(_Ptr)))

  00009	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0000c	53		 push	 ebx
  0000d	8a 5a 15	 mov	 bl, BYTE PTR [edx+21]
  00010	84 db		 test	 bl, bl
  00012	75 1b		 jne	 SHORT $L125660

; 271  : 				_Ptr = _Min(_Right(_Ptr));	// ==> smallest of right subtree

  00014	8b 02		 mov	 eax, DWORD PTR [edx]
  00016	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  00019	84 db		 test	 bl, bl
  0001b	75 0e		 jne	 SHORT $L125641
  0001d	8d 49 00	 npad	 3
$L125640:
  00020	8b d0		 mov	 edx, eax
  00022	8b 02		 mov	 eax, DWORD PTR [edx]
  00024	8a 58 15	 mov	 bl, BYTE PTR [eax+21]
  00027	84 db		 test	 bl, bl
  00029	74 f5		 je	 SHORT $L125640
$L125641:
  0002b	89 11		 mov	 DWORD PTR [ecx], edx
  0002d	5b		 pop	 ebx

; 279  : 				}
; 280  : 			}

  0002e	c3		 ret	 0
$L125660:

; 272  : 			else
; 273  : 				{	// climb looking for right subtree
; 274  : 				_Nodeptr _Pnode;
; 275  : 				while (!_Isnil(_Pnode = _Parent(_Ptr))
; 276  : 					&& _Ptr == _Right(_Pnode))

  0002f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00032	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00035	84 d2		 test	 dl, dl
  00037	75 1a		 jne	 SHORT $L123943
  00039	8d a4 24 00 00
	00 00		 npad	 7
$L123942:
  00040	8b 11		 mov	 edx, DWORD PTR [ecx]
  00042	3b 50 08	 cmp	 edx, DWORD PTR [eax+8]
  00045	75 0c		 jne	 SHORT $L123943

; 277  : 					_Ptr = _Pnode;	// ==> parent while right subtree

  00047	89 01		 mov	 DWORD PTR [ecx], eax
  00049	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0004f	84 d2		 test	 dl, dl
  00051	74 ed		 je	 SHORT $L123942
$L123943:

; 278  : 				_Ptr = _Pnode;	// ==> parent (head if end())

  00053	89 01		 mov	 DWORD PTR [ecx], eax
  00055	5b		 pop	 ebx
$L123939:

; 279  : 				}
; 280  : 			}

  00056	c3		 ret	 0
?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::_Inc
_TEXT	ENDS
PUBLIC	??0?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEK@std@@@1@@Z ; std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >
; Function compile flags: /Ogty
;	COMDAT ??0?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEK@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEK@std@@@1@@Z PROC NEAR ; std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >, COMDAT
; _this$ = ecx

; 54   : 		{	// construct traits from _Parg and allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 55   : 		}

  00002	c2 08 00	 ret	 8
??0?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEK@std@@@1@@Z ENDP ; std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >
_TEXT	ENDS
PUBLIC	??$copy@PAPAUtagTCHARACTER@@PAPAU1@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00@Z ; std::copy<tagTCHARACTER * *,tagTCHARACTER * *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$copy@PAPAUtagTCHARACTER@@PAPAU1@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$copy@PAPAUtagTCHARACTER@@PAPAU1@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00@Z PROC NEAR ; std::copy<tagTCHARACTER * *,tagTCHARACTER * *>, COMDAT

; 1040 : 	return (_Copy_opt(_First, _Last, _Dest, _Ptr_cat(_First, _Dest)));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 1041 : 	}

  00027	c3		 ret	 0
??$copy@PAPAUtagTCHARACTER@@PAPAU1@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00@Z ENDP ; std::copy<tagTCHARACTER * *,tagTCHARACTER * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@YAXPAPAUtagTCHARACTER@@0AAV?$allocator@PAUtagTCHARACTER@@@0@@Z ; std::_Destroy_range<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy_range@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@YAXPAPAUtagTCHARACTER@@0AAV?$allocator@PAUtagTCHARACTER@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@YAXPAPAUtagTCHARACTER@@0AAV?$allocator@PAUtagTCHARACTER@@@0@@Z PROC NEAR ; std::_Destroy_range<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >, COMDAT

; 217  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 218  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@YAXPAPAUtagTCHARACTER@@0AAV?$allocator@PAUtagTCHARACTER@@@0@@Z ENDP ; std::_Destroy_range<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >
_TEXT	ENDS
PUBLIC	??$copy_backward@PAPAUtagTCHARACTER@@PAPAU1@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00@Z ; std::copy_backward<tagTCHARACTER * *,tagTCHARACTER * *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$copy_backward@PAPAUtagTCHARACTER@@PAPAU1@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$copy_backward@PAPAUtagTCHARACTER@@PAPAU1@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00@Z PROC NEAR ; std::copy_backward<tagTCHARACTER * *,tagTCHARACTER * *>, COMDAT

; 1068 : 	return (_Copy_backward_opt(_First, _Last, _Dest,
; 1069 : 		_Ptr_cat(_First, _Dest)));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	c1 f8 02	 sar	 eax, 2
  0000d	c1 e0 02	 shl	 eax, 2
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	8b 4c 24 14	 mov	 ecx, DWORD PTR __Dest$[esp+4]
  00016	2b c8		 sub	 ecx, eax
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 _memmove
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1070 : 	}

  00021	c3		 ret	 0
??$copy_backward@PAPAUtagTCHARACTER@@PAPAU1@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00@Z ENDP ; std::copy_backward<tagTCHARACTER * *,tagTCHARACTER * *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@KV?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@@Z ; std::_Destroy_range<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy_range@KV?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@KV?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@@Z PROC NEAR ; std::_Destroy_range<unsigned long,std::allocator<unsigned long> >, COMDAT

; 217  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 218  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@KV?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@@Z ENDP ; std::_Destroy_range<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@0@ABQAU120@@Z ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node *>
; Function compile flags: /Ogty
;	COMDAT ??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@0@ABQAU120@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@0@ABQAU120@@Z PROC NEAR ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node *>, COMDAT

; 42   : 	new ((void _FARQ *)_Ptr) _T1(_Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $L125723
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$L125723:

; 43   : 	}

  00010	c3		 ret	 0
??$_Construct@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@PAU123@@std@@YAXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@0@ABQAU120@@Z ENDP ; std::_Construct<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node *,std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node *>
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAUtagTCHARACTER@@IPAU1@@std@@YAXPAPAUtagTCHARACTER@@IABQAU1@AAV?$allocator@PAUtagTCHARACTER@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<tagTCHARACTER *,unsigned int,tagTCHARACTER *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninit_fill_n@PAUtagTCHARACTER@@IPAU1@@std@@YAXPAPAUtagTCHARACTER@@IABQAU1@AAV?$allocator@PAUtagTCHARACTER@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_fill_n@PAUtagTCHARACTER@@IPAU1@@std@@YAXPAPAUtagTCHARACTER@@IABQAU1@AAV?$allocator@PAUtagTCHARACTER@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_fill_n<tagTCHARACTER *,unsigned int,tagTCHARACTER *>, COMDAT

; 237  : 	fill_n(_First, _Count, _Val);

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  0000a	76 10		 jbe	 SHORT $L125735
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$L125733:
  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	49		 dec	 ecx
  00019	75 f6		 jne	 SHORT $L125733
  0001b	5e		 pop	 esi
$L125735:

; 238  : 	}

  0001c	c3		 ret	 0
??$_Uninit_fill_n@PAUtagTCHARACTER@@IPAU1@@std@@YAXPAPAUtagTCHARACTER@@IABQAU1@AAV?$allocator@PAUtagTCHARACTER@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<tagTCHARACTER *,unsigned int,tagTCHARACTER *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@PAPAUtagTCHARACTER@@PAPAU1@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00AAV?$allocator@PAUtagTCHARACTER@@@0@@Z ; std::_Uninitialized_copy<tagTCHARACTER * *,tagTCHARACTER * *,std::allocator<tagTCHARACTER *> >
; Function compile flags: /Ogty
;	COMDAT ??$_Uninitialized_copy@PAPAUtagTCHARACTER@@PAPAU1@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00AAV?$allocator@PAUtagTCHARACTER@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAPAUtagTCHARACTER@@PAPAU1@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00AAV?$allocator@PAUtagTCHARACTER@@@0@@Z PROC NEAR ; std::_Uninitialized_copy<tagTCHARACTER * *,tagTCHARACTER * *,std::allocator<tagTCHARACTER *> >, COMDAT

; 127  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 128  : 		_Ptr_cat(_First, _Dest)));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 129  : 	}

  00027	c3		 ret	 0
??$_Uninitialized_copy@PAPAUtagTCHARACTER@@PAPAU1@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00AAV?$allocator@PAUtagTCHARACTER@@@0@@Z ENDP ; std::_Uninitialized_copy<tagTCHARACTER * *,tagTCHARACTER * *,std::allocator<tagTCHARACTER *> >
_TEXT	ENDS
PUBLIC	??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ		; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\atlsimpstr.h
;	COMDAT ??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ PROC NEAR		; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>, COMDAT
; _this$ = ecx

; 263  : 		CStringData* pData = GetData();

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 e8 10	 sub	 eax, 16			; 00000010H

; 264  : 		pData->Release();

  00005	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00008	83 ca ff	 or	 edx, -1
  0000b	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0000f	4a		 dec	 edx
  00010	85 d2		 test	 edx, edx
  00012	7f 08		 jg	 SHORT $L125761
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	8b 11		 mov	 edx, DWORD PTR [ecx]
  00018	50		 push	 eax
  00019	ff 52 04	 call	 DWORD PTR [edx+4]
$L125761:

; 265  : 	}

  0001c	c3		 ret	 0
??1?$CSimpleStringT@D$0A@@ATL@@QAE@XZ ENDP		; ATL::CSimpleStringT<char,0>::~CSimpleStringT<char,0>
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC NEAR ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 34   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 35   : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogty
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $L125778
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1476 : 		}

  00014	c2 04 00	 ret	 4

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$L125778:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 1476 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1114 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1115 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1116 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC NEAR	; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 138  : 		}

  0000d	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	??8ATL@@YA_NABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@0@0@Z ; ATL::operator==
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??8ATL@@YA_NABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@0@0@Z
_TEXT	SEGMENT
_str1$ = 8						; size = 4
_str2$ = 12						; size = 4
??8ATL@@YA_NABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@0@0@Z PROC NEAR ; ATL::operator==, COMDAT

; 2082 : 		return( str1.Compare( str2 ) == 0 );

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _str2$[esp-4]
  00004	8b 00		 mov	 eax, DWORD PTR [eax]
  00006	8b 4c 24 04	 mov	 ecx, DWORD PTR _str1$[esp-4]
  0000a	8b 09		 mov	 ecx, DWORD PTR [ecx]
  0000c	50		 push	 eax
  0000d	51		 push	 ecx
  0000e	e8 00 00 00 00	 call	 __mbscmp
  00013	83 c4 08	 add	 esp, 8
  00016	f7 d8		 neg	 eax
  00018	1b c0		 sbb	 eax, eax
  0001a	40		 inc	 eax

; 2083 : 	}

  0001b	c3		 ret	 0
??8ATL@@YA_NABV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@0@0@Z ENDP ; ATL::operator==
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::begin
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?begin@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::begin, COMDAT
; _this$ = ecx

; 463  : 		return (iterator(_Myfirst));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 464  : 		}

  00009	c2 04 00	 ret	 4
?begin@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::begin
_TEXT	ENDS
PUBLIC	??A?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAEAAPAUtagTCHARACTER@@I@Z ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::operator[]
; Function compile flags: /Ogty
;	COMDAT ??A?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAEAAPAUtagTCHARACTER@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAEAAPAUtagTCHARACTER@@I@Z PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::operator[], COMDAT
; _this$ = ecx

; 555  : 		return (*(begin() + _Pos));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pos$[esp-4]
  00007	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 556  : 		}

  0000a	c2 04 00	 ret	 4
??A?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAEAAPAUtagTCHARACTER@@I@Z ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::operator[]
_TEXT	ENDS
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::begin
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::begin, COMDAT
; _this$ = ecx

; 408  : 		return (_TREE_ITERATOR(_Lmost()));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 08		 mov	 ecx, DWORD PTR [eax]
  00005	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 409  : 		}

  0000b	c2 04 00	 ret	 4
?begin@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::begin
_TEXT	ENDS
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::end
; Function compile flags: /Ogty
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::end, COMDAT
; _this$ = ecx

; 418  : 		return (_TREE_ITERATOR(_Myhead));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 419  : 		}

  00009	c2 04 00	 ret	 4
?end@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::end
_TEXT	ENDS
PUBLIC	??Diterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBEAAU?$pair@$$CBEK@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Diterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBEAAU?$pair@$$CBEK@2@XZ
_TEXT	SEGMENT
??Diterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBEAAU?$pair@$$CBEK@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::iterator::operator*, COMDAT
; _this$ = ecx

; 317  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 c0 0c	 add	 eax, 12			; 0000000cH

; 318  : 			}

  00005	c3		 ret	 0
??Diterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QBEAAU?$pair@$$CBEK@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::iterator::operator*
_TEXT	ENDS
PUBLIC	?end@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::end
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?end@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::end, COMDAT
; _this$ = ecx

; 473  : 		return (iterator(_Mylast));

  00000	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 474  : 		}

  00009	c2 04 00	 ret	 4
?end@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::end
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEXPAPAUtagTCHARACTER@@0@Z ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Destroy
; Function compile flags: /Ogty
;	COMDAT ?_Destroy@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEXPAPAUtagTCHARACTER@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEXPAPAUtagTCHARACTER@@0@Z PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Destroy, COMDAT
; _this$ = ecx

; 787  : 		_Destroy_range(_First, _Last, this->_Alval);
; 788  : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEXPAPAUtagTCHARACTER@@0@Z ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEXXZ ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Tidy
; Function compile flags: /Ogty
;	COMDAT ?_Tidy@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEXXZ PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Tidy, COMDAT
; _this$ = ecx

; 791  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 792  : 		if (_Myfirst != 0)

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L125936

; 793  : 			{	// something to free, destroy and deallocate it
; 794  : 			_Destroy(_Myfirst, _Mylast);
; 795  : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L125936:

; 796  : 			}
; 797  : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 798  : 		}

  00029	c3		 ret	 0
?_Tidy@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEXXZ ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Tidy
_TEXT	ENDS
PUBLIC	?begin@?$vector@KV?$allocator@K@std@@@std@@QAE?AViterator@12@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::begin
; Function compile flags: /Ogty
;	COMDAT ?begin@?$vector@KV?$allocator@K@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@KV?$allocator@K@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::begin, COMDAT
; _this$ = ecx

; 463  : 		return (iterator(_Myfirst));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 464  : 		}

  00009	c2 04 00	 ret	 4
?begin@?$vector@KV?$allocator@K@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::begin
_TEXT	ENDS
PUBLIC	?_Erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Erase
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT
__Rootnode$ = 8						; size = 4
?_Erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Erase, COMDAT
; _this$ = ecx

; 890  : 		{	// free entire subtree, recursively

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	57		 push	 edi

; 891  : 		for (_Nodeptr _Pnode = _Rootnode; !_Isnil(_Pnode); _Rootnode = _Pnode)

  00003	8b 7c 24 10	 mov	 edi, DWORD PTR __Rootnode$[esp+8]
  00007	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  0000a	84 c0		 test	 al, al
  0000c	8b d9		 mov	 ebx, ecx
  0000e	8b f7		 mov	 esi, edi
  00010	75 1f		 jne	 SHORT $L123609
$L123607:

; 892  : 			{	// free subtrees, then node
; 893  : 			_Erase(_Right(_Pnode));

  00012	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00015	50		 push	 eax
  00016	8b cb		 mov	 ecx, ebx
  00018	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Erase

; 894  : 			_Pnode = _Left(_Pnode);

  0001d	8b 36		 mov	 esi, DWORD PTR [esi]

; 895  : 			this->_Alnod.destroy(_Rootnode);	// destroy, free erased node
; 896  : 			this->_Alnod.deallocate(_Rootnode, 1);

  0001f	57		 push	 edi
  00020	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00025	8a 46 15	 mov	 al, BYTE PTR [esi+21]
  00028	83 c4 04	 add	 esp, 4
  0002b	84 c0		 test	 al, al
  0002d	8b fe		 mov	 edi, esi
  0002f	74 e1		 je	 SHORT $L123607
$L123609:
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx

; 897  : 			}
; 898  : 		}

  00034	c2 04 00	 ret	 4
?_Erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Erase
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@KV?$allocator@K@std@@@std@@IAEXPAK0@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Destroy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?_Destroy@?$vector@KV?$allocator@K@std@@@std@@IAEXPAK0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@KV?$allocator@K@std@@@std@@IAEXPAK0@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::_Destroy, COMDAT
; _this$ = ecx

; 787  : 		_Destroy_range(_First, _Last, this->_Alval);
; 788  : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@KV?$allocator@K@std@@@std@@IAEXPAK0@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBEK@2@D@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Buynode
EXTRN	__CxxThrowException@8:NEAR
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBEK@2@D@Z
_TEXT	SEGMENT
__Larg$ = 8						; size = 4
__Parg$ = 12						; size = 4
__Rarg$ = 16						; size = 4
__Val$ = 20						; size = 4
__Carg$ = 24						; size = 1
?_Buynode@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBEK@2@D@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 1131 : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

  00000	6a 18		 push	 24			; 00000018H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 1132 : 		_TRY_BEGIN
; 1133 : 		new (_Wherenode) _Node(_Larg, _Parg, _Rarg, _Val, _Carg);

  0000a	85 c0		 test	 eax, eax
  0000c	74 2e		 je	 SHORT $L125977
  0000e	8b 4c 24 04	 mov	 ecx, DWORD PTR __Larg$[esp-4]
  00012	8b 54 24 08	 mov	 edx, DWORD PTR __Parg$[esp-4]
  00016	89 08		 mov	 DWORD PTR [eax], ecx
  00018	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Rarg$[esp-4]
  0001c	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0001f	8b 4c 24 10	 mov	 ecx, DWORD PTR __Val$[esp-4]
  00023	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00026	8b 11		 mov	 edx, DWORD PTR [ecx]
  00028	89 50 0c	 mov	 DWORD PTR [eax+12], edx
  0002b	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0002e	8a 54 24 14	 mov	 dl, BYTE PTR __Carg$[esp-4]
  00032	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00035	88 50 14	 mov	 BYTE PTR [eax+20], dl
  00038	c6 40 15 00	 mov	 BYTE PTR [eax+21], 0
$L125977:

; 1134 : 		_CATCH_ALL
; 1135 : 		this->_Alnod.deallocate(_Wherenode, 1);
; 1136 : 		_RERAISE;
; 1137 : 		_CATCH_END
; 1138 : 		return (_Wherenode);
; 1139 : 		}

  0003c	c2 14 00	 ret	 20			; 00000014H
?_Buynode@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBEK@2@D@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Buynode
_TEXT	ENDS
PUBLIC	??Econst_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::operator++
; Function compile flags: /Ogty
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Econst_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::operator++, COMDAT
; _this$ = ecx

; 214  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 215  : 			_Inc();

  00003	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::_Inc

; 216  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 217  : 			}

  0000b	c3		 ret	 0
??Econst_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::operator++
_TEXT	ENDS
PUBLIC	??Fconst_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::operator--
; Function compile flags: /Ogty
;	COMDAT ??Fconst_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Fconst_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::operator--, COMDAT
; _this$ = ecx

; 227  : 			{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 228  : 			_Dec();

  00003	e8 00 00 00 00	 call	 ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::_Dec

; 229  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 230  : 			}

  0000b	c3		 ret	 0
??Fconst_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::operator--
_TEXT	ENDS
PUBLIC	??0?$_Tree_ptr@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEK@std@@@1@@Z ; std::_Tree_ptr<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Tree_ptr<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >
; Function compile flags: /Ogty
;	COMDAT ??0?$_Tree_ptr@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEK@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_ptr@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEK@std@@@1@@Z PROC NEAR ; std::_Tree_ptr<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Tree_ptr<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >, COMDAT
; _this$ = ecx

; 76   : 		{	// construct base, and allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 77   : 		}

  00002	c2 08 00	 ret	 8
??0?$_Tree_ptr@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEK@std@@@1@@Z ENDP ; std::_Tree_ptr<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Tree_ptr<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >
_TEXT	ENDS
PUBLIC	?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@ABQAU342@@Z ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node *>::construct
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@ABQAU342@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@ABQAU342@@Z PROC NEAR ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node *>::construct, COMDAT
; _this$ = ecx

; 147  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $L126047
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$L126047:

; 148  : 		}

  00010	c2 08 00	 ret	 8
?construct@?$allocator@PAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@@std@@QAEXPAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@ABQAU342@@Z ENDP ; std::allocator<std::_Tree_nod<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Node *>::construct
_TEXT	ENDS
PUBLIC	??$_Uninitialized_fill_n@PAPAUtagTCHARACTER@@IPAU1@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@YAXPAPAUtagTCHARACTER@@IABQAU1@AAV?$allocator@PAUtagTCHARACTER@@@0@@Z ; std::_Uninitialized_fill_n<tagTCHARACTER * *,unsigned int,tagTCHARACTER *,std::allocator<tagTCHARACTER *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninitialized_fill_n@PAPAUtagTCHARACTER@@IPAU1@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@YAXPAPAUtagTCHARACTER@@IABQAU1@AAV?$allocator@PAUtagTCHARACTER@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_fill_n@PAPAUtagTCHARACTER@@IPAU1@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@YAXPAPAUtagTCHARACTER@@IABQAU1@AAV?$allocator@PAUtagTCHARACTER@@@0@@Z PROC NEAR ; std::_Uninitialized_fill_n<tagTCHARACTER * *,unsigned int,tagTCHARACTER *,std::allocator<tagTCHARACTER *> >, COMDAT

; 256  : 	_Uninit_fill_n(_First, _Count, _Val, _Al,
; 257  : 		_Ptr_cat(_First, _First));

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  0000a	76 10		 jbe	 SHORT $L126074
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$L126072:
  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	49		 dec	 ecx
  00019	75 f6		 jne	 SHORT $L126072
  0001b	5e		 pop	 esi
$L126074:

; 258  : 	}

  0001c	c3		 ret	 0
??$_Uninitialized_fill_n@PAPAUtagTCHARACTER@@IPAU1@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@YAXPAPAUtagTCHARACTER@@IABQAU1@AAV?$allocator@PAUtagTCHARACTER@@@0@@Z ENDP ; std::_Uninitialized_fill_n<tagTCHARACTER * *,unsigned int,tagTCHARACTER *,std::allocator<tagTCHARACTER *> >
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAPAUtagTCHARACTER@@@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEPAPAUtagTCHARACTER@@PAPAU2@00@Z ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Ucopy<tagTCHARACTER * *>
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??$_Ucopy@PAPAUtagTCHARACTER@@@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEPAPAUtagTCHARACTER@@PAPAU2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAPAUtagTCHARACTER@@@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEPAPAUtagTCHARACTER@@PAPAU2@00@Z PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Ucopy<tagTCHARACTER * *>, COMDAT
; _this$ = ecx

; 802  : 		{	// copy initializing [_First, _Last), using allocator
; 803  : 		return (_Uninitialized_copy(_First, _Last,
; 804  : 			_Ptr, this->_Alval));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Ptr$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 805  : 		}

  00027	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAPAUtagTCHARACTER@@@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEPAPAUtagTCHARACTER@@PAPAU2@00@Z ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Ucopy<tagTCHARACTER * *>
_TEXT	ENDS
PUBLIC	??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\atlmfc\include\cstringt.h
;	COMDAT ??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ PROC NEAR ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >, COMDAT
; _this$ = ecx

; 963  : 	}

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	83 e8 10	 sub	 eax, 16			; 00000010H
  00005	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  00008	83 ca ff	 or	 edx, -1
  0000b	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  0000f	4a		 dec	 edx
  00010	85 d2		 test	 edx, edx
  00012	7f 08		 jg	 SHORT $L126116
  00014	8b 08		 mov	 ecx, DWORD PTR [eax]
  00016	8b 11		 mov	 edx, DWORD PTR [ecx]
  00018	50		 push	 eax
  00019	ff 52 04	 call	 DWORD PTR [edx+4]
$L126116:
  0001c	c3		 ret	 0
??1?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >::~CStringT<char,ATL::StrTraitATL<char,ATL::ChTraitsCRT<char> > >
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1510 : 		if (!_Built)

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Built$[esp-4]
  00004	84 c0		 test	 al, al
  00006	53		 push	 ebx
  00007	55		 push	 ebp
  00008	8b 6c 24 10	 mov	 ebp, DWORD PTR __Newsize$[esp+4]
  0000c	8b d9		 mov	 ebx, ecx
  0000e	74 2f		 je	 SHORT $L126127

; 1511 : 			;
; 1512 : 		else if (_BUF_SIZE <= _Myres)

  00010	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  00014	72 29		 jb	 SHORT $L126127

; 1513 : 			{	// copy any leftovers to small buffer and deallocate
; 1514 : 			_Elem *_Ptr = _Bx._Ptr;
; 1515 : 			if (0 < _Newsize)

  00016	85 ed		 test	 ebp, ebp
  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	57		 push	 edi
  0001c	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  0001f	76 14		 jbe	 SHORT $L126124
  00021	56		 push	 esi

; 1516 : 				_Traits::copy(_Bx._Buf, _Ptr, _Newsize);

  00022	8b cd		 mov	 ecx, ebp
  00024	8b d1		 mov	 edx, ecx
  00026	c1 e9 02	 shr	 ecx, 2
  00029	8b f0		 mov	 esi, eax
  0002b	f3 a5		 rep movsd
  0002d	8b ca		 mov	 ecx, edx
  0002f	83 e1 03	 and	 ecx, 3
  00032	f3 a4		 rep movsb
  00034	5e		 pop	 esi
$L126124:

; 1517 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4
  0003e	5f		 pop	 edi
$L126127:

; 1518 : 			}
; 1519 : 		_Myres = _BUF_SIZE - 1;
; 1520 : 		_Eos(_Newsize);

  0003f	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00042	c7 43 18 0f 00
	00 00		 mov	 DWORD PTR [ebx+24], 15	; 0000000fH
  00049	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0004e	5d		 pop	 ebp
  0004f	5b		 pop	 ebx

; 1521 : 		}

  00050	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
EXTRN	?_Xran@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xran
; Function compile flags: /Ogty
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 792  : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp

; 793  : 		if (_Mysize < _Off)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	39 6e 14	 cmp	 DWORD PTR [esi+20], ebp
  0000b	57		 push	 edi
  0000c	73 05		 jae	 SHORT $L119054

; 794  : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L119054:

; 795  : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c5		 sub	 eax, ebp
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $L119055

; 796  : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$L119055:

; 797  : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 47		 jbe	 SHORT $L126192

; 798  : 			{	// move elements down
; 799  : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 800  : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0002c	53		 push	 ebx
  0002d	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  00030	72 04		 jb	 SHORT $L126157
  00032	8b 13		 mov	 edx, DWORD PTR [ebx]
  00034	eb 02		 jmp	 SHORT $L126158
$L126157:
  00036	8b d3		 mov	 edx, ebx
$L126158:
  00038	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0003b	72 04		 jb	 SHORT $L126164
  0003d	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0003f	eb 02		 jmp	 SHORT $L126165
$L126164:
  00041	8b cb		 mov	 ecx, ebx
$L126165:
  00043	2b c7		 sub	 eax, edi

; 803  : 			}
; 804  : 		return (*this);

  00045	03 d5		 add	 edx, ebp
  00047	50		 push	 eax
  00048	03 d7		 add	 edx, edi
  0004a	52		 push	 edx
  0004b	03 cd		 add	 ecx, ebp
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 _memmove
  00053	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00056	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00059	2b c7		 sub	 eax, edi
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005e	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00061	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00064	72 02		 jb	 SHORT $L126187

; 801  : 			size_type _Newsize = _Mysize - _Count;
; 802  : 			_Eos(_Newsize);

  00066	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$L126187:
  00068	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0
  0006c	5b		 pop	 ebx
$L126192:
  0006d	5f		 pop	 edi

; 803  : 			}
; 804  : 		return (*this);

  0006e	8b c6		 mov	 eax, esi
  00070	5e		 pop	 esi
  00071	5d		 pop	 ebp

; 805  : 		}

  00072	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T126397 DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
$T126399 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L126199
$T126400 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L126197
$T126398 DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T126399
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:$T126400
$T126391 DD	019930520H
	DD	04H
	DD	FLAT:$T126397
	DD	02H
	DD	FLAT:$T126398
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1444 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1445 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	8b d8		 mov	 ebx, eax
  00022	83 cb 0f	 or	 ebx, 15			; 0000000fH

; 1446 : 		if (max_size() < _Newres)

  00025	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00028	57		 push	 edi
  00029	8b f1		 mov	 esi, ecx
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00031	76 04		 jbe	 SHORT $L120172

; 1447 : 			_Newres = _Newsize;	// undo roundup if too big

  00033	8b d8		 mov	 ebx, eax

; 1448 : 		else if (_Newres / 3 < _Myres / 2

  00035	eb 22		 jmp	 SHORT $L120174
$L120172:

; 1449 : 			&& _Myres <= max_size() - _Myres / 2)

  00037	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  0003a	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0003f	f7 e3		 mul	 ebx
  00041	8b cf		 mov	 ecx, edi
  00043	d1 e9		 shr	 ecx, 1
  00045	d1 ea		 shr	 edx, 1
  00047	3b d1		 cmp	 edx, ecx
  00049	73 0e		 jae	 SHORT $L120174
  0004b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00050	2b c1		 sub	 eax, ecx
  00052	3b f8		 cmp	 edi, eax
  00054	77 03		 ja	 SHORT $L120174

; 1450 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00056	8d 1c 39	 lea	 ebx, DWORD PTR [ecx+edi]
$L120174:

; 1451 : 		_Elem *_Ptr;
; 1452 : 
; 1453 : 		_TRY_BEGIN
; 1454 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00059	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  0005c	51		 push	 ecx
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00064	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00069	8b d0		 mov	 edx, eax
  0006b	83 c4 04	 add	 esp, 4
  0006e	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
  00071	eb 29		 jmp	 SHORT $L120176
$L126197:

; 1455 : 		_CATCH_ALL
; 1456 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  00073	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00076	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 1457 : 			_TRY_BEGIN
; 1458 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00079	40		 inc	 eax
  0007a	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0007d	50		 push	 eax
  0007e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00082	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00087	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0008a	83 c4 04	 add	 esp, 4

; 1462 : 			_CATCH_END
; 1463 : 		_CATCH_END

  0008d	b8 00 00 00 00	 mov	 eax, $L126392
  00092	c3		 ret	 0
$L126392:
  00093	8b 5d e8	 mov	 ebx, DWORD PTR __Newres$[ebp]
  00096	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00099	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$L120176:

; 1464 : 
; 1465 : 		if (0 < _Oldlen)

  0009c	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  0009f	85 c9		 test	 ecx, ecx
  000a1	76 24		 jbe	 SHORT $L126317

; 1466 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  000a3	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000a7	72 05		 jb	 SHORT $L126313
  000a9	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000ac	eb 03		 jmp	 SHORT $L126314
$L126313:
  000ae	83 c6 04	 add	 esi, 4
$L126314:
  000b1	8b c1		 mov	 eax, ecx
  000b3	c1 e9 02	 shr	 ecx, 2
  000b6	8b fa		 mov	 edi, edx
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb
  000c1	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000c4	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
$L126317:

; 1467 : 		_Tidy(true);

  000c7	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000cb	72 12		 jb	 SHORT $L126358
  000cd	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000d0	51		 push	 ecx
  000d1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d6	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000d9	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000dc	83 c4 04	 add	 esp, 4
$L126358:

; 1468 : 		_Bx._Ptr = _Ptr;
; 1469 : 		_Myres = _Newres;
; 1470 : 		_Eos(_Oldlen);

  000df	83 fb 10	 cmp	 ebx, 16			; 00000010H
  000e2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000e5	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e8	89 10		 mov	 DWORD PTR [eax], edx
  000ea	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  000ed	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  000f0	72 02		 jb	 SHORT $L126387
  000f2	8b c2		 mov	 eax, edx
$L126387:

; 1471 : 		}

  000f4	5f		 pop	 edi
  000f5	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  000f9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fc	5e		 pop	 esi
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00104	5b		 pop	 ebx
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c2 08 00	 ret	 8
$L126199:

; 1459 : 			_CATCH_ALL
; 1460 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010b	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0010e	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00112	72 0c		 jb	 SHORT $L126297
  00114	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00117	52		 push	 edx
  00118	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0011d	83 c4 04	 add	 esp, 4
$L126297:

; 1461 : 			_RERAISE;

  00120	6a 00		 push	 0
  00122	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00129	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00130	6a 00		 push	 0
  00132	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00136	e8 00 00 00 00	 call	 __CxxThrowException@8
$L126402:
$L126396:
  0013b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T126391
  00005	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?IsMember@CTParty@@QAEEK@Z			; CTParty::IsMember
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tworldsvr\tparty.cpp
;	COMDAT ?IsMember@CTParty@@QAEEK@Z
_TEXT	SEGMENT
_dwID$ = 8						; size = 4
?IsMember@CTParty@@QAEEK@Z PROC NEAR			; CTParty::IsMember, COMDAT
; _this$ = ecx

; 33   : {

  00000	56		 push	 esi
  00001	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00004	57		 push	 edi

; 34   : 	for(int i=0; i < (int)m_vMember.size(); i++)

  00005	8b 7c 24 0c	 mov	 edi, DWORD PTR _dwID$[esp+4]
  00009	33 d2		 xor	 edx, edx
  0000b	eb 03 8d 49 00	 npad	 5
$L122398:
  00010	85 f6		 test	 esi, esi
  00012	75 04		 jne	 SHORT $L126412
  00014	33 c0		 xor	 eax, eax
  00016	eb 08		 jmp	 SHORT $L126413
$L126412:
  00018	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0001b	2b c6		 sub	 eax, esi
  0001d	c1 f8 02	 sar	 eax, 2
$L126413:
  00020	3b d0		 cmp	 edx, eax
  00022	7d 17		 jge	 SHORT $L122400
  00024	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00027	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]

; 35   : 	{
; 36   : 		if(dwID == m_vMember[i]->m_dwCharID )

  0002a	8b 00		 mov	 eax, DWORD PTR [eax]
  0002c	3b 78 70	 cmp	 edi, DWORD PTR [eax+112]
  0002f	74 03		 je	 SHORT $L126471

; 34   : 	for(int i=0; i < (int)m_vMember.size(); i++)

  00031	42		 inc	 edx
  00032	eb dc		 jmp	 SHORT $L122398
$L126471:
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi

; 37   : 			return TRUE;

  00036	b0 01		 mov	 al, 1

; 40   : }

  00038	c2 04 00	 ret	 4
$L122400:
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi

; 38   : 	}
; 39   : 	return FALSE;

  0003d	32 c0		 xor	 al, al

; 40   : }

  0003f	c2 04 00	 ret	 4
?IsMember@CTParty@@QAEEK@Z ENDP				; CTParty::IsMember
_TEXT	ENDS
PUBLIC	?IsMember@CTParty@@QAEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ; CTParty::IsMember
; Function compile flags: /Ogty
;	COMDAT ?IsMember@CTParty@@QAEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
_TEXT	SEGMENT
_strName$ = 8						; size = 4
?IsMember@CTParty@@QAEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z PROC NEAR ; CTParty::IsMember, COMDAT
; _this$ = ecx

; 42   : {

  00000	53		 push	 ebx

; 43   : 	for(int i=0; i < (int)m_vMember.size(); i++)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR _strName$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	33 ff		 xor	 edi, edi
  0000b	eb 03 8d 49 00	 npad	 5
$L122408:
  00010	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00013	85 c9		 test	 ecx, ecx
  00015	75 04		 jne	 SHORT $L126483
  00017	33 c0		 xor	 eax, eax
  00019	eb 08		 jmp	 SHORT $L126484
$L126483:
  0001b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0001e	2b c1		 sub	 eax, ecx
  00020	c1 f8 02	 sar	 eax, 2
$L126484:
  00023	3b f8		 cmp	 edi, eax
  00025	7d 3f		 jge	 SHORT $L122410
  00027	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 44   : 	{
; 45   : 		if(!strName.CompareNoCase(m_vMember[i]->m_strNAME))

  0002a	8b 0c b8	 mov	 ecx, DWORD PTR [eax+edi*4]
  0002d	8d 04 b8	 lea	 eax, DWORD PTR [eax+edi*4]
  00030	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  00033	50		 push	 eax
  00034	53		 push	 ebx
  00035	e8 00 00 00 00	 call	 __mbsicmp
  0003a	83 c4 08	 add	 esp, 8
  0003d	85 c0		 test	 eax, eax
  0003f	74 03		 je	 SHORT $L126614

; 43   : 	for(int i=0; i < (int)m_vMember.size(); i++)

  00041	47		 inc	 edi
  00042	eb cc		 jmp	 SHORT $L122408
$L126614:

; 46   : 			return TRUE;

  00044	8d 43 f0	 lea	 eax, DWORD PTR [ebx-16]
  00047	8d 50 0c	 lea	 edx, DWORD PTR [eax+12]
  0004a	83 c9 ff	 or	 ecx, -1
  0004d	f0 0f c1 0a	 lock	  xadd	 DWORD PTR [edx], ecx
  00051	49		 dec	 ecx
  00052	85 c9		 test	 ecx, ecx
  00054	7f 08		 jg	 SHORT $L126582
  00056	8b 08		 mov	 ecx, DWORD PTR [eax]
  00058	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005a	50		 push	 eax
  0005b	ff 52 04	 call	 DWORD PTR [edx+4]
$L126582:
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	b0 01		 mov	 al, 1
  00062	5b		 pop	 ebx

; 49   : }

  00063	c2 04 00	 ret	 4
$L122410:

; 47   : 	}
; 48   : 	return FALSE;

  00066	8d 43 f0	 lea	 eax, DWORD PTR [ebx-16]
  00069	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  0006c	83 ca ff	 or	 edx, -1
  0006f	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00073	4a		 dec	 edx
  00074	85 d2		 test	 edx, edx
  00076	7f 08		 jg	 SHORT $L126609
  00078	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007c	50		 push	 eax
  0007d	ff 52 04	 call	 DWORD PTR [edx+4]
$L126609:
  00080	5f		 pop	 edi
  00081	5e		 pop	 esi
  00082	32 c0		 xor	 al, al
  00084	5b		 pop	 ebx

; 49   : }

  00085	c2 04 00	 ret	 4
?IsMember@CTParty@@QAEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ENDP ; CTParty::IsMember
_TEXT	ENDS
PUBLIC	?GetMember@CTParty@@QAEPAUtagTCHARACTER@@H@Z	; CTParty::GetMember
; Function compile flags: /Ogty
;	COMDAT ?GetMember@CTParty@@QAEPAUtagTCHARACTER@@H@Z
_TEXT	SEGMENT
_index$ = 8						; size = 4
?GetMember@CTParty@@QAEPAUtagTCHARACTER@@H@Z PROC NEAR	; CTParty::GetMember, COMDAT
; _this$ = ecx

; 113  : 	if(index >= (int)m_vMember.size())

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	85 d2		 test	 edx, edx
  00005	75 04		 jne	 SHORT $L126623
  00007	33 c0		 xor	 eax, eax
  00009	eb 08		 jmp	 SHORT $L126624
$L126623:
  0000b	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000e	2b c2		 sub	 eax, edx
  00010	c1 f8 02	 sar	 eax, 2
$L126624:
  00013	8b 54 24 04	 mov	 edx, DWORD PTR _index$[esp-4]
  00017	3b d0		 cmp	 edx, eax
  00019	7c 05		 jl	 SHORT $L122585

; 114  : 		return NULL;

  0001b	33 c0		 xor	 eax, eax

; 117  : }

  0001d	c2 04 00	 ret	 4
$L122585:

; 115  : 
; 116  : 	return m_vMember[index];

  00020	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00023	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00026	8b 00		 mov	 eax, DWORD PTR [eax]

; 117  : }

  00028	c2 04 00	 ret	 4
?GetMember@CTParty@@QAEPAUtagTCHARACTER@@H@Z ENDP	; CTParty::GetMember
_TEXT	ENDS
PUBLIC	?FindMember@CTParty@@QAEPAUtagTCHARACTER@@K@Z	; CTParty::FindMember
; Function compile flags: /Ogty
;	COMDAT ?FindMember@CTParty@@QAEPAUtagTCHARACTER@@K@Z
_TEXT	SEGMENT
_dwCharID$ = 8						; size = 4
?FindMember@CTParty@@QAEPAUtagTCHARACTER@@K@Z PROC NEAR	; CTParty::FindMember, COMDAT
; _this$ = ecx

; 119  : {

  00000	56		 push	 esi
  00001	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00004	57		 push	 edi

; 120  : 	for(DWORD i=0; i<m_vMember.size(); i++)

  00005	8b 7c 24 0c	 mov	 edi, DWORD PTR _dwCharID$[esp+4]
  00009	33 d2		 xor	 edx, edx
  0000b	eb 03 8d 49 00	 npad	 5
$L122591:
  00010	85 f6		 test	 esi, esi
  00012	74 29		 je	 SHORT $L122593
  00014	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00017	2b c6		 sub	 eax, esi
  00019	c1 f8 02	 sar	 eax, 2
  0001c	3b d0		 cmp	 edx, eax
  0001e	73 1d		 jae	 SHORT $L122593
  00020	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00023	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]

; 121  : 		if(m_vMember[i]->m_dwCharID == dwCharID)

  00026	8b 00		 mov	 eax, DWORD PTR [eax]
  00028	39 78 70	 cmp	 DWORD PTR [eax+112], edi
  0002b	74 03		 je	 SHORT $L126803

; 120  : 	for(DWORD i=0; i<m_vMember.size(); i++)

  0002d	42		 inc	 edx
  0002e	eb e0		 jmp	 SHORT $L122591
$L126803:

; 122  : 			return m_vMember[i];

  00030	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00033	5f		 pop	 edi
  00034	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  00037	8b 00		 mov	 eax, DWORD PTR [eax]
  00039	5e		 pop	 esi

; 124  : }

  0003a	c2 04 00	 ret	 4
$L122593:
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi

; 123  : 	return NULL;

  0003f	33 c0		 xor	 eax, eax

; 124  : }

  00041	c2 04 00	 ret	 4
?FindMember@CTParty@@QAEPAUtagTCHARACTER@@K@Z ENDP	; CTParty::FindMember
_TEXT	ENDS
PUBLIC	?GetNextChief@CTParty@@QAEPAUtagTCHARACTER@@K@Z	; CTParty::GetNextChief
; Function compile flags: /Ogty
;	COMDAT ?GetNextChief@CTParty@@QAEPAUtagTCHARACTER@@K@Z
_TEXT	SEGMENT
_dwCharID$ = 8						; size = 4
?GetNextChief@CTParty@@QAEPAUtagTCHARACTER@@K@Z PROC NEAR ; CTParty::GetNextChief, COMDAT
; _this$ = ecx

; 127  : 	if(!IsChief(dwCharID))

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _dwCharID$[esp-4]
  00004	57		 push	 edi
  00005	8b 79 24	 mov	 edi, DWORD PTR [ecx+36]
  00008	3b c7		 cmp	 eax, edi
  0000a	74 06		 je	 SHORT $L122599

; 128  : 		return NULL;

  0000c	33 c0		 xor	 eax, eax
  0000e	5f		 pop	 edi

; 143  : }

  0000f	c2 04 00	 ret	 4
$L122599:

; 129  : 
; 130  : 	if(m_vMember.size() > 1)

  00012	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00015	85 d2		 test	 edx, edx
  00017	56		 push	 esi
  00018	74 4b		 je	 SHORT $L122604
  0001a	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0001d	2b c2		 sub	 eax, edx
  0001f	c1 f8 02	 sar	 eax, 2
  00022	83 f8 01	 cmp	 eax, 1
  00025	76 3e		 jbe	 SHORT $L122604
  00027	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]

; 131  : 	{
; 132  : 		for(DWORD i=0; i<m_vMember.size(); i++)

  0002a	33 d2		 xor	 edx, edx
  0002c	8d 64 24 00	 npad	 4
$L122602:
  00030	85 f6		 test	 esi, esi
  00032	74 31		 je	 SHORT $L122604
  00034	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00037	2b c6		 sub	 eax, esi
  00039	c1 f8 02	 sar	 eax, 2
  0003c	3b d0		 cmp	 edx, eax
  0003e	73 25		 jae	 SHORT $L122604
  00040	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00043	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]

; 133  : 		{
; 134  : 			if(m_dwChiefID != m_vMember[i]->m_dwCharID)

  00046	8b 00		 mov	 eax, DWORD PTR [eax]
  00048	3b 78 70	 cmp	 edi, DWORD PTR [eax+112]
  0004b	75 03		 jne	 SHORT $L126996

; 131  : 	{
; 132  : 		for(DWORD i=0; i<m_vMember.size(); i++)

  0004d	42		 inc	 edx
  0004e	eb e0		 jmp	 SHORT $L122602
$L126996:

; 135  : 			{
; 136  : 				m_dwChiefID = m_vMember[i]->m_dwCharID;

  00050	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00053	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00056	8b 10		 mov	 edx, DWORD PTR [eax]
  00058	8b 52 70	 mov	 edx, DWORD PTR [edx+112]
  0005b	5e		 pop	 esi
  0005c	89 51 24	 mov	 DWORD PTR [ecx+36], edx

; 137  : 				return m_vMember[i];

  0005f	8b 00		 mov	 eax, DWORD PTR [eax]
  00061	5f		 pop	 edi

; 143  : }

  00062	c2 04 00	 ret	 4
$L122604:
  00065	5e		 pop	 esi

; 138  : 			}
; 139  : 		}
; 140  : 	}
; 141  : 	
; 142  : 	return NULL;

  00066	33 c0		 xor	 eax, eax
  00068	5f		 pop	 edi

; 143  : }

  00069	c2 04 00	 ret	 4
?GetNextChief@CTParty@@QAEPAUtagTCHARACTER@@K@Z ENDP	; CTParty::GetNextChief
_TEXT	ENDS
PUBLIC	?GetChief@CTParty@@QAEPAUtagTCHARACTER@@XZ	; CTParty::GetChief
; Function compile flags: /Ogty
;	COMDAT ?GetChief@CTParty@@QAEPAUtagTCHARACTER@@XZ
_TEXT	SEGMENT
?GetChief@CTParty@@QAEPAUtagTCHARACTER@@XZ PROC NEAR	; CTParty::GetChief, COMDAT
; _this$ = ecx

; 146  : 	return FindMember(m_dwChiefID);

  00000	8b 41 24	 mov	 eax, DWORD PTR [ecx+36]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ?FindMember@CTParty@@QAEPAUtagTCHARACTER@@K@Z ; CTParty::FindMember

; 147  : }

  00009	c3		 ret	 0
?GetChief@CTParty@@QAEPAUtagTCHARACTER@@XZ ENDP		; CTParty::GetChief
_TEXT	ENDS
PUBLIC	?GetOrderIndex@CTParty@@QAEEK@Z			; CTParty::GetOrderIndex
; Function compile flags: /Ogty
;	COMDAT ?GetOrderIndex@CTParty@@QAEEK@Z
_TEXT	SEGMENT
_dwID$ = 8						; size = 4
?GetOrderIndex@CTParty@@QAEEK@Z PROC NEAR		; CTParty::GetOrderIndex, COMDAT
; _this$ = ecx

; 150  : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  00005	57		 push	 edi

; 151  : 	for(BYTE i=0; i<(BYTE)m_vMember.size(); i++)

  00006	8b 7c 24 10	 mov	 edi, DWORD PTR _dwID$[esp+8]
  0000a	32 c0		 xor	 al, al
  0000c	8d 64 24 00	 npad	 4
$L122615:
  00010	85 f6		 test	 esi, esi
  00012	74 20		 je	 SHORT $L122617
  00014	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00017	2b d6		 sub	 edx, esi
  00019	c1 fa 02	 sar	 edx, 2
  0001c	3a c2		 cmp	 al, dl
  0001e	73 14		 jae	 SHORT $L122617

; 152  : 		if(m_vMember[i]->m_dwCharID == dwID)

  00020	8b 59 08	 mov	 ebx, DWORD PTR [ecx+8]
  00023	0f b6 d0	 movzx	 edx, al
  00026	8d 14 93	 lea	 edx, DWORD PTR [ebx+edx*4]
  00029	8b 12		 mov	 edx, DWORD PTR [edx]
  0002b	39 7a 70	 cmp	 DWORD PTR [edx+112], edi
  0002e	74 06		 je	 SHORT $L122612

; 151  : 	for(BYTE i=0; i<(BYTE)m_vMember.size(); i++)

  00030	fe c0		 inc	 al
  00032	eb dc		 jmp	 SHORT $L122615
$L122617:

; 153  : 			return i;
; 154  : 
; 155  : 	return 0;

  00034	32 c0		 xor	 al, al
$L122612:
  00036	5f		 pop	 edi
  00037	5e		 pop	 esi
  00038	5b		 pop	 ebx

; 156  : }

  00039	c2 04 00	 ret	 4
?GetOrderIndex@CTParty@@QAEEK@Z ENDP			; CTParty::GetOrderIndex
_TEXT	ENDS
PUBLIC	?SetNextOrder@CTParty@@QAEXK@Z			; CTParty::SetNextOrder
; Function compile flags: /Ogty
;	COMDAT ?SetNextOrder@CTParty@@QAEXK@Z
_TEXT	SEGMENT
_dwID$ = 8						; size = 4
?SetNextOrder@CTParty@@QAEXK@Z PROC NEAR		; CTParty::SetNextOrder, COMDAT
; _this$ = ecx

; 159  : 	BYTE bIndex = GetOrderIndex(dwID) + 1;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _dwID$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ?GetOrderIndex@CTParty@@QAEEK@Z ; CTParty::GetOrderIndex

; 160  : 	m_dwOrder = (m_vMember.size() <= bIndex) ? m_vMember[0]->m_dwCharID : m_vMember[bIndex]->m_dwCharID;

  0000b	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  0000e	fe c0		 inc	 al
  00010	85 f6		 test	 esi, esi
  00012	75 04		 jne	 SHORT $L127082
  00014	33 d2		 xor	 edx, edx
  00016	eb 08		 jmp	 SHORT $L127083
$L127082:
  00018	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0001b	2b d6		 sub	 edx, esi
  0001d	c1 fa 02	 sar	 edx, 2
$L127083:
  00020	0f b6 c0	 movzx	 eax, al
  00023	3b d0		 cmp	 edx, eax
  00025	5e		 pop	 esi
  00026	77 0e		 ja	 SHORT $L127076
  00028	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0002b	8b 10		 mov	 edx, DWORD PTR [eax]
  0002d	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
  00030	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 161  : }

  00033	c2 04 00	 ret	 4
$L127076:

; 160  : 	m_dwOrder = (m_vMember.size() <= bIndex) ? m_vMember[0]->m_dwCharID : m_vMember[bIndex]->m_dwCharID;

  00036	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00039	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  0003c	8b 00		 mov	 eax, DWORD PTR [eax]
  0003e	8b 40 70	 mov	 eax, DWORD PTR [eax+112]
  00041	89 41 28	 mov	 DWORD PTR [ecx+40], eax

; 161  : }

  00044	c2 04 00	 ret	 4
?SetNextOrder@CTParty@@QAEXK@Z ENDP			; CTParty::SetNextOrder
_TEXT	ENDS
PUBLIC	??1?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE@XZ ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::~vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??1?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE@XZ PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::~vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >, COMDAT
; _this$ = ecx

; 387  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 388  : 		_Tidy();

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L127209
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L127209:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 389  : 		}

  00029	c3		 ret	 0
??1?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE@XZ ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::~vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >
_TEXT	ENDS
PUBLIC	?erase@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE?AViterator@12@V312@@Z ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::erase
; Function compile flags: /Ogty
;	COMDAT ?erase@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE?AViterator@12@V312@@Z PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::erase, COMDAT
; _this$ = ecx

; 723  : 		{	// erase element at where

  00000	56		 push	 esi
  00001	57		 push	 edi

; 724  : 		copy(_ITER_BASE(_Where) + 1, _Mylast, _ITER_BASE(_Where));

  00002	8b 7c 24 10	 mov	 edi, DWORD PTR __Where$[esp+4]
  00006	8b f1		 mov	 esi, ecx
  00008	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0000b	8d 47 04	 lea	 eax, DWORD PTR [edi+4]
  0000e	2b c8		 sub	 ecx, eax
  00010	c1 f9 02	 sar	 ecx, 2
  00013	c1 e1 02	 shl	 ecx, 2
  00016	51		 push	 ecx
  00017	50		 push	 eax
  00018	57		 push	 edi
  00019	e8 00 00 00 00	 call	 _memmove

; 725  : 		_Destroy(_Mylast - 1, _Mylast);
; 726  : 		--_Mylast;

  0001e	83 46 08 fc	 add	 DWORD PTR [esi+8], -4	; fffffffcH

; 727  : 		return (_Where);

  00022	8b 44 24 18	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+16]
  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	89 38		 mov	 DWORD PTR [eax], edi
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi

; 728  : 		}

  0002d	c2 08 00	 ret	 8
?erase@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE?AViterator@12@V312@@Z ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::erase
_TEXT	ENDS
PUBLIC	?clear@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAEXXZ ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::clear
; Function compile flags: /Ogty
;	COMDAT ?clear@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAEXXZ PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::clear, COMDAT
; _this$ = ecx

; 743  : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 744  : 		_Tidy();

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L127247
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L127247:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 745  : 		}

  00029	c3		 ret	 0
?clear@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAEXXZ ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::clear
_TEXT	ENDS
PUBLIC	??A?$vector@KV?$allocator@K@std@@@std@@QAEAAKI@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::operator[]
; Function compile flags: /Ogty
;	COMDAT ??A?$vector@KV?$allocator@K@std@@@std@@QAEAAKI@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@KV?$allocator@K@std@@@std@@QAEAAKI@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::operator[], COMDAT
; _this$ = ecx

; 555  : 		return (*(begin() + _Pos));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pos$[esp-4]
  00007	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 556  : 		}

  0000a	c2 04 00	 ret	 4
??A?$vector@KV?$allocator@K@std@@@std@@QAEAAKI@Z ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::operator[]
_TEXT	ENDS
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::clear
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::clear, COMDAT
; _this$ = ecx

; 780  : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 781  : 		_Erase(_Root());

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00009	51		 push	 ecx
  0000a	8b ce		 mov	 ecx, esi
  0000c	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Erase

; 782  : 		_Root() = _Myhead, _Mysize = 0;

  00011	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00014	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 783  : 		_Lmost() = _Myhead, _Rmost() = _Myhead;

  00017	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	89 00		 mov	 DWORD PTR [eax], eax
  00023	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00026	89 76 08	 mov	 DWORD PTR [esi+8], esi
  00029	5e		 pop	 esi

; 784  : 		}

  0002a	c3		 ret	 0
?clear@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::clear
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEPAPAUtagTCHARACTER@@PAPAU3@IABQAU3@@Z ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Ufill
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?_Ufill@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEPAPAUtagTCHARACTER@@PAPAU3@IABQAU3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEPAPAUtagTCHARACTER@@PAPAU3@IABQAU3@@Z PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Ufill, COMDAT
; _this$ = ecx

; 877  : 		{	// copy initializing _Count * _Val, using allocator

  00000	56		 push	 esi

; 878  : 		_Uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

  00001	8b 74 24 0c	 mov	 esi, DWORD PTR __Count$[esp]
  00005	85 f6		 test	 esi, esi
  00007	57		 push	 edi
  00008	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  0000c	8b c7		 mov	 eax, edi
  0000e	76 12		 jbe	 SHORT $L127364
  00010	8b 54 24 14	 mov	 edx, DWORD PTR __Val$[esp+4]
  00014	8b ce		 mov	 ecx, esi
  00016	53		 push	 ebx
$L127357:
  00017	8b 1a		 mov	 ebx, DWORD PTR [edx]
  00019	89 18		 mov	 DWORD PTR [eax], ebx
  0001b	83 c0 04	 add	 eax, 4
  0001e	49		 dec	 ecx
  0001f	75 f6		 jne	 SHORT $L127357
  00021	5b		 pop	 ebx
$L127364:

; 879  : 		return (_Ptr + _Count);

  00022	8d 04 b7	 lea	 eax, DWORD PTR [edi+esi*4]
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 880  : 		}

  00027	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEPAPAUtagTCHARACTER@@PAPAU3@IABQAU3@@Z ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Ufill
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Tidy
; Function compile flags: /Ogty
;	COMDAT ?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::_Tidy, COMDAT
; _this$ = ecx

; 791  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 792  : 		if (_Myfirst != 0)

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L127370

; 793  : 			{	// something to free, destroy and deallocate it
; 794  : 			_Destroy(_Myfirst, _Mylast);
; 795  : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L127370:

; 796  : 			}
; 797  : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 798  : 		}

  00029	c3		 ret	 0
?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::_Tidy
_TEXT	ENDS
PUBLIC	??Eiterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::iterator::operator++
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Eiterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::iterator::operator++, COMDAT
; _this$ = ecx

; 326  : 			{	// preincrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 327  : 			++(*(const_iterator *)this);

  00003	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::_Inc

; 328  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 329  : 			}

  0000b	c3		 ret	 0
??Eiterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::iterator::operator++
_TEXT	ENDS
PUBLIC	??Fiterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::iterator::operator--
; Function compile flags: /Ogty
;	COMDAT ??Fiterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Fiterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::iterator::operator--, COMDAT
; _this$ = ecx

; 339  : 			{	// predecrement

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 340  : 			--(*(const_iterator *)this);

  00003	e8 00 00 00 00	 call	 ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::_Dec

; 341  : 			return (*this);

  00008	8b c6		 mov	 eax, esi
  0000a	5e		 pop	 esi

; 342  : 			}

  0000b	c3		 ret	 0
??Fiterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::iterator::operator--
_TEXT	ENDS
PUBLIC	??0?$_Tree_val@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEK@std@@@1@@Z ; std::_Tree_val<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Tree_val<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >
; Function compile flags: /Ogty
;	COMDAT ??0?$_Tree_val@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEK@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 1
??0?$_Tree_val@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEK@std@@@1@@Z PROC NEAR ; std::_Tree_val<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Tree_val<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >, COMDAT
; _this$ = ecx

; 95   : 		{	// construct base, and allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 96   : 		}

  00002	c2 08 00	 ret	 8
??0?$_Tree_val@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAE@ABU?$less@E@1@V?$allocator@U?$pair@$$CBEK@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Tree_val<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >
_TEXT	ENDS
PUBLIC	?_Buynode@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Buynode
; Function compile flags: /Ogty
;	COMDAT ?_Buynode@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@XZ
_TEXT	SEGMENT
?_Buynode@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Buynode, COMDAT
; _this$ = ecx

; 1106 : 		_Nodeptr _Wherenode = this->_Alnod.allocate(1);

  00000	6a 18		 push	 24			; 00000018H
  00002	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00007	83 c4 04	 add	 esp, 4

; 1107 : 		int _Linkcnt = 0;
; 1108 : 
; 1109 : 		_TRY_BEGIN
; 1110 : 		this->_Alptr.construct(&_Left(_Wherenode), 0);

  0000a	85 c0		 test	 eax, eax
  0000c	74 06		 je	 SHORT $L127469
  0000e	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
$L127469:

; 1111 : 		++_Linkcnt;
; 1112 : 		this->_Alptr.construct(&_Parent(_Wherenode), 0);

  00014	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00017	85 c9		 test	 ecx, ecx
  00019	74 06		 je	 SHORT $L127496
  0001b	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$L127496:

; 1113 : 		++_Linkcnt;
; 1114 : 		this->_Alptr.construct(&_Right(_Wherenode), 0);

  00021	8d 48 08	 lea	 ecx, DWORD PTR [eax+8]
  00024	85 c9		 test	 ecx, ecx
  00026	74 06		 je	 SHORT $L127523
  00028	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
$L127523:

; 1115 : 		_CATCH_ALL
; 1116 : 		if (1 < _Linkcnt)
; 1117 : 			this->_Alptr.destroy(&_Parent(_Wherenode));
; 1118 : 		if (0 < _Linkcnt)
; 1119 : 			this->_Alptr.destroy(&_Left(_Wherenode));
; 1120 : 		this->_Alnod.deallocate(_Wherenode, 1);
; 1121 : 		_RERAISE;
; 1122 : 		_CATCH_END
; 1123 : 		_Color(_Wherenode) = _Black;

  0002e	c6 40 14 01	 mov	 BYTE PTR [eax+20], 1

; 1124 : 		_Isnil(_Wherenode) = false;

  00032	c6 40 15 00	 mov	 BYTE PTR [eax+21], 0

; 1125 : 		return (_Wherenode);
; 1126 : 		}

  00036	c3		 ret	 0
?_Buynode@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Buynode
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 456  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 457  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $L127587
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$L127587:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 458  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xlen
; Function compile flags: /Ogty
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1480 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	56		 push	 esi

; 1481 : 		if (max_size() < _Newsize)

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR __Newsize$[esp+4]
  00006	83 fe fe	 cmp	 esi, -2			; fffffffeH
  00009	8b e9		 mov	 ebp, ecx
  0000b	76 05		 jbe	 SHORT $L119063

; 1482 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L119063:

; 1483 : 		if (_Myres < _Newsize)

  00012	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00015	3b c6		 cmp	 eax, esi
  00017	73 19		 jae	 SHORT $L119064

; 1484 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0001c	50		 push	 eax
  0001d	56		 push	 esi
  0001e	8b cd		 mov	 ecx, ebp
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c0		 xor	 eax, eax
  00027	3b c6		 cmp	 eax, esi
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5d		 pop	 ebp

; 1491 : 		}

  0002f	c2 08 00	 ret	 8
$L119064:

; 1485 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	8a 4c 24 10	 mov	 cl, BYTE PTR __Trim$[esp+4]
  00036	84 c9		 test	 cl, cl
  00038	74 5c		 je	 SHORT $L119066
  0003a	83 fe 10	 cmp	 esi, 16			; 00000010H
  0003d	73 57		 jae	 SHORT $L119066
  0003f	53		 push	 ebx

; 1486 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1487 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  00040	8b 5d 14	 mov	 ebx, DWORD PTR [ebp+20]
  00043	3b f3		 cmp	 esi, ebx
  00045	73 02		 jae	 SHORT $L127602
  00047	8b de		 mov	 ebx, esi
$L127602:
  00049	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004c	72 2b		 jb	 SHORT $L127662
  0004e	85 db		 test	 ebx, ebx
  00050	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00053	57		 push	 edi
  00054	8d 7d 04	 lea	 edi, DWORD PTR [ebp+4]
  00057	76 16		 jbe	 SHORT $L127660
  00059	8b cb		 mov	 ecx, ebx
  0005b	8b d1		 mov	 edx, ecx
  0005d	c1 e9 02	 shr	 ecx, 2
  00060	8b f0		 mov	 esi, eax
  00062	f3 a5		 rep movsd
  00064	8b ca		 mov	 ecx, edx
  00066	83 e1 03	 and	 ecx, 3
  00069	f3 a4		 rep movsb
  0006b	8b 74 24 14	 mov	 esi, DWORD PTR __Newsize$[esp+12]
$L127660:
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00075	83 c4 04	 add	 esp, 4
  00078	5f		 pop	 edi
$L127662:
  00079	89 5d 14	 mov	 DWORD PTR [ebp+20], ebx

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  0007c	33 c0		 xor	 eax, eax
  0007e	c7 45 18 0f 00
	00 00		 mov	 DWORD PTR [ebp+24], 15	; 0000000fH
  00085	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0008a	3b c6		 cmp	 eax, esi
  0008c	5b		 pop	 ebx
  0008d	1b c0		 sbb	 eax, eax
  0008f	5e		 pop	 esi
  00090	f7 d8		 neg	 eax
  00092	5d		 pop	 ebp

; 1491 : 		}

  00093	c2 08 00	 ret	 8
$L119066:

; 1488 : 		else if (_Newsize == 0)

  00096	85 f6		 test	 esi, esi
  00098	75 23		 jne	 SHORT $L127693

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

  0009a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0009d	89 75 14	 mov	 DWORD PTR [ebp+20], esi
  000a0	72 14		 jb	 SHORT $L127691
  000a2	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000a5	33 c0		 xor	 eax, eax
  000a7	3b c6		 cmp	 eax, esi
  000a9	1b c0		 sbb	 eax, eax
  000ab	5e		 pop	 esi
  000ac	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
  000b0	f7 d8		 neg	 eax
  000b2	5d		 pop	 ebp

; 1491 : 		}

  000b3	c2 08 00	 ret	 8

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

$L127691:
  000b6	83 c5 04	 add	 ebp, 4
  000b9	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
$L127693:

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000bd	33 c0		 xor	 eax, eax
  000bf	3b c6		 cmp	 eax, esi
  000c1	1b c0		 sbb	 eax, eax
  000c3	5e		 pop	 esi
  000c4	f7 d8		 neg	 eax
  000c6	5d		 pop	 ebp

; 1491 : 		}

  000c7	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	??1CTParty@@QAE@XZ				; CTParty::~CTParty
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tworldsvr\tparty.cpp
;	COMDAT ??1CTParty@@QAE@XZ
_TEXT	SEGMENT
??1CTParty@@QAE@XZ PROC NEAR				; CTParty::~CTParty, COMDAT
; _this$ = ecx

; 13   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 14   : 	m_vMember.clear();

  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	57		 push	 edi
  00007	33 ff		 xor	 edi, edi
  00009	3b c7		 cmp	 eax, edi
  0000b	74 09		 je	 SHORT $L127718
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00013	83 c4 04	 add	 esp, 4
$L127718:

; 15   : }

  00016	8b c7		 mov	 eax, edi
  00018	3b c7		 cmp	 eax, edi
  0001a	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  0001d	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  00020	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00023	74 09		 je	 SHORT $L127738
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002b	83 c4 04	 add	 esp, 4
$L127738:
  0002e	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00031	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  00034	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00037	5f		 pop	 edi
  00038	5e		 pop	 esi
  00039	c3		 ret	 0
??1CTParty@@QAE@XZ ENDP					; CTParty::~CTParty
_TEXT	ENDS
PUBLIC	?DelMember@CTParty@@QAEEK@Z			; CTParty::DelMember
; Function compile flags: /Ogty
;	COMDAT ?DelMember@CTParty@@QAEEK@Z
_TEXT	SEGMENT
_dwID$ = 8						; size = 4
?DelMember@CTParty@@QAEEK@Z PROC NEAR			; CTParty::DelMember, COMDAT
; _this$ = ecx

; 69   : {

  00000	55		 push	 ebp

; 70   : 	for(int i=0; i< (int)m_vMember.size(); i++)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR _dwID$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0000b	57		 push	 edi
  0000c	33 c9		 xor	 ecx, ecx
  0000e	8b ff		 npad	 2
$L122431:
  00010	85 d2		 test	 edx, edx
  00012	75 04		 jne	 SHORT $L127751
  00014	33 c0		 xor	 eax, eax
  00016	eb 08		 jmp	 SHORT $L127752
$L127751:
  00018	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0001b	2b c2		 sub	 eax, edx
  0001d	c1 f8 02	 sar	 eax, 2
$L127752:
  00020	3b c8		 cmp	 ecx, eax
  00022	0f 8d ab 00 00
	00		 jge	 $L122433
  00028	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002b	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 71   : 	{
; 72   : 		if(m_vMember[i]->m_dwCharID == dwID)

  0002e	8b 00		 mov	 eax, DWORD PTR [eax]
  00030	39 68 70	 cmp	 DWORD PTR [eax+112], ebp
  00033	74 03		 je	 SHORT $L128204

; 70   : 	for(int i=0; i< (int)m_vMember.size(); i++)

  00035	41		 inc	 ecx
  00036	eb d8		 jmp	 SHORT $L122431
$L128204:

; 73   : 		{
; 74   : 			if(m_vMember[i]->m_dwCharID == m_dwOrder)

  00038	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0003b	53		 push	 ebx
  0003c	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  0003f	8d 3c 8d 00 00
	00 00		 lea	 edi, DWORD PTR [ecx*4]
  00046	8b 0c 1f	 mov	 ecx, DWORD PTR [edi+ebx]
  00049	8b 51 70	 mov	 edx, DWORD PTR [ecx+112]
  0004c	3b d0		 cmp	 edx, eax
  0004e	75 33		 jne	 SHORT $L128205

; 75   : 				SetNextOrder(dwID);

  00050	55		 push	 ebp
  00051	8b ce		 mov	 ecx, esi
  00053	e8 00 00 00 00	 call	 ?GetOrderIndex@CTParty@@QAEEK@Z ; CTParty::GetOrderIndex
  00058	8b d3		 mov	 edx, ebx
  0005a	fe c0		 inc	 al
  0005c	85 d2		 test	 edx, edx
  0005e	75 04		 jne	 SHORT $L127993
  00060	33 c9		 xor	 ecx, ecx
  00062	eb 08		 jmp	 SHORT $L127994
$L127993:
  00064	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00067	2b ca		 sub	 ecx, edx
  00069	c1 f9 02	 sar	 ecx, 2
$L127994:
  0006c	0f b6 c0	 movzx	 eax, al
  0006f	3b c8		 cmp	 ecx, eax
  00071	77 07		 ja	 SHORT $L127989
  00073	8b 03		 mov	 eax, DWORD PTR [ebx]
  00075	8b 40 70	 mov	 eax, DWORD PTR [eax+112]
  00078	eb 06		 jmp	 SHORT $L127990
$L127989:
  0007a	8b 0c 83	 mov	 ecx, DWORD PTR [ebx+eax*4]
  0007d	8b 41 70	 mov	 eax, DWORD PTR [ecx+112]
$L127990:
  00080	89 46 28	 mov	 DWORD PTR [esi+40], eax
$L128205:

; 76   : 
; 77   : 			memset(&(m_vMember[i]->m_command),0,sizeof(TCOMMAND));

  00083	8b 04 1f	 mov	 eax, DWORD PTR [edi+ebx]
  00086	33 d2		 xor	 edx, edx
  00088	05 8c 00 00 00	 add	 eax, 140		; 0000008cH
  0008d	89 10		 mov	 DWORD PTR [eax], edx
  0008f	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00092	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 78   : 			m_vMember[i]->m_pParty = NULL;

  00095	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00098	8b 0c 38	 mov	 ecx, DWORD PTR [eax+edi]
  0009b	03 c7		 add	 eax, edi
  0009d	89 91 98 00 00
	00		 mov	 DWORD PTR [ecx+152], edx

; 79   : 			m_vMember.erase(m_vMember.begin()+i);

  000a3	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000a6	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  000a9	03 c7		 add	 eax, edi
  000ab	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  000ae	2b d1		 sub	 edx, ecx
  000b0	c1 fa 02	 sar	 edx, 2
  000b3	c1 e2 02	 shl	 edx, 2
  000b6	52		 push	 edx
  000b7	51		 push	 ecx
  000b8	50		 push	 eax
  000b9	e8 00 00 00 00	 call	 _memmove
  000be	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000c1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c4	5b		 pop	 ebx
  000c5	83 c0 fc	 add	 eax, -4			; fffffffcH
  000c8	5f		 pop	 edi
  000c9	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  000cc	5e		 pop	 esi

; 80   : 			return TRUE;

  000cd	b0 01		 mov	 al, 1
  000cf	5d		 pop	 ebp

; 84   : }

  000d0	c2 04 00	 ret	 4
$L122433:
  000d3	5f		 pop	 edi
  000d4	5e		 pop	 esi

; 81   : 		}
; 82   : 	}
; 83   : 	return FALSE;

  000d5	32 c0		 xor	 al, al
  000d7	5d		 pop	 ebp

; 84   : }

  000d8	c2 04 00	 ret	 4
?DelMember@CTParty@@QAEEK@Z ENDP			; CTParty::DelMember
_TEXT	ENDS
PUBLIC	?DelMember@CTParty@@QAEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ; CTParty::DelMember
; Function compile flags: /Ogty
;	COMDAT ?DelMember@CTParty@@QAEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z
_TEXT	SEGMENT
_strName$ = 8						; size = 4
?DelMember@CTParty@@QAEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z PROC NEAR ; CTParty::DelMember, COMDAT
; _this$ = ecx

; 86   : {

  00000	53		 push	 ebx

; 87   : 	for(int i=0; i< (int)m_vMember.size(); i++)

  00001	8b 5c 24 08	 mov	 ebx, DWORD PTR _strName$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	33 ff		 xor	 edi, edi
  0000b	eb 03 8d 49 00	 npad	 5
$L122562:
  00010	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00013	85 c9		 test	 ecx, ecx
  00015	75 04		 jne	 SHORT $L128219
  00017	33 c0		 xor	 eax, eax
  00019	eb 08		 jmp	 SHORT $L128220
$L128219:
  0001b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0001e	2b c1		 sub	 eax, ecx
  00020	c1 f8 02	 sar	 eax, 2
$L128220:
  00023	3b f8		 cmp	 edi, eax
  00025	0f 8d dd 00 00
	00		 jge	 $L122564
  0002b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 88   : 	{
; 89   : 		if(m_vMember[i]->m_strNAME == strName)

  0002e	8b 0c b8	 mov	 ecx, DWORD PTR [eax+edi*4]
  00031	8d 04 b8	 lea	 eax, DWORD PTR [eax+edi*4]
  00034	8b 41 6c	 mov	 eax, DWORD PTR [ecx+108]
  00037	53		 push	 ebx
  00038	50		 push	 eax
  00039	e8 00 00 00 00	 call	 __mbscmp
  0003e	83 c4 08	 add	 esp, 8
  00041	85 c0		 test	 eax, eax
  00043	74 03		 je	 SHORT $L128813

; 87   : 	for(int i=0; i< (int)m_vMember.size(); i++)

  00045	47		 inc	 edi
  00046	eb c8		 jmp	 SHORT $L122562
$L128813:

; 90   : 		{
; 91   : 			if(m_vMember[i]->m_dwCharID == m_dwOrder)

  00048	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0004b	55		 push	 ebp
  0004c	8b 6e 08	 mov	 ebp, DWORD PTR [esi+8]
  0004f	c1 e7 02	 shl	 edi, 2
  00052	8b 14 2f	 mov	 edx, DWORD PTR [edi+ebp]
  00055	39 42 70	 cmp	 DWORD PTR [edx+112], eax
  00058	75 35		 jne	 SHORT $L128530

; 92   : 				SetNextOrder(m_dwOrder);

  0005a	50		 push	 eax
  0005b	8b ce		 mov	 ecx, esi
  0005d	e8 00 00 00 00	 call	 ?GetOrderIndex@CTParty@@QAEEK@Z ; CTParty::GetOrderIndex
  00062	8b d5		 mov	 edx, ebp
  00064	fe c0		 inc	 al
  00066	85 d2		 test	 edx, edx
  00068	75 04		 jne	 SHORT $L128489
  0006a	33 c9		 xor	 ecx, ecx
  0006c	eb 08		 jmp	 SHORT $L128490
$L128489:
  0006e	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00071	2b ca		 sub	 ecx, edx
  00073	c1 f9 02	 sar	 ecx, 2
$L128490:
  00076	0f b6 c0	 movzx	 eax, al
  00079	3b c8		 cmp	 ecx, eax
  0007b	77 08		 ja	 SHORT $L128486
  0007d	8b 45 00	 mov	 eax, DWORD PTR [ebp]
  00080	8b 40 70	 mov	 eax, DWORD PTR [eax+112]
  00083	eb 07		 jmp	 SHORT $L128487
$L128486:
  00085	8b 4c 85 00	 mov	 ecx, DWORD PTR [ebp+eax*4]
  00089	8b 41 70	 mov	 eax, DWORD PTR [ecx+112]
$L128487:
  0008c	89 46 28	 mov	 DWORD PTR [esi+40], eax
$L128530:

; 93   : 
; 94   : 			memset(&(m_vMember[i]->m_command),0,sizeof(TCOMMAND));

  0008f	8b 04 2f	 mov	 eax, DWORD PTR [edi+ebp]
  00092	05 8c 00 00 00	 add	 eax, 140		; 0000008cH
  00097	33 d2		 xor	 edx, edx
  00099	89 10		 mov	 DWORD PTR [eax], edx
  0009b	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0009e	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 95   : 			m_vMember[i]->m_pParty = NULL;

  000a1	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000a4	8b 0c 38	 mov	 ecx, DWORD PTR [eax+edi]
  000a7	03 c7		 add	 eax, edi
  000a9	89 91 98 00 00
	00		 mov	 DWORD PTR [ecx+152], edx

; 96   : 			m_vMember[i]->m_bPartyWaiter = FALSE;

  000af	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b2	8b 14 38	 mov	 edx, DWORD PTR [eax+edi]
  000b5	03 c7		 add	 eax, edi
  000b7	c6 82 c9 00 00
	00 00		 mov	 BYTE PTR [edx+201], 0

; 97   : 			m_vMember.erase(m_vMember.begin()+i);

  000be	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000c1	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  000c4	03 c7		 add	 eax, edi
  000c6	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  000c9	2b d1		 sub	 edx, ecx
  000cb	c1 fa 02	 sar	 edx, 2
  000ce	c1 e2 02	 shl	 edx, 2
  000d1	52		 push	 edx
  000d2	51		 push	 ecx
  000d3	50		 push	 eax
  000d4	e8 00 00 00 00	 call	 _memmove
  000d9	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  000dc	83 c2 fc	 add	 edx, -4			; fffffffcH

; 98   : 			return TRUE;

  000df	8d 43 f0	 lea	 eax, DWORD PTR [ebx-16]
  000e2	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  000e5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e8	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  000eb	83 ca ff	 or	 edx, -1
  000ee	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  000f2	4a		 dec	 edx
  000f3	85 d2		 test	 edx, edx
  000f5	5d		 pop	 ebp
  000f6	7f 08		 jg	 SHORT $L128782
  000f8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fa	8b 11		 mov	 edx, DWORD PTR [ecx]
  000fc	50		 push	 eax
  000fd	ff 52 04	 call	 DWORD PTR [edx+4]
$L128782:
  00100	5f		 pop	 edi
  00101	5e		 pop	 esi
  00102	b0 01		 mov	 al, 1
  00104	5b		 pop	 ebx

; 102  : }

  00105	c2 04 00	 ret	 4
$L122564:

; 99   : 		}
; 100  : 	}
; 101  : 	return FALSE;

  00108	8d 43 f0	 lea	 eax, DWORD PTR [ebx-16]
  0010b	8d 48 0c	 lea	 ecx, DWORD PTR [eax+12]
  0010e	83 ca ff	 or	 edx, -1
  00111	f0 0f c1 11	 lock	  xadd	 DWORD PTR [ecx], edx
  00115	4a		 dec	 edx
  00116	85 d2		 test	 edx, edx
  00118	7f 08		 jg	 SHORT $L128809
  0011a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0011c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0011e	50		 push	 eax
  0011f	ff 52 04	 call	 DWORD PTR [edx+4]
$L128809:
  00122	5f		 pop	 edi
  00123	5e		 pop	 esi
  00124	32 c0		 xor	 al, al
  00126	5b		 pop	 ebx

; 102  : }

  00127	c2 04 00	 ret	 4
?DelMember@CTParty@@QAEEV?$CStringT@DV?$StrTraitATL@DV?$ChTraitsCRT@D@ATL@@@ATL@@@ATL@@@Z ENDP ; CTParty::DelMember
_TEXT	ENDS
PUBLIC	??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ PROC NEAR	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 387  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 388  : 		_Tidy();

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L128826
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L128826:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 389  : 		}

  00029	c3		 ret	 0
??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??Eiterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AV012@H@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::iterator::operator++
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??Eiterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AV012@H@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::iterator::operator++, COMDAT
; _this$ = ecx

; 332  : 			{	// postincrement

  00000	56		 push	 esi

; 333  : 			iterator _Tmp = *this;

  00001	8b 31		 mov	 esi, DWORD PTR [ecx]

; 334  : 			++*this;

  00003	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::_Inc

; 335  : 			return (_Tmp);

  00008	8b 44 24 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  0000c	89 30		 mov	 DWORD PTR [eax], esi
  0000e	5e		 pop	 esi

; 336  : 			}

  0000f	c2 08 00	 ret	 8
??Eiterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AV012@H@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::iterator::operator++
_TEXT	ENDS
PUBLIC	?_Init@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Init
; Function compile flags: /Ogty
;	COMDAT ?_Init@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Init@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Init, COMDAT
; _this$ = ecx

; 901  : 		{	// create head/nil node and make tree empty

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 902  : 		_Myhead = _Buynode();

  00003	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Buynode
  00008	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 903  : 		_Isnil(_Myhead) = true;

  0000b	c6 40 15 01	 mov	 BYTE PTR [eax+21], 1

; 904  : 		_Root() = _Myhead;

  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00012	89 40 04	 mov	 DWORD PTR [eax+4], eax

; 905  : 		_Lmost() = _Myhead, _Rmost() = _Myhead;

  00015	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00018	89 00		 mov	 DWORD PTR [eax], eax
  0001a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001d	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 906  : 		_Mysize = 0;

  00020	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00027	5e		 pop	 esi

; 907  : 		}

  00028	c3		 ret	 0
?_Init@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Init
_TEXT	ENDS
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:NEAR		; std::logic_error::`vector deleting destructor'
EXTRN	??1exception@@UAE@XZ:NEAR			; exception::~exception
;	COMDAT ??_7logic_error@std@@6B@
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
CONST	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC NEAR			; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 23   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L128937
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L128937:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC NEAR		; std::logic_error::what, COMDAT
; _this$ = ecx

; 27   : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L128965
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  00009	c3		 ret	 0

; 27   : 		return (_Str.c_str());

$L128965:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  0000d	c3		 ret	 0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC NEAR		; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1logic_error@std@@UAE@XZ ; std::logic_error::~logic_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L128971
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L128971:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 590  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 591  : 		if (_Right.size() < _Roff)

  00003	8b 74 24 14	 mov	 esi, DWORD PTR __Roff$[esp+8]
  00007	57		 push	 edi
  00008	8b 7c 24 14	 mov	 edi, DWORD PTR __Right$[esp+12]
  0000c	39 77 14	 cmp	 DWORD PTR [edi+20], esi
  0000f	8b d9		 mov	 ebx, ecx
  00011	73 05		 jae	 SHORT $L117696

; 592  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L117696:

; 593  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 6f 14	 mov	 ebp, DWORD PTR [edi+20]

; 594  : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b ee		 sub	 ebp, esi
  00021	3b c5		 cmp	 eax, ebp
  00023	73 02		 jae	 SHORT $L117698

; 595  : 			_Num = _Count;	// trim _Num to size

  00025	8b e8		 mov	 ebp, eax
$L117698:

; 596  : 
; 597  : 		if (this == &_Right)

  00027	3b df		 cmp	 ebx, edi
  00029	75 1f		 jne	 SHORT $L117699

; 598  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 ee		 add	 ebp, esi
  0002f	55		 push	 ebp
  00030	8b cb		 mov	 ecx, ebx
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	56		 push	 esi
  00038	6a 00		 push	 0
  0003a	8b cb		 mov	 ecx, ebx
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00044	8b c3		 mov	 eax, ebx
  00046	5b		 pop	 ebx

; 605  : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$L117699:

; 599  : 		else if (_Grow(_Num))

  0004a	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  0004d	76 07		 jbe	 SHORT $L129109
  0004f	8b cb		 mov	 ecx, ebx
  00051	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L129109:
  00056	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00059	3b c5		 cmp	 eax, ebp
  0005b	73 21		 jae	 SHORT $L129110
  0005d	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00060	50		 push	 eax
  00061	55		 push	 ebp
  00062	8b cb		 mov	 ecx, ebx
  00064	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00069	85 ed		 test	 ebp, ebp
$L129168:
  0006b	76 6d		 jbe	 SHORT $L129167

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  0006d	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00070	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00075	3b c8		 cmp	 ecx, eax
  00077	72 2f		 jb	 SHORT $L129133
  00079	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0007c	eb 2d		 jmp	 SHORT $L129134

; 599  : 		else if (_Grow(_Num))

$L129110:
  0007e	85 ed		 test	 ebp, ebp
  00080	75 e9		 jne	 SHORT $L129168
  00082	83 f8 10	 cmp	 eax, 16			; 00000010H
  00085	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00088	72 0f		 jb	 SHORT $L129102
  0008a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	c6 00 00	 mov	 BYTE PTR [eax], 0
  00092	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00093	8b c3		 mov	 eax, ebx
  00095	5b		 pop	 ebx

; 605  : 		}

  00096	c2 0c 00	 ret	 12			; 0000000cH

; 599  : 		else if (_Grow(_Num))

$L129102:
  00099	5f		 pop	 edi
  0009a	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  0009d	5e		 pop	 esi
  0009e	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a1	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000a2	8b c3		 mov	 eax, ebx
  000a4	5b		 pop	 ebx

; 605  : 		}

  000a5	c2 0c 00	 ret	 12			; 0000000cH

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

$L129133:
  000a8	8d 57 04	 lea	 edx, DWORD PTR [edi+4]
$L129134:
  000ab	39 43 18	 cmp	 DWORD PTR [ebx+24], eax
  000ae	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000b1	72 04		 jb	 SHORT $L129139
  000b3	8b 38		 mov	 edi, DWORD PTR [eax]
  000b5	eb 02		 jmp	 SHORT $L129140
$L129139:
  000b7	8b f8		 mov	 edi, eax
$L129140:
  000b9	03 f2		 add	 esi, edx
  000bb	8b cd		 mov	 ecx, ebp
  000bd	8b d1		 mov	 edx, ecx
  000bf	c1 e9 02	 shr	 ecx, 2
  000c2	f3 a5		 rep movsd
  000c4	8b ca		 mov	 ecx, edx
  000c6	83 e1 03	 and	 ecx, 3
  000c9	f3 a4		 rep movsb

; 602  : 			_Eos(_Num);

  000cb	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000cf	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000d2	72 02		 jb	 SHORT $L129162
  000d4	8b 00		 mov	 eax, DWORD PTR [eax]
$L129162:
  000d6	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L129167:
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000dd	8b c3		 mov	 eax, ebx
  000df	5b		 pop	 ebx

; 605  : 		}

  000e0	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Num$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 608  : 		{	// assign [_Ptr, _Ptr + _Num)

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 609  : 		if (_Inside(_Ptr))

  00003	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  00006	83 fa 10	 cmp	 edx, 16			; 00000010H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	72 05		 jb	 SHORT $L129189
  0000d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00010	eb 03		 jmp	 SHORT $L129190
$L129189:
  00012	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$L129190:
  00015	8b 74 24 10	 mov	 esi, DWORD PTR __Ptr$[esp+8]
  00019	3b f0		 cmp	 esi, eax
  0001b	72 34		 jb	 SHORT $L119050
  0001d	83 fa 10	 cmp	 edx, 16			; 00000010H
  00020	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00023	72 04		 jb	 SHORT $L129193
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	eb 02		 jmp	 SHORT $L129194
$L129193:
  00029	8b c8		 mov	 ecx, eax
$L129194:
  0002b	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  0002e	03 f9		 add	 edi, ecx
  00030	3b fe		 cmp	 edi, esi
  00032	76 1d		 jbe	 SHORT $L119050

; 610  : 			return (assign(*this, _Ptr - _Myptr(), _Num));	// substring

  00034	83 fa 10	 cmp	 edx, 16			; 00000010H
  00037	72 02		 jb	 SHORT $L129206
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$L129206:
  0003b	8b 4c 24 14	 mov	 ecx, DWORD PTR __Num$[esp+8]
  0003f	51		 push	 ecx
  00040	2b f0		 sub	 esi, eax
  00042	56		 push	 esi
  00043	53		 push	 ebx
  00044	8b cb		 mov	 ecx, ebx
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx

; 618  : 		}

  0004e	c2 08 00	 ret	 8
$L119050:
  00051	55		 push	 ebp

; 611  : 
; 612  : 		if (_Grow(_Num))

  00052	8b 6c 24 18	 mov	 ebp, DWORD PTR __Num$[esp+12]
  00056	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  00059	76 07		 jbe	 SHORT $L129347
  0005b	8b cb		 mov	 ecx, ebx
  0005d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L129347:
  00062	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00065	3b c5		 cmp	 eax, ebp
  00067	73 1b		 jae	 SHORT $L129348
  00069	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  0006c	52		 push	 edx
  0006d	55		 push	 ebp
  0006e	8b cb		 mov	 ecx, ebx
  00070	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00075	85 ed		 test	 ebp, ebp
$L129386:
  00077	76 68		 jbe	 SHORT $L129384

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

  00079	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0007d	72 2f		 jb	 SHORT $L129358
  0007f	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00082	eb 2d		 jmp	 SHORT $L129359

; 611  : 
; 612  : 		if (_Grow(_Num))

$L129348:
  00084	85 ed		 test	 ebp, ebp
  00086	75 ef		 jne	 SHORT $L129386
  00088	83 f8 10	 cmp	 eax, 16			; 00000010H
  0008b	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  0008e	72 0f		 jb	 SHORT $L129340
  00090	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00093	5d		 pop	 ebp
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0
  00098	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  00099	8b c3		 mov	 eax, ebx
  0009b	5b		 pop	 ebx

; 618  : 		}

  0009c	c2 08 00	 ret	 8

; 611  : 
; 612  : 		if (_Grow(_Num))

$L129340:
  0009f	5d		 pop	 ebp
  000a0	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000a3	5f		 pop	 edi
  000a4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a7	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000a8	8b c3		 mov	 eax, ebx
  000aa	5b		 pop	 ebx

; 618  : 		}

  000ab	c2 08 00	 ret	 8

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

$L129358:
  000ae	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
$L129359:
  000b1	8b cd		 mov	 ecx, ebp
  000b3	8b c1		 mov	 eax, ecx
  000b5	c1 e9 02	 shr	 ecx, 2
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb

; 615  : 			_Eos(_Num);

  000c1	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000c5	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000c8	72 10		 jb	 SHORT $L129381
  000ca	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000cd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  000d1	5d		 pop	 ebp
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000d4	8b c3		 mov	 eax, ebx
  000d6	5b		 pop	 ebx

; 618  : 		}

  000d7	c2 08 00	 ret	 8

; 615  : 			_Eos(_Num);

$L129381:
  000da	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000dd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L129384:
  000e1	5d		 pop	 ebp
  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000e4	8b c3		 mov	 eax, ebx
  000e6	5b		 pop	 ebx

; 618  : 		}

  000e7	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??0?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@E@1@ABV?$allocator@U?$pair@$$CBEK@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@E@1@ABV?$allocator@U?$pair@$$CBEK@std@@@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Al$ = 12						; size = 4
??0?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@E@1@ABV?$allocator@U?$pair@$$CBEK@std@@@1@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >, COMDAT
; _this$ = ecx

; 361  : 		{	// construct empty tree

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 362  : 		_Init();

  00003	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Buynode
  00008	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000b	c6 40 15 01	 mov	 BYTE PTR [eax+21], 1
  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00012	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00015	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00018	89 00		 mov	 DWORD PTR [eax], eax
  0001a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001d	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00020	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 363  : 		}

  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	c2 08 00	 ret	 8
??0?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@E@1@ABV?$allocator@U?$pair@$$CBEK@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 323  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 324  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 325  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 326  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 621  : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 622  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$L129576:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $L129576
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 623  : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 361  : 		_Tidy();
; 362  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$L129651:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $L129651
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 363  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
EXTRN	??0exception@@QAE@XZ:NEAR			; exception::exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T129754 DD	0ffffffffH
	DD	FLAT:$L129655
$T129752 DD	019930520H
	DD	01H
	DD	FLAT:$T129754
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 19   : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	89 74 24 04	 mov	 DWORD PTR _this$[esp+20], esi
  0001d	e8 00 00 00 00	 call	 ??0exception@@QAE@XZ	; exception::exception
  00022	33 c0		 xor	 eax, eax
  00024	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  0002d	6a ff		 push	 -1
  0002f	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00032	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00039	50		 push	 eax
  0003a	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  0003e	88 41 04	 mov	 BYTE PTR [ecx+4], al
  00041	8b 44 24 20	 mov	 eax, DWORD PTR __Message$[esp+24]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 20   : 		}

  0004b	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  0004f	8b c6		 mov	 eax, esi
  00051	5e		 pop	 esi
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L129655:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T129752
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_Glength_error@std@@UAEPAXI@Z			; std::length_error::`scalar deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:NEAR		; std::length_error::`vector deleting destructor'
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 95   : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@

; 96   : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
; Function compile flags: /Ogty
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC NEAR		; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1length_error@std@@UAE@XZ ; std::length_error::~length_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L129764
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L129764:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC NEAR			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 99   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L129859
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L129859:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
_TEXT	ENDS
PUBLIC	??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::out_of_range::out_of_range
PUBLIC	??_7out_of_range@std@@6B@			; std::out_of_range::`vftable'
PUBLIC	??_Gout_of_range@std@@UAEPAXI@Z			; std::out_of_range::`scalar deleting destructor'
EXTRN	??_Eout_of_range@std@@UAEPAXI@Z:NEAR		; std::out_of_range::`vector deleting destructor'
;	COMDAT ??_7out_of_range@std@@6B@
CONST	SEGMENT
??_7out_of_range@std@@6B@ DD FLAT:??_Eout_of_range@std@@UAEPAXI@Z ; std::out_of_range::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx

; 118  : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7out_of_range@std@@6B@

; 119  : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0out_of_range@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::out_of_range::out_of_range
_TEXT	ENDS
PUBLIC	??1out_of_range@std@@UAE@XZ			; std::out_of_range::~out_of_range
; Function compile flags: /Ogty
;	COMDAT ??_Gout_of_range@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gout_of_range@std@@UAEPAXI@Z PROC NEAR		; std::out_of_range::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1out_of_range@std@@UAE@XZ ; std::out_of_range::~out_of_range
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L129878
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L129878:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Gout_of_range@std@@UAEPAXI@Z ENDP			; std::out_of_range::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1out_of_range@std@@UAE@XZ
_TEXT	SEGMENT
??1out_of_range@std@@UAE@XZ PROC NEAR			; std::out_of_range::~out_of_range, COMDAT
; _this$ = ecx

; 122  : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L129973
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L129973:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1out_of_range@std@@UAE@XZ ENDP			; std::out_of_range::~out_of_range
_TEXT	ENDS
PUBLIC	?_Insert@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBEK@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Insert
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVexception@@@8				; exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ ; `string'
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
EXTRN	??0exception@@QAE@ABV0@@Z:NEAR			; exception::exception
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
xdata$x	SEGMENT
$T130359 DD	0ffffffffH
	DD	FLAT:$L129990
$T130354 DD	019930520H
	DD	01H
	DD	FLAT:$T130359
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@ DB 'map/set<T> too l'
	DB	'ong', 00H					; `string'
CONST	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT
??_R0?AVexception@@@8 DD FLAT:??_7type_info@@6B@	; exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@@', 00H
; Function compile flags: /Ogty
_DATA	ENDS
;	COMDAT ?_Insert@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBEK@2@@Z
_TEXT	SEGMENT
$T129989 = -80						; size = 28
$T129988 = -52						; size = 40
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Addleft$ = 12						; size = 1
__Wherenode$ = 16					; size = 4
__Newnode$ = 20						; size = 4
__Val$ = 20						; size = 4
?_Insert@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBEK@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Insert, COMDAT
; _this$ = ecx

; 911  : 		{	// add node with value next to _Wherenode, to left if _Addnode

  00000	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00006	6a ff		 push	 -1
  00008	68 00 00 00 00	 push	 __ehhandler$?_Insert@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBEK@2@@Z
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 44	 sub	 esp, 68			; 00000044H
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8b f9		 mov	 edi, ecx

; 912  : 		if (max_size() - 1 <= _Mysize)

  0001c	81 7f 08 fe ff
	ff 1f		 cmp	 DWORD PTR [edi+8], 536870910 ; 1ffffffeH
  00023	72 4c		 jb	 SHORT $L123613

; 913  : 			_THROW(length_error, "map/set<T> too long");

  00025	6a 13		 push	 19			; 00000013H
  00027	33 f6		 xor	 esi, esi
  00029	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long?$AA@
  0002e	8d 4c 24 10	 lea	 ecx, DWORD PTR $T129989[esp+96]
  00032	c7 44 24 28 0f
	00 00 00	 mov	 DWORD PTR $T129989[esp+120], 15 ; 0000000fH
  0003a	89 74 24 24	 mov	 DWORD PTR $T129989[esp+116], esi
  0003e	c6 44 24 14 00	 mov	 BYTE PTR $T129989[esp+100], 0
  00043	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00048	8d 44 24 08	 lea	 eax, DWORD PTR $T129989[esp+88]
  0004c	50		 push	 eax
  0004d	8d 4c 24 28	 lea	 ecx, DWORD PTR $T129988[esp+92]
  00051	89 74 24 58	 mov	 DWORD PTR __$EHRec$[esp+100], esi
  00055	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0005a	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVlength_error@std@@
  0005f	8d 4c 24 28	 lea	 ecx, DWORD PTR $T129988[esp+92]
  00063	51		 push	 ecx
  00064	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR $T129988[esp+96], OFFSET FLAT:??_7length_error@std@@6B@
  0006c	e8 00 00 00 00	 call	 __CxxThrowException@8
$L130360:
$L123613:

; 914  : 		_Nodeptr _Newnode = _Buynode(_Myhead, _Wherenode, _Myhead,
; 915  : 			_Val, _Red);

  00071	8b 54 24 68	 mov	 edx, DWORD PTR __Val$[esp+84]
  00075	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00078	8b 74 24 64	 mov	 esi, DWORD PTR __Wherenode$[esp+84]
  0007c	53		 push	 ebx
  0007d	6a 00		 push	 0
  0007f	52		 push	 edx
  00080	50		 push	 eax
  00081	56		 push	 esi
  00082	50		 push	 eax
  00083	8b cf		 mov	 ecx, edi
  00085	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@00ABU?$pair@$$CBEK@2@D@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Buynode

; 916  : 
; 917  : 		++_Mysize;

  0008a	8b 5f 08	 mov	 ebx, DWORD PTR [edi+8]
  0008d	8b c8		 mov	 ecx, eax

; 918  : 		if (_Wherenode == _Myhead)

  0008f	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00092	43		 inc	 ebx
  00093	3b f0		 cmp	 esi, eax
  00095	89 4c 24 6c	 mov	 DWORD PTR __Newnode$[esp+88], ecx
  00099	89 5f 08	 mov	 DWORD PTR [edi+8], ebx
  0009c	75 10		 jne	 SHORT $L123619

; 919  : 			{	// first node in tree, just set head values
; 920  : 			_Root() = _Newnode;

  0009e	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 921  : 			_Lmost() = _Newnode, _Rmost() = _Newnode;

  000a1	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000a4	89 08		 mov	 DWORD PTR [eax], ecx
  000a6	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  000a9	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 922  : 			}
; 923  : 		else if (_Addleft)

  000ac	eb 23		 jmp	 SHORT $L123624
$L123619:
  000ae	8a 44 24 64	 mov	 al, BYTE PTR __Addleft$[esp+88]
  000b2	84 c0		 test	 al, al
  000b4	74 0d		 je	 SHORT $L123621

; 924  : 			{	// add to left of _Wherenode
; 925  : 			_Left(_Wherenode) = _Newnode;

  000b6	89 0e		 mov	 DWORD PTR [esi], ecx

; 926  : 			if (_Wherenode == _Lmost())

  000b8	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000bb	3b 30		 cmp	 esi, DWORD PTR [eax]
  000bd	75 12		 jne	 SHORT $L123624

; 927  : 				_Lmost() = _Newnode;

  000bf	89 08		 mov	 DWORD PTR [eax], ecx

; 928  : 			}
; 929  : 		else

  000c1	eb 0e		 jmp	 SHORT $L123624
$L123621:

; 930  : 			{	// add to right of _Wherenode
; 931  : 			_Right(_Wherenode) = _Newnode;

  000c3	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 932  : 			if (_Wherenode == _Rmost())

  000c6	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000c9	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  000cc	75 03		 jne	 SHORT $L123624

; 933  : 				_Rmost() = _Newnode;

  000ce	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$L123624:

; 934  : 			}
; 935  : 
; 936  : 		for (_Nodeptr _Pnode = _Newnode; _Color(_Parent(_Pnode)) == _Red; )

  000d1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000d4	80 7a 14 00	 cmp	 BYTE PTR [edx+20], 0
  000d8	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  000db	8b f1		 mov	 esi, ecx
  000dd	b3 01		 mov	 bl, 1
  000df	0f 85 a5 00 00
	00		 jne	 $L123628
  000e5	55		 push	 ebp
$L123627:

; 937  : 			if (_Parent(_Pnode) == _Left(_Parent(_Parent(_Pnode))))

  000e6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000e8	8b 69 04	 mov	 ebp, DWORD PTR [ecx+4]
  000eb	8b 55 00	 mov	 edx, DWORD PTR [ebp]
  000ee	3b ca		 cmp	 ecx, edx
  000f0	75 50		 jne	 SHORT $L123629

; 938  : 				{	// fixup red-red in left subtree
; 939  : 				_Wherenode = _Right(_Parent(_Parent(_Pnode)));

  000f2	8b 55 08	 mov	 edx, DWORD PTR [ebp+8]

; 940  : 				if (_Color(_Wherenode) == _Red)

  000f5	80 7a 14 00	 cmp	 BYTE PTR [edx+20], 0
  000f9	75 18		 jne	 SHORT $L123630
$L130358:

; 941  : 					{	// parent has two red children, blacken both
; 942  : 					_Color(_Parent(_Pnode)) = _Black;

  000fb	8b 08		 mov	 ecx, DWORD PTR [eax]
  000fd	88 59 14	 mov	 BYTE PTR [ecx+20], bl

; 943  : 					_Color(_Wherenode) = _Black;

  00100	88 5a 14	 mov	 BYTE PTR [edx+20], bl

; 944  : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

  00103	8b 10		 mov	 edx, DWORD PTR [eax]
  00105	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00108	c6 41 14 00	 mov	 BYTE PTR [ecx+20], 0

; 945  : 					_Pnode = _Parent(_Parent(_Pnode));

  0010c	8b 10		 mov	 edx, DWORD PTR [eax]
  0010e	8b 72 04	 mov	 esi, DWORD PTR [edx+4]

; 946  : 					}
; 947  : 				else

  00111	eb 61		 jmp	 SHORT $L123635
$L123630:

; 948  : 					{	// parent has red and black children
; 949  : 					if (_Pnode == _Right(_Parent(_Pnode)))

  00113	3b 71 08	 cmp	 esi, DWORD PTR [ecx+8]
  00116	75 0a		 jne	 SHORT $L123632

; 950  : 						{	// rotate right child to left
; 951  : 						_Pnode = _Parent(_Pnode);

  00118	8b f1		 mov	 esi, ecx

; 952  : 						_Lrotate(_Pnode);

  0011a	56		 push	 esi
  0011b	8b cf		 mov	 ecx, edi
  0011d	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Lrotate
$L123632:

; 953  : 						}
; 954  : 					_Color(_Parent(_Pnode)) = _Black;	// propagate red up

  00122	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00125	88 58 14	 mov	 BYTE PTR [eax+20], bl

; 955  : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

  00128	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0012b	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0012e	c6 42 14 00	 mov	 BYTE PTR [edx+20], 0

; 956  : 					_Rrotate(_Parent(_Parent(_Pnode)));

  00132	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00135	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00138	51		 push	 ecx
  00139	8b cf		 mov	 ecx, edi
  0013b	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Rrotate

; 957  : 					}
; 958  : 				}
; 959  : 			else

  00140	eb 32		 jmp	 SHORT $L123635
$L123629:

; 960  : 				{	// fixup red-red in right subtree
; 961  : 				_Wherenode = _Left(_Parent(_Parent(_Pnode)));
; 962  : 				if (_Color(_Wherenode) == _Red)

  00142	80 7a 14 00	 cmp	 BYTE PTR [edx+20], 0

; 963  : 					{	// parent has two red children, blacken both
; 964  : 					_Color(_Parent(_Pnode)) = _Black;
; 965  : 					_Color(_Wherenode) = _Black;
; 966  : 					_Color(_Parent(_Parent(_Pnode))) = _Red;
; 967  : 					_Pnode = _Parent(_Parent(_Pnode));
; 968  : 					}
; 969  : 				else

  00146	74 b3		 je	 SHORT $L130358

; 970  : 					{	// parent has red and black children
; 971  : 					if (_Pnode == _Left(_Parent(_Pnode)))

  00148	3b 31		 cmp	 esi, DWORD PTR [ecx]
  0014a	75 0a		 jne	 SHORT $L123636

; 972  : 						{	// rotate left child to right
; 973  : 						_Pnode = _Parent(_Pnode);

  0014c	8b f1		 mov	 esi, ecx

; 974  : 						_Rrotate(_Pnode);

  0014e	56		 push	 esi
  0014f	8b cf		 mov	 ecx, edi
  00151	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Rrotate
$L123636:

; 975  : 						}
; 976  : 					_Color(_Parent(_Pnode)) = _Black;	// propagate red up

  00156	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00159	88 58 14	 mov	 BYTE PTR [eax+20], bl

; 977  : 					_Color(_Parent(_Parent(_Pnode))) = _Red;

  0015c	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0015f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00162	c6 42 14 00	 mov	 BYTE PTR [edx+20], 0

; 978  : 					_Lrotate(_Parent(_Parent(_Pnode)));

  00166	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00169	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0016c	51		 push	 ecx
  0016d	8b cf		 mov	 ecx, edi
  0016f	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Lrotate
$L123635:
  00174	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00177	8a 4a 14	 mov	 cl, BYTE PTR [edx+20]
  0017a	84 c9		 test	 cl, cl
  0017c	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0017f	0f 84 61 ff ff
	ff		 je	 $L123627
  00185	8b 4c 24 70	 mov	 ecx, DWORD PTR __Newnode$[esp+92]
  00189	5d		 pop	 ebp
$L123628:

; 979  : 					}
; 980  : 				}
; 981  : 
; 982  : 		_Color(_Root()) = _Black;	// root is always black

  0018a	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0018d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 983  : 		return (_TREE_ITERATOR(_Newnode));

  00190	8b 44 24 60	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+88]
  00194	88 5a 14	 mov	 BYTE PTR [edx+20], bl
  00197	5b		 pop	 ebx
  00198	89 08		 mov	 DWORD PTR [eax], ecx

; 984  : 		}

  0019a	8b 4c 24 4c	 mov	 ecx, DWORD PTR __$EHRec$[esp+88]
  0019e	5f		 pop	 edi
  0019f	5e		 pop	 esi
  001a0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001a7	83 c4 50	 add	 esp, 80			; 00000050H
  001aa	c2 10 00	 ret	 16			; 00000010H
$L130357:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L129990:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T129989[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Insert@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBEK@2@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T130354
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Insert@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBEK@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Insert
;	COMDAT xdata$x
xdata$x	SEGMENT
$T130465 DD	0ffffffffH
	DD	FLAT:$L130366
$T130463 DD	019930520H
	DD	01H
	DD	FLAT:$T130465
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC NEAR		; std::logic_error::logic_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 1c	 mov	 edi, DWORD PTR ___that$[esp+20]
  0001c	8b f1		 mov	 esi, ecx
  0001e	57		 push	 edi
  0001f	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00023	e8 00 00 00 00	 call	 ??0exception@@QAE@ABV0@@Z ; exception::exception
  00028	33 c0		 xor	 eax, eax
  0002a	6a ff		 push	 -1
  0002c	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00035	50		 push	 eax
  00036	83 c7 0c	 add	 edi, 12			; 0000000cH
  00039	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00040	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00043	57		 push	 edi
  00044	89 44 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], eax
  00048	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00050	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00054	5f		 pop	 edi
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L130366:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T130463
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Ogty
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC NEAR		; std::length_error::length_error, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	?_Xlen@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IBEXXZ ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Xlen
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	SEGMENT
$T130591 DD	0ffffffffH
	DD	FLAT:$L130477
$T130588 DD	019930520H
	DD	01H
	DD	FLAT:$T130591
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
CONST	ENDS
;	COMDAT ?_Xlen@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
$T130476 = -80						; size = 28
$T130475 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IBEXXZ PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Xlen, COMDAT
; _this$ = ecx

; 883  : 		{	// report a length_error

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Xlen@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IBEXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 44	 sub	 esp, 68			; 00000044H

; 884  : 		_THROW(length_error, "vector<T> too long");

  00018	6a 12		 push	 18			; 00000012H
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001f	8d 4c 24 08	 lea	 ecx, DWORD PTR $T130476[esp+88]
  00023	c7 44 24 20 0f
	00 00 00	 mov	 DWORD PTR $T130476[esp+112], 15 ; 0000000fH
  0002b	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T130476[esp+108], 0
  00033	c6 44 24 0c 00	 mov	 BYTE PTR $T130476[esp+92], 0
  00038	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0003d	8d 04 24	 lea	 eax, DWORD PTR $T130476[esp+80]
  00040	50		 push	 eax
  00041	8d 4c 24 20	 lea	 ecx, DWORD PTR $T130475[esp+84]
  00045	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+92], 0
  0004d	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00052	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVlength_error@std@@
  00057	8d 4c 24 20	 lea	 ecx, DWORD PTR $T130475[esp+84]
  0005b	51		 push	 ecx
  0005c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T130475[esp+88], OFFSET FLAT:??_7length_error@std@@6B@
  00064	e8 00 00 00 00	 call	 __CxxThrowException@8
$L130592:
$L130590:
  00069	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L130477:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T130476[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xlen@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IBEXXZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T130588
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Xlen@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IBEXXZ ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Xlen
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::erase
PUBLIC	__TI3?AVout_of_range@std@@
PUBLIC	__CTA3?AVout_of_range@std@@
PUBLIC	??_R0?AVout_of_range@std@@@8			; std::out_of_range `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
PUBLIC	??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ ; `string'
PUBLIC	??0out_of_range@std@@QAE@ABV01@@Z		; std::out_of_range::out_of_range
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
xdata$x	SEGMENT
$T131089 DD	0ffffffffH
	DD	FLAT:$L130604
$T131081 DD	019930520H
	DD	01H
	DD	FLAT:$T131089
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
CONST	SEGMENT
??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@ DB 'invalid '
	DB	'map/set<T> iterator', 00H			; `string'
CONST	ENDS
;	COMDAT __TI3?AVout_of_range@std@@
xdata$x	SEGMENT
__TI3?AVout_of_range@std@@ DD 00H
	DD	FLAT:??1out_of_range@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVout_of_range@std@@
xdata$x	ENDS
;	COMDAT __CTA3?AVout_of_range@std@@
xdata$x	SEGMENT
__CTA3?AVout_of_range@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVout_of_range@std@@@8??0out_of_range@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVout_of_range@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0out_of_range@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVout_of_range@std@@@8
_DATA	SEGMENT
??_R0?AVout_of_range@std@@@8 DD FLAT:??_7type_info@@6B@	; std::out_of_range `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVout_of_range@std@@', 00H
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
_DATA	ENDS
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z
_TEXT	SEGMENT
__Erasednode$ = -84					; size = 4
$T130599 = -80						; size = 28
$T130598 = -52						; size = 40
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::erase, COMDAT
; _this$ = ecx

; 590  : 		{	// erase element at _Where

  00000	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00006	6a ff		 push	 -1
  00008	68 00 00 00 00	 push	 __ehhandler$?erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z
  0000d	50		 push	 eax

; 591  : 		if (_Isnil(_Where._Mynode()))

  0000e	8b 44 24 14	 mov	 eax, DWORD PTR __Where$[esp+8]
  00012	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00019	83 ec 48	 sub	 esp, 72			; 00000048H
  0001c	55		 push	 ebp
  0001d	8b e9		 mov	 ebp, ecx
  0001f	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  00022	84 c9		 test	 cl, cl
  00024	56		 push	 esi
  00025	74 4c		 je	 SHORT $L123847

; 592  : 			_THROW(out_of_range, "invalid map/set<T> iterator");

  00027	6a 1b		 push	 27			; 0000001bH
  00029	33 f6		 xor	 esi, esi
  0002b	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BM@PAPJHAGI@invalid?5map?1set?$DMT?$DO?5iterator?$AA@
  00030	8d 4c 24 14	 lea	 ecx, DWORD PTR $T130599[esp+100]
  00034	c7 44 24 2c 0f
	00 00 00	 mov	 DWORD PTR $T130599[esp+124], 15 ; 0000000fH
  0003c	89 74 24 28	 mov	 DWORD PTR $T130599[esp+120], esi
  00040	c6 44 24 18 00	 mov	 BYTE PTR $T130599[esp+104], 0
  00045	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004a	8d 44 24 0c	 lea	 eax, DWORD PTR $T130599[esp+92]
  0004e	50		 push	 eax
  0004f	8d 4c 24 2c	 lea	 ecx, DWORD PTR $T130598[esp+96]
  00053	89 74 24 5c	 mov	 DWORD PTR __$EHRec$[esp+104], esi
  00057	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0005c	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVout_of_range@std@@
  00061	8d 4c 24 2c	 lea	 ecx, DWORD PTR $T130598[esp+96]
  00065	51		 push	 ecx
  00066	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR $T130598[esp+100], OFFSET FLAT:??_7out_of_range@std@@6B@
  0006e	e8 00 00 00 00	 call	 __CxxThrowException@8
$L131090:
$L123847:
  00073	53		 push	 ebx

; 593  : 		_Nodeptr _Erasednode = _Where._Mynode();	// node to erase

  00074	8b d8		 mov	 ebx, eax
  00076	57		 push	 edi

; 594  : 		++_Where;	// save successor iterator for return

  00077	8d 4c 24 6c	 lea	 ecx, DWORD PTR __Where$[esp+96]
  0007b	89 5c 24 10	 mov	 DWORD PTR __Erasednode$[esp+100], ebx
  0007f	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::_Inc

; 595  : 
; 596  : 		_Nodeptr _Fixnode;	// the node to recolor as needed
; 597  : 		_Nodeptr _Fixnodeparent;	// parent of _Fixnode (which may be nil)
; 598  : 		_Nodeptr _Pnode = _Erasednode;
; 599  : 
; 600  : 		if (_Isnil(_Left(_Pnode)))

  00084	8b 03		 mov	 eax, DWORD PTR [ebx]
  00086	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  00089	84 c9		 test	 cl, cl
  0008b	74 05		 je	 SHORT $L123855

; 601  : 			_Fixnode = _Right(_Pnode);	// must stitch up right subtree

  0008d	8b 7b 08	 mov	 edi, DWORD PTR [ebx+8]

; 602  : 		else if (_Isnil(_Right(_Pnode)))

  00090	eb 19		 jmp	 SHORT $L131084
$L123855:
  00092	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00095	8a 4a 15	 mov	 cl, BYTE PTR [edx+21]
  00098	84 c9		 test	 cl, cl
  0009a	74 04		 je	 SHORT $L123857

; 603  : 			_Fixnode = _Left(_Pnode);	// must stitch up left subtree

  0009c	8b f8		 mov	 edi, eax

; 604  : 		else

  0009e	eb 0b		 jmp	 SHORT $L131084
$L123857:

; 605  : 			{	// two subtrees, must lift successor node to replace erased
; 606  : 			_Pnode = _Where._Mynode();	// _Pnode is successor node
; 607  : 			_Fixnode = _Right(_Pnode);	// _Fixnode is its only subtree

  000a0	8b 4c 24 6c	 mov	 ecx, DWORD PTR __Where$[esp+96]

; 608  : 			}
; 609  : 
; 610  : 		if (_Pnode == _Erasednode)

  000a4	3b cb		 cmp	 ecx, ebx
  000a6	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  000a9	75 6e		 jne	 SHORT $L123859
$L131084:

; 611  : 			{	// at most one subtree, relink it
; 612  : 			_Fixnodeparent = _Parent(_Erasednode);
; 613  : 			if (!_Isnil(_Fixnode))

  000ab	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  000ae	84 c0		 test	 al, al
  000b0	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  000b3	75 03		 jne	 SHORT $L123860

; 614  : 				_Parent(_Fixnode) = _Fixnodeparent;	// link up

  000b5	89 77 04	 mov	 DWORD PTR [edi+4], esi
$L123860:

; 615  : 
; 616  : 			if (_Root() == _Erasednode)

  000b8	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  000bb	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  000be	75 05		 jne	 SHORT $L123861

; 617  : 				_Root() = _Fixnode;	// link down from root

  000c0	89 78 04	 mov	 DWORD PTR [eax+4], edi

; 618  : 			else if (_Left(_Fixnodeparent) == _Erasednode)

  000c3	eb 0b		 jmp	 SHORT $L123864
$L123861:
  000c5	39 1e		 cmp	 DWORD PTR [esi], ebx
  000c7	75 04		 jne	 SHORT $L123863

; 619  : 				_Left(_Fixnodeparent) = _Fixnode;	// link down to left

  000c9	89 3e		 mov	 DWORD PTR [esi], edi

; 620  : 			else

  000cb	eb 03		 jmp	 SHORT $L123864
$L123863:

; 621  : 				_Right(_Fixnodeparent) = _Fixnode;	// link down to right

  000cd	89 7e 08	 mov	 DWORD PTR [esi+8], edi
$L123864:

; 622  : 
; 623  : 			if (_Lmost() == _Erasednode)

  000d0	8b 5d 04	 mov	 ebx, DWORD PTR [ebp+4]
  000d3	8b 03		 mov	 eax, DWORD PTR [ebx]
  000d5	3b 44 24 10	 cmp	 eax, DWORD PTR __Erasednode$[esp+100]
  000d9	75 16		 jne	 SHORT $L123865

; 624  : 				_Lmost() = _Isnil(_Fixnode)
; 625  : 					? _Fixnodeparent	// smallest is parent of erased node
; 626  : 					: _Min(_Fixnode);	// smallest in relinked subtree

  000db	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  000de	84 c0		 test	 al, al
  000e0	74 04		 je	 SHORT $L130600
  000e2	8b c6		 mov	 eax, esi
  000e4	eb 09		 jmp	 SHORT $L130601
$L130600:
  000e6	57		 push	 edi
  000e7	e8 00 00 00 00	 call	 ?_Min@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Min
  000ec	83 c4 04	 add	 esp, 4
$L130601:
  000ef	89 03		 mov	 DWORD PTR [ebx], eax
$L123865:

; 627  : 
; 628  : 			if (_Rmost() == _Erasednode)

  000f1	8b 5d 04	 mov	 ebx, DWORD PTR [ebp+4]
  000f4	8b 4c 24 10	 mov	 ecx, DWORD PTR __Erasednode$[esp+100]
  000f8	39 4b 08	 cmp	 DWORD PTR [ebx+8], ecx
  000fb	75 74		 jne	 SHORT $L130917

; 629  : 				_Rmost() = _Isnil(_Fixnode)
; 630  : 					? _Fixnodeparent	// largest is parent of erased node
; 631  : 					: _Max(_Fixnode);	// largest in relinked subtree

  000fd	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  00100	84 c0		 test	 al, al
  00102	74 07		 je	 SHORT $L130602
  00104	8b c6		 mov	 eax, esi
  00106	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 632  : 			}
; 633  : 		else

  00109	eb 66		 jmp	 SHORT $L130917
$L130602:

; 629  : 				_Rmost() = _Isnil(_Fixnode)
; 630  : 					? _Fixnodeparent	// largest is parent of erased node
; 631  : 					: _Max(_Fixnode);	// largest in relinked subtree

  0010b	57		 push	 edi
  0010c	e8 00 00 00 00	 call	 ?_Max@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@PAU342@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Max
  00111	83 c4 04	 add	 esp, 4
  00114	89 43 08	 mov	 DWORD PTR [ebx+8], eax

; 632  : 			}
; 633  : 		else

  00117	eb 58		 jmp	 SHORT $L130917
$L123859:

; 634  : 			{	// erased has two subtrees, _Pnode is successor to erased
; 635  : 			_Parent(_Left(_Erasednode)) = _Pnode;	// link left up

  00119	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 636  : 			_Left(_Pnode) = _Left(_Erasednode);	// link successor down

  0011c	8b 13		 mov	 edx, DWORD PTR [ebx]
  0011e	89 11		 mov	 DWORD PTR [ecx], edx

; 637  : 
; 638  : 			if (_Pnode == _Right(_Erasednode))

  00120	3b 4b 08	 cmp	 ecx, DWORD PTR [ebx+8]
  00123	75 04		 jne	 SHORT $L123868

; 639  : 				_Fixnodeparent = _Pnode;	// successor is next to erased

  00125	8b f1		 mov	 esi, ecx

; 640  : 			else

  00127	eb 1b		 jmp	 SHORT $L123869
$L123868:

; 641  : 				{	// successor further down, link in place of erased
; 642  : 				_Fixnodeparent = _Parent(_Pnode);	// parent is successor's
; 643  : 				if (!_Isnil(_Fixnode))

  00129	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  0012c	84 c0		 test	 al, al
  0012e	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00131	75 03		 jne	 SHORT $L123870

; 644  : 					_Parent(_Fixnode) = _Fixnodeparent;	// link fix up

  00133	89 77 04	 mov	 DWORD PTR [edi+4], esi
$L123870:

; 645  : 				_Left(_Fixnodeparent) = _Fixnode;	// link fix down

  00136	89 3e		 mov	 DWORD PTR [esi], edi

; 646  : 				_Right(_Pnode) = _Right(_Erasednode);	// link successor down

  00138	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0013b	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 647  : 				_Parent(_Right(_Erasednode)) = _Pnode;	// link right up

  0013e	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00141	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
$L123869:

; 648  : 				}
; 649  : 
; 650  : 			if (_Root() == _Erasednode)

  00144	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00147	39 58 04	 cmp	 DWORD PTR [eax+4], ebx
  0014a	75 05		 jne	 SHORT $L123871

; 651  : 				_Root() = _Pnode;	// link down from root

  0014c	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 652  : 			else if (_Left(_Parent(_Erasednode)) == _Erasednode)

  0014f	eb 0e		 jmp	 SHORT $L123874
$L123871:
  00151	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00154	39 18		 cmp	 DWORD PTR [eax], ebx
  00156	75 04		 jne	 SHORT $L123873

; 653  : 				_Left(_Parent(_Erasednode)) = _Pnode;	// link down to left

  00158	89 08		 mov	 DWORD PTR [eax], ecx

; 654  : 			else

  0015a	eb 03		 jmp	 SHORT $L123874
$L123873:

; 655  : 				_Right(_Parent(_Erasednode)) = _Pnode;	// link down to right

  0015c	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$L123874:

; 656  : 
; 657  : 			_Parent(_Pnode) = _Parent(_Erasednode);	// link successor up

  0015f	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00162	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 658  : 			std::swap(_Color(_Pnode), _Color(_Erasednode));	// recolor it

  00165	8a 53 14	 mov	 dl, BYTE PTR [ebx+20]
  00168	8a 41 14	 mov	 al, BYTE PTR [ecx+20]
  0016b	88 51 14	 mov	 BYTE PTR [ecx+20], dl
  0016e	88 43 14	 mov	 BYTE PTR [ebx+20], al
$L130917:

; 659  : 			}
; 660  : 
; 661  : 		if (_Color(_Erasednode) == _Black)

  00171	8b 44 24 10	 mov	 eax, DWORD PTR __Erasednode$[esp+100]
  00175	8a 48 14	 mov	 cl, BYTE PTR [eax+20]
  00178	b3 01		 mov	 bl, 1
  0017a	3a cb		 cmp	 cl, bl
  0017c	0f 85 ff 00 00
	00		 jne	 $L123875

; 662  : 			{	// erasing black link, must recolor/rebalance tree
; 663  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 664  : 				_Fixnodeparent = _Parent(_Fixnode))

  00182	8b 4d 04	 mov	 ecx, DWORD PTR [ebp+4]
  00185	3b 79 04	 cmp	 edi, DWORD PTR [ecx+4]
  00188	0f 84 f0 00 00
	00		 je	 $L123878
  0018e	8b ff		 npad	 2
$L123876:
  00190	38 5f 14	 cmp	 BYTE PTR [edi+20], bl
  00193	0f 85 e5 00 00
	00		 jne	 $L123878

; 665  : 				if (_Fixnode == _Left(_Fixnodeparent))

  00199	8b 06		 mov	 eax, DWORD PTR [esi]
  0019b	3b f8		 cmp	 edi, eax
  0019d	75 67		 jne	 SHORT $L123879

; 666  : 					{	// fixup left subtree
; 667  : 					_Pnode = _Right(_Fixnodeparent);

  0019f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]

; 668  : 					if (_Color(_Pnode) == _Red)

  001a2	8a 48 14	 mov	 cl, BYTE PTR [eax+20]
  001a5	84 c9		 test	 cl, cl
  001a7	75 12		 jne	 SHORT $L123880

; 669  : 						{	// rotate red up from right subtree
; 670  : 						_Color(_Pnode) = _Black;

  001a9	88 58 14	 mov	 BYTE PTR [eax+20], bl

; 671  : 						_Color(_Fixnodeparent) = _Red;
; 672  : 						_Lrotate(_Fixnodeparent);

  001ac	56		 push	 esi
  001ad	8b cd		 mov	 ecx, ebp
  001af	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0
  001b3	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Lrotate

; 673  : 						_Pnode = _Right(_Fixnodeparent);

  001b8	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
$L123880:

; 674  : 						}
; 675  : 
; 676  : 					if (_Isnil(_Pnode))

  001bb	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  001be	84 c9		 test	 cl, cl

; 677  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 678  : 					else if (_Color(_Left(_Pnode)) == _Black

  001c0	75 76		 jne	 SHORT $L131087

; 679  : 						&& _Color(_Right(_Pnode)) == _Black)

  001c2	8b 10		 mov	 edx, DWORD PTR [eax]
  001c4	38 5a 14	 cmp	 BYTE PTR [edx+20], bl
  001c7	75 08		 jne	 SHORT $L123883
  001c9	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001cc	38 59 14	 cmp	 BYTE PTR [ecx+20], bl
  001cf	74 63		 je	 SHORT $L131088
$L123883:

; 680  : 						{	// redden right subtree with black children
; 681  : 						_Color(_Pnode) = _Red;
; 682  : 						_Fixnode = _Fixnodeparent;
; 683  : 						}
; 684  : 					else
; 685  : 						{	// must rearrange right subtree
; 686  : 						if (_Color(_Right(_Pnode)) == _Black)

  001d1	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001d4	38 59 14	 cmp	 BYTE PTR [ecx+20], bl
  001d7	75 14		 jne	 SHORT $L123885

; 687  : 							{	// rotate red up from left sub-subtree
; 688  : 							_Color(_Left(_Pnode)) = _Black;

  001d9	8b 10		 mov	 edx, DWORD PTR [eax]
  001db	88 5a 14	 mov	 BYTE PTR [edx+20], bl

; 689  : 							_Color(_Pnode) = _Red;
; 690  : 							_Rrotate(_Pnode);

  001de	50		 push	 eax
  001df	8b cd		 mov	 ecx, ebp
  001e1	c6 40 14 00	 mov	 BYTE PTR [eax+20], 0
  001e5	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Rrotate

; 691  : 							_Pnode = _Right(_Fixnodeparent);

  001ea	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
$L123885:

; 692  : 							}
; 693  : 
; 694  : 						_Color(_Pnode) = _Color(_Fixnodeparent);

  001ed	8a 4e 14	 mov	 cl, BYTE PTR [esi+20]
  001f0	88 48 14	 mov	 BYTE PTR [eax+20], cl

; 695  : 						_Color(_Fixnodeparent) = _Black;

  001f3	88 5e 14	 mov	 BYTE PTR [esi+20], bl

; 696  : 						_Color(_Right(_Pnode)) = _Black;

  001f6	8b 50 08	 mov	 edx, DWORD PTR [eax+8]

; 697  : 						_Lrotate(_Fixnodeparent);

  001f9	56		 push	 esi
  001fa	8b cd		 mov	 ecx, ebp
  001fc	88 5a 14	 mov	 BYTE PTR [edx+20], bl
  001ff	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Lrotate

; 698  : 						break;	// tree now recolored/rebalanced

  00204	eb 78		 jmp	 SHORT $L123878
$L123879:

; 699  : 						}
; 700  : 					}
; 701  : 				else
; 702  : 					{	// fixup right subtree
; 703  : 					_Pnode = _Left(_Fixnodeparent);
; 704  : 					if (_Color(_Pnode) == _Red)

  00206	8a 48 14	 mov	 cl, BYTE PTR [eax+20]
  00209	84 c9		 test	 cl, cl
  0020b	75 11		 jne	 SHORT $L123887

; 705  : 						{	// rotate red up from left subtree
; 706  : 						_Color(_Pnode) = _Black;

  0020d	88 58 14	 mov	 BYTE PTR [eax+20], bl

; 707  : 						_Color(_Fixnodeparent) = _Red;
; 708  : 						_Rrotate(_Fixnodeparent);

  00210	56		 push	 esi
  00211	8b cd		 mov	 ecx, ebp
  00213	c6 46 14 00	 mov	 BYTE PTR [esi+20], 0
  00217	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Rrotate

; 709  : 						_Pnode = _Left(_Fixnodeparent);

  0021c	8b 06		 mov	 eax, DWORD PTR [esi]
$L123887:

; 710  : 						}
; 711  : 					if (_Isnil(_Pnode))

  0021e	8a 48 15	 mov	 cl, BYTE PTR [eax+21]
  00221	84 c9		 test	 cl, cl

; 712  : 						_Fixnode = _Fixnodeparent;	// shouldn't happen
; 713  : 					else if (_Color(_Right(_Pnode)) == _Black

  00223	75 13		 jne	 SHORT $L131087

; 714  : 						&& _Color(_Left(_Pnode)) == _Black)

  00225	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00228	38 5a 14	 cmp	 BYTE PTR [edx+20], bl
  0022b	75 20		 jne	 SHORT $L123890
  0022d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0022f	38 59 14	 cmp	 BYTE PTR [ecx+20], bl
  00232	75 19		 jne	 SHORT $L123890
$L131088:

; 715  : 						{	// redden left subtree with black children
; 716  : 						_Color(_Pnode) = _Red;

  00234	c6 40 14 00	 mov	 BYTE PTR [eax+20], 0
$L131087:

; 662  : 			{	// erasing black link, must recolor/rebalance tree
; 663  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 664  : 				_Fixnodeparent = _Parent(_Fixnode))

  00238	8b 55 04	 mov	 edx, DWORD PTR [ebp+4]
  0023b	8b 42 04	 mov	 eax, DWORD PTR [edx+4]

; 717  : 						_Fixnode = _Fixnodeparent;

  0023e	8b fe		 mov	 edi, esi
  00240	3b f8		 cmp	 edi, eax
  00242	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  00245	0f 85 45 ff ff
	ff		 jne	 $L123876

; 662  : 			{	// erasing black link, must recolor/rebalance tree
; 663  : 			for (; _Fixnode != _Root() && _Color(_Fixnode) == _Black;
; 664  : 				_Fixnodeparent = _Parent(_Fixnode))

  0024b	eb 31		 jmp	 SHORT $L123878
$L123890:

; 718  : 						}
; 719  : 					else
; 720  : 						{	// must rearrange left subtree
; 721  : 						if (_Color(_Left(_Pnode)) == _Black)

  0024d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0024f	38 59 14	 cmp	 BYTE PTR [ecx+20], bl
  00252	75 14		 jne	 SHORT $L123892

; 722  : 							{	// rotate red up from right sub-subtree
; 723  : 							_Color(_Right(_Pnode)) = _Black;

  00254	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00257	88 5a 14	 mov	 BYTE PTR [edx+20], bl

; 724  : 							_Color(_Pnode) = _Red;
; 725  : 							_Lrotate(_Pnode);

  0025a	50		 push	 eax
  0025b	8b cd		 mov	 ecx, ebp
  0025d	c6 40 14 00	 mov	 BYTE PTR [eax+20], 0
  00261	e8 00 00 00 00	 call	 ?_Lrotate@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Lrotate

; 726  : 							_Pnode = _Left(_Fixnodeparent);

  00266	8b 06		 mov	 eax, DWORD PTR [esi]
$L123892:

; 727  : 							}
; 728  : 
; 729  : 						_Color(_Pnode) = _Color(_Fixnodeparent);

  00268	8a 4e 14	 mov	 cl, BYTE PTR [esi+20]
  0026b	88 48 14	 mov	 BYTE PTR [eax+20], cl

; 730  : 						_Color(_Fixnodeparent) = _Black;

  0026e	88 5e 14	 mov	 BYTE PTR [esi+20], bl

; 731  : 						_Color(_Left(_Pnode)) = _Black;

  00271	8b 10		 mov	 edx, DWORD PTR [eax]

; 732  : 						_Rrotate(_Fixnodeparent);

  00273	56		 push	 esi
  00274	8b cd		 mov	 ecx, ebp
  00276	88 5a 14	 mov	 BYTE PTR [edx+20], bl
  00279	e8 00 00 00 00	 call	 ?_Rrotate@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Rrotate
$L123878:

; 733  : 						break;	// tree now recolored/rebalanced
; 734  : 						}
; 735  : 					}
; 736  : 
; 737  : 			_Color(_Fixnode) = _Black;	// ensure stopping node is black

  0027e	88 5f 14	 mov	 BYTE PTR [edi+20], bl
$L123875:

; 738  : 			}
; 739  : 
; 740  : 		this->_Alnod.destroy(_Erasednode);	// destroy, free erased node
; 741  : 		this->_Alnod.deallocate(_Erasednode, 1);

  00281	8b 44 24 10	 mov	 eax, DWORD PTR __Erasednode$[esp+100]
  00285	50		 push	 eax
  00286	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete

; 742  : 
; 743  : 		if (0 < _Mysize)

  0028b	8b 45 08	 mov	 eax, DWORD PTR [ebp+8]
  0028e	83 c4 04	 add	 esp, 4
  00291	85 c0		 test	 eax, eax
  00293	5f		 pop	 edi
  00294	5b		 pop	 ebx
  00295	76 04		 jbe	 SHORT $L123893

; 744  : 			--_Mysize;

  00297	48		 dec	 eax
  00298	89 45 08	 mov	 DWORD PTR [ebp+8], eax
$L123893:

; 745  : 
; 746  : 		return (_Where);	// return successor iterator

  0029b	8b 4c 24 64	 mov	 ecx, DWORD PTR __Where$[esp+88]
  0029f	8b 44 24 60	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+88]
  002a3	89 08		 mov	 DWORD PTR [eax], ecx

; 747  : 		}

  002a5	8b 4c 24 50	 mov	 ecx, DWORD PTR __$EHRec$[esp+92]
  002a9	5e		 pop	 esi
  002aa	5d		 pop	 ebp
  002ab	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  002b2	83 c4 54	 add	 esp, 84			; 00000054H
  002b5	c2 08 00	 ret	 8
$L131086:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L130604:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T130599[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T131081
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::erase
; Function compile flags: /Ogty
;	COMDAT ??0out_of_range@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0out_of_range@std@@QAE@ABV01@@Z PROC NEAR		; std::out_of_range::out_of_range, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7out_of_range@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0out_of_range@std@@QAE@ABV01@@Z ENDP			; std::out_of_range::out_of_range
_TEXT	ENDS
PUBLIC	?insert@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBEK@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::insert
; Function compile flags: /Ogty
;	COMDAT ?insert@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBEK@2@@Z
_TEXT	SEGMENT
__Addleft$ = -4						; size = 1
___$ReturnUdt$ = 8					; size = 4
$T131108 = 12						; size = 4
$T131106 = 12						; size = 4
__Where$123470 = 12					; size = 4
__Val$ = 12						; size = 4
?insert@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBEK@2@@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::insert, COMDAT
; _this$ = ecx

; 477  : 		{	// try to insert node with value _Val

  00000	51		 push	 ecx
  00001	55		 push	 ebp

; 478  : 		_Nodeptr _Trynode = _Root();
; 479  : 		_Nodeptr _Wherenode = _Myhead;
; 480  : 		bool _Addleft = true;	// add to left of head if tree empty
; 481  : 		while (!_Isnil(_Trynode))

  00002	8b 6c 24 10	 mov	 ebp, DWORD PTR __Val$[esp+4]
  00006	56		 push	 esi
  00007	57		 push	 edi
  00008	8b f9		 mov	 edi, ecx
  0000a	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0000d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00010	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00013	84 d2		 test	 dl, dl
  00015	b1 01		 mov	 cl, 1
  00017	88 4c 24 0c	 mov	 BYTE PTR __Addleft$[esp+16], cl
  0001b	75 20		 jne	 SHORT $L123460
  0001d	8a 55 00	 mov	 dl, BYTE PTR [ebp]
$L123459:

; 482  : 			{	// look for leaf to insert before (_Addleft) or after
; 483  : 			_Wherenode = _Trynode;
; 484  : 			_Addleft = this->comp(this->_Kfn(_Val), _Key(_Trynode));

  00020	3a 50 0c	 cmp	 dl, BYTE PTR [eax+12]
  00023	0f 92 c1	 setb	 cl

; 485  : 			_Trynode = _Addleft ? _Left(_Trynode) : _Right(_Trynode);

  00026	84 c9		 test	 cl, cl
  00028	8b f0		 mov	 esi, eax
  0002a	88 4c 24 0c	 mov	 BYTE PTR __Addleft$[esp+16], cl
  0002e	74 04		 je	 SHORT $L131100
  00030	8b 00		 mov	 eax, DWORD PTR [eax]
  00032	eb 03		 jmp	 SHORT $L131101
$L131100:
  00034	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
$L131101:

; 478  : 		_Nodeptr _Trynode = _Root();
; 479  : 		_Nodeptr _Wherenode = _Myhead;
; 480  : 		bool _Addleft = true;	// add to left of head if tree empty
; 481  : 		while (!_Isnil(_Trynode))

  00037	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0003b	74 e3		 je	 SHORT $L123459
$L123460:

; 486  : 			}
; 487  : 
; 488  : 		if (this->_Multi)
; 489  : 			return (_Pairib(_Insert(_Addleft, _Wherenode, _Val), true));
; 490  : 		else
; 491  : 			{	// insert only if unique
; 492  : 			iterator _Where = _TREE_ITERATOR(_Wherenode);
; 493  : 			if (!_Addleft)

  0003d	84 c9		 test	 cl, cl
  0003f	8b d6		 mov	 edx, esi
  00041	89 54 24 18	 mov	 DWORD PTR __Where$123470[esp+12], edx
  00045	74 33		 je	 SHORT $L131200

; 494  : 				;	// need to test if insert after is okay
; 495  : 			else if (_Where == begin())

  00047	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0004a	3b 30		 cmp	 esi, DWORD PTR [eax]

; 496  : 				return (_Pairib(_Insert(true, _Wherenode, _Val), true));

  0004c	8d 4c 24 18	 lea	 ecx, DWORD PTR $T131106[esp+12]
  00050	75 1f		 jne	 SHORT $L123475
  00052	55		 push	 ebp
  00053	56		 push	 esi
  00054	6a 01		 push	 1
  00056	51		 push	 ecx
  00057	8b cf		 mov	 ecx, edi
  00059	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBEK@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Insert
  0005e	8b 10		 mov	 edx, DWORD PTR [eax]
  00060	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 502  : 			else
; 503  : 				return (_Pairib(_Where, false));

  0006a	89 10		 mov	 DWORD PTR [eax], edx
  0006c	5d		 pop	 ebp

; 504  : 			}
; 505  : 		}

  0006d	59		 pop	 ecx
  0006e	c2 08 00	 ret	 8
$L123475:

; 497  : 			else
; 498  : 				--_Where;	// need to test if insert before is okay

  00071	e8 00 00 00 00	 call	 ?_Dec@const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::_Dec
  00076	8b 54 24 18	 mov	 edx, DWORD PTR __Where$123470[esp+12]
$L131200:

; 499  : 
; 500  : 			if (this->comp(_Key(_Where._Mynode()), this->_Kfn(_Val)))

  0007a	8a 42 0c	 mov	 al, BYTE PTR [edx+12]
  0007d	3a 45 00	 cmp	 al, BYTE PTR [ebp]
  00080	73 26		 jae	 SHORT $L123480

; 501  : 				return (_Pairib(_Insert(_Addleft, _Wherenode, _Val), true));

  00082	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Addleft$[esp+16]
  00086	55		 push	 ebp
  00087	56		 push	 esi
  00088	51		 push	 ecx
  00089	8d 54 24 24	 lea	 edx, DWORD PTR $T131108[esp+24]
  0008d	52		 push	 edx
  0008e	8b cf		 mov	 ecx, edi
  00090	e8 00 00 00 00	 call	 ?_Insert@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAE?AViterator@12@_NPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@ABU?$pair@$$CBEK@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Insert
  00095	8b 08		 mov	 ecx, DWORD PTR [eax]
  00097	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  0009b	5f		 pop	 edi
  0009c	5e		 pop	 esi
  0009d	89 08		 mov	 DWORD PTR [eax], ecx
  0009f	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  000a3	5d		 pop	 ebp

; 504  : 			}
; 505  : 		}

  000a4	59		 pop	 ecx
  000a5	c2 08 00	 ret	 8
$L123480:

; 502  : 			else
; 503  : 				return (_Pairib(_Where, false));

  000a8	8b 44 24 14	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+12]
  000ac	5f		 pop	 edi
  000ad	5e		 pop	 esi
  000ae	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
  000b2	89 10		 mov	 DWORD PTR [eax], edx
  000b4	5d		 pop	 ebp

; 504  : 			}
; 505  : 		}

  000b5	59		 pop	 ecx
  000b6	c2 08 00	 ret	 8
?insert@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBEK@2@@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::insert
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAE_NI@Z ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Buy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?_Buy@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAE_NI@Z PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Buy, COMDAT
; _this$ = ecx

; 771  : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;
; 772  : 		if (_Capacity == 0)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Capacity$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	33 c9		 xor	 ecx, ecx
  00009	3b c1		 cmp	 eax, ecx
  0000b	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0000e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00011	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00014	75 06		 jne	 SHORT $L123527

; 773  : 			return (false);

  00016	32 c0		 xor	 al, al
  00018	5e		 pop	 esi

; 783  : 		}

  00019	c2 04 00	 ret	 4
$L123527:

; 774  : 		else if (max_size() < _Capacity)

  0001c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00021	76 07		 jbe	 SHORT $L123529

; 775  : 			_Xlen();	// result too long

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Xlen@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IBEXXZ ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Xlen
$L131262:
$L123529:
  0002a	57		 push	 edi

; 776  : 		else
; 777  : 			{	// nonempty array, allocate storage
; 778  : 			_Myfirst = this->_Alval.allocate(_Capacity);

  0002b	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  00032	57		 push	 edi
  00033	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 779  : 			_Mylast = _Myfirst;
; 780  : 			_Myend = _Myfirst + _Capacity;

  00038	03 f8		 add	 edi, eax
  0003a	83 c4 04	 add	 esp, 4
  0003d	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  00040	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00043	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00046	5f		 pop	 edi

; 781  : 			}
; 782  : 		return (true);

  00047	b0 01		 mov	 al, 1
  00049	5e		 pop	 esi

; 783  : 		}

  0004a	c2 04 00	 ret	 4
$L131261:
?_Buy@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Buy
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEXViterator@12@IABQAUtagTCHARACTER@@@Z ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Insert_n
; Function compile flags: /Ogty
;	COMDAT ?_Insert_n@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEXViterator@12@IABQAUtagTCHARACTER@@@Z
_TEXT	SEGMENT
__Newvec$123695 = -4					; size = 4
tv393 = 8						; size = 4
__Where$ = 8						; size = 4
tv382 = 12						; size = 4
__Count$ = 12						; size = 4
__Tmp$ = 16						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEXViterator@12@IABQAUtagTCHARACTER@@@Z PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Insert_n, COMDAT
; _this$ = ecx

; 809  : 		{	// insert _Count * _Val at _Where

  00000	51		 push	 ecx

; 810  : 		_Ty _Tmp = _Val;	// in case _Val is in sequence

  00001	8b 44 24 10	 mov	 eax, DWORD PTR __Val$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 811  : 		size_type _Capacity = capacity();

  00008	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000b	85 d2		 test	 edx, edx
  0000d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000f	57		 push	 edi
  00010	89 4c 24 18	 mov	 DWORD PTR __Tmp$[esp+8], ecx
  00014	75 04		 jne	 SHORT $L131276
  00016	33 c0		 xor	 eax, eax
  00018	eb 08		 jmp	 SHORT $L131277
$L131276:
  0001a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0001d	2b c2		 sub	 eax, edx
  0001f	c1 f8 02	 sar	 eax, 2
$L131277:

; 812  : 
; 813  : 		if (_Count == 0)

  00022	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  00026	85 ff		 test	 edi, edi
  00028	0f 84 ac 01 00
	00		 je	 $L123715

; 814  : 			;
; 815  : 		else if (max_size() - size() < _Count)

  0002e	85 d2		 test	 edx, edx
  00030	75 04		 jne	 SHORT $L131299
  00032	33 c9		 xor	 ecx, ecx
  00034	eb 08		 jmp	 SHORT $L131300
$L131299:
  00036	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00039	2b ca		 sub	 ecx, edx
  0003b	c1 f9 02	 sar	 ecx, 2
$L131300:
  0003e	53		 push	 ebx
  0003f	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH
  00044	2b d9		 sub	 ebx, ecx
  00046	3b df		 cmp	 ebx, edi
  00048	73 07		 jae	 SHORT $L123691

; 816  : 			_Xlen();	// result too long

  0004a	8b ce		 mov	 ecx, esi
  0004c	e8 00 00 00 00	 call	 ?_Xlen@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IBEXXZ ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Xlen
$L131431:
$L123691:

; 817  : 		else if (_Capacity < size() + _Count)

  00051	85 d2		 test	 edx, edx
  00053	75 04		 jne	 SHORT $L131306
  00055	33 c9		 xor	 ecx, ecx
  00057	eb 08		 jmp	 SHORT $L131307
$L131306:
  00059	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0005c	2b ca		 sub	 ecx, edx
  0005e	c1 f9 02	 sar	 ecx, 2
$L131307:
  00061	03 cf		 add	 ecx, edi
  00063	3b c1		 cmp	 eax, ecx
  00065	55		 push	 ebp
  00066	0f 83 d6 00 00
	00		 jae	 $L123693

; 818  : 			{	// not enough room, reallocate
; 819  : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 820  : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0006c	8b c8		 mov	 ecx, eax
  0006e	d1 e9		 shr	 ecx, 1
  00070	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH
  00075	2b d9		 sub	 ebx, ecx
  00077	3b d8		 cmp	 ebx, eax
  00079	73 04		 jae	 SHORT $L131266
  0007b	33 c0		 xor	 eax, eax
  0007d	eb 02		 jmp	 SHORT $L131267
$L131266:
  0007f	03 c1		 add	 eax, ecx
$L131267:

; 821  : 			if (_Capacity < size() + _Count)

  00081	85 d2		 test	 edx, edx
  00083	75 04		 jne	 SHORT $L131329
  00085	33 c9		 xor	 ecx, ecx
  00087	eb 08		 jmp	 SHORT $L131330
$L131329:
  00089	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0008c	2b ca		 sub	 ecx, edx
  0008e	c1 f9 02	 sar	 ecx, 2
$L131330:
  00091	03 cf		 add	 ecx, edi
  00093	3b c1		 cmp	 eax, ecx
  00095	73 12		 jae	 SHORT $L123694

; 822  : 				_Capacity = size() + _Count;

  00097	85 d2		 test	 edx, edx
  00099	75 04		 jne	 SHORT $L131336
  0009b	33 c0		 xor	 eax, eax
  0009d	eb 08		 jmp	 SHORT $L131337
$L131336:
  0009f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000a2	2b c2		 sub	 eax, edx
  000a4	c1 f8 02	 sar	 eax, 2
$L131337:
  000a7	03 c7		 add	 eax, edi
$L123694:

; 823  : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

  000a9	c1 e0 02	 shl	 eax, 2
  000ac	50		 push	 eax
  000ad	89 44 24 20	 mov	 DWORD PTR tv382[esp+20], eax
  000b1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 824  : 			pointer _Ptr = _Newvec;
; 825  : 
; 826  : 			_TRY_BEGIN
; 827  : 			_Ptr = _Ucopy(_Myfirst, _ITER_BASE(_Where),
; 828  : 				_Newvec);	// copy prefix

  000b6	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000b9	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Where$[esp+20]
  000bd	8b d0		 mov	 edx, eax
  000bf	8b c3		 mov	 eax, ebx
  000c1	2b c1		 sub	 eax, ecx
  000c3	c1 f8 02	 sar	 eax, 2
  000c6	8d 2c 85 00 00
	00 00		 lea	 ebp, DWORD PTR [eax*4]
  000cd	55		 push	 ebp
  000ce	51		 push	 ecx
  000cf	52		 push	 edx
  000d0	89 54 24 20	 mov	 DWORD PTR __Newvec$123695[esp+36], edx
  000d4	e8 00 00 00 00	 call	 _memmove
  000d9	83 c4 10	 add	 esp, 16			; 00000010H

; 829  : 			_Ptr = _Ufill(_Ptr, _Count, _Tmp);	// add new stuff

  000dc	8d 54 24 20	 lea	 edx, DWORD PTR __Tmp$[esp+16]
  000e0	52		 push	 edx
  000e1	03 c5		 add	 eax, ebp
  000e3	57		 push	 edi
  000e4	50		 push	 eax
  000e5	8b ce		 mov	 ecx, esi
  000e7	e8 00 00 00 00	 call	 ?_Ufill@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEPAPAUtagTCHARACTER@@PAPAU3@IABQAU3@@Z ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Ufill

; 830  : 			_Ucopy(_ITER_BASE(_Where), _Mylast, _Ptr);	// copy suffix

  000ec	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000ef	2b cb		 sub	 ecx, ebx
  000f1	c1 f9 02	 sar	 ecx, 2
  000f4	c1 e1 02	 shl	 ecx, 2
  000f7	51		 push	 ecx
  000f8	53		 push	 ebx
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 _memmove

; 831  : 			_CATCH_ALL
; 832  : 			_Destroy(_Newvec, _Ptr);
; 833  : 			this->_Alval.deallocate(_Newvec, _Capacity);
; 834  : 			_RERAISE;
; 835  : 			_CATCH_END
; 836  : 
; 837  : 			_Count += size();

  000ff	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00102	83 c4 0c	 add	 esp, 12			; 0000000cH
  00105	85 c0		 test	 eax, eax
  00107	75 04		 jne	 SHORT $L131418
  00109	33 c9		 xor	 ecx, ecx
  0010b	eb 08		 jmp	 SHORT $L131419
$L131418:
  0010d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00110	2b c8		 sub	 ecx, eax
  00112	c1 f9 02	 sar	 ecx, 2
$L131419:
  00115	03 f9		 add	 edi, ecx

; 838  : 			if (_Myfirst != 0)

  00117	85 c0		 test	 eax, eax
  00119	74 09		 je	 SHORT $L131423

; 839  : 				{	// destroy and deallocate old array
; 840  : 				_Destroy(_Myfirst, _Mylast);
; 841  : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00121	83 c4 04	 add	 esp, 4
$L131423:

; 842  : 				}
; 843  : 			_Myend = _Newvec + _Capacity;

  00124	8b 44 24 10	 mov	 eax, DWORD PTR __Newvec$123695[esp+20]
  00128	8b 54 24 1c	 mov	 edx, DWORD PTR tv382[esp+16]
  0012c	5d		 pop	 ebp
  0012d	5b		 pop	 ebx

; 844  : 			_Mylast = _Newvec + _Count;

  0012e	8d 0c b8	 lea	 ecx, DWORD PTR [eax+edi*4]
  00131	03 d0		 add	 edx, eax
  00133	5f		 pop	 edi
  00134	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  00137	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 845  : 			_Myfirst = _Newvec;

  0013a	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0013d	5e		 pop	 esi

; 873  : 			}
; 874  : 		}

  0013e	59		 pop	 ecx
  0013f	c2 0c 00	 ret	 12			; 0000000cH
$L123693:

; 846  : 			}
; 847  : 		else if ((size_type)(_Mylast - _ITER_BASE(_Where)) < _Count)

  00142	8b 6e 08	 mov	 ebp, DWORD PTR [esi+8]
  00145	8b 5c 24 18	 mov	 ebx, DWORD PTR __Where$[esp+16]
  00149	8b d5		 mov	 edx, ebp
  0014b	2b d3		 sub	 edx, ebx
  0014d	c1 fa 02	 sar	 edx, 2
  00150	3b d7		 cmp	 edx, edi

; 848  : 			{	// new stuff spills off end
; 849  : 			_Ucopy(_ITER_BASE(_Where), _Mylast,
; 850  : 				_ITER_BASE(_Where) + _Count);	// copy suffix

  00152	8d 04 bd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*4]
  00159	8b ce		 mov	 ecx, esi
  0015b	89 44 24 18	 mov	 DWORD PTR tv393[esp+16], eax
  0015f	73 4b		 jae	 SHORT $L123706
  00161	03 c3		 add	 eax, ebx
  00163	50		 push	 eax
  00164	55		 push	 ebp
  00165	53		 push	 ebx
  00166	e8 00 00 00 00	 call	 ??$_Ucopy@PAPAUtagTCHARACTER@@@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEPAPAUtagTCHARACTER@@PAPAU2@00@Z ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Ucopy<tagTCHARACTER * *>

; 851  : 
; 852  : 			_TRY_BEGIN
; 853  : 			_Ufill(_Mylast, _Count - (_Mylast - _ITER_BASE(_Where)),
; 854  : 				_Tmp);	// insert new stuff off end

  0016b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0016e	8b d0		 mov	 edx, eax
  00170	2b d3		 sub	 edx, ebx
  00172	8d 4c 24 20	 lea	 ecx, DWORD PTR __Tmp$[esp+16]
  00176	51		 push	 ecx
  00177	c1 fa 02	 sar	 edx, 2
  0017a	2b fa		 sub	 edi, edx
  0017c	57		 push	 edi
  0017d	50		 push	 eax
  0017e	8b ce		 mov	 ecx, esi
  00180	e8 00 00 00 00	 call	 ?_Ufill@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEPAPAUtagTCHARACTER@@PAPAU3@IABQAU3@@Z ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Ufill

; 855  : 			_CATCH_ALL
; 856  : 			_Destroy(_ITER_BASE(_Where) + _Count, _Mylast + _Count);
; 857  : 			_RERAISE;
; 858  : 			_CATCH_END
; 859  : 
; 860  : 			_Mylast += _Count;

  00185	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00188	8b 44 24 18	 mov	 eax, DWORD PTR tv393[esp+16]
  0018c	03 c8		 add	 ecx, eax
  0018e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00191	8b f1		 mov	 esi, ecx

; 861  : 			fill(_ITER_BASE(_Where), _Mylast - _Count,
; 862  : 				_Tmp);	// insert up to old end

  00193	8d 4c 24 20	 lea	 ecx, DWORD PTR __Tmp$[esp+16]
  00197	51		 push	 ecx
  00198	2b f0		 sub	 esi, eax
  0019a	56		 push	 esi
  0019b	53		 push	 ebx
  0019c	e8 00 00 00 00	 call	 ??$fill@PAPAUtagTCHARACTER@@PAU1@@std@@YAXPAPAUtagTCHARACTER@@0ABQAU1@@Z ; std::fill<tagTCHARACTER * *,tagTCHARACTER *>
  001a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a4	5d		 pop	 ebp
  001a5	5b		 pop	 ebx
  001a6	5f		 pop	 edi
  001a7	5e		 pop	 esi

; 873  : 			}
; 874  : 		}

  001a8	59		 pop	 ecx
  001a9	c2 0c 00	 ret	 12			; 0000000cH
$L123706:

; 863  : 			}
; 864  : 		else
; 865  : 			{	// new stuff can all be assigned
; 866  : 			pointer _Oldend = _Mylast;
; 867  : 			_Mylast = _Ucopy(_Oldend - _Count, _Oldend,
; 868  : 				_Mylast);	// copy suffix

  001ac	55		 push	 ebp
  001ad	8b fd		 mov	 edi, ebp
  001af	2b f8		 sub	 edi, eax
  001b1	55		 push	 ebp
  001b2	57		 push	 edi
  001b3	e8 00 00 00 00	 call	 ??$_Ucopy@PAPAUtagTCHARACTER@@@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEPAPAUtagTCHARACTER@@PAPAU2@00@Z ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Ucopy<tagTCHARACTER * *>

; 869  : 			copy_backward(_ITER_BASE(_Where), _Oldend - _Count,
; 870  : 				_Oldend);	// copy hole

  001b8	55		 push	 ebp
  001b9	57		 push	 edi
  001ba	53		 push	 ebx
  001bb	89 46 08	 mov	 DWORD PTR [esi+8], eax
  001be	e8 00 00 00 00	 call	 ??$copy_backward@PAPAUtagTCHARACTER@@PAPAU1@@std@@YAPAPAUtagTCHARACTER@@PAPAU1@00@Z ; std::copy_backward<tagTCHARACTER * *,tagTCHARACTER * *>

; 871  : 			fill(_ITER_BASE(_Where), _ITER_BASE(_Where) + _Count,
; 872  : 				_Tmp);	// insert into hole

  001c3	8b 44 24 24	 mov	 eax, DWORD PTR tv393[esp+28]
  001c7	8d 54 24 2c	 lea	 edx, DWORD PTR __Tmp$[esp+28]
  001cb	52		 push	 edx
  001cc	03 c3		 add	 eax, ebx
  001ce	50		 push	 eax
  001cf	53		 push	 ebx
  001d0	e8 00 00 00 00	 call	 ??$fill@PAPAUtagTCHARACTER@@PAU1@@std@@YAXPAPAUtagTCHARACTER@@0ABQAU1@@Z ; std::fill<tagTCHARACTER * *,tagTCHARACTER *>
  001d5	83 c4 18	 add	 esp, 24			; 00000018H
  001d8	5d		 pop	 ebp
  001d9	5b		 pop	 ebx
$L123715:
  001da	5f		 pop	 edi
  001db	5e		 pop	 esi

; 873  : 			}
; 874  : 		}

  001dc	59		 pop	 ecx
  001dd	c2 0c 00	 ret	 12			; 0000000cH
$L131430:
?_Insert_n@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEXViterator@12@IABQAUtagTCHARACTER@@@Z ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Insert_n
_TEXT	ENDS
PUBLIC	?erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::erase
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
$T131438 = 12						; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::erase, COMDAT
; _this$ = ecx

; 750  : 		{	// erase [_First, _Last)

  00000	53		 push	 ebx

; 751  : 		if (_First == begin() && _Last == end())

  00001	8b 5c 24 10	 mov	 ebx, DWORD PTR __Last$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 10	 mov	 esi, DWORD PTR __First$[esp+4]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00010	3b 30		 cmp	 esi, DWORD PTR [eax]
  00012	75 38		 jne	 SHORT $L131770
  00014	3b d8		 cmp	 ebx, eax
  00016	75 34		 jne	 SHORT $L131770

; 752  : 			{	// erase all
; 753  : 			clear();

  00018	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001b	50		 push	 eax
  0001c	8b cf		 mov	 ecx, edi
  0001e	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Erase
  00023	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00026	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00029	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  0002c	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  00033	89 00		 mov	 DWORD PTR [eax], eax
  00035	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00038	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 754  : 			return (begin());

  0003b	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0003e	8b 11		 mov	 edx, DWORD PTR [ecx]
  00040	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	89 10		 mov	 DWORD PTR [eax], edx
  00048	5b		 pop	 ebx

; 761  : 			}
; 762  : 		}

  00049	c2 0c 00	 ret	 12			; 0000000cH
$L131770:

; 755  : 			}
; 756  : 		else
; 757  : 			{	// partial erase, one at a time
; 758  : 			while (_First != _Last)

  0004c	3b f3		 cmp	 esi, ebx
  0004e	74 5b		 je	 SHORT $L123776
$L123775:

; 759  : 				erase(_First++);

  00050	8a 46 15	 mov	 al, BYTE PTR [esi+21]
  00053	84 c0		 test	 al, al
  00055	8b ce		 mov	 ecx, esi
  00057	75 41		 jne	 SHORT $L131739
  00059	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0005c	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0005f	84 d2		 test	 dl, dl
  00061	75 1a		 jne	 SHORT $L131772
  00063	8b f0		 mov	 esi, eax
  00065	8b 06		 mov	 eax, DWORD PTR [esi]
  00067	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  0006a	84 d2		 test	 dl, dl
  0006c	75 2c		 jne	 SHORT $L131739
  0006e	8b ff		 npad	 2
$L131753:
  00070	8b f0		 mov	 esi, eax
  00072	8b 06		 mov	 eax, DWORD PTR [esi]
  00074	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00077	84 d2		 test	 dl, dl
  00079	74 f5		 je	 SHORT $L131753
  0007b	eb 1d		 jmp	 SHORT $L131739
$L131772:
  0007d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00080	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00083	84 d2		 test	 dl, dl
  00085	75 11		 jne	 SHORT $L131742
$L131741:
  00087	3b 70 08	 cmp	 esi, DWORD PTR [eax+8]
  0008a	75 0c		 jne	 SHORT $L131742
  0008c	8b f0		 mov	 esi, eax
  0008e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00091	8a 50 15	 mov	 dl, BYTE PTR [eax+21]
  00094	84 d2		 test	 dl, dl
  00096	74 ef		 je	 SHORT $L131741
$L131742:
  00098	8b f0		 mov	 esi, eax
$L131739:
  0009a	51		 push	 ecx
  0009b	8d 44 24 18	 lea	 eax, DWORD PTR $T131438[esp+12]
  0009f	50		 push	 eax
  000a0	8b cf		 mov	 ecx, edi
  000a2	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::erase
  000a7	3b f3		 cmp	 esi, ebx
  000a9	75 a5		 jne	 SHORT $L123775
$L123776:

; 760  : 			return (_First);

  000ab	8b 44 24 10	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+8]
  000af	5f		 pop	 edi
  000b0	89 30		 mov	 DWORD PTR [eax], esi
  000b2	5e		 pop	 esi
  000b3	5b		 pop	 ebx

; 761  : 			}
; 762  : 		}

  000b4	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::erase
_TEXT	ENDS
PUBLIC	??0?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE@XZ ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE@XZ PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >, COMDAT
; _this$ = ecx

; 299  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx

; 300  : 		_Buy(0);

  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00007	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 301  : 		}

  0000d	c3		 ret	 0
??0?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE@XZ ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >
_TEXT	ENDS
PUBLIC	?insert@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE?AViterator@12@V312@ABQAUtagTCHARACTER@@@Z ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::insert
; Function compile flags: /Ogty
;	COMDAT ?insert@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE?AViterator@12@V312@ABQAUtagTCHARACTER@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE?AViterator@12@V312@ABQAUtagTCHARACTER@@@Z PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::insert, COMDAT
; _this$ = ecx

; 621  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Where$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 0c		 je	 SHORT $L131900
  0000f	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00012	2b c1		 sub	 eax, ecx
  00014	c1 f8 02	 sar	 eax, 2
  00017	85 c0		 test	 eax, eax
  00019	75 04		 jne	 SHORT $L131839
$L131900:
  0001b	33 f6		 xor	 esi, esi
  0001d	eb 07		 jmp	 SHORT $L131840
$L131839:
  0001f	8b f2		 mov	 esi, edx
  00021	2b f1		 sub	 esi, ecx
  00023	c1 fe 02	 sar	 esi, 2
$L131840:

; 622  : 		_Insert_n(_Where, (size_type)1, _Val);

  00026	8b 44 24 14	 mov	 eax, DWORD PTR __Val$[esp+4]
  0002a	50		 push	 eax
  0002b	6a 01		 push	 1
  0002d	52		 push	 edx
  0002e	8b cf		 mov	 ecx, edi
  00030	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEXViterator@12@IABQAUtagTCHARACTER@@@Z ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Insert_n

; 623  : 		return (begin() + _Off);

  00035	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00038	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  0003c	8d 14 b1	 lea	 edx, DWORD PTR [ecx+esi*4]
  0003f	5f		 pop	 edi
  00040	89 10		 mov	 DWORD PTR [eax], edx
  00042	5e		 pop	 esi

; 624  : 		}

  00043	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAE?AViterator@12@V312@ABQAUtagTCHARACTER@@@Z ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::insert
_TEXT	ENDS
PUBLIC	?_Tidy@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Tidy
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ?_Tidy@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
$T131906 = -4						; size = 4
?_Tidy@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXXZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Tidy, COMDAT
; _this$ = ecx

; 1142 : 		{	// free all storage

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 1143 : 		erase(begin(), end());

  00004	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	50		 push	 eax
  0000a	51		 push	 ecx
  0000b	8d 44 24 0c	 lea	 eax, DWORD PTR $T131906[esp+16]
  0000f	50		 push	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::erase

; 1144 : 		this->_Alptr.destroy(&_Left(_Myhead));
; 1145 : 		this->_Alptr.destroy(&_Parent(_Myhead));
; 1146 : 		this->_Alptr.destroy(&_Right(_Myhead));
; 1147 : 		this->_Alnod.deallocate(_Myhead, 1);

  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 04	 add	 esp, 4

; 1148 : 		_Myhead = 0, _Mysize = 0;

  00023	33 c0		 xor	 eax, eax
  00025	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00028	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0002b	5e		 pop	 esi

; 1149 : 		}

  0002c	59		 pop	 ecx
  0002d	c3		 ret	 0
?_Tidy@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Tidy
_TEXT	ENDS
PUBLIC	??0CTParty@@QAE@XZ				; CTParty::CTParty
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tworldsvr\tparty.cpp
;	COMDAT ??0CTParty@@QAE@XZ
_TEXT	SEGMENT
??0CTParty@@QAE@XZ PROC NEAR				; CTParty::CTParty, COMDAT
; _this$ = ecx

; 4    : {

  00000	53		 push	 ebx
  00001	33 db		 xor	 ebx, ebx
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00009	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  0000c	89 5e 10	 mov	 DWORD PTR [esi+16], ebx
  0000f	88 5e 18	 mov	 BYTE PTR [esi+24], bl
  00012	88 5e 19	 mov	 BYTE PTR [esi+25], bl
  00015	89 5e 1c	 mov	 DWORD PTR [esi+28], ebx
  00018	66 89 5e 20	 mov	 WORD PTR [esi+32], bx
  0001c	66 89 5e 22	 mov	 WORD PTR [esi+34], bx

; 5    : 	m_vMember.clear();

  00020	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00023	3b c3		 cmp	 eax, ebx
  00025	74 09		 je	 SHORT $L132076
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002d	83 c4 04	 add	 esp, 4
$L132076:
  00030	89 5e 08	 mov	 DWORD PTR [esi+8], ebx
  00033	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  00036	89 5e 10	 mov	 DWORD PTR [esi+16], ebx

; 6    : 	m_wCorpsID = 0;

  00039	66 89 5e 16	 mov	 WORD PTR [esi+22], bx

; 7    : 	m_dwChiefID = 0;

  0003d	89 5e 24	 mov	 DWORD PTR [esi+36], ebx

; 8    : 	m_dwOrder = 0;

  00040	89 5e 28	 mov	 DWORD PTR [esi+40], ebx

; 9    : 	m_bArena = FALSE;

  00043	88 5e 2c	 mov	 BYTE PTR [esi+44], bl

; 10   : }

  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	c3		 ret	 0
??0CTParty@@QAE@XZ ENDP					; CTParty::CTParty
_TEXT	ENDS
PUBLIC	?push_back@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAEXABQAUtagTCHARACTER@@@Z ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::push_back
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?push_back@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAEXABQAUtagTCHARACTER@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAEXABQAUtagTCHARACTER@@@Z PROC NEAR ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::push_back, COMDAT
; _this$ = ecx

; 579  : 		{	// insert element at end

  00000	56		 push	 esi

; 580  : 		if (size() < capacity())

  00001	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00004	85 f6		 test	 esi, esi
  00006	75 04		 jne	 SHORT $L132089
  00008	33 d2		 xor	 edx, edx
  0000a	eb 08		 jmp	 SHORT $L132090
$L132089:
  0000c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0000f	2b d6		 sub	 edx, esi
  00011	c1 fa 02	 sar	 edx, 2
$L132090:
  00014	85 f6		 test	 esi, esi
  00016	74 21		 je	 SHORT $L123292
  00018	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0001b	2b c6		 sub	 eax, esi
  0001d	c1 f8 02	 sar	 eax, 2
  00020	3b d0		 cmp	 edx, eax
  00022	73 15		 jae	 SHORT $L123292

; 581  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

  00024	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00027	8b 54 24 08	 mov	 edx, DWORD PTR __Val$[esp]
  0002b	8b 12		 mov	 edx, DWORD PTR [edx]
  0002d	89 10		 mov	 DWORD PTR [eax], edx
  0002f	83 c0 04	 add	 eax, 4
  00032	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00035	5e		 pop	 esi

; 584  : 		}

  00036	c2 04 00	 ret	 4
$L123292:

; 582  : 		else
; 583  : 			insert(end(), _Val);

  00039	8b 54 24 08	 mov	 edx, DWORD PTR __Val$[esp]
  0003d	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00040	52		 push	 edx
  00041	6a 01		 push	 1
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@IAEXViterator@12@IABQAUtagTCHARACTER@@@Z ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::_Insert_n
  00049	5e		 pop	 esi

; 584  : 		}

  0004a	c2 04 00	 ret	 4
?push_back@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAEXABQAUtagTCHARACTER@@@Z ENDP ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::push_back
_TEXT	ENDS
PUBLIC	??1?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T132334 = -4						; size = 4
??1?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@XZ PROC NEAR ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >, COMDAT
; _this$ = ecx

; 391  : 		{	// destroy tree

  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx

; 392  : 		_Tidy();

  00004	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	50		 push	 eax
  0000a	51		 push	 ecx
  0000b	8d 44 24 0c	 lea	 eax, DWORD PTR $T132334[esp+16]
  0000f	50		 push	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::erase
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 04	 add	 esp, 4
  00023	33 c0		 xor	 eax, eax
  00025	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00028	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0002b	5e		 pop	 esi

; 393  : 		}

  0002c	59		 pop	 ecx
  0002d	c3		 ret	 0
??1?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::~_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >
_TEXT	ENDS
PUBLIC	?AddMember@CTParty@@QAEEPAUtagTCHARACTER@@@Z	; CTParty::AddMember
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tworldsvr\tparty.cpp
;	COMDAT ?AddMember@CTParty@@QAEEPAUtagTCHARACTER@@@Z
_TEXT	SEGMENT
_pMember$ = 8						; size = 4
?AddMember@CTParty@@QAEEPAUtagTCHARACTER@@@Z PROC NEAR	; CTParty::AddMember, COMDAT
; _this$ = ecx

; 55   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 56   : 	if(!m_vMember.size())

  00003	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00006	85 d2		 test	 edx, edx
  00008	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0000b	57		 push	 edi
  0000c	8b 7c 24 0c	 mov	 edi, DWORD PTR _pMember$[esp+4]
  00010	74 0c		 je	 SHORT $L132371
  00012	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00015	2b c2		 sub	 eax, edx
  00017	c1 f8 02	 sar	 eax, 2
  0001a	85 c0		 test	 eax, eax
  0001c	75 06		 jne	 SHORT $L122422
$L132371:

; 57   : 		m_dwOrder = pMember->m_dwCharID;

  0001e	8b 47 70	 mov	 eax, DWORD PTR [edi+112]
  00021	89 46 28	 mov	 DWORD PTR [esi+40], eax
$L122422:

; 58   : 
; 59   : 	if(!pMember->m_pParty)

  00024	8b 87 98 00 00
	00		 mov	 eax, DWORD PTR [edi+152]
  0002a	85 c0		 test	 eax, eax
  0002c	75 17		 jne	 SHORT $L122423

; 60   : 	{
; 61   : 		pMember->m_pParty = this;
; 62   : 		m_vMember.push_back(pMember);

  0002e	8d 54 24 0c	 lea	 edx, DWORD PTR _pMember$[esp+4]
  00032	52		 push	 edx
  00033	89 b7 98 00 00
	00		 mov	 DWORD PTR [edi+152], esi
  00039	e8 00 00 00 00	 call	 ?push_back@?$vector@PAUtagTCHARACTER@@V?$allocator@PAUtagTCHARACTER@@@std@@@std@@QAEXABQAUtagTCHARACTER@@@Z ; std::vector<tagTCHARACTER *,std::allocator<tagTCHARACTER *> >::push_back
  0003e	5f		 pop	 edi

; 63   : 		return TRUE;

  0003f	b0 01		 mov	 al, 1
  00041	5e		 pop	 esi

; 67   : }

  00042	c2 04 00	 ret	 4
$L122423:
  00045	5f		 pop	 edi

; 64   : 	}
; 65   : 	else
; 66   : 		return FALSE;

  00046	32 c0		 xor	 al, al
  00048	5e		 pop	 esi

; 67   : }

  00049	c2 04 00	 ret	 4
?AddMember@CTParty@@QAEEPAUtagTCHARACTER@@@Z ENDP	; CTParty::AddMember
_TEXT	ENDS
PUBLIC	??1?$map@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@@std@@QAE@XZ ; std::map<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> > >::~map<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> > >
; Function compile flags: /Ogty
;	COMDAT ??1?$map@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T132473 = -4						; size = 4
??1?$map@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@@std@@QAE@XZ PROC NEAR ; std::map<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> > >::~map<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> > >, COMDAT
; _this$ = ecx
  00000	51		 push	 ecx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	50		 push	 eax
  0000a	51		 push	 ecx
  0000b	8d 44 24 0c	 lea	 eax, DWORD PTR $T132473[esp+16]
  0000f	50		 push	 eax
  00010	8b ce		 mov	 ecx, esi
  00012	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::erase
  00017	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0001a	51		 push	 ecx
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 04	 add	 esp, 4
  00023	33 c0		 xor	 eax, eax
  00025	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00028	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0002b	5e		 pop	 esi
  0002c	59		 pop	 ecx
  0002d	c3		 ret	 0
??1?$map@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@@std@@QAE@XZ ENDP ; std::map<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> > >::~map<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> > >
_TEXT	ENDS
PUBLIC	??0?$map@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@@std@@QAE@XZ ; std::map<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> > >::map<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> > >
; Function compile flags: /Ogty
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\map
;	COMDAT ??0?$map@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$map@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@@std@@QAE@XZ PROC NEAR ; std::map<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> > >::map<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> > >, COMDAT
; _this$ = ecx

; 102  : 		{	// construct empty map from defaults

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Buynode
  00008	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0000b	c6 40 15 01	 mov	 BYTE PTR [eax+21], 1
  0000f	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00012	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00015	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00018	89 00		 mov	 DWORD PTR [eax], eax
  0001a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0001d	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00020	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 103  : 		}

  00027	8b c6		 mov	 eax, esi
  00029	5e		 pop	 esi
  0002a	c3		 ret	 0
??0?$map@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@@std@@QAE@XZ ENDP ; std::map<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> > >::map<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> > >
_TEXT	ENDS
PUBLIC	?GetNextOrder@CTParty@@QAEPAUtagTCHARACTER@@V?$vector@KV?$allocator@K@std@@@std@@@Z ; CTParty::GetNextOrder
;	COMDAT xdata$x
; File c:\program files (x86)\microsoft visual studio .net 2003\vc7\include\xmemory
xdata$x	SEGMENT
$T135948 DD	0ffffffffH
	DD	FLAT:$L132681
	DD	00H
	DD	FLAT:$L132682
$T135904 DD	019930520H
	DD	02H
	DD	FLAT:$T135948
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\users\pierr\desktop\4story - oldschool\sources\tserver\tworldsvr\tparty.cpp
xdata$x	ENDS
;	COMDAT ?GetNextOrder@CTParty@@QAEPAUtagTCHARACTER@@V?$vector@KV?$allocator@K@std@@@std@@@Z
_TEXT	SEGMENT
_i$123109 = -41						; size = 1
$T135858 = -40						; size = 4
$T133269 = -40						; size = 4
_it$ = -40						; size = 4
$T132668 = -40						; size = 8
$T132669 = -32						; size = 8
_mapINDEX$ = -24					; size = 12
__$EHRec$ = -12						; size = 12
_vMember$ = 8						; size = 16
?GetNextOrder@CTParty@@QAEPAUtagTCHARACTER@@V?$vector@KV?$allocator@K@std@@@std@@@Z PROC NEAR ; CTParty::GetNextOrder, COMDAT
; _this$ = ecx

; 163  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?GetNextOrder@CTParty@@QAEPAUtagTCHARACTER@@V?$vector@KV?$allocator@K@std@@@std@@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 20	 sub	 esp, 32			; 00000020H
  00018	53		 push	 ebx
  00019	55		 push	 ebp
  0001a	56		 push	 esi
  0001b	57		 push	 edi
  0001c	8b f1		 mov	 esi, ecx

; 164  : 	MAPBDWDRD mapINDEX;

  0001e	8d 4c 24 24	 lea	 ecx, DWORD PTR _mapINDEX$[esp+60]
  00022	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+68], 0
  0002a	e8 00 00 00 00	 call	 ?_Buynode@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Buynode
  0002f	89 44 24 28	 mov	 DWORD PTR _mapINDEX$[esp+64], eax
  00033	b1 01		 mov	 cl, 1
  00035	88 48 15	 mov	 BYTE PTR [eax+21], cl
  00038	8b 44 24 28	 mov	 eax, DWORD PTR _mapINDEX$[esp+64]
  0003c	89 40 04	 mov	 DWORD PTR [eax+4], eax
  0003f	8b 44 24 28	 mov	 eax, DWORD PTR _mapINDEX$[esp+64]
  00043	89 00		 mov	 DWORD PTR [eax], eax
  00045	8b 44 24 28	 mov	 eax, DWORD PTR _mapINDEX$[esp+64]
  00049	89 40 08	 mov	 DWORD PTR [eax+8], eax
  0004c	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR _mapINDEX$[esp+68], 0

; 165  : 	mapINDEX.clear();

  00054	8b 44 24 28	 mov	 eax, DWORD PTR _mapINDEX$[esp+64]
  00058	88 4c 24 38	 mov	 BYTE PTR __$EHRec$[esp+68], cl
  0005c	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0005f	51		 push	 ecx
  00060	8d 4c 24 28	 lea	 ecx, DWORD PTR _mapINDEX$[esp+64]
  00064	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Erase
  00069	8b 44 24 28	 mov	 eax, DWORD PTR _mapINDEX$[esp+64]

; 166  : 
; 167  : 	for(BYTE i=0; i<(BYTE)vMember.size(); i++)

  0006d	8b 7c 24 48	 mov	 edi, DWORD PTR _vMember$[esp+64]
  00071	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00074	8b 44 24 28	 mov	 eax, DWORD PTR _mapINDEX$[esp+64]
  00078	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR _mapINDEX$[esp+68], 0
  00080	89 00		 mov	 DWORD PTR [eax], eax
  00082	8b 44 24 28	 mov	 eax, DWORD PTR _mapINDEX$[esp+64]
  00086	89 40 08	 mov	 DWORD PTR [eax+8], eax
  00089	32 d2		 xor	 dl, dl
$L135945:
  0008b	8b 5c 24 44	 mov	 ebx, DWORD PTR _vMember$[esp+60]
  0008f	85 db		 test	 ebx, ebx
  00091	88 54 24 13	 mov	 BYTE PTR _i$123109[esp+60], dl
  00095	74 66		 je	 SHORT $L135937
  00097	8b c7		 mov	 eax, edi
  00099	2b c3		 sub	 eax, ebx
  0009b	c1 f8 02	 sar	 eax, 2
  0009e	3a d0		 cmp	 dl, al
  000a0	73 5b		 jae	 SHORT $L135937

; 168  : 		for(BYTE j=0; j<(BYTE)m_vMember.size(); j++)

  000a2	32 db		 xor	 bl, bl
$L123116:
  000a4	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000a7	85 c9		 test	 ecx, ecx
  000a9	74 4e		 je	 SHORT $L123112
  000ab	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000ae	2b c1		 sub	 eax, ecx
  000b0	c1 f8 02	 sar	 eax, 2
  000b3	3a d8		 cmp	 bl, al
  000b5	73 42		 jae	 SHORT $L123112

; 169  : 			if(m_vMember[j]->m_dwCharID == vMember[i])

  000b7	8b 6c 24 44	 mov	 ebp, DWORD PTR _vMember$[esp+60]
  000bb	0f b6 c3	 movzx	 eax, bl
  000be	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  000c1	0f b6 ca	 movzx	 ecx, dl
  000c4	8d 4c 8d 00	 lea	 ecx, DWORD PTR [ebp+ecx*4]
  000c8	8b 28		 mov	 ebp, DWORD PTR [eax]
  000ca	8b 6d 70	 mov	 ebp, DWORD PTR [ebp+112]
  000cd	3b 29		 cmp	 ebp, DWORD PTR [ecx]
  000cf	75 24		 jne	 SHORT $L123117

; 170  : 				mapINDEX.insert(MAPBDWDRD::value_type(j, m_vMember[j]->m_dwCharID));

  000d1	8b 10		 mov	 edx, DWORD PTR [eax]
  000d3	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
  000d6	8d 4c 24 14	 lea	 ecx, DWORD PTR $T132668[esp+60]
  000da	51		 push	 ecx
  000db	8d 54 24 20	 lea	 edx, DWORD PTR $T132669[esp+64]
  000df	52		 push	 edx
  000e0	8d 4c 24 2c	 lea	 ecx, DWORD PTR _mapINDEX$[esp+68]
  000e4	88 5c 24 1c	 mov	 BYTE PTR $T132668[esp+68], bl
  000e8	89 44 24 20	 mov	 DWORD PTR $T132668[esp+72], eax
  000ec	e8 00 00 00 00	 call	 ?insert@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AU?$pair@Viterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@_N@2@ABU?$pair@$$CBEK@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::insert
  000f1	8a 54 24 13	 mov	 dl, BYTE PTR _i$123109[esp+60]
$L123117:

; 168  : 		for(BYTE j=0; j<(BYTE)m_vMember.size(); j++)

  000f5	fe c3		 inc	 bl
  000f7	eb ab		 jmp	 SHORT $L123116
$L123112:

; 166  : 
; 167  : 	for(BYTE i=0; i<(BYTE)vMember.size(); i++)

  000f9	fe c2		 inc	 dl
  000fb	eb 8e		 jmp	 SHORT $L135945
$L135937:

; 171  : 
; 172  : 	if(mapINDEX.empty())

  000fd	8b 44 24 2c	 mov	 eax, DWORD PTR _mapINDEX$[esp+68]
  00101	85 c0		 test	 eax, eax
  00103	75 5c		 jne	 SHORT $L123237

; 173  : 		return NULL;

  00105	8b 44 24 28	 mov	 eax, DWORD PTR _mapINDEX$[esp+64]
  00109	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010b	50		 push	 eax
  0010c	51		 push	 ecx
  0010d	8d 44 24 1c	 lea	 eax, DWORD PTR $T133269[esp+68]
  00111	50		 push	 eax
  00112	8d 4c 24 30	 lea	 ecx, DWORD PTR _mapINDEX$[esp+72]
  00116	c6 44 24 44 00	 mov	 BYTE PTR __$EHRec$[esp+80], 0
  0011b	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::erase
  00120	8b 4c 24 28	 mov	 ecx, DWORD PTR _mapINDEX$[esp+64]
  00124	51		 push	 ecx
  00125	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0012a	83 c4 04	 add	 esp, 4
  0012d	85 db		 test	 ebx, ebx
  0012f	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR _mapINDEX$[esp+64], 0
  00137	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR _mapINDEX$[esp+68], 0
  0013f	74 09		 je	 SHORT $L133312
  00141	53		 push	 ebx
  00142	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00147	83 c4 04	 add	 esp, 4
$L133312:
  0014a	5f		 pop	 edi
  0014b	5e		 pop	 esi
  0014c	5d		 pop	 ebp
  0014d	33 c0		 xor	 eax, eax
  0014f	5b		 pop	 ebx

; 207  : }

  00150	8b 4c 24 20	 mov	 ecx, DWORD PTR __$EHRec$[esp+44]
  00154	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0015b	83 c4 2c	 add	 esp, 44			; 0000002cH
  0015e	c2 10 00	 ret	 16			; 00000010H
$L123237:

; 174  : 
; 175  : 	LPTCHARACTER pNext = NULL;
; 176  : 
; 177  : 	MAPBDWDRD::iterator it;
; 178  : 	for(it = mapINDEX.begin(); it!=mapINDEX.end(); it++)

  00161	8b 6c 24 28	 mov	 ebp, DWORD PTR _mapINDEX$[esp+64]
  00165	8b 5d 00	 mov	 ebx, DWORD PTR [ebp]
  00168	3b dd		 cmp	 ebx, ebp
  0016a	8b c3		 mov	 eax, ebx
  0016c	89 44 24 14	 mov	 DWORD PTR _it$[esp+60], eax
  00170	74 19		 je	 SHORT $L123246
  00172	8b 7e 28	 mov	 edi, DWORD PTR [esi+40]
$L133367:

; 179  : 		if((*it).second == m_dwOrder)

  00175	39 78 10	 cmp	 DWORD PTR [eax+16], edi
  00178	74 49		 je	 SHORT $L135920
  0017a	8d 4c 24 14	 lea	 ecx, DWORD PTR _it$[esp+60]
  0017e	e8 00 00 00 00	 call	 ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::const_iterator::_Inc
  00183	8b 44 24 14	 mov	 eax, DWORD PTR _it$[esp+60]
  00187	3b c5		 cmp	 eax, ebp
  00189	75 ea		 jne	 SHORT $L133367
$L123246:

; 185  : 		}
; 186  : 
; 187  : 	BYTE bIndex = GetOrderIndex(m_dwOrder);

  0018b	8b 7e 28	 mov	 edi, DWORD PTR [esi+40]
  0018e	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00191	32 c9		 xor	 cl, cl
$L134071:
  00193	85 d2		 test	 edx, edx
  00195	0f 84 cf 00 00
	00		 je	 $L134073
  0019b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0019e	2b c2		 sub	 eax, edx
  001a0	c1 f8 02	 sar	 eax, 2
  001a3	3a c8		 cmp	 cl, al
  001a5	0f 83 bf 00 00
	00		 jae	 $L134073
  001ab	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001ae	0f b6 e9	 movzx	 ebp, cl
  001b1	8d 04 a8	 lea	 eax, DWORD PTR [eax+ebp*4]
  001b4	8b 00		 mov	 eax, DWORD PTR [eax]
  001b6	39 78 70	 cmp	 DWORD PTR [eax+112], edi
  001b9	0f 84 a7 00 00
	00		 je	 $L135922
  001bf	fe c1		 inc	 cl
  001c1	eb d0		 jmp	 SHORT $L134071
$L135920:

; 180  : 		{
; 181  : 			pNext = FindMember((*it).second);

  001c3	8b 78 10	 mov	 edi, DWORD PTR [eax+16]
  001c6	57		 push	 edi
  001c7	8b ce		 mov	 ecx, esi
  001c9	e8 00 00 00 00	 call	 ?FindMember@CTParty@@QAEPAUtagTCHARACTER@@K@Z ; CTParty::FindMember
  001ce	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  001d1	8b d8		 mov	 ebx, eax

; 182  : 			SetNextOrder((*it).second);

  001d3	32 c9		 xor	 cl, cl
$L133684:
  001d5	85 d2		 test	 edx, edx
  001d7	74 20		 je	 SHORT $L133686
  001d9	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  001dc	2b c2		 sub	 eax, edx
  001de	c1 f8 02	 sar	 eax, 2
  001e1	3a c8		 cmp	 cl, al
  001e3	73 14		 jae	 SHORT $L133686
  001e5	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001e8	0f b6 e9	 movzx	 ebp, cl
  001eb	8d 04 a8	 lea	 eax, DWORD PTR [eax+ebp*4]
  001ee	8b 00		 mov	 eax, DWORD PTR [eax]
  001f0	39 78 70	 cmp	 DWORD PTR [eax+112], edi
  001f3	74 06		 je	 SHORT $L133682
  001f5	fe c1		 inc	 cl
  001f7	eb dc		 jmp	 SHORT $L133684
$L133686:
  001f9	32 c9		 xor	 cl, cl
$L133682:
  001fb	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  001fe	33 ed		 xor	 ebp, ebp
  00200	fe c1		 inc	 cl
  00202	3b d5		 cmp	 edx, ebp
  00204	75 04		 jne	 SHORT $L133690
  00206	33 c0		 xor	 eax, eax
  00208	eb 08		 jmp	 SHORT $L133691
$L133690:
  0020a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0020d	2b c2		 sub	 eax, edx
  0020f	c1 f8 02	 sar	 eax, 2
$L133691:
  00212	0f b6 c9	 movzx	 ecx, cl
  00215	3b c1		 cmp	 eax, ecx
  00217	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0021a	77 07		 ja	 SHORT $L133656
  0021c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0021e	8b 41 70	 mov	 eax, DWORD PTR [ecx+112]
  00221	eb 06		 jmp	 SHORT $L133657
$L133656:
  00223	8b 14 88	 mov	 edx, DWORD PTR [eax+ecx*4]
  00226	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
$L133657:
  00229	89 46 28	 mov	 DWORD PTR [esi+40], eax

; 183  : 			mapINDEX.clear();

  0022c	8b 44 24 28	 mov	 eax, DWORD PTR _mapINDEX$[esp+64]
  00230	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  00233	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  00236	84 c0		 test	 al, al
  00238	8b f7		 mov	 esi, edi
  0023a	0f 85 21 02 00
	00		 jne	 $L135711
$L133812:
  00240	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00243	51		 push	 ecx
  00244	8d 4c 24 28	 lea	 ecx, DWORD PTR _mapINDEX$[esp+64]
  00248	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Erase
  0024d	8b 36		 mov	 esi, DWORD PTR [esi]
  0024f	57		 push	 edi
  00250	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00255	8a 46 15	 mov	 al, BYTE PTR [esi+21]
  00258	83 c4 04	 add	 esp, 4
  0025b	84 c0		 test	 al, al
  0025d	8b fe		 mov	 edi, esi
  0025f	74 df		 je	 SHORT $L133812

; 184  : 			return pNext;

  00261	e9 fb 01 00 00	 jmp	 $L135711
$L135922:

; 185  : 		}
; 186  : 
; 187  : 	BYTE bIndex = GetOrderIndex(m_dwOrder);

  00266	8a d1		 mov	 dl, cl
  00268	eb 02		 jmp	 SHORT $L134069
$L134073:
  0026a	32 d2		 xor	 dl, dl
$L134069:

; 188  : 	for(it = mapINDEX.begin(); it!=mapINDEX.end(); it++)

  0026c	8b 7c 24 28	 mov	 edi, DWORD PTR _mapINDEX$[esp+64]
  00270	8b cb		 mov	 ecx, ebx
  00272	3b cf		 cmp	 ecx, edi
  00274	74 50		 je	 SHORT $L135935
$L134317:

; 189  : 		if((*it).first > bIndex)

  00276	38 51 0c	 cmp	 BYTE PTR [ecx+12], dl
  00279	77 7f		 ja	 SHORT $L135923
  0027b	8a 41 15	 mov	 al, BYTE PTR [ecx+21]
  0027e	84 c0		 test	 al, al
  00280	75 40		 jne	 SHORT $L134301
  00282	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00285	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  00289	75 16		 jne	 SHORT $L135916
  0028b	8b c8		 mov	 ecx, eax
  0028d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0028f	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  00293	75 2d		 jne	 SHORT $L134301

; 188  : 	for(it = mapINDEX.begin(); it!=mapINDEX.end(); it++)

$L134289:
  00295	8b c8		 mov	 ecx, eax
  00297	8b 01		 mov	 eax, DWORD PTR [ecx]
  00299	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  0029d	74 f6		 je	 SHORT $L134289
  0029f	eb 21		 jmp	 SHORT $L134301
$L135916:
  002a1	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  002a4	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  002a8	75 16		 jne	 SHORT $L134304
  002aa	8d 9b 00 00 00
	00		 npad	 6
$L134303:
  002b0	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  002b3	75 0b		 jne	 SHORT $L134304
  002b5	8b c8		 mov	 ecx, eax
  002b7	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  002ba	80 78 15 00	 cmp	 BYTE PTR [eax+21], 0
  002be	74 f0		 je	 SHORT $L134303
$L134304:
  002c0	8b c8		 mov	 ecx, eax
$L134301:
  002c2	3b cf		 cmp	 ecx, edi
  002c4	75 b0		 jne	 SHORT $L134317
$L135935:

; 195  : 		}
; 196  : 
; 197  : 	if(!pNext)
; 198  : 	{
; 199  : 		DWORD dwOrderID = (*mapINDEX.begin()).second;

  002c6	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]
  002c9	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 200  : 		pNext = FindMember(dwOrderID);

  002cc	33 c9		 xor	 ecx, ecx
  002ce	8b ff		 npad	 2
$L135333:
  002d0	85 d2		 test	 edx, edx
  002d2	0f 84 f6 00 00
	00		 je	 $L135335
  002d8	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  002db	2b c2		 sub	 eax, edx
  002dd	c1 f8 02	 sar	 eax, 2
  002e0	3b c8		 cmp	 ecx, eax
  002e2	0f 83 e6 00 00
	00		 jae	 $L135335
  002e8	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  002eb	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]
  002ee	39 78 70	 cmp	 DWORD PTR [eax+112], edi
  002f1	0f 84 cf 00 00
	00		 je	 $L135926
  002f7	41		 inc	 ecx
  002f8	eb d6		 jmp	 SHORT $L135333
$L135923:

; 190  : 		{
; 191  : 			pNext = FindMember((*it).second);

  002fa	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  002fd	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00300	33 d2		 xor	 edx, edx
$L134538:
  00302	85 ff		 test	 edi, edi
  00304	74 22		 je	 SHORT $L134540
  00306	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00309	2b c7		 sub	 eax, edi
  0030b	c1 f8 02	 sar	 eax, 2
  0030e	3b d0		 cmp	 edx, eax
  00310	73 16		 jae	 SHORT $L134540
  00312	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00315	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  00318	39 48 70	 cmp	 DWORD PTR [eax+112], ecx
  0031b	74 03		 je	 SHORT $L135924
  0031d	42		 inc	 edx
  0031e	eb e2		 jmp	 SHORT $L134538
$L135924:
  00320	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00323	8b 1c 90	 mov	 ebx, DWORD PTR [eax+edx*4]
  00326	eb 02		 jmp	 SHORT $L134536
$L134540:
  00328	33 db		 xor	 ebx, ebx
$L134536:
  0032a	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]

; 192  : 			SetNextOrder((*it).second);

  0032d	32 d2		 xor	 dl, dl
  0032f	90		 npad	 1
$L134804:
  00330	85 ff		 test	 edi, edi
  00332	74 20		 je	 SHORT $L134806
  00334	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00337	2b c7		 sub	 eax, edi
  00339	c1 f8 02	 sar	 eax, 2
  0033c	3a d0		 cmp	 dl, al
  0033e	73 14		 jae	 SHORT $L134806
  00340	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00343	0f b6 ea	 movzx	 ebp, dl
  00346	8d 04 a8	 lea	 eax, DWORD PTR [eax+ebp*4]
  00349	8b 00		 mov	 eax, DWORD PTR [eax]
  0034b	39 48 70	 cmp	 DWORD PTR [eax+112], ecx
  0034e	74 06		 je	 SHORT $L134802
  00350	fe c2		 inc	 dl
  00352	eb dc		 jmp	 SHORT $L134804
$L134806:
  00354	32 d2		 xor	 dl, dl
$L134802:
  00356	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00359	33 ed		 xor	 ebp, ebp
  0035b	fe c2		 inc	 dl
  0035d	3b cd		 cmp	 ecx, ebp
  0035f	75 04		 jne	 SHORT $L134810
  00361	33 c0		 xor	 eax, eax
  00363	eb 08		 jmp	 SHORT $L134811
$L134810:
  00365	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00368	2b c1		 sub	 eax, ecx
  0036a	c1 f8 02	 sar	 eax, 2
$L134811:
  0036d	0f b6 ca	 movzx	 ecx, dl
  00370	3b c1		 cmp	 eax, ecx
  00372	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00375	77 07		 ja	 SHORT $L134776
  00377	8b 08		 mov	 ecx, DWORD PTR [eax]
  00379	8b 41 70	 mov	 eax, DWORD PTR [ecx+112]
  0037c	eb 06		 jmp	 SHORT $L134777
$L134776:
  0037e	8b 14 88	 mov	 edx, DWORD PTR [eax+ecx*4]
  00381	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
$L134777:
  00384	89 46 28	 mov	 DWORD PTR [esi+40], eax

; 193  : 			mapINDEX.clear();

  00387	8b 44 24 28	 mov	 eax, DWORD PTR _mapINDEX$[esp+64]
  0038b	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  0038e	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  00391	84 c0		 test	 al, al
  00393	8b f7		 mov	 esi, edi
  00395	0f 85 c6 00 00
	00		 jne	 $L135711
  0039b	eb 03 8d 49 00	 npad	 5
$L134930:
  003a0	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  003a3	51		 push	 ecx
  003a4	8d 4c 24 28	 lea	 ecx, DWORD PTR _mapINDEX$[esp+64]
  003a8	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Erase
  003ad	8b 36		 mov	 esi, DWORD PTR [esi]
  003af	57		 push	 edi
  003b0	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  003b5	8a 46 15	 mov	 al, BYTE PTR [esi+21]
  003b8	83 c4 04	 add	 esp, 4
  003bb	84 c0		 test	 al, al
  003bd	8b fe		 mov	 edi, esi
  003bf	74 df		 je	 SHORT $L134930

; 194  : 			return pNext;

  003c1	e9 9b 00 00 00	 jmp	 $L135711
$L135926:

; 200  : 		pNext = FindMember(dwOrderID);

  003c6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  003c9	8b 1c 88	 mov	 ebx, DWORD PTR [eax+ecx*4]
  003cc	eb 02		 jmp	 SHORT $L135331
$L135335:
  003ce	33 db		 xor	 ebx, ebx
$L135331:
  003d0	8b 56 08	 mov	 edx, DWORD PTR [esi+8]

; 201  : 		SetNextOrder(dwOrderID);

  003d3	32 c9		 xor	 cl, cl
$L135583:
  003d5	85 d2		 test	 edx, edx
  003d7	74 20		 je	 SHORT $L135585
  003d9	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  003dc	2b c2		 sub	 eax, edx
  003de	c1 f8 02	 sar	 eax, 2
  003e1	3a c8		 cmp	 cl, al
  003e3	73 14		 jae	 SHORT $L135585
  003e5	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  003e8	0f b6 e9	 movzx	 ebp, cl
  003eb	8d 04 a8	 lea	 eax, DWORD PTR [eax+ebp*4]
  003ee	8b 00		 mov	 eax, DWORD PTR [eax]
  003f0	39 78 70	 cmp	 DWORD PTR [eax+112], edi
  003f3	74 06		 je	 SHORT $L135581
  003f5	fe c1		 inc	 cl
  003f7	eb dc		 jmp	 SHORT $L135583
$L135585:
  003f9	32 c9		 xor	 cl, cl
$L135581:
  003fb	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  003fe	33 ed		 xor	 ebp, ebp
  00400	fe c1		 inc	 cl
  00402	3b d5		 cmp	 edx, ebp
  00404	75 04		 jne	 SHORT $L135588
  00406	33 c0		 xor	 eax, eax
  00408	eb 08		 jmp	 SHORT $L135589
$L135588:
  0040a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0040d	2b c2		 sub	 eax, edx
  0040f	c1 f8 02	 sar	 eax, 2
$L135589:
  00412	0f b6 c9	 movzx	 ecx, cl
  00415	3b c1		 cmp	 eax, ecx
  00417	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0041a	77 07		 ja	 SHORT $L135555
  0041c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0041e	8b 41 70	 mov	 eax, DWORD PTR [ecx+112]
  00421	eb 06		 jmp	 SHORT $L135556
$L135555:
  00423	8b 14 88	 mov	 edx, DWORD PTR [eax+ecx*4]
  00426	8b 42 70	 mov	 eax, DWORD PTR [edx+112]
$L135556:
  00429	89 46 28	 mov	 DWORD PTR [esi+40], eax

; 202  : 	}
; 203  : 
; 204  : 	mapINDEX.clear();

  0042c	8b 44 24 28	 mov	 eax, DWORD PTR _mapINDEX$[esp+64]
  00430	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  00433	8a 47 15	 mov	 al, BYTE PTR [edi+21]
  00436	84 c0		 test	 al, al
  00438	8b f7		 mov	 esi, edi
  0043a	75 25		 jne	 SHORT $L135711
  0043c	8d 64 24 00	 npad	 4
$L135709:
  00440	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00443	51		 push	 ecx
  00444	8d 4c 24 28	 lea	 ecx, DWORD PTR _mapINDEX$[esp+64]
  00448	e8 00 00 00 00	 call	 ?_Erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@IAEXPAU_Node@?$_Tree_nod@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@2@@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::_Erase
  0044d	8b 36		 mov	 esi, DWORD PTR [esi]
  0044f	57		 push	 edi
  00450	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00455	8a 46 15	 mov	 al, BYTE PTR [esi+21]
  00458	83 c4 04	 add	 esp, 4
  0045b	84 c0		 test	 al, al
  0045d	8b fe		 mov	 edi, esi
  0045f	74 df		 je	 SHORT $L135709
$L135711:
  00461	8b 44 24 28	 mov	 eax, DWORD PTR _mapINDEX$[esp+64]
  00465	89 40 04	 mov	 DWORD PTR [eax+4], eax
  00468	8b 44 24 28	 mov	 eax, DWORD PTR _mapINDEX$[esp+64]
  0046c	89 6c 24 2c	 mov	 DWORD PTR _mapINDEX$[esp+68], ebp
  00470	89 00		 mov	 DWORD PTR [eax], eax
  00472	8b 44 24 28	 mov	 eax, DWORD PTR _mapINDEX$[esp+64]
  00476	89 40 08	 mov	 DWORD PTR [eax+8], eax

; 205  : 
; 206  : 	return pNext;

  00479	8b 44 24 28	 mov	 eax, DWORD PTR _mapINDEX$[esp+64]
  0047d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0047f	50		 push	 eax
  00480	51		 push	 ecx
  00481	8d 54 24 1c	 lea	 edx, DWORD PTR $T135858[esp+68]
  00485	8d 4c 24 2c	 lea	 ecx, DWORD PTR _mapINDEX$[esp+68]
  00489	52		 push	 edx
  0048a	c6 44 24 44 00	 mov	 BYTE PTR __$EHRec$[esp+80], 0
  0048f	e8 00 00 00 00	 call	 ?erase@?$_Tree@V?$_Tmap_traits@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@$0A@@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::_Tree<std::_Tmap_traits<unsigned char,unsigned long,std::less<unsigned char>,std::allocator<std::pair<unsigned char const ,unsigned long> >,0> >::erase
  00494	8b 44 24 28	 mov	 eax, DWORD PTR _mapINDEX$[esp+64]
  00498	50		 push	 eax
  00499	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0049e	8b 44 24 48	 mov	 eax, DWORD PTR _vMember$[esp+64]
  004a2	83 c4 04	 add	 esp, 4
  004a5	3b c5		 cmp	 eax, ebp
  004a7	89 6c 24 28	 mov	 DWORD PTR _mapINDEX$[esp+64], ebp
  004ab	89 6c 24 2c	 mov	 DWORD PTR _mapINDEX$[esp+68], ebp
  004af	74 09		 je	 SHORT $L135902
  004b1	50		 push	 eax
  004b2	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  004b7	83 c4 04	 add	 esp, 4
$L135902:

; 207  : }

  004ba	8b 4c 24 30	 mov	 ecx, DWORD PTR __$EHRec$[esp+60]
  004be	5f		 pop	 edi
  004bf	5e		 pop	 esi
  004c0	5d		 pop	 ebp
  004c1	8b c3		 mov	 eax, ebx
  004c3	5b		 pop	 ebx
  004c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  004cb	83 c4 2c	 add	 esp, 44			; 0000002cH
  004ce	c2 10 00	 ret	 16			; 00000010H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L132681:
  00000	8d 4d 04	 lea	 ecx, DWORD PTR _vMember$[ebp-4]
  00003	e9 00 00 00 00	 jmp	 ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
$L132682:
  00008	8d 4d e8	 lea	 ecx, DWORD PTR _mapINDEX$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$map@EKU?$less@E@std@@V?$allocator@U?$pair@$$CBEK@std@@@2@@std@@QAE@XZ
__ehhandler$?GetNextOrder@CTParty@@QAEPAUtagTCHARACTER@@V?$vector@KV?$allocator@K@std@@@std@@@Z:
  00010	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T135904
  00015	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?GetNextOrder@CTParty@@QAEPAUtagTCHARACTER@@V?$vector@KV?$allocator@K@std@@@std@@@Z ENDP ; CTParty::GetNextOrder
END
